
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010dd8  08010dd8  00020dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010e30  08010e30  00020e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e38  08010e38  00020e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e3c  08010e3c  00020e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  24000000  08010e40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f0  24000100  08010f24  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240007f0  08010f24  000307f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030112  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002348e  00000000  00000000  00030155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003a76  00000000  00000000  000535e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c38  00000000  00000000  00057060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001620  00000000  00000000  00058c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b74f  00000000  00000000  0005a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000257b3  00000000  00000000  00095a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180e26  00000000  00000000  000bb1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007e70  00000000  00000000  0023bfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00243e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010dc0 	.word	0x08010dc0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08010dc0 	.word	0x08010dc0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_SystemReset+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <__NVIC_SystemReset+0x20>
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	05fa0004 	.word	0x05fa0004

08000600 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	b299      	uxth	r1, r3
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <poll_i2c_sensor+0x94>)
 8000620:	f007 fa16 	bl	8007a50 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <poll_i2c_sensor+0x98>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e022      	b.n	8000688 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b299      	uxth	r1, r3
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <poll_i2c_sensor+0x94>)
 8000654:	f007 fb14 	bl	8007c80 <HAL_I2C_Master_Receive>
 8000658:	4603      	mov	r3, r0
 800065a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <poll_i2c_sensor+0x9c>)
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	c303      	stmia	r3!, {r0, r1}
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 800067c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000680:	7a7a      	ldrb	r2, [r7, #9]
 8000682:	4313      	orrs	r3, r2
 8000684:	10db      	asrs	r3, r3, #3
 8000686:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000360 	.word	0x24000360
 8000698:	08010dd8 	.word	0x08010dd8
 800069c:	08010de4 	.word	0x08010de4

080006a0 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa9 	bl	8000600 <poll_i2c_sensor>
 80006ae:	4603      	mov	r3, r0
 80006b0:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006b2:	2394      	movs	r3, #148	; 0x94
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffa3 	bl	8000600 <poll_i2c_sensor>
 80006ba:	4603      	mov	r3, r0
 80006bc:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006be:	2392      	movs	r3, #146	; 0x92
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff9d 	bl	8000600 <poll_i2c_sensor>
 80006c6:	4603      	mov	r3, r0
 80006c8:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006ca:	2396      	movs	r3, #150	; 0x96
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff97 	bl	8000600 <poll_i2c_sensor>
 80006d2:	4603      	mov	r3, r0
 80006d4:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006d6:	2008      	movs	r0, #8
 80006d8:	f010 fa18 	bl	8010b0c <malloc>
 80006dc:	4603      	mov	r3, r0
 80006de:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3304      	adds	r3, #4
 80006f2:	897a      	ldrh	r2, [r7, #10]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3306      	adds	r3, #6
 80006fa:	893a      	ldrh	r2, [r7, #8]
 80006fc:	801a      	strh	r2, [r3, #0]
	return results;
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000708:	b084      	sub	sp, #16
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	f107 0c18 	add.w	ip, r7, #24
 8000714:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	2301      	movs	r3, #1
 800071c:	2201      	movs	r2, #1
 800071e:	f107 0018 	add.w	r0, r7, #24
 8000722:	f00b fd5f 	bl	800c1e4 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000738:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 800073a:	2002      	movs	r0, #2
 800073c:	f010 f9e6 	bl	8010b0c <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	7bba      	ldrb	r2, [r7, #14]
 8000748:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	701a      	strb	r2, [r3, #0]
	return results;
 8000752:	68bb      	ldr	r3, [r7, #8]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075e:	b004      	add	sp, #16
 8000760:	4770      	bx	lr
	...

08000764 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <erpa_adc+0x34>)
 800076c:	885b      	ldrh	r3, [r3, #2]
 800076e:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <erpa_adc+0x34>)
 8000772:	895b      	ldrh	r3, [r3, #10]
 8000774:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 8000776:	2004      	movs	r0, #4
 8000778:	f010 f9c8 	bl	8010b0c <malloc>
 800077c:	4603      	mov	r3, r0
 800077e:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3302      	adds	r3, #2
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	801a      	strh	r2, [r3, #0]

	return results;
 800078e:	683b      	ldr	r3, [r7, #0]

}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000660 	.word	0x24000660

0800079c <hk_adc1>:

uint16_t* hk_adc1() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <hk_adc1+0x98>)
 80007a4:	8a9b      	ldrh	r3, [r3, #20]
 80007a6:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <hk_adc1+0x98>)
 80007aa:	8a1b      	ldrh	r3, [r3, #16]
 80007ac:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <hk_adc1+0x98>)
 80007b0:	899b      	ldrh	r3, [r3, #12]
 80007b2:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <hk_adc1+0x98>)
 80007b6:	8a5b      	ldrh	r3, [r3, #18]
 80007b8:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <hk_adc1+0x98>)
 80007bc:	889b      	ldrh	r3, [r3, #4]
 80007be:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <hk_adc1+0x98>)
 80007c2:	88db      	ldrh	r3, [r3, #6]
 80007c4:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <hk_adc1+0x98>)
 80007c8:	89db      	ldrh	r3, [r3, #14]
 80007ca:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <hk_adc1+0x98>)
 80007ce:	891b      	ldrh	r3, [r3, #8]
 80007d0:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <hk_adc1+0x98>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 80007d8:	2012      	movs	r0, #18
 80007da:	f010 f997 	bl	8010b0c <malloc>
 80007de:	4603      	mov	r3, r0
 80007e0:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	8afa      	ldrh	r2, [r7, #22]
 80007e6:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	3302      	adds	r3, #2
 80007ec:	8aba      	ldrh	r2, [r7, #20]
 80007ee:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3304      	adds	r3, #4
 80007f4:	8a7a      	ldrh	r2, [r7, #18]
 80007f6:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3306      	adds	r3, #6
 80007fc:	8a3a      	ldrh	r2, [r7, #16]
 80007fe:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	3308      	adds	r3, #8
 8000804:	89fa      	ldrh	r2, [r7, #14]
 8000806:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	330a      	adds	r3, #10
 800080c:	89ba      	ldrh	r2, [r7, #12]
 800080e:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	330c      	adds	r3, #12
 8000814:	897a      	ldrh	r2, [r7, #10]
 8000816:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	330e      	adds	r3, #14
 800081c:	893a      	ldrh	r2, [r7, #8]
 800081e:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3310      	adds	r3, #16
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	801a      	strh	r2, [r3, #0]

	return results;
 8000828:	683b      	ldr	r3, [r7, #0]

}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	24000660 	.word	0x24000660

08000838 <hk_adc3>:

uint16_t* hk_adc3() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <hk_adc3+0x50>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <hk_adc3+0x50>)
 8000846:	885b      	ldrh	r3, [r3, #2]
 8000848:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <hk_adc3+0x50>)
 800084c:	889b      	ldrh	r3, [r3, #4]
 800084e:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <hk_adc3+0x50>)
 8000852:	88db      	ldrh	r3, [r3, #6]
 8000854:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 8000856:	2008      	movs	r0, #8
 8000858:	f010 f958 	bl	8010b0c <malloc>
 800085c:	4603      	mov	r3, r0
 800085e:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3302      	adds	r3, #2
 800086a:	89ba      	ldrh	r2, [r7, #12]
 800086c:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3304      	adds	r3, #4
 8000872:	897a      	ldrh	r2, [r7, #10]
 8000874:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3306      	adds	r3, #6
 800087a:	893a      	ldrh	r2, [r7, #8]
 800087c:	801a      	strh	r2, [r3, #0]

	return results;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000680 	.word	0x24000680

0800088c <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 8000896:	23aa      	movs	r3, #170	; 0xaa
 8000898:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 800089a:	23aa      	movs	r3, #170	; 0xaa
 800089c:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <send_erpa_packet+0x90>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <send_erpa_packet+0x90>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008b2:	2300      	movs	r3, #0
 80008b4:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008b6:	2300      	movs	r3, #0
 80008b8:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	3302      	adds	r3, #2
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	3302      	adds	r3, #2
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 80008e6:	2300      	movs	r3, #0
 80008e8:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 80008ea:	2300      	movs	r3, #0
 80008ec:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80008fa:	f107 0108 	add.w	r1, r7, #8
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	220e      	movs	r2, #14
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <send_erpa_packet+0x94>)
 8000904:	f00d fd24 	bl	800e350 <HAL_UART_Transmit>
	erpa_seq++;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <send_erpa_packet+0x90>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b29a      	uxth	r2, r3
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <send_erpa_packet+0x90>)
 8000912:	801a      	strh	r2, [r3, #0]

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000694 	.word	0x24000694
 8000920:	2400055c 	.word	0x2400055c

08000924 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 8000930:	23cc      	movs	r3, #204	; 0xcc
 8000932:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000934:	23cc      	movs	r3, #204	; 0xcc
 8000936:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000938:	4b7d      	ldr	r3, [pc, #500]	; (8000b30 <send_hk_packet+0x20c>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	b29b      	uxth	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000944:	4b7a      	ldr	r3, [pc, #488]	; (8000b30 <send_hk_packet+0x20c>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3302      	adds	r3, #2
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3302      	adds	r3, #2
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097e:	121b      	asrs	r3, r3, #8
 8000980:	b2db      	uxtb	r3, r3
 8000982:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3302      	adds	r3, #2
 8000992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000996:	121b      	asrs	r3, r3, #8
 8000998:	b2db      	uxtb	r3, r3
 800099a:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3302      	adds	r3, #2
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3304      	adds	r3, #4
 80009ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b0:	121b      	asrs	r3, r3, #8
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3304      	adds	r3, #4
 80009ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3306      	adds	r3, #6
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	121b      	asrs	r3, r3, #8
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3306      	adds	r3, #6
 80009d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3302      	adds	r3, #2
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	3302      	adds	r3, #2
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3304      	adds	r3, #4
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3304      	adds	r3, #4
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3306      	adds	r3, #6
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3306      	adds	r3, #6
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	330c      	adds	r3, #12
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	330c      	adds	r3, #12
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3306      	adds	r3, #6
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3306      	adds	r3, #6
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3304      	adds	r3, #4
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	330e      	adds	r3, #14
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	330e      	adds	r3, #14
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3310      	adds	r3, #16
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3310      	adds	r3, #16
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	330a      	adds	r3, #10
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	0a1b      	lsrs	r3, r3, #8
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	330a      	adds	r3, #10
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b0c:	f107 0110 	add.w	r1, r7, #16
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2226      	movs	r2, #38	; 0x26
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <send_hk_packet+0x210>)
 8000b16:	f00d fc1b 	bl	800e350 <HAL_UART_Transmit>
	hk_seq++;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <send_hk_packet+0x20c>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <send_hk_packet+0x20c>)
 8000b24:	801a      	strh	r2, [r3, #0]

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000698 	.word	0x24000698
 8000b34:	2400055c 	.word	0x2400055c

08000b38 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b40:	23bb      	movs	r3, #187	; 0xbb
 8000b42:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b44:	23bb      	movs	r3, #187	; 0xbb
 8000b46:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <send_pmt_packet+0x54>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <send_pmt_packet+0x54>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000b68:	f107 0108 	add.w	r1, r7, #8
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2206      	movs	r2, #6
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <send_pmt_packet+0x58>)
 8000b72:	f00d fbed 	bl	800e350 <HAL_UART_Transmit>
	pmt_seq++;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <send_pmt_packet+0x54>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <send_pmt_packet+0x54>)
 8000b80:	801a      	strh	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24000696 	.word	0x24000696
 8000b90:	2400055c 	.word	0x2400055c

08000b94 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b0a7      	sub	sp, #156	; 0x9c
 8000b98:	af1e      	add	r7, sp, #120	; 0x78
 8000b9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d147      	bne.n	8000c34 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		if (ERPA_ON) {
 8000ba4:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d027      	beq.n	8000bfc <HAL_TIM_OC_DelayElapsedCallback+0x68>
			SWP_FACTOR_COUNTER++;
 8000bac:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bb4:	6013      	str	r3, [r2, #0]

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000bb6:	bf00      	nop
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bbe:	f006 fe79 	bl	80078b4 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f7      	bne.n	8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x24>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bc8:	4c32      	ldr	r4, [pc, #200]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bca:	4668      	mov	r0, sp
 8000bcc:	f104 0310 	add.w	r3, r4, #16
 8000bd0:	2278      	movs	r2, #120	; 0x78
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f010 f89a 	bl	8010d0c <memcpy>
 8000bd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bdc:	f7ff fd94 	bl	8000708 <spi>
 8000be0:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000be2:	f7ff fdbf 	bl	8000764 <erpa_adc>
 8000be6:	6178      	str	r0, [r7, #20]
//					set_erpa_sweep();
//				}
//				SWP_FACTOR_COUNTER = 0;
//			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000be8:	6979      	ldr	r1, [r7, #20]
 8000bea:	69b8      	ldr	r0, [r7, #24]
 8000bec:	f7ff fe4e 	bl	800088c <send_erpa_packet>

			free(spi2_results);
 8000bf0:	69b8      	ldr	r0, [r7, #24]
 8000bf2:	f00f ff93 	bl	8010b1c <free>
			free(erpa_adc_results);
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f00f ff90 	bl	8010b1c <free>
		}
		if (HK_ON) {
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d03b      	beq.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			int16_t *i2c_values = i2c();
 8000c04:	f7ff fd4c 	bl	80006a0 <i2c>
 8000c08:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c0a:	f7ff fdc7 	bl	800079c <hk_adc1>
 8000c0e:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c10:	f7ff fe12 	bl	8000838 <hk_adc3>
 8000c14:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	68f9      	ldr	r1, [r7, #12]
 8000c1a:	6938      	ldr	r0, [r7, #16]
 8000c1c:	f7ff fe82 	bl	8000924 <send_hk_packet>

			free(i2c_values);
 8000c20:	6938      	ldr	r0, [r7, #16]
 8000c22:	f00f ff7b 	bl	8010b1c <free>
			free(hk_adc1_results);
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f00f ff78 	bl	8010b1c <free>
			free(hk_adc3_results);
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f00f ff75 	bl	8010b1c <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c32:	e023      	b.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
	} else if (htim == &htim1) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d11f      	bne.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		if (PMT_ON) {
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c44:	bf00      	nop
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c4c:	f006 fe32 	bl	80078b4 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f7      	bne.n	8000c46 <HAL_TIM_OC_DelayElapsedCallback+0xb2>
			uint8_t *spi1_results = spi(hspi1);
 8000c56:	4c14      	ldr	r4, [pc, #80]	; (8000ca8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c58:	4668      	mov	r0, sp
 8000c5a:	f104 0310 	add.w	r3, r4, #16
 8000c5e:	2278      	movs	r2, #120	; 0x78
 8000c60:	4619      	mov	r1, r3
 8000c62:	f010 f853 	bl	8010d0c <memcpy>
 8000c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c6a:	f7ff fd4d 	bl	8000708 <spi>
 8000c6e:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000c70:	69f8      	ldr	r0, [r7, #28]
 8000c72:	f7ff ff61 	bl	8000b38 <send_pmt_packet>
			free(spi1_results);
 8000c76:	69f8      	ldr	r0, [r7, #28]
 8000c78:	f00f ff50 	bl	8010b1c <free>
}
 8000c7c:	bf00      	nop
 8000c7e:	3724      	adds	r7, #36	; 0x24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	24000510 	.word	0x24000510
 8000c88:	2400069b 	.word	0x2400069b
 8000c8c:	24000690 	.word	0x24000690
 8000c90:	58020400 	.word	0x58020400
 8000c94:	2400043c 	.word	0x2400043c
 8000c98:	2400069c 	.word	0x2400069c
 8000c9c:	240004c4 	.word	0x240004c4
 8000ca0:	2400069a 	.word	0x2400069a
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	240003b4 	.word	0x240003b4

08000cac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af02      	add	r7, sp, #8
 8000cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	49bb      	ldr	r1, [pc, #748]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000cb8:	48bb      	ldr	r0, [pc, #748]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000cba:	f00d fbd7 	bl	800e46c <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cbe:	4bb9      	ldr	r3, [pc, #740]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b25      	cmp	r3, #37	; 0x25
 8000cc8:	f200 8167 	bhi.w	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <HAL_UART_RxCpltCallback+0x28>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000e3d 	.word	0x08000e3d
 8000cd8:	08000e59 	.word	0x08000e59
 8000cdc:	08000e75 	.word	0x08000e75
 8000ce0:	08000e95 	.word	0x08000e95
 8000ce4:	08000eb5 	.word	0x08000eb5
 8000ce8:	08000ed1 	.word	0x08000ed1
 8000cec:	08000ef1 	.word	0x08000ef1
 8000cf0:	08000f11 	.word	0x08000f11
 8000cf4:	08000f9b 	.word	0x08000f9b
 8000cf8:	08000f9b 	.word	0x08000f9b
 8000cfc:	08000d7b 	.word	0x08000d7b
 8000d00:	08000d6d 	.word	0x08000d6d
 8000d04:	08000f2d 	.word	0x08000f2d
 8000d08:	08000f3d 	.word	0x08000f3d
 8000d0c:	08000f5d 	.word	0x08000f5d
 8000d10:	08000f7d 	.word	0x08000f7d
 8000d14:	08000f4d 	.word	0x08000f4d
 8000d18:	08000f6d 	.word	0x08000f6d
 8000d1c:	08000f85 	.word	0x08000f85
 8000d20:	08000e4b 	.word	0x08000e4b
 8000d24:	08000e67 	.word	0x08000e67
 8000d28:	08000e85 	.word	0x08000e85
 8000d2c:	08000ea5 	.word	0x08000ea5
 8000d30:	08000ec3 	.word	0x08000ec3
 8000d34:	08000ee1 	.word	0x08000ee1
 8000d38:	08000f01 	.word	0x08000f01
 8000d3c:	08000f1f 	.word	0x08000f1f
 8000d40:	08000d89 	.word	0x08000d89
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000db9 	.word	0x08000db9
 8000d4c:	08000f9b 	.word	0x08000f9b
 8000d50:	08000f9b 	.word	0x08000f9b
 8000d54:	08000f9b 	.word	0x08000f9b
 8000d58:	08000f9b 	.word	0x08000f9b
 8000d5c:	08000f9b 	.word	0x08000f9b
 8000d60:	08000f9b 	.word	0x08000f9b
 8000d64:	08000df5 	.word	0x08000df5
 8000d68:	08000e19 	.word	0x08000e19
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d6c:	4b8f      	ldr	r3, [pc, #572]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000d6e:	2104      	movs	r1, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fdb6 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000d78:	e10f      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d7a:	4b8c      	ldr	r3, [pc, #560]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f006 fdaf 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000d86:	e108      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x1B: {
		if (step < 9) {
 8000d88:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	f200 80fd 	bhi.w	8000f8c <HAL_UART_RxCpltCallback+0x2e0>
			step++;
 8000d92:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b85      	ldr	r3, [pc, #532]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000d9c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d9e:	e0f5      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x2e0>
	}
	case 0x1C: {
		if (step > 0) {
 8000da0:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 80f3 	beq.w	8000f90 <HAL_UART_RxCpltCallback+0x2e4>
			step--;
 8000daa:	4b81      	ldr	r3, [pc, #516]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b7f      	ldr	r3, [pc, #508]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000db4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000db6:	e0eb      	b.n	8000f90 <HAL_UART_RxCpltCallback+0x2e4>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000db8:	4b7e      	ldr	r3, [pc, #504]	; (8000fb4 <HAL_UART_RxCpltCallback+0x308>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10e      	bne.n	8000dde <HAL_UART_RxCpltCallback+0x132>
			auto_sweep = 1;
 8000dc0:	4b7c      	ldr	r3, [pc, #496]	; (8000fb4 <HAL_UART_RxCpltCallback+0x308>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000dc6:	487c      	ldr	r0, [pc, #496]	; (8000fb8 <HAL_UART_RxCpltCallback+0x30c>)
 8000dc8:	f00b fd90 	bl	800c8ec <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_UART_RxCpltCallback+0x310>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	487a      	ldr	r0, [pc, #488]	; (8000fc0 <HAL_UART_RxCpltCallback+0x314>)
 8000dd8:	f003 fa88 	bl	80042ec <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 8000ddc:	e0dd      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
			auto_sweep = 0;
 8000dde:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <HAL_UART_RxCpltCallback+0x308>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000de4:	4874      	ldr	r0, [pc, #464]	; (8000fb8 <HAL_UART_RxCpltCallback+0x30c>)
 8000de6:	f00b fdf1 	bl	800c9cc <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000dea:	2100      	movs	r1, #0
 8000dec:	4874      	ldr	r0, [pc, #464]	; (8000fc0 <HAL_UART_RxCpltCallback+0x314>)
 8000dee:	f003 fb3d 	bl	800446c <HAL_DAC_Stop_DMA>
		break;
 8000df2:	e0d2      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x24: {
		if (cadence <= 50000){
 8000df4:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	f200 80c9 	bhi.w	8000f94 <HAL_UART_RxCpltCallback+0x2e8>
			cadence *= 2;
 8000e02:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e0a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e10:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e16:	e0bd      	b.n	8000f94 <HAL_UART_RxCpltCallback+0x2e8>
	}
	case 0x25: {
		if (cadence >= 6250){
 8000e18:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e20:	4293      	cmp	r3, r2
 8000e22:	f240 80b9 	bls.w	8000f98 <HAL_UART_RxCpltCallback+0x2ec>
			cadence /= 2;
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	085b      	lsrs	r3, r3, #1
 8000e2c:	4a65      	ldr	r2, [pc, #404]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e2e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e3a:	e0ad      	b.n	8000f98 <HAL_UART_RxCpltCallback+0x2ec>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e3c:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000e3e:	2120      	movs	r1, #32
 8000e40:	2201      	movs	r2, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f006 fd4e 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000e48:	e0a7      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e4a:	4b58      	ldr	r3, [pc, #352]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f006 fd47 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000e56:	e0a0      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e58:	4b54      	ldr	r3, [pc, #336]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fd40 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000e64:	e099      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 fd39 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000e72:	e092      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 fd31 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000e82:	e08a      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f006 fd29 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000e92:	e082      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e94:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fd21 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000ea2:	e07a      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000ea4:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fd19 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000eb2:	e072      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000eb4:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 fd12 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000ec0:	e06b      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 fd0b 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000ece:	e064      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000ed0:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fd03 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000ede:	e05c      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f006 fcfb 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000eee:	e054      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ef0:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f006 fcf3 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000efe:	e04c      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	2200      	movs	r2, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 fceb 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000f0e:	e044      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	2201      	movs	r2, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fce4 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000f1c:	e03d      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_UART_RxCpltCallback+0x31c>)
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	2200      	movs	r2, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fcdd 	bl	80078e4 <HAL_GPIO_WritePin>
		break;
 8000f2a:	e036      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f2c:	f001 fc66 	bl	80027fc <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f30:	2101      	movs	r1, #1
 8000f32:	2001      	movs	r0, #1
 8000f34:	f007 fad8 	bl	80084e8 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f38:	f7ff fb4c 	bl	80005d4 <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_UART_RxCpltCallback+0x320>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	4822      	ldr	r0, [pc, #136]	; (8000fd0 <HAL_UART_RxCpltCallback+0x324>)
 8000f46:	f00b fd69 	bl	800ca1c <HAL_TIM_OC_Start_IT>
		break;
 8000f4a:	e026      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_UART_RxCpltCallback+0x320>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <HAL_UART_RxCpltCallback+0x324>)
 8000f56:	f00b febb 	bl	800ccd0 <HAL_TIM_OC_Stop_IT>

		break;
 8000f5a:	e01e      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_UART_RxCpltCallback+0x328>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f62:	210c      	movs	r1, #12
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <HAL_UART_RxCpltCallback+0x30c>)
 8000f66:	f00b fd59 	bl	800ca1c <HAL_TIM_OC_Start_IT>
		break;
 8000f6a:	e016      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_UART_RxCpltCallback+0x328>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000f72:	210c      	movs	r1, #12
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <HAL_UART_RxCpltCallback+0x30c>)
 8000f76:	f00b feab 	bl	800ccd0 <HAL_TIM_OC_Stop_IT>

		break;
 8000f7a:	e00e      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x0F: {
		HK_ON = 1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_UART_RxCpltCallback+0x32c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
		break;
 8000f82:	e00a      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
	}
	case 0x12: {
		HK_ON = 0;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_UART_RxCpltCallback+0x32c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
		break;
 8000f8a:	e006      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000f8c:	bf00      	nop
 8000f8e:	e004      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000f90:	bf00      	nop
 8000f92:	e002      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <HAL_UART_RxCpltCallback+0x2ee>
		break;
 8000f98:	bf00      	nop
	}
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	240005f0 	.word	0x240005f0
 8000fa8:	2400055c 	.word	0x2400055c
 8000fac:	58020400 	.word	0x58020400
 8000fb0:	24000688 	.word	0x24000688
 8000fb4:	2400068c 	.word	0x2400068c
 8000fb8:	24000510 	.word	0x24000510
 8000fbc:	24000000 	.word	0x24000000
 8000fc0:	240002d4 	.word	0x240002d4
 8000fc4:	24000080 	.word	0x24000080
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	2400069a 	.word	0x2400069a
 8000fd0:	240004c4 	.word	0x240004c4
 8000fd4:	2400069b 	.word	0x2400069b
 8000fd8:	2400069c 	.word	0x2400069c

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f001 fb7a 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f874 	bl	80010d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fe8:	f000 f8f8 	bl	80011dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f000 fd7e 	bl	8001aec <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff0:	f000 fd4c 	bl	8001a8c <MX_DMA_Init>
  MX_DAC1_Init();
 8000ff4:	f000 fad6 	bl	80015a4 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000ff8:	f000 f920 	bl	800123c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000ffc:	f000 fa40 	bl	8001480 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001000:	f000 fc82 	bl	8001908 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001004:	f000 fbf0 	bl	80017e8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001008:	f000 fafe 	bl	8001608 <MX_I2C1_Init>
  MX_SPI1_Init();
 800100c:	f000 fb3c 	bl	8001688 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001010:	f000 fb92 	bl	8001738 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001014:	f000 fcee 	bl	80019f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 8001018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001022:	210c      	movs	r1, #12
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <main+0xd8>)
 8001026:	f00b ff8f 	bl	800cf48 <HAL_TIM_PWM_Start>




  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800102a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800102e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001032:	4821      	ldr	r0, [pc, #132]	; (80010b8 <main+0xdc>)
 8001034:	f002 fee6 	bl	8003e04 <HAL_ADCEx_Calibration_Start>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <main+0x66>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 800103e:	f000 fdcf 	bl	8001be0 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 8001042:	220b      	movs	r2, #11
 8001044:	491d      	ldr	r1, [pc, #116]	; (80010bc <main+0xe0>)
 8001046:	481c      	ldr	r0, [pc, #112]	; (80010b8 <main+0xdc>)
 8001048:	f001 ffba 	bl	8002fc0 <HAL_ADC_Start_DMA>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <main+0x7a>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 8001052:	f000 fdc5 	bl	8001be0 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001056:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800105a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <main+0xe4>)
 8001060:	f002 fed0 	bl	8003e04 <HAL_ADCEx_Calibration_Start>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <main+0x92>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 800106a:	f000 fdb9 	bl	8001be0 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 800106e:	2204      	movs	r2, #4
 8001070:	4914      	ldr	r1, [pc, #80]	; (80010c4 <main+0xe8>)
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <main+0xe4>)
 8001074:	f001 ffa4 	bl	8002fc0 <HAL_ADC_Start_DMA>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <main+0xa6>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 800107e:	f000 fdaf 	bl	8001be0 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8001082:	bf00      	nop
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <main+0xec>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d0f7      	beq.n	8001084 <main+0xa8>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 8001094:	bf00      	nop
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <main+0xec>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a4:	d1f7      	bne.n	8001096 <main+0xba>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	4908      	ldr	r1, [pc, #32]	; (80010cc <main+0xf0>)
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <main+0xec>)
 80010ac:	f00d f9de 	bl	800e46c <HAL_UART_Receive_IT>
 80010b0:	e7f9      	b.n	80010a6 <main+0xca>
 80010b2:	bf00      	nop
 80010b4:	24000510 	.word	0x24000510
 80010b8:	2400011c 	.word	0x2400011c
 80010bc:	24000660 	.word	0x24000660
 80010c0:	24000180 	.word	0x24000180
 80010c4:	24000680 	.word	0x24000680
 80010c8:	2400055c 	.word	0x2400055c
 80010cc:	240005f0 	.word	0x240005f0

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09c      	sub	sp, #112	; 0x70
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	224c      	movs	r2, #76	; 0x4c
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f00f fdd0 	bl	8010c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2220      	movs	r2, #32
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00f fdca 	bl	8010c84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f007 fa35 	bl	8008560 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <SystemClock_Config+0x100>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <SystemClock_Config+0x100>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <SystemClock_Config+0x100>)
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <SystemClock_Config+0x104>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001118:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <SystemClock_Config+0x104>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <SystemClock_Config+0x104>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800112c:	bf00      	nop
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <SystemClock_Config+0x104>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113a:	d1f8      	bne.n	800112e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <SystemClock_Config+0x108>)
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <SystemClock_Config+0x108>)
 8001142:	f023 0303 	bic.w	r3, r3, #3
 8001146:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800114c:	2301      	movs	r3, #1
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001158:	2300      	movs	r3, #0
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001160:	230c      	movs	r3, #12
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001170:	230c      	movs	r3, #12
 8001172:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001174:	2300      	movs	r3, #0
 8001176:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4618      	mov	r0, r3
 8001182:	f007 fa27 	bl	80085d4 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800118c:	f000 fd28 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	233f      	movs	r3, #63	; 0x3f
 8001192:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 fe66 	bl	8008e88 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011c2:	f000 fd0d 	bl	8001be0 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3770      	adds	r7, #112	; 0x70
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	58000400 	.word	0x58000400
 80011d4:	58024800 	.word	0x58024800
 80011d8:	58024400 	.word	0x58024400

080011dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0b0      	sub	sp, #192	; 0xc0
 80011e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	22c0      	movs	r2, #192	; 0xc0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00f fd4b 	bl	8010c84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80011fe:	2309      	movs	r3, #9
 8001200:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001202:	2304      	movs	r3, #4
 8001204:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001206:	2302      	movs	r3, #2
 8001208:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800120e:	23c0      	movs	r3, #192	; 0xc0
 8001210:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001212:	2320      	movs	r3, #32
 8001214:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001216:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	4618      	mov	r0, r3
 8001226:	f008 f9bb 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001230:	f000 fcd6 	bl	8001be0 <Error_Handler>
  }
}
 8001234:	bf00      	nop
 8001236:	37c0      	adds	r7, #192	; 0xc0
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001260:	4b7a      	ldr	r3, [pc, #488]	; (800144c <MX_ADC1_Init+0x210>)
 8001262:	4a7b      	ldr	r2, [pc, #492]	; (8001450 <MX_ADC1_Init+0x214>)
 8001264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001266:	4b79      	ldr	r3, [pc, #484]	; (800144c <MX_ADC1_Init+0x210>)
 8001268:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800126c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126e:	4b77      	ldr	r3, [pc, #476]	; (800144c <MX_ADC1_Init+0x210>)
 8001270:	2208      	movs	r2, #8
 8001272:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001274:	4b75      	ldr	r3, [pc, #468]	; (800144c <MX_ADC1_Init+0x210>)
 8001276:	2201      	movs	r2, #1
 8001278:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127a:	4b74      	ldr	r3, [pc, #464]	; (800144c <MX_ADC1_Init+0x210>)
 800127c:	2204      	movs	r2, #4
 800127e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001280:	4b72      	ldr	r3, [pc, #456]	; (800144c <MX_ADC1_Init+0x210>)
 8001282:	2200      	movs	r2, #0
 8001284:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001286:	4b71      	ldr	r3, [pc, #452]	; (800144c <MX_ADC1_Init+0x210>)
 8001288:	2201      	movs	r2, #1
 800128a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <MX_ADC1_Init+0x210>)
 800128e:	220b      	movs	r2, #11
 8001290:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <MX_ADC1_Init+0x210>)
 8001294:	2200      	movs	r2, #0
 8001296:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001298:	4b6c      	ldr	r3, [pc, #432]	; (800144c <MX_ADC1_Init+0x210>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129e:	4b6b      	ldr	r3, [pc, #428]	; (800144c <MX_ADC1_Init+0x210>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <MX_ADC1_Init+0x210>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012aa:	4b68      	ldr	r3, [pc, #416]	; (800144c <MX_ADC1_Init+0x210>)
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012b2:	4b66      	ldr	r3, [pc, #408]	; (800144c <MX_ADC1_Init+0x210>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <MX_ADC1_Init+0x210>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c0:	4862      	ldr	r0, [pc, #392]	; (800144c <MX_ADC1_Init+0x210>)
 80012c2:	f001 fcdb 	bl	8002c7c <HAL_ADC_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012cc:	f000 fc88 	bl	8001be0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	485c      	ldr	r0, [pc, #368]	; (800144c <MX_ADC1_Init+0x210>)
 80012dc:	f002 fdf6 	bl	8003ecc <HAL_ADCEx_MultiModeConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012e6:	f000 fc7b 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ea:	4b5a      	ldr	r3, [pc, #360]	; (8001454 <MX_ADC1_Init+0x218>)
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ee:	2306      	movs	r3, #6
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80012f2:	2307      	movs	r3, #7
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012fc:	2304      	movs	r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	484f      	ldr	r0, [pc, #316]	; (800144c <MX_ADC1_Init+0x210>)
 800130e:	f001 ff39 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001318:	f000 fc62 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800131c:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <MX_ADC1_Init+0x21c>)
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001320:	230c      	movs	r3, #12
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4848      	ldr	r0, [pc, #288]	; (800144c <MX_ADC1_Init+0x210>)
 800132a:	f001 ff2b 	bl	8003184 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001334:	f000 fc54 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <MX_ADC1_Init+0x220>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800133c:	2312      	movs	r3, #18
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4841      	ldr	r0, [pc, #260]	; (800144c <MX_ADC1_Init+0x210>)
 8001346:	f001 ff1d 	bl	8003184 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001350:	f000 fc46 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001354:	4b42      	ldr	r3, [pc, #264]	; (8001460 <MX_ADC1_Init+0x224>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001358:	2318      	movs	r3, #24
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	483a      	ldr	r0, [pc, #232]	; (800144c <MX_ADC1_Init+0x210>)
 8001362:	f001 ff0f 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800136c:	f000 fc38 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <MX_ADC1_Init+0x228>)
 8001372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	4833      	ldr	r0, [pc, #204]	; (800144c <MX_ADC1_Init+0x210>)
 8001380:	f001 ff00 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800138a:	f000 fc29 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <MX_ADC1_Init+0x22c>)
 8001390:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001392:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001396:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	482b      	ldr	r0, [pc, #172]	; (800144c <MX_ADC1_Init+0x210>)
 800139e:	f001 fef1 	bl	8003184 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013a8:	f000 fc1a 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <MX_ADC1_Init+0x230>)
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013b0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4824      	ldr	r0, [pc, #144]	; (800144c <MX_ADC1_Init+0x210>)
 80013bc:	f001 fee2 	bl	8003184 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013c6:	f000 fc0b 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_ADC1_Init+0x234>)
 80013cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013ce:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	481c      	ldr	r0, [pc, #112]	; (800144c <MX_ADC1_Init+0x210>)
 80013da:	f001 fed3 	bl	8003184 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013e4:	f000 fbfc 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_ADC1_Init+0x238>)
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013ec:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_ADC1_Init+0x210>)
 80013f8:	f001 fec4 	bl	8003184 <HAL_ADC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001402:	f000 fbed 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_ADC1_Init+0x23c>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800140a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_ADC1_Init+0x210>)
 8001416:	f001 feb5 	bl	8003184 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001420:	f000 fbde 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_ADC1_Init+0x240>)
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001428:	f240 2306 	movw	r3, #518	; 0x206
 800142c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_ADC1_Init+0x210>)
 8001434:	f001 fea6 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800143e:	f000 fbcf 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2400011c 	.word	0x2400011c
 8001450:	40022000 	.word	0x40022000
 8001454:	0c900008 	.word	0x0c900008
 8001458:	10c00010 	.word	0x10c00010
 800145c:	14f00020 	.word	0x14f00020
 8001460:	1d500080 	.word	0x1d500080
 8001464:	21800100 	.word	0x21800100
 8001468:	25b00200 	.word	0x25b00200
 800146c:	2a000400 	.word	0x2a000400
 8001470:	2e300800 	.word	0x2e300800
 8001474:	3ac04000 	.word	0x3ac04000
 8001478:	3ef08000 	.word	0x3ef08000
 800147c:	47520000 	.word	0x47520000

08001480 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <MX_ADC3_Init+0x110>)
 800149a:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <MX_ADC3_Init+0x114>)
 800149c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <MX_ADC3_Init+0x110>)
 80014a0:	2208      	movs	r2, #8
 80014a2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <MX_ADC3_Init+0x110>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <MX_ADC3_Init+0x110>)
 80014ac:	2204      	movs	r2, #4
 80014ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <MX_ADC3_Init+0x110>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <MX_ADC3_Init+0x110>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <MX_ADC3_Init+0x110>)
 80014be:	2204      	movs	r2, #4
 80014c0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <MX_ADC3_Init+0x110>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_ADC3_Init+0x110>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <MX_ADC3_Init+0x110>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_ADC3_Init+0x110>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MX_ADC3_Init+0x110>)
 80014dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_ADC3_Init+0x110>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <MX_ADC3_Init+0x110>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014f0:	4827      	ldr	r0, [pc, #156]	; (8001590 <MX_ADC3_Init+0x110>)
 80014f2:	f001 fbc3 	bl	8002c7c <HAL_ADC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80014fc:	f000 fb70 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <MX_ADC3_Init+0x118>)
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001504:	2306      	movs	r3, #6
 8001506:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001508:	2307      	movs	r3, #7
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800150c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001510:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001512:	2304      	movs	r3, #4
 8001514:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	481b      	ldr	r0, [pc, #108]	; (8001590 <MX_ADC3_Init+0x110>)
 8001524:	f001 fe2e 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800152e:	f000 fb57 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_ADC3_Init+0x11c>)
 8001534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001536:	230c      	movs	r3, #12
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_ADC3_Init+0x110>)
 8001540:	f001 fe20 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800154a:	f000 fb49 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800154e:	2301      	movs	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001552:	2312      	movs	r3, #18
 8001554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_ADC3_Init+0x110>)
 800155c:	f001 fe12 	bl	8003184 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001566:	f000 fb3b 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_ADC3_Init+0x120>)
 800156c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800156e:	2318      	movs	r3, #24
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_ADC3_Init+0x110>)
 8001578:	f001 fe04 	bl	8003184 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001582:	f000 fb2d 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000180 	.word	0x24000180
 8001594:	58026000 	.word	0x58026000
 8001598:	cb840000 	.word	0xcb840000
 800159c:	cfb80000 	.word	0xcfb80000
 80015a0:	04300002 	.word	0x04300002

080015a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2224      	movs	r2, #36	; 0x24
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00f fb67 	bl	8010c84 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_DAC1_Init+0x5c>)
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <MX_DAC1_Init+0x60>)
 80015ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <MX_DAC1_Init+0x5c>)
 80015be:	f002 fe72 	bl	80042a6 <HAL_DAC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015c8:	f000 fb0a 	bl	8001be0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015d0:	230a      	movs	r3, #10
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_DAC1_Init+0x5c>)
 80015e8:	f002 ffac 	bl	8004544 <HAL_DAC_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015f2:	f000 faf5 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	240002d4 	.word	0x240002d4
 8001604:	40007400 	.word	0x40007400

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C1_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <MX_I2C1_Init+0x74>)
 8001644:	f006 f968 	bl	8007918 <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 fac7 	bl	8001be0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C1_Init+0x74>)
 8001656:	f006 feaf 	bl	80083b8 <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 fabe 	bl	8001be0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_I2C1_Init+0x74>)
 8001668:	f006 fef1 	bl	800844e <HAL_I2CEx_ConfigDigitalFilter>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fab5 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	24000360 	.word	0x24000360
 8001680:	40005400 	.word	0x40005400
 8001684:	00506682 	.word	0x00506682

08001688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <MX_SPI1_Init+0xa8>)
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <MX_SPI1_Init+0xac>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <MX_SPI1_Init+0xa8>)
 8001694:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <MX_SPI1_Init+0xa8>)
 800169c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016a4:	220f      	movs	r2, #15
 80016a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI1_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_SPI1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_SPI1_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI1_Init+0xa8>)
 8001716:	2200      	movs	r2, #0
 8001718:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_SPI1_Init+0xa8>)
 800171c:	f00a fc3e 	bl	800bf9c <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001726:	f000 fa5b 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240003b4 	.word	0x240003b4
 8001734:	40013000 	.word	0x40013000

08001738 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <MX_SPI2_Init+0xac>)
 8001740:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001744:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001748:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800174c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001750:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001754:	220f      	movs	r2, #15
 8001756:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001766:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800176a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800176e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001772:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800178e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_SPI2_Init+0xa8>)
 80017cc:	f00a fbe6 	bl	800bf9c <HAL_SPI_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017d6:	f000 fa03 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2400043c 	.word	0x2400043c
 80017e4:	40003800 	.word	0x40003800

080017e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b096      	sub	sp, #88	; 0x58
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	222c      	movs	r2, #44	; 0x2c
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00f fa35 	bl	8010c84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800181a:	4b39      	ldr	r3, [pc, #228]	; (8001900 <MX_TIM1_Init+0x118>)
 800181c:	4a39      	ldr	r2, [pc, #228]	; (8001904 <MX_TIM1_Init+0x11c>)
 800181e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001820:	4b37      	ldr	r3, [pc, #220]	; (8001900 <MX_TIM1_Init+0x118>)
 8001822:	2263      	movs	r2, #99	; 0x63
 8001824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <MX_TIM1_Init+0x118>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <MX_TIM1_Init+0x118>)
 800182e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <MX_TIM1_Init+0x118>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <MX_TIM1_Init+0x118>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <MX_TIM1_Init+0x118>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001846:	482e      	ldr	r0, [pc, #184]	; (8001900 <MX_TIM1_Init+0x118>)
 8001848:	f00b fb26 	bl	800ce98 <HAL_TIM_PWM_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001852:	f000 f9c5 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001862:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001866:	4619      	mov	r1, r3
 8001868:	4825      	ldr	r0, [pc, #148]	; (8001900 <MX_TIM1_Init+0x118>)
 800186a:	f00c fbf7 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001874:	f000 f9b4 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	; 0x60
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800187c:	f240 13df 	movw	r3, #479	; 0x1df
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <MX_TIM1_Init+0x118>)
 80018a0:	f00b fd68 	bl	800d374 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018aa:	f000 f999 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_TIM1_Init+0x118>)
 80018e4:	f00c fc48 	bl	800e178 <HAL_TIMEx_ConfigBreakDeadTime>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80018ee:	f000 f977 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018f2:	4803      	ldr	r0, [pc, #12]	; (8001900 <MX_TIM1_Init+0x118>)
 80018f4:	f000 fcae 	bl	8002254 <HAL_TIM_MspPostInit>

}
 80018f8:	bf00      	nop
 80018fa:	3758      	adds	r7, #88	; 0x58
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	240004c4 	.word	0x240004c4
 8001904:	40010000 	.word	0x40010000

08001908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001928:	463b      	mov	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800193c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001940:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001944:	222f      	movs	r2, #47	; 0x2f
 8001946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001950:	f640 4234 	movw	r2, #3124	; 0xc34
 8001954:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <MX_TIM2_Init+0xe8>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001962:	4823      	ldr	r0, [pc, #140]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001964:	f00a ff6b 	bl	800c83e <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800196e:	f000 f937 	bl	8001be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197c:	4619      	mov	r1, r3
 800197e:	481c      	ldr	r0, [pc, #112]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001980:	f00b fe0c 	bl	800d59c <HAL_TIM_ConfigClockSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800198a:	f000 f929 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800198e:	4818      	ldr	r0, [pc, #96]	; (80019f0 <MX_TIM2_Init+0xe8>)
 8001990:	f00b fa82 	bl	800ce98 <HAL_TIM_PWM_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800199a:	f000 f921 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800199e:	2320      	movs	r3, #32
 80019a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4810      	ldr	r0, [pc, #64]	; (80019f0 <MX_TIM2_Init+0xe8>)
 80019ae:	f00c fb55 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019b8:	f000 f912 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	220c      	movs	r2, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_TIM2_Init+0xe8>)
 80019d4:	f00b fcce 	bl	800d374 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019de:	f000 f8ff 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <MX_TIM2_Init+0xe8>)
 80019e4:	f000 fc36 	bl	8002254 <HAL_TIM_MspPostInit>

}
 80019e8:	bf00      	nop
 80019ea:	3738      	adds	r7, #56	; 0x38
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24000510 	.word	0x24000510

080019f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <MX_USART1_UART_Init+0x94>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a00:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a3e:	f00c fc37 	bl	800e2b0 <HAL_UART_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a48:	f000 f8ca 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a50:	f00e ff91 	bl	8010976 <HAL_UARTEx_SetTxFifoThreshold>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a5a:	f000 f8c1 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a62:	f00e ffc6 	bl	80109f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a6c:	f000 f8b8 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_USART1_UART_Init+0x90>)
 8001a72:	f00e ff47 	bl	8010904 <HAL_UARTEx_DisableFifoMode>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a7c:	f000 f8b0 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2400055c 	.word	0x2400055c
 8001a88:	40011000 	.word	0x40011000

08001a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <MX_DMA_Init+0x5c>)
 8001a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <MX_DMA_Init+0x5c>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_DMA_Init+0x5c>)
 8001aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	200b      	movs	r0, #11
 8001ab6:	f002 fbc2 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001aba:	200b      	movs	r0, #11
 8001abc:	f002 fbd9 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	200c      	movs	r0, #12
 8001ac6:	f002 fbba 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001aca:	200c      	movs	r0, #12
 8001acc:	f002 fbd1 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f002 fbb2 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ada:	2010      	movs	r0, #16
 8001adc:	f002 fbc9 	bl	8004272 <HAL_NVIC_EnableIRQ>

}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	58024400 	.word	0x58024400

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	4a32      	ldr	r2, [pc, #200]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_GPIO_Init+0xe8>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001b80:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <MX_GPIO_Init+0xec>)
 8001b82:	f005 feaf 	bl	80078e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2164      	movs	r1, #100	; 0x64
 8001b8a:	4814      	ldr	r0, [pc, #80]	; (8001bdc <MX_GPIO_Init+0xf0>)
 8001b8c:	f005 feaa 	bl	80078e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b90:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001b94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <MX_GPIO_Init+0xec>)
 8001baa:	f005 fcd3 	bl	8007554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_GPIO_Init+0xf0>)
 8001bc6:	f005 fcc5 	bl	8007554 <HAL_GPIO_Init>

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	58020800 	.word	0x58020800
 8001bdc:	58020400 	.word	0x58020400

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <Error_Handler+0x8>
	...

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_MspInit+0x30>)
 8001bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf8:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_MspInit+0x30>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_MspInit+0x30>)
 8001c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	58024400 	.word	0x58024400

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	; 0x38
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7b      	ldr	r2, [pc, #492]	; (8001e2c <HAL_ADC_MspInit+0x20c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	f040 8091 	bne.w	8001d66 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c44:	4b7a      	ldr	r3, [pc, #488]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c4a:	4a79      	ldr	r2, [pc, #484]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c4c:	f043 0320 	orr.w	r3, r3, #32
 8001c50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c54:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c68:	4a71      	ldr	r2, [pc, #452]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c72:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b6b      	ldr	r3, [pc, #428]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cbc:	2333      	movs	r3, #51	; 0x33
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4859      	ldr	r0, [pc, #356]	; (8001e34 <HAL_ADC_MspInit+0x214>)
 8001cd0:	f005 fc40 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001cd4:	23ce      	movs	r3, #206	; 0xce
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4854      	ldr	r0, [pc, #336]	; (8001e38 <HAL_ADC_MspInit+0x218>)
 8001ce8:	f005 fc34 	bl	8007554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cec:	2303      	movs	r3, #3
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	484f      	ldr	r0, [pc, #316]	; (8001e3c <HAL_ADC_MspInit+0x21c>)
 8001d00:	f005 fc28 	bl	8007554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d06:	4a4f      	ldr	r2, [pc, #316]	; (8001e44 <HAL_ADC_MspInit+0x224>)
 8001d08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d0c:	2209      	movs	r2, #9
 8001d0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d1c:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d34:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d48:	483d      	ldr	r0, [pc, #244]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d4a:	f002 fdc7 	bl	80048dc <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d54:	f7ff ff44 	bl	8001be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d5e:	4a38      	ldr	r2, [pc, #224]	; (8001e40 <HAL_ADC_MspInit+0x220>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d64:	e05e      	b.n	8001e24 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_ADC_MspInit+0x228>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d159      	bne.n	8001e24 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_ADC_MspInit+0x210>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001dac:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001db0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001db4:	f000 fd3e 	bl	8002834 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001db8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001dbc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001dc0:	f000 fd38 	bl	8002834 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dc6:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_ADC_MspInit+0x230>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dcc:	2273      	movs	r2, #115	; 0x73
 8001dce:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e08:	4810      	ldr	r0, [pc, #64]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001e0a:	f002 fd67 	bl	80048dc <HAL_DMA_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e14:	f7ff fee4 	bl	8001be0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001e1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_ADC_MspInit+0x22c>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e24:	bf00      	nop
 8001e26:	3738      	adds	r7, #56	; 0x38
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58020800 	.word	0x58020800
 8001e38:	58020000 	.word	0x58020000
 8001e3c:	58020400 	.word	0x58020400
 8001e40:	240001e4 	.word	0x240001e4
 8001e44:	40020010 	.word	0x40020010
 8001e48:	58026000 	.word	0x58026000
 8001e4c:	2400025c 	.word	0x2400025c
 8001e50:	40020028 	.word	0x40020028

08001e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <HAL_DAC_MspInit+0xe0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d159      	bne.n	8001f2a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_DAC_MspInit+0xe4>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	481d      	ldr	r0, [pc, #116]	; (8001f3c <HAL_DAC_MspInit+0xe8>)
 8001ec6:	f005 fb45 	bl	8007554 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_DAC_MspInit+0xf0>)
 8001ece:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ed2:	2243      	movs	r2, #67	; 0x43
 8001ed4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ed8:	2240      	movs	r2, #64	; 0x40
 8001eda:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001ef4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f00:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f10:	f002 fce4 	bl	80048dc <HAL_DMA_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f1a:	f7ff fe61 	bl	8001be0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_DAC_MspInit+0xec>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40007400 	.word	0x40007400
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	58020000 	.word	0x58020000
 8001f40:	240002e8 	.word	0x240002e8
 8001f44:	40020088 	.word	0x40020088

08001f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0ba      	sub	sp, #232	; 0xe8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	22c0      	movs	r2, #192	; 0xc0
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00e fe8b 	bl	8010c84 <memset>
  if(hi2c->Instance==I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_I2C_MspInit+0xc8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d146      	bne.n	8002006 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f78:	f04f 0208 	mov.w	r2, #8
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f007 fb06 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f9a:	f7ff fe21 	bl	8001be0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_I2C_MspInit+0xcc>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_I2C_MspInit+0xcc>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_I2C_MspInit+0xcc>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <HAL_I2C_MspInit+0xd0>)
 8001fe4:	f005 fab6 	bl	8007554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_I2C_MspInit+0xcc>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_I2C_MspInit+0xcc>)
 8001ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_I2C_MspInit+0xcc>)
 8001ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	37e8      	adds	r7, #232	; 0xe8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40005400 	.word	0x40005400
 8002014:	58024400 	.word	0x58024400
 8002018:	58020400 	.word	0x58020400

0800201c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0bc      	sub	sp, #240	; 0xf0
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	22c0      	movs	r2, #192	; 0xc0
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f00e fe21 	bl	8010c84 <memset>
  if(hspi->Instance==SPI1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_SPI_MspInit+0x15c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d145      	bne.n	80020d8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800204c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002058:	2300      	movs	r3, #0
 800205a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	4618      	mov	r0, r3
 8002062:	f007 fa9d 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800206c:	f7ff fdb8 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002076:	4a41      	ldr	r2, [pc, #260]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800207c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002080:	4b3e      	ldr	r3, [pc, #248]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002094:	4a39      	ldr	r2, [pc, #228]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_SPI_MspInit+0x160>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020ac:	2318      	movs	r3, #24
 80020ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c4:	2305      	movs	r3, #5
 80020c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020ce:	4619      	mov	r1, r3
 80020d0:	482b      	ldr	r0, [pc, #172]	; (8002180 <HAL_SPI_MspInit+0x164>)
 80020d2:	f005 fa3f 	bl	8007554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020d6:	e04a      	b.n	800216e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_SPI_MspInit+0x168>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d145      	bne.n	800216e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	4618      	mov	r0, r3
 80020f8:	f007 fa52 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002102:	f7ff fd6d 	bl	8001be0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_SPI_MspInit+0x160>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002112:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_SPI_MspInit+0x160>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_SPI_MspInit+0x160>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002142:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215c:	2305      	movs	r3, #5
 800215e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <HAL_SPI_MspInit+0x164>)
 800216a:	f005 f9f3 	bl	8007554 <HAL_GPIO_Init>
}
 800216e:	bf00      	nop
 8002170:	37f0      	adds	r7, #240	; 0xf0
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40013000 	.word	0x40013000
 800217c:	58024400 	.word	0x58024400
 8002180:	58020400 	.word	0x58020400
 8002184:	40003800 	.word	0x40003800

08002188 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <HAL_TIM_PWM_MspInit+0x78>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d12e      	bne.n	80021f8 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_TIM_PWM_MspInit+0x7c>)
 800219c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_TIM_PWM_MspInit+0x7c>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_TIM_PWM_MspInit+0x7c>)
 80021ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	2018      	movs	r0, #24
 80021be:	f002 f83e 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021c2:	2018      	movs	r0, #24
 80021c4:	f002 f855 	bl	8004272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2019      	movs	r0, #25
 80021ce:	f002 f836 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021d2:	2019      	movs	r0, #25
 80021d4:	f002 f84d 	bl	8004272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	201a      	movs	r0, #26
 80021de:	f002 f82e 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021e2:	201a      	movs	r0, #26
 80021e4:	f002 f845 	bl	8004272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	201b      	movs	r0, #27
 80021ee:	f002 f826 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021f2:	201b      	movs	r0, #27
 80021f4:	f002 f83d 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010000 	.word	0x40010000
 8002204:	58024400 	.word	0x58024400

08002208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d116      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_TIM_Base_MspInit+0x48>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_TIM_Base_MspInit+0x48>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_TIM_Base_MspInit+0x48>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2101      	movs	r1, #1
 800223c:	201c      	movs	r0, #28
 800223e:	f001 fffe 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002242:	201c      	movs	r0, #28
 8002244:	f002 f815 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	58024400 	.word	0x58024400

08002254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_TIM_MspPostInit+0xb8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d120      	bne.n	80022b8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_TIM_MspPostInit+0xbc>)
 8002278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_TIM_MspPostInit+0xbc>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_TIM_MspPostInit+0xbc>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4818      	ldr	r0, [pc, #96]	; (8002314 <HAL_TIM_MspPostInit+0xc0>)
 80022b2:	f005 f94f 	bl	8007554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022b6:	e024      	b.n	8002302 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d11f      	bne.n	8002302 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_TIM_MspPostInit+0xbc>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_TIM_MspPostInit+0xbc>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_TIM_MspPostInit+0xbc>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022f2:	2301      	movs	r3, #1
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4806      	ldr	r0, [pc, #24]	; (8002318 <HAL_TIM_MspPostInit+0xc4>)
 80022fe:	f005 f929 	bl	8007554 <HAL_GPIO_Init>
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	58024400 	.word	0x58024400
 8002314:	58020000 	.word	0x58020000
 8002318:	58020400 	.word	0x58020400

0800231c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0ba      	sub	sp, #232	; 0xe8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	22c0      	movs	r2, #192	; 0xc0
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f00e fca1 	bl	8010c84 <memset>
  if(huart->Instance==USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_UART_MspInit+0xd8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d14e      	bne.n	80023ea <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800234c:	f04f 0201 	mov.w	r2, #1
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	4618      	mov	r0, r3
 8002364:	f007 f91c 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800236e:	f7ff fc37 	bl	8001be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_UART_MspInit+0xdc>)
 8002374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_UART_MspInit+0xdc>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_UART_MspInit+0xdc>)
 8002384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0xdc>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_UART_MspInit+0xdc>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0xdc>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c8:	2307      	movs	r3, #7
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4809      	ldr	r0, [pc, #36]	; (80023fc <HAL_UART_MspInit+0xe0>)
 80023d6:	f005 f8bd 	bl	8007554 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2025      	movs	r0, #37	; 0x25
 80023e0:	f001 ff2d 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023e4:	2025      	movs	r0, #37	; 0x25
 80023e6:	f001 ff44 	bl	8004272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	37e8      	adds	r7, #232	; 0xe8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40011000 	.word	0x40011000
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020000 	.word	0x58020000

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244c:	f000 f9b6 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA1_Stream0_IRQHandler+0x10>)
 800245a:	f003 fd69 	bl	8005f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	240001e4 	.word	0x240001e4

08002468 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA1_Stream1_IRQHandler+0x10>)
 800246e:	f003 fd5f 	bl	8005f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2400025c 	.word	0x2400025c

0800247c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Stream5_IRQHandler+0x10>)
 8002482:	f003 fd55 	bl	8005f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	240002e8 	.word	0x240002e8

08002490 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM1_BRK_IRQHandler+0x10>)
 8002496:	f00a fe65 	bl	800d164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	240004c4 	.word	0x240004c4

080024a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM1_UP_IRQHandler+0x10>)
 80024aa:	f00a fe5b 	bl	800d164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	240004c4 	.word	0x240004c4

080024b8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80024be:	f00a fe51 	bl	800d164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	240004c4 	.word	0x240004c4

080024cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM1_CC_IRQHandler+0x10>)
 80024d2:	f00a fe47 	bl	800d164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	240004c4 	.word	0x240004c4

080024e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM2_IRQHandler+0x10>)
 80024e6:	f00a fe3d 	bl	800d164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	24000510 	.word	0x24000510

080024f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <USART1_IRQHandler+0x10>)
 80024fa:	f00c f803 	bl	800e504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2400055c 	.word	0x2400055c

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f00e fbbc 	bl	8010cb4 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24080000 	.word	0x24080000
 8002568:	00000400 	.word	0x00000400
 800256c:	240006a0 	.word	0x240006a0
 8002570:	240007f0 	.word	0x240007f0

08002574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002578:	4b37      	ldr	r3, [pc, #220]	; (8002658 <SystemInit+0xe4>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	4a36      	ldr	r2, [pc, #216]	; (8002658 <SystemInit+0xe4>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002588:	4b34      	ldr	r3, [pc, #208]	; (800265c <SystemInit+0xe8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2b06      	cmp	r3, #6
 8002592:	d807      	bhi.n	80025a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <SystemInit+0xe8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 030f 	bic.w	r3, r3, #15
 800259c:	4a2f      	ldr	r2, [pc, #188]	; (800265c <SystemInit+0xe8>)
 800259e:	f043 0307 	orr.w	r3, r3, #7
 80025a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <SystemInit+0xec>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <SystemInit+0xec>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <SystemInit+0xec>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <SystemInit+0xec>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4929      	ldr	r1, [pc, #164]	; (8002660 <SystemInit+0xec>)
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <SystemInit+0xf0>)
 80025be:	4013      	ands	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <SystemInit+0xe8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <SystemInit+0xe8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <SystemInit+0xe8>)
 80025d8:	f043 0307 	orr.w	r3, r3, #7
 80025dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <SystemInit+0xec>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e4:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <SystemInit+0xec>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <SystemInit+0xec>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <SystemInit+0xec>)
 80025f2:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <SystemInit+0xf4>)
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <SystemInit+0xec>)
 80025f8:	4a1c      	ldr	r2, [pc, #112]	; (800266c <SystemInit+0xf8>)
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <SystemInit+0xec>)
 80025fe:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <SystemInit+0xfc>)
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <SystemInit+0xec>)
 8002604:	2200      	movs	r2, #0
 8002606:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <SystemInit+0xec>)
 800260a:	4a19      	ldr	r2, [pc, #100]	; (8002670 <SystemInit+0xfc>)
 800260c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <SystemInit+0xec>)
 8002610:	2200      	movs	r2, #0
 8002612:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <SystemInit+0xec>)
 8002616:	4a16      	ldr	r2, [pc, #88]	; (8002670 <SystemInit+0xfc>)
 8002618:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <SystemInit+0xec>)
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <SystemInit+0xec>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <SystemInit+0xec>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <SystemInit+0xec>)
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <SystemInit+0x100>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <SystemInit+0x104>)
 8002638:	4013      	ands	r3, r2
 800263a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263e:	d202      	bcs.n	8002646 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <SystemInit+0x108>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <SystemInit+0x10c>)
 8002648:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800264c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	52002000 	.word	0x52002000
 8002660:	58024400 	.word	0x58024400
 8002664:	eaf6ed7f 	.word	0xeaf6ed7f
 8002668:	02020200 	.word	0x02020200
 800266c:	01ff0000 	.word	0x01ff0000
 8002670:	01010280 	.word	0x01010280
 8002674:	5c001000 	.word	0x5c001000
 8002678:	ffff0000 	.word	0xffff0000
 800267c:	51008108 	.word	0x51008108
 8002680:	52004000 	.word	0x52004000

08002684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002688:	f7ff ff74 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800268e:	490d      	ldr	r1, [pc, #52]	; (80026c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002694:	e002      	b.n	800269c <LoopCopyDataInit>

08002696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269a:	3304      	adds	r3, #4

0800269c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800269c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a0:	d3f9      	bcc.n	8002696 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a8:	e001      	b.n	80026ae <LoopFillZerobss>

080026aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ac:	3204      	adds	r2, #4

080026ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b0:	d3fb      	bcc.n	80026aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026b2:	f00e fb05 	bl	8010cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b6:	f7fe fc91 	bl	8000fdc <main>
  bx  lr
 80026ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026c4:	240000e4 	.word	0x240000e4
  ldr r2, =_sidata
 80026c8:	08010e40 	.word	0x08010e40
  ldr r2, =_sbss
 80026cc:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80026d0:	240007f0 	.word	0x240007f0

080026d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC3_IRQHandler>
	...

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026de:	2003      	movs	r0, #3
 80026e0:	f001 fda2 	bl	8004228 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026e4:	f006 fd86 	bl	80091f4 <HAL_RCC_GetSysClockFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_Init+0x68>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	4913      	ldr	r1, [pc, #76]	; (8002744 <HAL_Init+0x6c>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_Init+0x68>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_Init+0x6c>)
 800270c:	5cd3      	ldrb	r3, [r2, r3]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <HAL_Init+0x70>)
 800271a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800271c:	4a0b      	ldr	r2, [pc, #44]	; (800274c <HAL_Init+0x74>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002722:	200f      	movs	r0, #15
 8002724:	f000 f814 	bl	8002750 <HAL_InitTick>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e002      	b.n	8002738 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002732:	f7ff fa5b 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	58024400 	.word	0x58024400
 8002744:	08010df0 	.word	0x08010df0
 8002748:	24000088 	.word	0x24000088
 800274c:	24000084 	.word	0x24000084

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_InitTick+0x60>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e021      	b.n	80027a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_InitTick+0x64>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_InitTick+0x60>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f001 fd87 	bl	800428e <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002798:	f001 fd51 	bl	800423e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x68>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	24000090 	.word	0x24000090
 80027b4:	24000084 	.word	0x24000084
 80027b8:	2400008c 	.word	0x2400008c

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	24000090 	.word	0x24000090
 80027e0:	240006a4 	.word	0x240006a4

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	240006a4 	.word	0x240006a4

080027fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_SuspendTick+0x1c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_SuspendTick+0x1c>)
 8002806:	f023 0302 	bic.w	r3, r3, #2
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_GetREVID+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0c1b      	lsrs	r3, r3, #16
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	5c001000 	.word	0x5c001000

08002834 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	43db      	mvns	r3, r3
 8002846:	401a      	ands	r2, r3
 8002848:	4904      	ldr	r1, [pc, #16]	; (800285c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	58000400 	.word	0x58000400

08002860 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3360      	adds	r3, #96	; 0x60
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	611a      	str	r2, [r3, #16]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	431a      	orrs	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]
  }
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3330      	adds	r3, #48	; 0x30
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	4413      	add	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	211f      	movs	r1, #31
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 011f 	and.w	r1, r3, #31
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f023 0203 	bic.w	r2, r3, #3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3314      	adds	r3, #20
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	0e5b      	lsrs	r3, r3, #25
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	0d1b      	lsrs	r3, r3, #20
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2107      	movs	r1, #7
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	0d1b      	lsrs	r3, r3, #20
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0318 	and.w	r3, r3, #24
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a90:	40d9      	lsrs	r1, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	400b      	ands	r3, r1
 8002a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	000fffff 	.word	0x000fffff

08002ab4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6093      	str	r3, [r2, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	5fffffc0 	.word	0x5fffffc0

08002af4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	6fffffc0 	.word	0x6fffffc0

08002b44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <LL_ADC_Enable+0x24>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	7fffffc0 	.word	0x7fffffc0

08002b94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <LL_ADC_Disable+0x24>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	f043 0202 	orr.w	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	7fffffc0 	.word	0x7fffffc0

08002bbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <LL_ADC_IsEnabled+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_ADC_IsEnabled+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_IsDisableOngoing+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_IsDisableOngoing+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <LL_ADC_REG_StartConversion+0x24>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	7fffffc0 	.word	0x7fffffc0

08002c30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d101      	bne.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e18f      	b.n	8002fb6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe ffbb 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff19 	bl	8002af4 <LL_ADC_IsDeepPowerDownEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff feff 	bl	8002ad0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff34 	bl	8002b44 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d114      	bne.n	8002d0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff18 	bl	8002b1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b87      	ldr	r3, [pc, #540]	; (8002f0c <HAL_ADC_Init+0x290>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a87      	ldr	r2, [pc, #540]	; (8002f10 <HAL_ADC_Init+0x294>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cfe:	e002      	b.n	8002d06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f9      	bne.n	8002d00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff17 	bl	8002b44 <LL_ADC_IsInternalRegulatorEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff77 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8002d42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8129 	bne.w	8002fa4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8125 	bne.w	8002fa4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff24 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d136      	bne.n	8002de8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_ADC_Init+0x298>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_ADC_Init+0x112>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <HAL_ADC_Init+0x29c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10e      	bne.n	8002dac <HAL_ADC_Init+0x130>
 8002d8e:	4861      	ldr	r0, [pc, #388]	; (8002f14 <HAL_ADC_Init+0x298>)
 8002d90:	f7ff ff14 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d94:	4604      	mov	r4, r0
 8002d96:	4860      	ldr	r0, [pc, #384]	; (8002f18 <HAL_ADC_Init+0x29c>)
 8002d98:	f7ff ff10 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_ADC_Init+0x142>
 8002dac:	485b      	ldr	r0, [pc, #364]	; (8002f1c <HAL_ADC_Init+0x2a0>)
 8002dae:	f7ff ff05 	bl	8002bbc <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a53      	ldr	r2, [pc, #332]	; (8002f14 <HAL_ADC_Init+0x298>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x15a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a51      	ldr	r2, [pc, #324]	; (8002f18 <HAL_ADC_Init+0x29c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Init+0x15e>
 8002dd6:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_ADC_Init+0x2a4>)
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_Init+0x160>
 8002dda:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_ADC_Init+0x2a8>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7ff fd3c 	bl	8002860 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002de8:	f7ff fd18 	bl	800281c <HAL_GetREVID>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f241 0203 	movw	r2, #4099	; 0x1003
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d914      	bls.n	8002e20 <HAL_ADC_Init+0x1a4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d110      	bne.n	8002e20 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7d5b      	ldrb	r3, [r3, #21]
 8002e02:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e08:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7f1b      	ldrb	r3, [r3, #28]
 8002e14:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e16:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e18:	f043 030c 	orr.w	r3, r3, #12
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	e00d      	b.n	8002e3c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7d5b      	ldrb	r3, [r3, #21]
 8002e24:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e2a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e30:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7f1b      	ldrb	r3, [r3, #28]
 8002e36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7f1b      	ldrb	r3, [r3, #28]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	045b      	lsls	r3, r3, #17
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_ADC_Init+0x2ac>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fed2 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8002e8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fedf 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8002e98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d15f      	bne.n	8002f60 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d15c      	bne.n	8002f60 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7d1b      	ldrb	r3, [r3, #20]
 8002eaa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_ADC_Init+0x2b0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	69b9      	ldr	r1, [r7, #24]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d130      	bne.n	8002f34 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_ADC_Init+0x2b4>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	0411      	lsls	r1, r2, #16
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002efa:	430a      	orrs	r2, r1
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	611a      	str	r2, [r3, #16]
 8002f08:	e01c      	b.n	8002f44 <HAL_ADC_Init+0x2c8>
 8002f0a:	bf00      	nop
 8002f0c:	24000084 	.word	0x24000084
 8002f10:	053e2d63 	.word	0x053e2d63
 8002f14:	40022000 	.word	0x40022000
 8002f18:	40022100 	.word	0x40022100
 8002f1c:	58026000 	.word	0x58026000
 8002f20:	40022300 	.word	0x40022300
 8002f24:	58026300 	.word	0x58026300
 8002f28:	fff0c003 	.word	0xfff0c003
 8002f2c:	ffffbffc 	.word	0xffffbffc
 8002f30:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fdec 	bl	8003b38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10c      	bne.n	8002f82 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f023 010f 	bic.w	r1, r3, #15
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	1e5a      	subs	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f80:	e007      	b.n	8002f92 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 020f 	bic.w	r2, r2, #15
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8002fa2:	e007      	b.n	8002fb4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_ADC_Start_DMA+0x168>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_Start_DMA+0x20>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_ADC_Start_DMA+0x16c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_Start_DMA+0x24>
 8002fe0:	4b53      	ldr	r3, [pc, #332]	; (8003130 <HAL_ADC_Start_DMA+0x170>)
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADC_Start_DMA+0x26>
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_ADC_Start_DMA+0x174>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fd64 	bl	8002ab4 <LL_ADC_GetMultimode>
 8002fec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fe1c 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 808c 	bne.w	8003118 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_Start_DMA+0x4e>
 800300a:	2302      	movs	r3, #2
 800300c:	e087      	b.n	800311e <HAL_ADC_Start_DMA+0x15e>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d002      	beq.n	8003028 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b09      	cmp	r3, #9
 8003026:	d170      	bne.n	800310a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fc07 	bl	800383c <ADC_Enable>
 800302e:	4603      	mov	r3, r0
 8003030:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d163      	bne.n	8003100 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800303c:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <HAL_ADC_Start_DMA+0x178>)
 800303e:	4013      	ands	r3, r2
 8003040:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a37      	ldr	r2, [pc, #220]	; (800312c <HAL_ADC_Start_DMA+0x16c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d002      	beq.n	8003058 <HAL_ADC_Start_DMA+0x98>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e000      	b.n	800305a <HAL_ADC_Start_DMA+0x9a>
 8003058:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_ADC_Start_DMA+0x168>)
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	4293      	cmp	r3, r2
 8003060:	d002      	beq.n	8003068 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f023 0206 	bic.w	r2, r3, #6
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	659a      	str	r2, [r3, #88]	; 0x58
 800308c:	e002      	b.n	8003094 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_ADC_Start_DMA+0x17c>)
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a0:	4a27      	ldr	r2, [pc, #156]	; (8003140 <HAL_ADC_Start_DMA+0x180>)
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_ADC_Start_DMA+0x184>)
 80030aa:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	221c      	movs	r2, #28
 80030b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0210 	orr.w	r2, r2, #16
 80030ca:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7ff fc89 	bl	80029ee <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3340      	adds	r3, #64	; 0x40
 80030e6:	4619      	mov	r1, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f001 ff52 	bl	8004f94 <HAL_DMA_Start_IT>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fd85 	bl	8002c08 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030fe:	e00d      	b.n	800311c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003108:	e008      	b.n	800311c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003116:	e001      	b.n	800311c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003118:	2302      	movs	r3, #2
 800311a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800311c:	7dfb      	ldrb	r3, [r7, #23]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40022100 	.word	0x40022100
 8003130:	40022300 	.word	0x40022300
 8003134:	58026300 	.word	0x58026300
 8003138:	fffff0fe 	.word	0xfffff0fe
 800313c:	08003a0f 	.word	0x08003a0f
 8003140:	08003ae7 	.word	0x08003ae7
 8003144:	08003b03 	.word	0x08003b03

08003148 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b0a1      	sub	sp, #132	; 0x84
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_ADC_ConfigChannel+0x1b0>)
 800319e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x2a>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e32e      	b.n	800380c <HAL_ADC_ConfigChannel+0x688>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fd38 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 8313 	bne.w	80037ee <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db2c      	blt.n	800322a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d108      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x6a>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2201      	movs	r2, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	e016      	b.n	800321c <HAL_ADC_ConfigChannel+0x98>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e003      	b.n	8003212 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2201      	movs	r2, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	69d1      	ldr	r1, [r2, #28]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	430b      	orrs	r3, r1
 8003228:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	f7ff fbad 	bl	8002996 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fcf5 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8003246:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fd02 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8003252:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 80b8 	bne.w	80033cc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800325c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80b4 	bne.w	80033cc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	461a      	mov	r2, r3
 8003272:	f7ff fbcf 	bl	8002a14 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_ADC_ConfigChannel+0x1b4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800327e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003282:	d10b      	bne.n	800329c <HAL_ADC_ConfigChannel+0x118>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	e01d      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x154>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x13e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	e00a      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x154>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d02c      	beq.n	800333c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6919      	ldr	r1, [r3, #16]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f0:	f7ff faea 	bl	80028c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6919      	ldr	r1, [r3, #16]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7e5b      	ldrb	r3, [r3, #25]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_ADC_ConfigChannel+0x186>
 8003304:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003308:	e000      	b.n	800330c <HAL_ADC_ConfigChannel+0x188>
 800330a:	2300      	movs	r3, #0
 800330c:	461a      	mov	r2, r3
 800330e:	f7ff fb14 	bl	800293a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7e1b      	ldrb	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x1a4>
 8003322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003326:	e000      	b.n	800332a <HAL_ADC_ConfigChannel+0x1a6>
 8003328:	2300      	movs	r3, #0
 800332a:	461a      	mov	r2, r3
 800332c:	f7ff faec 	bl	8002908 <LL_ADC_SetDataRightShift>
 8003330:	e04c      	b.n	80033cc <HAL_ADC_ConfigChannel+0x248>
 8003332:	bf00      	nop
 8003334:	47ff0000 	.word	0x47ff0000
 8003338:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	069b      	lsls	r3, r3, #26
 800334c:	429a      	cmp	r2, r3
 800334e:	d107      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800335e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003382:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	069b      	lsls	r3, r3, #26
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033a6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	069b      	lsls	r3, r3, #26
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fbf3 	bl	8002bbc <LL_ADC_IsEnabled>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f040 8211 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f7ff fb3e 	bl	8002a6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4aa1      	ldr	r2, [pc, #644]	; (800367c <HAL_ADC_ConfigChannel+0x4f8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	f040 812e 	bne.w	8003658 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x2a0>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	3301      	adds	r3, #1
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2b09      	cmp	r3, #9
 800341a:	bf94      	ite	ls
 800341c:	2301      	movls	r3, #1
 800341e:	2300      	movhi	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e019      	b.n	8003458 <HAL_ADC_ConfigChannel+0x2d4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2b09      	cmp	r3, #9
 8003450:	bf94      	ite	ls
 8003452:	2301      	movls	r3, #1
 8003454:	2300      	movhi	r3, #0
 8003456:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003458:	2b00      	cmp	r3, #0
 800345a:	d079      	beq.n	8003550 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x2f4>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	069b      	lsls	r3, r3, #26
 8003472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003476:	e015      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x320>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800348a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x340>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	e017      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x370>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e003      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	ea42 0103 	orr.w	r1, r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_ADC_ConfigChannel+0x396>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	3301      	adds	r3, #1
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	051b      	lsls	r3, r3, #20
 8003518:	e018      	b.n	800354c <HAL_ADC_ConfigChannel+0x3c8>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e003      	b.n	800353e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354c:	430b      	orrs	r3, r1
 800354e:	e07e      	b.n	800364e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x3e8>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	069b      	lsls	r3, r3, #26
 8003566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356a:	e015      	b.n	8003598 <HAL_ADC_ConfigChannel+0x414>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	069b      	lsls	r3, r3, #26
 8003594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x434>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	3301      	adds	r3, #1
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	e017      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x464>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	61bb      	str	r3, [r7, #24]
  return result;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	ea42 0103 	orr.w	r1, r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x490>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0e9b      	lsrs	r3, r3, #26
 80035fe:	3301      	adds	r3, #1
 8003600:	f003 021f 	and.w	r2, r3, #31
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	3b1e      	subs	r3, #30
 800360c:	051b      	lsls	r3, r3, #20
 800360e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003612:	e01b      	b.n	800364c <HAL_ADC_ConfigChannel+0x4c8>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	60fb      	str	r3, [r7, #12]
  return result;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800362c:	2320      	movs	r3, #32
 800362e:	e003      	b.n	8003638 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	3b1e      	subs	r3, #30
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364c:	430b      	orrs	r3, r1
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6892      	ldr	r2, [r2, #8]
 8003652:	4619      	mov	r1, r3
 8003654:	f7ff f9de 	bl	8002a14 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f280 80cf 	bge.w	8003800 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a06      	ldr	r2, [pc, #24]	; (8003680 <HAL_ADC_ConfigChannel+0x4fc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_ADC_ConfigChannel+0x4f2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_ADC_ConfigChannel+0x500>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10a      	bne.n	800368c <HAL_ADC_ConfigChannel+0x508>
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_ADC_ConfigChannel+0x504>)
 8003678:	e009      	b.n	800368e <HAL_ADC_ConfigChannel+0x50a>
 800367a:	bf00      	nop
 800367c:	47ff0000 	.word	0x47ff0000
 8003680:	40022000 	.word	0x40022000
 8003684:	40022100 	.word	0x40022100
 8003688:	40022300 	.word	0x40022300
 800368c:	4b61      	ldr	r3, [pc, #388]	; (8003814 <HAL_ADC_ConfigChannel+0x690>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f90c 	bl	80028ac <LL_ADC_GetCommonPathInternalCh>
 8003694:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_ADC_ConfigChannel+0x694>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x526>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5d      	ldr	r2, [pc, #372]	; (800381c <HAL_ADC_ConfigChannel+0x698>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10e      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x544>
 80036aa:	485b      	ldr	r0, [pc, #364]	; (8003818 <HAL_ADC_ConfigChannel+0x694>)
 80036ac:	f7ff fa86 	bl	8002bbc <LL_ADC_IsEnabled>
 80036b0:	4604      	mov	r4, r0
 80036b2:	485a      	ldr	r0, [pc, #360]	; (800381c <HAL_ADC_ConfigChannel+0x698>)
 80036b4:	f7ff fa82 	bl	8002bbc <LL_ADC_IsEnabled>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4323      	orrs	r3, r4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e008      	b.n	80036da <HAL_ADC_ConfigChannel+0x556>
 80036c8:	4855      	ldr	r0, [pc, #340]	; (8003820 <HAL_ADC_ConfigChannel+0x69c>)
 80036ca:	f7ff fa77 	bl	8002bbc <LL_ADC_IsEnabled>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d07d      	beq.n	80037da <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_ADC_ConfigChannel+0x6a0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d130      	bne.n	800374a <HAL_ADC_ConfigChannel+0x5c6>
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d12b      	bne.n	800374a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <HAL_ADC_ConfigChannel+0x69c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	f040 8081 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a45      	ldr	r2, [pc, #276]	; (8003818 <HAL_ADC_ConfigChannel+0x694>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_ADC_ConfigChannel+0x58e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a43      	ldr	r2, [pc, #268]	; (800381c <HAL_ADC_ConfigChannel+0x698>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x592>
 8003712:	4a45      	ldr	r2, [pc, #276]	; (8003828 <HAL_ADC_ConfigChannel+0x6a4>)
 8003714:	e000      	b.n	8003718 <HAL_ADC_ConfigChannel+0x594>
 8003716:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <HAL_ADC_ConfigChannel+0x690>)
 8003718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7ff f8b0 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003726:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_ADC_ConfigChannel+0x6a8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	4a40      	ldr	r2, [pc, #256]	; (8003830 <HAL_ADC_ConfigChannel+0x6ac>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	3301      	adds	r3, #1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800373a:	e002      	b.n	8003742 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	3b01      	subs	r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f9      	bne.n	800373c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003748:	e05a      	b.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a39      	ldr	r2, [pc, #228]	; (8003834 <HAL_ADC_ConfigChannel+0x6b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d11e      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x60e>
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d119      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <HAL_ADC_ConfigChannel+0x69c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d14b      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_ADC_ConfigChannel+0x694>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_ADC_ConfigChannel+0x5f8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a29      	ldr	r2, [pc, #164]	; (800381c <HAL_ADC_ConfigChannel+0x698>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x5fc>
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_ADC_ConfigChannel+0x6a4>)
 800377e:	e000      	b.n	8003782 <HAL_ADC_ConfigChannel+0x5fe>
 8003780:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_ADC_ConfigChannel+0x690>)
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7ff f87b 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003790:	e036      	b.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a28      	ldr	r2, [pc, #160]	; (8003838 <HAL_ADC_ConfigChannel+0x6b4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d131      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12c      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_ADC_ConfigChannel+0x69c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d127      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_ADC_ConfigChannel+0x694>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x640>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_ADC_ConfigChannel+0x698>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x644>
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_ADC_ConfigChannel+0x6a4>)
 80037c6:	e000      	b.n	80037ca <HAL_ADC_ConfigChannel+0x646>
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_ADC_ConfigChannel+0x690>)
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7ff f857 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
 80037d8:	e012      	b.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037ec:	e008      	b.n	8003800 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003808:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800380c:	4618      	mov	r0, r3
 800380e:	3784      	adds	r7, #132	; 0x84
 8003810:	46bd      	mov	sp, r7
 8003812:	bd90      	pop	{r4, r7, pc}
 8003814:	58026300 	.word	0x58026300
 8003818:	40022000 	.word	0x40022000
 800381c:	40022100 	.word	0x40022100
 8003820:	58026000 	.word	0x58026000
 8003824:	cb840000 	.word	0xcb840000
 8003828:	40022300 	.word	0x40022300
 800382c:	24000084 	.word	0x24000084
 8003830:	053e2d63 	.word	0x053e2d63
 8003834:	c7520000 	.word	0xc7520000
 8003838:	cfb80000 	.word	0xcfb80000

0800383c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f9b7 	bl	8002bbc <LL_ADC_IsEnabled>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d16e      	bne.n	8003932 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <ADC_Enable+0x100>)
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e05a      	b.n	8003934 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f972 	bl	8002b6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003888:	f7fe ffac 	bl	80027e4 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <ADC_Enable+0x104>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <ADC_Enable+0x66>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a29      	ldr	r2, [pc, #164]	; (8003944 <ADC_Enable+0x108>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <ADC_Enable+0x6a>
 80038a2:	4b29      	ldr	r3, [pc, #164]	; (8003948 <ADC_Enable+0x10c>)
 80038a4:	e000      	b.n	80038a8 <ADC_Enable+0x6c>
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <ADC_Enable+0x110>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f903 	bl	8002ab4 <LL_ADC_GetMultimode>
 80038ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <ADC_Enable+0x108>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d002      	beq.n	80038c0 <ADC_Enable+0x84>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e000      	b.n	80038c2 <ADC_Enable+0x86>
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <ADC_Enable+0x104>)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02c      	beq.n	8003924 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d130      	bne.n	8003932 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d0:	e028      	b.n	8003924 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f970 	bl	8002bbc <LL_ADC_IsEnabled>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d104      	bne.n	80038ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f940 	bl	8002b6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ec:	f7fe ff7a 	bl	80027e4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d914      	bls.n	8003924 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d00d      	beq.n	8003924 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0210 	orr.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e007      	b.n	8003934 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d1cf      	bne.n	80038d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	8000003f 	.word	0x8000003f
 8003940:	40022000 	.word	0x40022000
 8003944:	40022100 	.word	0x40022100
 8003948:	40022300 	.word	0x40022300
 800394c:	58026300 	.word	0x58026300

08003950 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f940 	bl	8002be2 <LL_ADC_IsDisableOngoing>
 8003962:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f927 	bl	8002bbc <LL_ADC_IsEnabled>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d047      	beq.n	8003a04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d144      	bne.n	8003a04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030d 	and.w	r3, r3, #13
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10c      	bne.n	80039a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff f901 	bl	8002b94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2203      	movs	r2, #3
 8003998:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800399a:	f7fe ff23 	bl	80027e4 <HAL_GetTick>
 800399e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a0:	e029      	b.n	80039f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e023      	b.n	8003a06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039be:	f7fe ff11 	bl	80027e4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d914      	bls.n	80039f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e007      	b.n	8003a06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1dc      	bne.n	80039be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d14b      	bne.n	8003ac0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d021      	beq.n	8003a86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff92 	bl	8002970 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d032      	beq.n	8003ab8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d12b      	bne.n	8003ab8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11f      	bne.n	8003ab8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
 8003a84:	e018      	b.n	8003ab8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff fb45 	bl	8003148 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003abe:	e00e      	b.n	8003ade <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff fb4f 	bl	8003170 <HAL_ADC_ErrorCallback>
}
 8003ad2:	e004      	b.n	8003ade <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fb31 	bl	800315c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff fb21 	bl	8003170 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7a      	ldr	r2, [pc, #488]	; (8003d30 <ADC_ConfigureBoostMode+0x1f8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <ADC_ConfigureBoostMode+0x1c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a79      	ldr	r2, [pc, #484]	; (8003d34 <ADC_ConfigureBoostMode+0x1fc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d109      	bne.n	8003b68 <ADC_ConfigureBoostMode+0x30>
 8003b54:	4b78      	ldr	r3, [pc, #480]	; (8003d38 <ADC_ConfigureBoostMode+0x200>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e008      	b.n	8003b7a <ADC_ConfigureBoostMode+0x42>
 8003b68:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <ADC_ConfigureBoostMode+0x204>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b7e:	f005 fcb3 	bl	80094e8 <HAL_RCC_GetHCLKFreq>
 8003b82:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b8c:	d010      	beq.n	8003bb0 <ADC_ConfigureBoostMode+0x78>
 8003b8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b92:	d873      	bhi.n	8003c7c <ADC_ConfigureBoostMode+0x144>
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d002      	beq.n	8003ba0 <ADC_ConfigureBoostMode+0x68>
 8003b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b9e:	d16d      	bne.n	8003c7c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	60fb      	str	r3, [r7, #12]
        break;
 8003bae:	e068      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	60fb      	str	r3, [r7, #12]
        break;
 8003bb6:	e064      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bb8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bbc:	f04f 0100 	mov.w	r1, #0
 8003bc0:	f006 fef8 	bl	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bce:	d051      	beq.n	8003c74 <ADC_ConfigureBoostMode+0x13c>
 8003bd0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bd4:	d854      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003bd6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003bda:	d047      	beq.n	8003c6c <ADC_ConfigureBoostMode+0x134>
 8003bdc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003be0:	d84e      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003be2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003be6:	d03d      	beq.n	8003c64 <ADC_ConfigureBoostMode+0x12c>
 8003be8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003bec:	d848      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf2:	d033      	beq.n	8003c5c <ADC_ConfigureBoostMode+0x124>
 8003bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf8:	d842      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003bfa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003bfe:	d029      	beq.n	8003c54 <ADC_ConfigureBoostMode+0x11c>
 8003c00:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c04:	d83c      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003c06:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c0a:	d01a      	beq.n	8003c42 <ADC_ConfigureBoostMode+0x10a>
 8003c0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c10:	d836      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003c12:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c16:	d014      	beq.n	8003c42 <ADC_ConfigureBoostMode+0x10a>
 8003c18:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c1c:	d830      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d00e      	beq.n	8003c42 <ADC_ConfigureBoostMode+0x10a>
 8003c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c28:	d82a      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003c2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c2e:	d008      	beq.n	8003c42 <ADC_ConfigureBoostMode+0x10a>
 8003c30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c34:	d824      	bhi.n	8003c80 <ADC_ConfigureBoostMode+0x148>
 8003c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c3a:	d002      	beq.n	8003c42 <ADC_ConfigureBoostMode+0x10a>
 8003c3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c40:	d11e      	bne.n	8003c80 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	0c9b      	lsrs	r3, r3, #18
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	60fb      	str	r3, [r7, #12]
        break;
 8003c52:	e016      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
        break;
 8003c5a:	e012      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	60fb      	str	r3, [r7, #12]
        break;
 8003c62:	e00e      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	60fb      	str	r3, [r7, #12]
        break;
 8003c6a:	e00a      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	09db      	lsrs	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
        break;
 8003c72:	e006      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	60fb      	str	r3, [r7, #12]
        break;
 8003c7a:	e002      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c80:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c82:	f7fe fdcb 	bl	800281c <HAL_GetREVID>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d815      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <ADC_ConfigureBoostMode+0x208>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d908      	bls.n	8003caa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ca8:	e03e      	b.n	8003d28 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb8:	609a      	str	r2, [r3, #8]
}
 8003cba:	e035      	b.n	8003d28 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <ADC_ConfigureBoostMode+0x20c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d808      	bhi.n	8003cdc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003cd8:	609a      	str	r2, [r3, #8]
}
 8003cda:	e025      	b.n	8003d28 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <ADC_ConfigureBoostMode+0x210>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d80a      	bhi.n	8003cfa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	e016      	b.n	8003d28 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <ADC_ConfigureBoostMode+0x214>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d80a      	bhi.n	8003d18 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	e007      	b.n	8003d28 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40022000 	.word	0x40022000
 8003d34:	40022100 	.word	0x40022100
 8003d38:	40022300 	.word	0x40022300
 8003d3c:	58026300 	.word	0x58026300
 8003d40:	01312d00 	.word	0x01312d00
 8003d44:	005f5e10 	.word	0x005f5e10
 8003d48:	00bebc20 	.word	0x00bebc20
 8003d4c:	017d7840 	.word	0x017d7840

08003d50 <LL_ADC_IsEnabled>:
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <LL_ADC_IsEnabled+0x18>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <LL_ADC_IsEnabled+0x1a>
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <LL_ADC_StartCalibration>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <LL_ADC_StartCalibration+0x38>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	3ffeffc0 	.word	0x3ffeffc0

08003db4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc8:	d101      	bne.n	8003dce <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_REG_IsConversionOngoing>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d101      	bne.n	8003df4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADCEx_Calibration_Start+0x1e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e04c      	b.n	8003ebc <HAL_ADCEx_Calibration_Start+0xb8>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fd90 	bl	8003950 <ADC_Disable>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d135      	bne.n	8003ea6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	f043 0202 	orr.w	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff90 	bl	8003d78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e58:	e014      	b.n	8003e84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d30d      	bcc.n	8003e84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	f023 0312 	bic.w	r3, r3, #18
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e01b      	b.n	8003ebc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff93 	bl	8003db4 <LL_ADC_IsCalibrationOnGoing>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e2      	bne.n	8003e5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f023 0303 	bic.w	r3, r3, #3
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8003ea4:	e005      	b.n	8003eb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0210 	orr.w	r2, r3, #16
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	ffffeefd 	.word	0xffffeefd
 8003ec8:	25c3f800 	.word	0x25c3f800

08003ecc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b09f      	sub	sp, #124	; 0x7c
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0be      	b.n	8004068 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5c      	ldr	r2, [pc, #368]	; (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d102      	bne.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f04:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	e001      	b.n	8003f0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e09d      	b.n	8004068 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff54 	bl	8003ddc <LL_ADC_REG_IsConversionOngoing>
 8003f34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff4e 	bl	8003ddc <LL_ADC_REG_IsConversionOngoing>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d17f      	bne.n	8004046 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d17c      	bne.n	8004046 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f60:	4b45      	ldr	r3, [pc, #276]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f62:	e000      	b.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f64:	4b45      	ldr	r3, [pc, #276]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f66:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d039      	beq.n	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a3a      	ldr	r2, [pc, #232]	; (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a38      	ldr	r2, [pc, #224]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10e      	bne.n	8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f96:	4836      	ldr	r0, [pc, #216]	; (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f98:	f7ff feda 	bl	8003d50 <LL_ADC_IsEnabled>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	4835      	ldr	r0, [pc, #212]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fa0:	f7ff fed6 	bl	8003d50 <LL_ADC_IsEnabled>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4323      	orrs	r3, r4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e008      	b.n	8003fc6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003fb4:	4832      	ldr	r0, [pc, #200]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003fb6:	f7ff fecb 	bl	8003d50 <LL_ADC_IsEnabled>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d047      	beq.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	6811      	ldr	r1, [r2, #0]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	6892      	ldr	r2, [r2, #8]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fe2:	e03a      	b.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10e      	bne.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004004:	481a      	ldr	r0, [pc, #104]	; (8004070 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004006:	f7ff fea3 	bl	8003d50 <LL_ADC_IsEnabled>
 800400a:	4604      	mov	r4, r0
 800400c:	4819      	ldr	r0, [pc, #100]	; (8004074 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800400e:	f7ff fe9f 	bl	8003d50 <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	4323      	orrs	r3, r4
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e008      	b.n	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004022:	4817      	ldr	r0, [pc, #92]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004024:	f7ff fe94 	bl	8003d50 <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800403e:	4013      	ands	r3, r2
 8004040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004042:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004044:	e009      	b.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004058:	e000      	b.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800405a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004064:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004068:	4618      	mov	r0, r3
 800406a:	377c      	adds	r7, #124	; 0x7c
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}
 8004070:	40022000 	.word	0x40022000
 8004074:	40022100 	.word	0x40022100
 8004078:	40022300 	.word	0x40022300
 800407c:	58026300 	.word	0x58026300
 8004080:	58026000 	.word	0x58026000
 8004084:	fffff0e0 	.word	0xfffff0e0

08004088 <__NVIC_SetPriorityGrouping>:
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <__NVIC_SetPriorityGrouping+0x40>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a4:	4013      	ands	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <__NVIC_SetPriorityGrouping+0x44>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040b6:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <__NVIC_SetPriorityGrouping+0x40>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	60d3      	str	r3, [r2, #12]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	e000ed00 	.word	0xe000ed00
 80040cc:	05fa0000 	.word	0x05fa0000

080040d0 <__NVIC_GetPriorityGrouping>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <__NVIC_GetPriorityGrouping+0x18>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	f003 0307 	and.w	r3, r3, #7
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_EnableIRQ>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	db0b      	blt.n	8004116 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4907      	ldr	r1, [pc, #28]	; (8004124 <__NVIC_EnableIRQ+0x38>)
 8004106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2001      	movs	r0, #1
 800410e:	fa00 f202 	lsl.w	r2, r0, r2
 8004112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	e000e100 	.word	0xe000e100

08004128 <__NVIC_SetPriority>:
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db0a      	blt.n	8004152 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	490c      	ldr	r1, [pc, #48]	; (8004174 <__NVIC_SetPriority+0x4c>)
 8004142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	440b      	add	r3, r1
 800414c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004150:	e00a      	b.n	8004168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4908      	ldr	r1, [pc, #32]	; (8004178 <__NVIC_SetPriority+0x50>)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3b04      	subs	r3, #4
 8004160:	0112      	lsls	r2, r2, #4
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	440b      	add	r3, r1
 8004166:	761a      	strb	r2, [r3, #24]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000e100 	.word	0xe000e100
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <NVIC_EncodePriority>:
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	bf28      	it	cs
 800419a:	2304      	movcs	r3, #4
 800419c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d902      	bls.n	80041ac <NVIC_EncodePriority+0x30>
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3b03      	subs	r3, #3
 80041aa:	e000      	b.n	80041ae <NVIC_EncodePriority+0x32>
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	43d9      	mvns	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	4313      	orrs	r3, r2
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f4:	d301      	bcc.n	80041fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00f      	b.n	800421a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <SysTick_Config+0x40>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3b01      	subs	r3, #1
 8004200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004202:	210f      	movs	r1, #15
 8004204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004208:	f7ff ff8e 	bl	8004128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SysTick_Config+0x40>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <SysTick_Config+0x40>)
 8004214:	2207      	movs	r2, #7
 8004216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000e010 	.word	0xe000e010

08004228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff29 	bl	8004088 <__NVIC_SetPriorityGrouping>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800424c:	f7ff ff40 	bl	80040d0 <__NVIC_GetPriorityGrouping>
 8004250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	6978      	ldr	r0, [r7, #20]
 8004258:	f7ff ff90 	bl	800417c <NVIC_EncodePriority>
 800425c:	4602      	mov	r2, r0
 800425e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff5f 	bl	8004128 <__NVIC_SetPriority>
}
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	4603      	mov	r3, r0
 800427a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800427c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff33 	bl	80040ec <__NVIC_EnableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ffa4 	bl	80041e4 <SysTick_Config>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e014      	b.n	80042e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	791b      	ldrb	r3, [r3, #4]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fd fdc3 	bl	8001e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0a2      	b.n	800444a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	795b      	ldrb	r3, [r3, #5]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_DAC_Start_DMA+0x24>
 800430c:	2302      	movs	r3, #2
 800430e:	e09c      	b.n	800444a <HAL_DAC_Start_DMA+0x15e>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2202      	movs	r2, #2
 800431a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d129      	bne.n	8004376 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4a4b      	ldr	r2, [pc, #300]	; (8004454 <HAL_DAC_Start_DMA+0x168>)
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	4a4a      	ldr	r2, [pc, #296]	; (8004458 <HAL_DAC_Start_DMA+0x16c>)
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4a49      	ldr	r2, [pc, #292]	; (800445c <HAL_DAC_Start_DMA+0x170>)
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004348:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_DAC_Start_DMA+0x6c>
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d005      	beq.n	8004362 <HAL_DAC_Start_DMA+0x76>
 8004356:	e009      	b.n	800436c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	613b      	str	r3, [r7, #16]
        break;
 8004360:	e033      	b.n	80043ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	613b      	str	r3, [r7, #16]
        break;
 800436a:	e02e      	b.n	80043ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3310      	adds	r3, #16
 8004372:	613b      	str	r3, [r7, #16]
        break;
 8004374:	e029      	b.n	80043ca <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_DAC_Start_DMA+0x174>)
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a38      	ldr	r2, [pc, #224]	; (8004464 <HAL_DAC_Start_DMA+0x178>)
 8004384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4a37      	ldr	r2, [pc, #220]	; (8004468 <HAL_DAC_Start_DMA+0x17c>)
 800438c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800439c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_DAC_Start_DMA+0xc0>
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d005      	beq.n	80043b6 <HAL_DAC_Start_DMA+0xca>
 80043aa:	e009      	b.n	80043c0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	613b      	str	r3, [r7, #16]
        break;
 80043b4:	e009      	b.n	80043ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3318      	adds	r3, #24
 80043bc:	613b      	str	r3, [r7, #16]
        break;
 80043be:	e004      	b.n	80043ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	331c      	adds	r3, #28
 80043c6:	613b      	str	r3, [r7, #16]
        break;
 80043c8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d111      	bne.n	80043f4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6898      	ldr	r0, [r3, #8]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	f000 fdd3 	bl	8004f94 <HAL_DMA_Start_IT>
 80043ee:	4603      	mov	r3, r0
 80043f0:	75fb      	strb	r3, [r7, #23]
 80043f2:	e010      	b.n	8004416 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004402:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68d8      	ldr	r0, [r3, #12]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	f000 fdc1 	bl	8004f94 <HAL_DMA_Start_IT>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6819      	ldr	r1, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2201      	movs	r2, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e005      	b.n	8004448 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f043 0204 	orr.w	r2, r3, #4
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	080047c9 	.word	0x080047c9
 8004458:	080047eb 	.word	0x080047eb
 800445c:	08004807 	.word	0x08004807
 8004460:	08004871 	.word	0x08004871
 8004464:	08004893 	.word	0x08004893
 8004468:	080048af 	.word	0x080048af

0800446c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e03e      	b.n	80044fe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43da      	mvns	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	400a      	ands	r2, r1
 800449c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2201      	movs	r2, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43da      	mvns	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	400a      	ands	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10d      	bne.n	80044dc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ffcf 	bl	8005468 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e00c      	b.n	80044f6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 ffc1 	bl	8005468 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80044f4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_DAC_ConfigChannel+0x1e>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e12a      	b.n	80047bc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	795b      	ldrb	r3, [r3, #5]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_DAC_ConfigChannel+0x2e>
 800456e:	2302      	movs	r3, #2
 8004570:	e124      	b.n	80047bc <HAL_DAC_ConfigChannel+0x278>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d17a      	bne.n	800467c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004586:	f7fe f92d 	bl	80027e4 <HAL_GetTick>
 800458a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d13d      	bne.n	800460e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004592:	e018      	b.n	80045c6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004594:	f7fe f926 	bl	80027e4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d911      	bls.n	80045c6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a8:	4b86      	ldr	r3, [pc, #536]	; (80047c4 <HAL_DAC_ConfigChannel+0x280>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f043 0208 	orr.w	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2203      	movs	r2, #3
 80045c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0fa      	b.n	80047bc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045cc:	4b7d      	ldr	r3, [pc, #500]	; (80047c4 <HAL_DAC_ConfigChannel+0x280>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1df      	bne.n	8004594 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	6992      	ldr	r2, [r2, #24]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
 80045de:	e020      	b.n	8004622 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045e0:	f7fe f900 	bl	80027e4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d90f      	bls.n	800460e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0a      	bge.n	800460e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f043 0208 	orr.w	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2203      	movs	r2, #3
 8004608:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0d6      	b.n	80047bc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	2b00      	cmp	r3, #0
 8004616:	dbe3      	blt.n	80045e0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	6992      	ldr	r2, [r2, #24]
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	ea02 0103 	and.w	r1, r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	21ff      	movs	r1, #255	; 0xff
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	ea02 0103 	and.w	r1, r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11d      	bne.n	80046c0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	221f      	movs	r2, #31
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2207      	movs	r2, #7
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
 80046e8:	e00f      	b.n	800470a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d102      	bne.n	80046f8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80046f2:	2301      	movs	r3, #1
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	e008      	b.n	800470a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004700:	2301      	movs	r3, #1
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
 8004704:	e001      	b.n	800470a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43da      	mvns	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	400a      	ands	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	22c0      	movs	r2, #192	; 0xc0
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	400a      	ands	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80047b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3728      	adds	r7, #40	; 0x28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20008000 	.word	0x20008000

080047c8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff fe95 	bl	8004506 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	711a      	strb	r2, [r3, #4]
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff fe8e 	bl	800451a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff fe84 	bl	800452e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	711a      	strb	r2, [r3, #4]
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff ffd8 	bl	8004834 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	711a      	strb	r2, [r3, #4]
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ffd1 	bl	8004848 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f043 0204 	orr.w	r2, r3, #4
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff ffc7 	bl	800485c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	711a      	strb	r2, [r3, #4]
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7fd ff7e 	bl	80027e4 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e316      	b.n	8004f22 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a66      	ldr	r2, [pc, #408]	; (8004a94 <HAL_DMA_Init+0x1b8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d04a      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a65      	ldr	r2, [pc, #404]	; (8004a98 <HAL_DMA_Init+0x1bc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d045      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a63      	ldr	r2, [pc, #396]	; (8004a9c <HAL_DMA_Init+0x1c0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d040      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a62      	ldr	r2, [pc, #392]	; (8004aa0 <HAL_DMA_Init+0x1c4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d03b      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a60      	ldr	r2, [pc, #384]	; (8004aa4 <HAL_DMA_Init+0x1c8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d036      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a5f      	ldr	r2, [pc, #380]	; (8004aa8 <HAL_DMA_Init+0x1cc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d031      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a5d      	ldr	r2, [pc, #372]	; (8004aac <HAL_DMA_Init+0x1d0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d02c      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5c      	ldr	r2, [pc, #368]	; (8004ab0 <HAL_DMA_Init+0x1d4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d027      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5a      	ldr	r2, [pc, #360]	; (8004ab4 <HAL_DMA_Init+0x1d8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d022      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a59      	ldr	r2, [pc, #356]	; (8004ab8 <HAL_DMA_Init+0x1dc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d01d      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a57      	ldr	r2, [pc, #348]	; (8004abc <HAL_DMA_Init+0x1e0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d018      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a56      	ldr	r2, [pc, #344]	; (8004ac0 <HAL_DMA_Init+0x1e4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a54      	ldr	r2, [pc, #336]	; (8004ac4 <HAL_DMA_Init+0x1e8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00e      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a53      	ldr	r2, [pc, #332]	; (8004ac8 <HAL_DMA_Init+0x1ec>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a51      	ldr	r2, [pc, #324]	; (8004acc <HAL_DMA_Init+0x1f0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_DMA_Init+0xb8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a50      	ldr	r2, [pc, #320]	; (8004ad0 <HAL_DMA_Init+0x1f4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_DMA_Init+0xbc>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_DMA_Init+0xbe>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 813b 	beq.w	8004c16 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a37      	ldr	r2, [pc, #220]	; (8004a94 <HAL_DMA_Init+0x1b8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a36      	ldr	r2, [pc, #216]	; (8004a98 <HAL_DMA_Init+0x1bc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d045      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a34      	ldr	r2, [pc, #208]	; (8004a9c <HAL_DMA_Init+0x1c0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d040      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <HAL_DMA_Init+0x1c4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03b      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a31      	ldr	r2, [pc, #196]	; (8004aa4 <HAL_DMA_Init+0x1c8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d036      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a30      	ldr	r2, [pc, #192]	; (8004aa8 <HAL_DMA_Init+0x1cc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d031      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2e      	ldr	r2, [pc, #184]	; (8004aac <HAL_DMA_Init+0x1d0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02c      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2d      	ldr	r2, [pc, #180]	; (8004ab0 <HAL_DMA_Init+0x1d4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d027      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <HAL_DMA_Init+0x1d8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_DMA_Init+0x1dc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01d      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a28      	ldr	r2, [pc, #160]	; (8004abc <HAL_DMA_Init+0x1e0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <HAL_DMA_Init+0x1e4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <HAL_DMA_Init+0x1e8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <HAL_DMA_Init+0x1ec>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a22      	ldr	r2, [pc, #136]	; (8004acc <HAL_DMA_Init+0x1f0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_Init+0x174>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <HAL_DMA_Init+0x1f4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <HAL_DMA_Init+0x186>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e007      	b.n	8004a72 <HAL_DMA_Init+0x196>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a72:	e02f      	b.n	8004ad4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a74:	f7fd feb6 	bl	80027e4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d928      	bls.n	8004ad4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e246      	b.n	8004f22 <HAL_DMA_Init+0x646>
 8004a94:	40020010 	.word	0x40020010
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020040 	.word	0x40020040
 8004aa0:	40020058 	.word	0x40020058
 8004aa4:	40020070 	.word	0x40020070
 8004aa8:	40020088 	.word	0x40020088
 8004aac:	400200a0 	.word	0x400200a0
 8004ab0:	400200b8 	.word	0x400200b8
 8004ab4:	40020410 	.word	0x40020410
 8004ab8:	40020428 	.word	0x40020428
 8004abc:	40020440 	.word	0x40020440
 8004ac0:	40020458 	.word	0x40020458
 8004ac4:	40020470 	.word	0x40020470
 8004ac8:	40020488 	.word	0x40020488
 8004acc:	400204a0 	.word	0x400204a0
 8004ad0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1c8      	bne.n	8004a74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4b83      	ldr	r3, [pc, #524]	; (8004cfc <HAL_DMA_Init+0x420>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004afa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d107      	bne.n	8004b38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	4313      	orrs	r3, r2
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b38:	4b71      	ldr	r3, [pc, #452]	; (8004d00 <HAL_DMA_Init+0x424>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b71      	ldr	r3, [pc, #452]	; (8004d04 <HAL_DMA_Init+0x428>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b44:	d328      	bcc.n	8004b98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b28      	cmp	r3, #40	; 0x28
 8004b4c:	d903      	bls.n	8004b56 <HAL_DMA_Init+0x27a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b2e      	cmp	r3, #46	; 0x2e
 8004b54:	d917      	bls.n	8004b86 <HAL_DMA_Init+0x2aa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b5c:	d903      	bls.n	8004b66 <HAL_DMA_Init+0x28a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b42      	cmp	r3, #66	; 0x42
 8004b64:	d90f      	bls.n	8004b86 <HAL_DMA_Init+0x2aa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b46      	cmp	r3, #70	; 0x46
 8004b6c:	d903      	bls.n	8004b76 <HAL_DMA_Init+0x29a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b48      	cmp	r3, #72	; 0x48
 8004b74:	d907      	bls.n	8004b86 <HAL_DMA_Init+0x2aa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b7c:	d905      	bls.n	8004b8a <HAL_DMA_Init+0x2ae>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b52      	cmp	r3, #82	; 0x52
 8004b84:	d801      	bhi.n	8004b8a <HAL_DMA_Init+0x2ae>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_DMA_Init+0x2b0>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d117      	bne.n	8004bf2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f002 fb33 	bl	8007240 <DMA_CheckFifoParam>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2240      	movs	r2, #64	; 0x40
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e197      	b.n	8004f22 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f002 fa6e 	bl	80070dc <DMA_CalcBaseAndBitshift>
 8004c00:	4603      	mov	r3, r0
 8004c02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	223f      	movs	r2, #63	; 0x3f
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	e0cd      	b.n	8004db2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3b      	ldr	r2, [pc, #236]	; (8004d08 <HAL_DMA_Init+0x42c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d022      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a39      	ldr	r2, [pc, #228]	; (8004d0c <HAL_DMA_Init+0x430>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01d      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a38      	ldr	r2, [pc, #224]	; (8004d10 <HAL_DMA_Init+0x434>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d018      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a36      	ldr	r2, [pc, #216]	; (8004d14 <HAL_DMA_Init+0x438>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a35      	ldr	r2, [pc, #212]	; (8004d18 <HAL_DMA_Init+0x43c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <HAL_DMA_Init+0x440>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a32      	ldr	r2, [pc, #200]	; (8004d20 <HAL_DMA_Init+0x444>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_DMA_Init+0x38a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a30      	ldr	r2, [pc, #192]	; (8004d24 <HAL_DMA_Init+0x448>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_DMA_Init+0x38e>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_DMA_Init+0x390>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8097 	beq.w	8004da0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <HAL_DMA_Init+0x42c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d021      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <HAL_DMA_Init+0x430>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01c      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <HAL_DMA_Init+0x434>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d017      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_DMA_Init+0x438>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d012      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_DMA_Init+0x43c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_DMA_Init+0x440>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d008      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_DMA_Init+0x444>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <HAL_DMA_Init+0x3e4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_DMA_Init+0x448>)
 8004cbe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <HAL_DMA_Init+0x44c>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d021      	beq.n	8004d2c <HAL_DMA_Init+0x450>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d102      	bne.n	8004cf6 <HAL_DMA_Init+0x41a>
 8004cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cf4:	e01b      	b.n	8004d2e <HAL_DMA_Init+0x452>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e019      	b.n	8004d2e <HAL_DMA_Init+0x452>
 8004cfa:	bf00      	nop
 8004cfc:	fe10803f 	.word	0xfe10803f
 8004d00:	5c001000 	.word	0x5c001000
 8004d04:	ffff0000 	.word	0xffff0000
 8004d08:	58025408 	.word	0x58025408
 8004d0c:	5802541c 	.word	0x5802541c
 8004d10:	58025430 	.word	0x58025430
 8004d14:	58025444 	.word	0x58025444
 8004d18:	58025458 	.word	0x58025458
 8004d1c:	5802546c 	.word	0x5802546c
 8004d20:	58025480 	.word	0x58025480
 8004d24:	58025494 	.word	0x58025494
 8004d28:	fffe000f 	.word	0xfffe000f
 8004d2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <HAL_DMA_Init+0x650>)
 8004d74:	4413      	add	r3, r2
 8004d76:	4a6e      	ldr	r2, [pc, #440]	; (8004f30 <HAL_DMA_Init+0x654>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	009a      	lsls	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 f9a9 	bl	80070dc <DMA_CalcBaseAndBitshift>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2201      	movs	r2, #1
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	e008      	b.n	8004db2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2203      	movs	r2, #3
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0b7      	b.n	8004f22 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a5f      	ldr	r2, [pc, #380]	; (8004f34 <HAL_DMA_Init+0x658>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d072      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5d      	ldr	r2, [pc, #372]	; (8004f38 <HAL_DMA_Init+0x65c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d06d      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5c      	ldr	r2, [pc, #368]	; (8004f3c <HAL_DMA_Init+0x660>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d068      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5a      	ldr	r2, [pc, #360]	; (8004f40 <HAL_DMA_Init+0x664>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d063      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a59      	ldr	r2, [pc, #356]	; (8004f44 <HAL_DMA_Init+0x668>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d05e      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a57      	ldr	r2, [pc, #348]	; (8004f48 <HAL_DMA_Init+0x66c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d059      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a56      	ldr	r2, [pc, #344]	; (8004f4c <HAL_DMA_Init+0x670>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d054      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a54      	ldr	r2, [pc, #336]	; (8004f50 <HAL_DMA_Init+0x674>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d04f      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a53      	ldr	r2, [pc, #332]	; (8004f54 <HAL_DMA_Init+0x678>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d04a      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a51      	ldr	r2, [pc, #324]	; (8004f58 <HAL_DMA_Init+0x67c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d045      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a50      	ldr	r2, [pc, #320]	; (8004f5c <HAL_DMA_Init+0x680>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d040      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a4e      	ldr	r2, [pc, #312]	; (8004f60 <HAL_DMA_Init+0x684>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d03b      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a4d      	ldr	r2, [pc, #308]	; (8004f64 <HAL_DMA_Init+0x688>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d036      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a4b      	ldr	r2, [pc, #300]	; (8004f68 <HAL_DMA_Init+0x68c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d031      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4a      	ldr	r2, [pc, #296]	; (8004f6c <HAL_DMA_Init+0x690>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d02c      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a48      	ldr	r2, [pc, #288]	; (8004f70 <HAL_DMA_Init+0x694>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d027      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a47      	ldr	r2, [pc, #284]	; (8004f74 <HAL_DMA_Init+0x698>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d022      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a45      	ldr	r2, [pc, #276]	; (8004f78 <HAL_DMA_Init+0x69c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01d      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a44      	ldr	r2, [pc, #272]	; (8004f7c <HAL_DMA_Init+0x6a0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d018      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <HAL_DMA_Init+0x6a4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a41      	ldr	r2, [pc, #260]	; (8004f84 <HAL_DMA_Init+0x6a8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_DMA_Init+0x6ac>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3e      	ldr	r2, [pc, #248]	; (8004f8c <HAL_DMA_Init+0x6b0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_DMA_Init+0x5c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <HAL_DMA_Init+0x6b4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_DMA_Init+0x5ca>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_DMA_Init+0x5cc>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d032      	beq.n	8004f12 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f002 fa43 	bl	8007338 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d102      	bne.n	8004ec0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ed4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_DMA_Init+0x624>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d80c      	bhi.n	8004f00 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f002 fac0 	bl	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e008      	b.n	8004f12 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	a7fdabf8 	.word	0xa7fdabf8
 8004f30:	cccccccd 	.word	0xcccccccd
 8004f34:	40020010 	.word	0x40020010
 8004f38:	40020028 	.word	0x40020028
 8004f3c:	40020040 	.word	0x40020040
 8004f40:	40020058 	.word	0x40020058
 8004f44:	40020070 	.word	0x40020070
 8004f48:	40020088 	.word	0x40020088
 8004f4c:	400200a0 	.word	0x400200a0
 8004f50:	400200b8 	.word	0x400200b8
 8004f54:	40020410 	.word	0x40020410
 8004f58:	40020428 	.word	0x40020428
 8004f5c:	40020440 	.word	0x40020440
 8004f60:	40020458 	.word	0x40020458
 8004f64:	40020470 	.word	0x40020470
 8004f68:	40020488 	.word	0x40020488
 8004f6c:	400204a0 	.word	0x400204a0
 8004f70:	400204b8 	.word	0x400204b8
 8004f74:	58025408 	.word	0x58025408
 8004f78:	5802541c 	.word	0x5802541c
 8004f7c:	58025430 	.word	0x58025430
 8004f80:	58025444 	.word	0x58025444
 8004f84:	58025458 	.word	0x58025458
 8004f88:	5802546c 	.word	0x5802546c
 8004f8c:	58025480 	.word	0x58025480
 8004f90:	58025494 	.word	0x58025494

08004f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e226      	b.n	80053fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_Start_IT+0x2a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e21f      	b.n	80053fe <HAL_DMA_Start_IT+0x46a>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	f040 820a 	bne.w	80053e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a68      	ldr	r2, [pc, #416]	; (8005188 <HAL_DMA_Start_IT+0x1f4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d04a      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a66      	ldr	r2, [pc, #408]	; (800518c <HAL_DMA_Start_IT+0x1f8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d045      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a65      	ldr	r2, [pc, #404]	; (8005190 <HAL_DMA_Start_IT+0x1fc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d040      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a63      	ldr	r2, [pc, #396]	; (8005194 <HAL_DMA_Start_IT+0x200>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d03b      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a62      	ldr	r2, [pc, #392]	; (8005198 <HAL_DMA_Start_IT+0x204>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d036      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a60      	ldr	r2, [pc, #384]	; (800519c <HAL_DMA_Start_IT+0x208>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d031      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a5f      	ldr	r2, [pc, #380]	; (80051a0 <HAL_DMA_Start_IT+0x20c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d02c      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5d      	ldr	r2, [pc, #372]	; (80051a4 <HAL_DMA_Start_IT+0x210>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d027      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5c      	ldr	r2, [pc, #368]	; (80051a8 <HAL_DMA_Start_IT+0x214>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a5a      	ldr	r2, [pc, #360]	; (80051ac <HAL_DMA_Start_IT+0x218>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a59      	ldr	r2, [pc, #356]	; (80051b0 <HAL_DMA_Start_IT+0x21c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a57      	ldr	r2, [pc, #348]	; (80051b4 <HAL_DMA_Start_IT+0x220>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a56      	ldr	r2, [pc, #344]	; (80051b8 <HAL_DMA_Start_IT+0x224>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a54      	ldr	r2, [pc, #336]	; (80051bc <HAL_DMA_Start_IT+0x228>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a53      	ldr	r2, [pc, #332]	; (80051c0 <HAL_DMA_Start_IT+0x22c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_DMA_Start_IT+0xee>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a51      	ldr	r2, [pc, #324]	; (80051c4 <HAL_DMA_Start_IT+0x230>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <HAL_DMA_Start_IT+0x100>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e007      	b.n	80050a4 <HAL_DMA_Start_IT+0x110>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f001 fe6a 	bl	8006d84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a34      	ldr	r2, [pc, #208]	; (8005188 <HAL_DMA_Start_IT+0x1f4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d04a      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a33      	ldr	r2, [pc, #204]	; (800518c <HAL_DMA_Start_IT+0x1f8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d045      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a31      	ldr	r2, [pc, #196]	; (8005190 <HAL_DMA_Start_IT+0x1fc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d040      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a30      	ldr	r2, [pc, #192]	; (8005194 <HAL_DMA_Start_IT+0x200>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d03b      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2e      	ldr	r2, [pc, #184]	; (8005198 <HAL_DMA_Start_IT+0x204>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d036      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_DMA_Start_IT+0x208>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d031      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <HAL_DMA_Start_IT+0x20c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02c      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <HAL_DMA_Start_IT+0x210>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d027      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <HAL_DMA_Start_IT+0x214>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d022      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a27      	ldr	r2, [pc, #156]	; (80051ac <HAL_DMA_Start_IT+0x218>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d01d      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <HAL_DMA_Start_IT+0x21c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a24      	ldr	r2, [pc, #144]	; (80051b4 <HAL_DMA_Start_IT+0x220>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <HAL_DMA_Start_IT+0x224>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a21      	ldr	r2, [pc, #132]	; (80051bc <HAL_DMA_Start_IT+0x228>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_DMA_Start_IT+0x22c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_DMA_Start_IT+0x1bc>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_DMA_Start_IT+0x230>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_DMA_Start_IT+0x1c0>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_DMA_Start_IT+0x1c2>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d036      	beq.n	80051c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 021e 	bic.w	r2, r3, #30
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0216 	orr.w	r2, r2, #22
 800516c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d03e      	beq.n	80051f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e035      	b.n	80051f4 <HAL_DMA_Start_IT+0x260>
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 020e 	bic.w	r2, r3, #14
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 020a 	orr.w	r2, r2, #10
 80051da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0204 	orr.w	r2, r2, #4
 80051f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a83      	ldr	r2, [pc, #524]	; (8005408 <HAL_DMA_Start_IT+0x474>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d072      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a82      	ldr	r2, [pc, #520]	; (800540c <HAL_DMA_Start_IT+0x478>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d06d      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a80      	ldr	r2, [pc, #512]	; (8005410 <HAL_DMA_Start_IT+0x47c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d068      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7f      	ldr	r2, [pc, #508]	; (8005414 <HAL_DMA_Start_IT+0x480>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d063      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7d      	ldr	r2, [pc, #500]	; (8005418 <HAL_DMA_Start_IT+0x484>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d05e      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7c      	ldr	r2, [pc, #496]	; (800541c <HAL_DMA_Start_IT+0x488>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d059      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7a      	ldr	r2, [pc, #488]	; (8005420 <HAL_DMA_Start_IT+0x48c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d054      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a79      	ldr	r2, [pc, #484]	; (8005424 <HAL_DMA_Start_IT+0x490>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d04f      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a77      	ldr	r2, [pc, #476]	; (8005428 <HAL_DMA_Start_IT+0x494>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d04a      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a76      	ldr	r2, [pc, #472]	; (800542c <HAL_DMA_Start_IT+0x498>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d045      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a74      	ldr	r2, [pc, #464]	; (8005430 <HAL_DMA_Start_IT+0x49c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d040      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a73      	ldr	r2, [pc, #460]	; (8005434 <HAL_DMA_Start_IT+0x4a0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d03b      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a71      	ldr	r2, [pc, #452]	; (8005438 <HAL_DMA_Start_IT+0x4a4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d036      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a70      	ldr	r2, [pc, #448]	; (800543c <HAL_DMA_Start_IT+0x4a8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d031      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a6e      	ldr	r2, [pc, #440]	; (8005440 <HAL_DMA_Start_IT+0x4ac>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d02c      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6d      	ldr	r2, [pc, #436]	; (8005444 <HAL_DMA_Start_IT+0x4b0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d027      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6b      	ldr	r2, [pc, #428]	; (8005448 <HAL_DMA_Start_IT+0x4b4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d022      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6a      	ldr	r2, [pc, #424]	; (800544c <HAL_DMA_Start_IT+0x4b8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d01d      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a68      	ldr	r2, [pc, #416]	; (8005450 <HAL_DMA_Start_IT+0x4bc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d018      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a67      	ldr	r2, [pc, #412]	; (8005454 <HAL_DMA_Start_IT+0x4c0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	; (8005458 <HAL_DMA_Start_IT+0x4c4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00e      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a64      	ldr	r2, [pc, #400]	; (800545c <HAL_DMA_Start_IT+0x4c8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d009      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a62      	ldr	r2, [pc, #392]	; (8005460 <HAL_DMA_Start_IT+0x4cc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a61      	ldr	r2, [pc, #388]	; (8005464 <HAL_DMA_Start_IT+0x4d0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_DMA_Start_IT+0x354>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_DMA_Start_IT+0x356>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01a      	beq.n	8005324 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005322:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a37      	ldr	r2, [pc, #220]	; (8005408 <HAL_DMA_Start_IT+0x474>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d04a      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a36      	ldr	r2, [pc, #216]	; (800540c <HAL_DMA_Start_IT+0x478>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d045      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a34      	ldr	r2, [pc, #208]	; (8005410 <HAL_DMA_Start_IT+0x47c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d040      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a33      	ldr	r2, [pc, #204]	; (8005414 <HAL_DMA_Start_IT+0x480>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d03b      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a31      	ldr	r2, [pc, #196]	; (8005418 <HAL_DMA_Start_IT+0x484>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d036      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a30      	ldr	r2, [pc, #192]	; (800541c <HAL_DMA_Start_IT+0x488>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d031      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2e      	ldr	r2, [pc, #184]	; (8005420 <HAL_DMA_Start_IT+0x48c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d02c      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <HAL_DMA_Start_IT+0x490>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d027      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2b      	ldr	r2, [pc, #172]	; (8005428 <HAL_DMA_Start_IT+0x494>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2a      	ldr	r2, [pc, #168]	; (800542c <HAL_DMA_Start_IT+0x498>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01d      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a28      	ldr	r2, [pc, #160]	; (8005430 <HAL_DMA_Start_IT+0x49c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a27      	ldr	r2, [pc, #156]	; (8005434 <HAL_DMA_Start_IT+0x4a0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a25      	ldr	r2, [pc, #148]	; (8005438 <HAL_DMA_Start_IT+0x4a4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a24      	ldr	r2, [pc, #144]	; (800543c <HAL_DMA_Start_IT+0x4a8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a22      	ldr	r2, [pc, #136]	; (8005440 <HAL_DMA_Start_IT+0x4ac>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_DMA_Start_IT+0x430>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_DMA_Start_IT+0x4b0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d108      	bne.n	80053d6 <HAL_DMA_Start_IT+0x442>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e012      	b.n	80053fc <HAL_DMA_Start_IT+0x468>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e009      	b.n	80053fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40020010 	.word	0x40020010
 800540c:	40020028 	.word	0x40020028
 8005410:	40020040 	.word	0x40020040
 8005414:	40020058 	.word	0x40020058
 8005418:	40020070 	.word	0x40020070
 800541c:	40020088 	.word	0x40020088
 8005420:	400200a0 	.word	0x400200a0
 8005424:	400200b8 	.word	0x400200b8
 8005428:	40020410 	.word	0x40020410
 800542c:	40020428 	.word	0x40020428
 8005430:	40020440 	.word	0x40020440
 8005434:	40020458 	.word	0x40020458
 8005438:	40020470 	.word	0x40020470
 800543c:	40020488 	.word	0x40020488
 8005440:	400204a0 	.word	0x400204a0
 8005444:	400204b8 	.word	0x400204b8
 8005448:	58025408 	.word	0x58025408
 800544c:	5802541c 	.word	0x5802541c
 8005450:	58025430 	.word	0x58025430
 8005454:	58025444 	.word	0x58025444
 8005458:	58025458 	.word	0x58025458
 800545c:	5802546c 	.word	0x5802546c
 8005460:	58025480 	.word	0x58025480
 8005464:	58025494 	.word	0x58025494

08005468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005470:	f7fd f9b8 	bl	80027e4 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e2dc      	b.n	8005a3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d008      	beq.n	800549e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e2cd      	b.n	8005a3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a76      	ldr	r2, [pc, #472]	; (800567c <HAL_DMA_Abort+0x214>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a74      	ldr	r2, [pc, #464]	; (8005680 <HAL_DMA_Abort+0x218>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a73      	ldr	r2, [pc, #460]	; (8005684 <HAL_DMA_Abort+0x21c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a71      	ldr	r2, [pc, #452]	; (8005688 <HAL_DMA_Abort+0x220>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a70      	ldr	r2, [pc, #448]	; (800568c <HAL_DMA_Abort+0x224>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a6e      	ldr	r2, [pc, #440]	; (8005690 <HAL_DMA_Abort+0x228>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6d      	ldr	r2, [pc, #436]	; (8005694 <HAL_DMA_Abort+0x22c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6b      	ldr	r2, [pc, #428]	; (8005698 <HAL_DMA_Abort+0x230>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6a      	ldr	r2, [pc, #424]	; (800569c <HAL_DMA_Abort+0x234>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a68      	ldr	r2, [pc, #416]	; (80056a0 <HAL_DMA_Abort+0x238>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <HAL_DMA_Abort+0x23c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a65      	ldr	r2, [pc, #404]	; (80056a8 <HAL_DMA_Abort+0x240>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a64      	ldr	r2, [pc, #400]	; (80056ac <HAL_DMA_Abort+0x244>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a62      	ldr	r2, [pc, #392]	; (80056b0 <HAL_DMA_Abort+0x248>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <HAL_DMA_Abort+0x24c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_DMA_Abort+0xd6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5f      	ldr	r2, [pc, #380]	; (80056b8 <HAL_DMA_Abort+0x250>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d101      	bne.n	8005542 <HAL_DMA_Abort+0xda>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_DMA_Abort+0xdc>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 021e 	bic.w	r2, r2, #30
 8005556:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005566:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e00a      	b.n	8005586 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 020e 	bic.w	r2, r2, #14
 800557e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3c      	ldr	r2, [pc, #240]	; (800567c <HAL_DMA_Abort+0x214>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d072      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3a      	ldr	r2, [pc, #232]	; (8005680 <HAL_DMA_Abort+0x218>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d06d      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a39      	ldr	r2, [pc, #228]	; (8005684 <HAL_DMA_Abort+0x21c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d068      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <HAL_DMA_Abort+0x220>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d063      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a36      	ldr	r2, [pc, #216]	; (800568c <HAL_DMA_Abort+0x224>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d05e      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a34      	ldr	r2, [pc, #208]	; (8005690 <HAL_DMA_Abort+0x228>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d059      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a33      	ldr	r2, [pc, #204]	; (8005694 <HAL_DMA_Abort+0x22c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d054      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a31      	ldr	r2, [pc, #196]	; (8005698 <HAL_DMA_Abort+0x230>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d04f      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a30      	ldr	r2, [pc, #192]	; (800569c <HAL_DMA_Abort+0x234>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04a      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2e      	ldr	r2, [pc, #184]	; (80056a0 <HAL_DMA_Abort+0x238>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d045      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <HAL_DMA_Abort+0x23c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d040      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2b      	ldr	r2, [pc, #172]	; (80056a8 <HAL_DMA_Abort+0x240>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d03b      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <HAL_DMA_Abort+0x244>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d036      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a28      	ldr	r2, [pc, #160]	; (80056b0 <HAL_DMA_Abort+0x248>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d031      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <HAL_DMA_Abort+0x24c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d02c      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <HAL_DMA_Abort+0x250>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d027      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a24      	ldr	r2, [pc, #144]	; (80056bc <HAL_DMA_Abort+0x254>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d022      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <HAL_DMA_Abort+0x258>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01d      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_DMA_Abort+0x25c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d018      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <HAL_DMA_Abort+0x260>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_DMA_Abort+0x264>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <HAL_DMA_Abort+0x268>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <HAL_DMA_Abort+0x26c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_DMA_Abort+0x20e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_DMA_Abort+0x270>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d132      	bne.n	80056dc <HAL_DMA_Abort+0x274>
 8005676:	2301      	movs	r3, #1
 8005678:	e031      	b.n	80056de <HAL_DMA_Abort+0x276>
 800567a:	bf00      	nop
 800567c:	40020010 	.word	0x40020010
 8005680:	40020028 	.word	0x40020028
 8005684:	40020040 	.word	0x40020040
 8005688:	40020058 	.word	0x40020058
 800568c:	40020070 	.word	0x40020070
 8005690:	40020088 	.word	0x40020088
 8005694:	400200a0 	.word	0x400200a0
 8005698:	400200b8 	.word	0x400200b8
 800569c:	40020410 	.word	0x40020410
 80056a0:	40020428 	.word	0x40020428
 80056a4:	40020440 	.word	0x40020440
 80056a8:	40020458 	.word	0x40020458
 80056ac:	40020470 	.word	0x40020470
 80056b0:	40020488 	.word	0x40020488
 80056b4:	400204a0 	.word	0x400204a0
 80056b8:	400204b8 	.word	0x400204b8
 80056bc:	58025408 	.word	0x58025408
 80056c0:	5802541c 	.word	0x5802541c
 80056c4:	58025430 	.word	0x58025430
 80056c8:	58025444 	.word	0x58025444
 80056cc:	58025458 	.word	0x58025458
 80056d0:	5802546c 	.word	0x5802546c
 80056d4:	58025480 	.word	0x58025480
 80056d8:	58025494 	.word	0x58025494
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a6d      	ldr	r2, [pc, #436]	; (80058ac <HAL_DMA_Abort+0x444>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d04a      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a6b      	ldr	r2, [pc, #428]	; (80058b0 <HAL_DMA_Abort+0x448>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d045      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a6a      	ldr	r2, [pc, #424]	; (80058b4 <HAL_DMA_Abort+0x44c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d040      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a68      	ldr	r2, [pc, #416]	; (80058b8 <HAL_DMA_Abort+0x450>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d03b      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a67      	ldr	r2, [pc, #412]	; (80058bc <HAL_DMA_Abort+0x454>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d036      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a65      	ldr	r2, [pc, #404]	; (80058c0 <HAL_DMA_Abort+0x458>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d031      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a64      	ldr	r2, [pc, #400]	; (80058c4 <HAL_DMA_Abort+0x45c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d02c      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a62      	ldr	r2, [pc, #392]	; (80058c8 <HAL_DMA_Abort+0x460>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d027      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a61      	ldr	r2, [pc, #388]	; (80058cc <HAL_DMA_Abort+0x464>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d022      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a5f      	ldr	r2, [pc, #380]	; (80058d0 <HAL_DMA_Abort+0x468>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a5e      	ldr	r2, [pc, #376]	; (80058d4 <HAL_DMA_Abort+0x46c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a5c      	ldr	r2, [pc, #368]	; (80058d8 <HAL_DMA_Abort+0x470>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a5b      	ldr	r2, [pc, #364]	; (80058dc <HAL_DMA_Abort+0x474>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a59      	ldr	r2, [pc, #356]	; (80058e0 <HAL_DMA_Abort+0x478>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a58      	ldr	r2, [pc, #352]	; (80058e4 <HAL_DMA_Abort+0x47c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_DMA_Abort+0x32a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a56      	ldr	r2, [pc, #344]	; (80058e8 <HAL_DMA_Abort+0x480>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <HAL_DMA_Abort+0x33c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	e007      	b.n	80057b4 <HAL_DMA_Abort+0x34c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057b4:	e013      	b.n	80057de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057b6:	f7fd f815 	bl	80027e4 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d90c      	bls.n	80057de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2203      	movs	r2, #3
 80057ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e12d      	b.n	8005a3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <HAL_DMA_Abort+0x444>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_DMA_Abort+0x422>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <HAL_DMA_Abort+0x448>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_DMA_Abort+0x422>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2c      	ldr	r2, [pc, #176]	; (80058b4 <HAL_DMA_Abort+0x44c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d040      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <HAL_DMA_Abort+0x450>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a29      	ldr	r2, [pc, #164]	; (80058bc <HAL_DMA_Abort+0x454>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d036      	beq.n	800588a <HAL_DMA_Abort+0x422>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <HAL_DMA_Abort+0x458>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <HAL_DMA_Abort+0x45c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d02c      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a24      	ldr	r2, [pc, #144]	; (80058c8 <HAL_DMA_Abort+0x460>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <HAL_DMA_Abort+0x422>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a23      	ldr	r2, [pc, #140]	; (80058cc <HAL_DMA_Abort+0x464>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_DMA_Abort+0x468>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_DMA_Abort+0x422>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <HAL_DMA_Abort+0x46c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_DMA_Abort+0x470>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_DMA_Abort+0x474>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_DMA_Abort+0x422>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_DMA_Abort+0x478>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <HAL_DMA_Abort+0x47c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_DMA_Abort+0x422>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_DMA_Abort+0x480>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_DMA_Abort+0x426>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_DMA_Abort+0x428>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d02b      	beq.n	80058ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	223f      	movs	r2, #63	; 0x3f
 80058a4:	409a      	lsls	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	609a      	str	r2, [r3, #8]
 80058aa:	e02a      	b.n	8005902 <HAL_DMA_Abort+0x49a>
 80058ac:	40020010 	.word	0x40020010
 80058b0:	40020028 	.word	0x40020028
 80058b4:	40020040 	.word	0x40020040
 80058b8:	40020058 	.word	0x40020058
 80058bc:	40020070 	.word	0x40020070
 80058c0:	40020088 	.word	0x40020088
 80058c4:	400200a0 	.word	0x400200a0
 80058c8:	400200b8 	.word	0x400200b8
 80058cc:	40020410 	.word	0x40020410
 80058d0:	40020428 	.word	0x40020428
 80058d4:	40020440 	.word	0x40020440
 80058d8:	40020458 	.word	0x40020458
 80058dc:	40020470 	.word	0x40020470
 80058e0:	40020488 	.word	0x40020488
 80058e4:	400204a0 	.word	0x400204a0
 80058e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2201      	movs	r2, #1
 80058fc:	409a      	lsls	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a4f      	ldr	r2, [pc, #316]	; (8005a44 <HAL_DMA_Abort+0x5dc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d072      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a4d      	ldr	r2, [pc, #308]	; (8005a48 <HAL_DMA_Abort+0x5e0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d06d      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a4c      	ldr	r2, [pc, #304]	; (8005a4c <HAL_DMA_Abort+0x5e4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d068      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a4a      	ldr	r2, [pc, #296]	; (8005a50 <HAL_DMA_Abort+0x5e8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d063      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a49      	ldr	r2, [pc, #292]	; (8005a54 <HAL_DMA_Abort+0x5ec>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d05e      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a47      	ldr	r2, [pc, #284]	; (8005a58 <HAL_DMA_Abort+0x5f0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d059      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a46      	ldr	r2, [pc, #280]	; (8005a5c <HAL_DMA_Abort+0x5f4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d054      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a44      	ldr	r2, [pc, #272]	; (8005a60 <HAL_DMA_Abort+0x5f8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d04f      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a43      	ldr	r2, [pc, #268]	; (8005a64 <HAL_DMA_Abort+0x5fc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d04a      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a41      	ldr	r2, [pc, #260]	; (8005a68 <HAL_DMA_Abort+0x600>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d045      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a40      	ldr	r2, [pc, #256]	; (8005a6c <HAL_DMA_Abort+0x604>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a3e      	ldr	r2, [pc, #248]	; (8005a70 <HAL_DMA_Abort+0x608>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d03b      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3d      	ldr	r2, [pc, #244]	; (8005a74 <HAL_DMA_Abort+0x60c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d036      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a3b      	ldr	r2, [pc, #236]	; (8005a78 <HAL_DMA_Abort+0x610>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d031      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a3a      	ldr	r2, [pc, #232]	; (8005a7c <HAL_DMA_Abort+0x614>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d02c      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <HAL_DMA_Abort+0x618>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d027      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <HAL_DMA_Abort+0x61c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a35      	ldr	r2, [pc, #212]	; (8005a88 <HAL_DMA_Abort+0x620>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <HAL_DMA_Abort+0x624>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <HAL_DMA_Abort+0x628>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a31      	ldr	r2, [pc, #196]	; (8005a94 <HAL_DMA_Abort+0x62c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <HAL_DMA_Abort+0x630>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2e      	ldr	r2, [pc, #184]	; (8005a9c <HAL_DMA_Abort+0x634>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_DMA_Abort+0x58a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2c      	ldr	r2, [pc, #176]	; (8005aa0 <HAL_DMA_Abort+0x638>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_DMA_Abort+0x58e>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_DMA_Abort+0x590>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40020010 	.word	0x40020010
 8005a48:	40020028 	.word	0x40020028
 8005a4c:	40020040 	.word	0x40020040
 8005a50:	40020058 	.word	0x40020058
 8005a54:	40020070 	.word	0x40020070
 8005a58:	40020088 	.word	0x40020088
 8005a5c:	400200a0 	.word	0x400200a0
 8005a60:	400200b8 	.word	0x400200b8
 8005a64:	40020410 	.word	0x40020410
 8005a68:	40020428 	.word	0x40020428
 8005a6c:	40020440 	.word	0x40020440
 8005a70:	40020458 	.word	0x40020458
 8005a74:	40020470 	.word	0x40020470
 8005a78:	40020488 	.word	0x40020488
 8005a7c:	400204a0 	.word	0x400204a0
 8005a80:	400204b8 	.word	0x400204b8
 8005a84:	58025408 	.word	0x58025408
 8005a88:	5802541c 	.word	0x5802541c
 8005a8c:	58025430 	.word	0x58025430
 8005a90:	58025444 	.word	0x58025444
 8005a94:	58025458 	.word	0x58025458
 8005a98:	5802546c 	.word	0x5802546c
 8005a9c:	58025480 	.word	0x58025480
 8005aa0:	58025494 	.word	0x58025494

08005aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e237      	b.n	8005f26 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e22c      	b.n	8005f26 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <HAL_DMA_Abort_IT+0x1a0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d04a      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a5b      	ldr	r2, [pc, #364]	; (8005c48 <HAL_DMA_Abort_IT+0x1a4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d045      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a59      	ldr	r2, [pc, #356]	; (8005c4c <HAL_DMA_Abort_IT+0x1a8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d040      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a58      	ldr	r2, [pc, #352]	; (8005c50 <HAL_DMA_Abort_IT+0x1ac>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d03b      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a56      	ldr	r2, [pc, #344]	; (8005c54 <HAL_DMA_Abort_IT+0x1b0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d036      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a55      	ldr	r2, [pc, #340]	; (8005c58 <HAL_DMA_Abort_IT+0x1b4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d031      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a53      	ldr	r2, [pc, #332]	; (8005c5c <HAL_DMA_Abort_IT+0x1b8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d02c      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a52      	ldr	r2, [pc, #328]	; (8005c60 <HAL_DMA_Abort_IT+0x1bc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d027      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a50      	ldr	r2, [pc, #320]	; (8005c64 <HAL_DMA_Abort_IT+0x1c0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a4f      	ldr	r2, [pc, #316]	; (8005c68 <HAL_DMA_Abort_IT+0x1c4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d01d      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a4d      	ldr	r2, [pc, #308]	; (8005c6c <HAL_DMA_Abort_IT+0x1c8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4c      	ldr	r2, [pc, #304]	; (8005c70 <HAL_DMA_Abort_IT+0x1cc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a4a      	ldr	r2, [pc, #296]	; (8005c74 <HAL_DMA_Abort_IT+0x1d0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a49      	ldr	r2, [pc, #292]	; (8005c78 <HAL_DMA_Abort_IT+0x1d4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a47      	ldr	r2, [pc, #284]	; (8005c7c <HAL_DMA_Abort_IT+0x1d8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_DMA_Abort_IT+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a46      	ldr	r2, [pc, #280]	; (8005c80 <HAL_DMA_Abort_IT+0x1dc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <HAL_DMA_Abort_IT+0xcc>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <HAL_DMA_Abort_IT+0xce>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8086 	beq.w	8005c84 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a2f      	ldr	r2, [pc, #188]	; (8005c44 <HAL_DMA_Abort_IT+0x1a0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d04a      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2e      	ldr	r2, [pc, #184]	; (8005c48 <HAL_DMA_Abort_IT+0x1a4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d045      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	; (8005c4c <HAL_DMA_Abort_IT+0x1a8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d040      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_DMA_Abort_IT+0x1ac>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d03b      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a29      	ldr	r2, [pc, #164]	; (8005c54 <HAL_DMA_Abort_IT+0x1b0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d036      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a28      	ldr	r2, [pc, #160]	; (8005c58 <HAL_DMA_Abort_IT+0x1b4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d031      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <HAL_DMA_Abort_IT+0x1b8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02c      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a25      	ldr	r2, [pc, #148]	; (8005c60 <HAL_DMA_Abort_IT+0x1bc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d027      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <HAL_DMA_Abort_IT+0x1c0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <HAL_DMA_Abort_IT+0x1c4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01d      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a20      	ldr	r2, [pc, #128]	; (8005c6c <HAL_DMA_Abort_IT+0x1c8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_DMA_Abort_IT+0x1cc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <HAL_DMA_Abort_IT+0x1d0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_DMA_Abort_IT+0x1d4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <HAL_DMA_Abort_IT+0x1d8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x17c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_DMA_Abort_IT+0x1dc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d108      	bne.n	8005c32 <HAL_DMA_Abort_IT+0x18e>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e178      	b.n	8005f24 <HAL_DMA_Abort_IT+0x480>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e16f      	b.n	8005f24 <HAL_DMA_Abort_IT+0x480>
 8005c44:	40020010 	.word	0x40020010
 8005c48:	40020028 	.word	0x40020028
 8005c4c:	40020040 	.word	0x40020040
 8005c50:	40020058 	.word	0x40020058
 8005c54:	40020070 	.word	0x40020070
 8005c58:	40020088 	.word	0x40020088
 8005c5c:	400200a0 	.word	0x400200a0
 8005c60:	400200b8 	.word	0x400200b8
 8005c64:	40020410 	.word	0x40020410
 8005c68:	40020428 	.word	0x40020428
 8005c6c:	40020440 	.word	0x40020440
 8005c70:	40020458 	.word	0x40020458
 8005c74:	40020470 	.word	0x40020470
 8005c78:	40020488 	.word	0x40020488
 8005c7c:	400204a0 	.word	0x400204a0
 8005c80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 020e 	bic.w	r2, r2, #14
 8005c92:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a6c      	ldr	r2, [pc, #432]	; (8005e4c <HAL_DMA_Abort_IT+0x3a8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d04a      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6b      	ldr	r2, [pc, #428]	; (8005e50 <HAL_DMA_Abort_IT+0x3ac>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d045      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a69      	ldr	r2, [pc, #420]	; (8005e54 <HAL_DMA_Abort_IT+0x3b0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d040      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a68      	ldr	r2, [pc, #416]	; (8005e58 <HAL_DMA_Abort_IT+0x3b4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d03b      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a66      	ldr	r2, [pc, #408]	; (8005e5c <HAL_DMA_Abort_IT+0x3b8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d036      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a65      	ldr	r2, [pc, #404]	; (8005e60 <HAL_DMA_Abort_IT+0x3bc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d031      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a63      	ldr	r2, [pc, #396]	; (8005e64 <HAL_DMA_Abort_IT+0x3c0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d02c      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a62      	ldr	r2, [pc, #392]	; (8005e68 <HAL_DMA_Abort_IT+0x3c4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d027      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a60      	ldr	r2, [pc, #384]	; (8005e6c <HAL_DMA_Abort_IT+0x3c8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d022      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a5f      	ldr	r2, [pc, #380]	; (8005e70 <HAL_DMA_Abort_IT+0x3cc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d01d      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a5d      	ldr	r2, [pc, #372]	; (8005e74 <HAL_DMA_Abort_IT+0x3d0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a5c      	ldr	r2, [pc, #368]	; (8005e78 <HAL_DMA_Abort_IT+0x3d4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d013      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5a      	ldr	r2, [pc, #360]	; (8005e7c <HAL_DMA_Abort_IT+0x3d8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a59      	ldr	r2, [pc, #356]	; (8005e80 <HAL_DMA_Abort_IT+0x3dc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a57      	ldr	r2, [pc, #348]	; (8005e84 <HAL_DMA_Abort_IT+0x3e0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_DMA_Abort_IT+0x290>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a56      	ldr	r2, [pc, #344]	; (8005e88 <HAL_DMA_Abort_IT+0x3e4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d108      	bne.n	8005d46 <HAL_DMA_Abort_IT+0x2a2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e007      	b.n	8005d56 <HAL_DMA_Abort_IT+0x2b2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <HAL_DMA_Abort_IT+0x3a8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d072      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_DMA_Abort_IT+0x3ac>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d06d      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a39      	ldr	r2, [pc, #228]	; (8005e54 <HAL_DMA_Abort_IT+0x3b0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d068      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_DMA_Abort_IT+0x3b4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d063      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a36      	ldr	r2, [pc, #216]	; (8005e5c <HAL_DMA_Abort_IT+0x3b8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d05e      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a34      	ldr	r2, [pc, #208]	; (8005e60 <HAL_DMA_Abort_IT+0x3bc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d059      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a33      	ldr	r2, [pc, #204]	; (8005e64 <HAL_DMA_Abort_IT+0x3c0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d054      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_DMA_Abort_IT+0x3c4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d04f      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a30      	ldr	r2, [pc, #192]	; (8005e6c <HAL_DMA_Abort_IT+0x3c8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d04a      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <HAL_DMA_Abort_IT+0x3cc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d045      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_DMA_Abort_IT+0x3d0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d040      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <HAL_DMA_Abort_IT+0x3d4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d03b      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_DMA_Abort_IT+0x3d8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d036      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <HAL_DMA_Abort_IT+0x3dc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d031      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <HAL_DMA_Abort_IT+0x3e0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d02c      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <HAL_DMA_Abort_IT+0x3e4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d027      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <HAL_DMA_Abort_IT+0x3e8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d022      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <HAL_DMA_Abort_IT+0x3ec>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01d      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_DMA_Abort_IT+0x3f0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1f      	ldr	r2, [pc, #124]	; (8005e98 <HAL_DMA_Abort_IT+0x3f4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <HAL_DMA_Abort_IT+0x3f8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_DMA_Abort_IT+0x3fc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <HAL_DMA_Abort_IT+0x400>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x3a2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <HAL_DMA_Abort_IT+0x404>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d132      	bne.n	8005eac <HAL_DMA_Abort_IT+0x408>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e031      	b.n	8005eae <HAL_DMA_Abort_IT+0x40a>
 8005e4a:	bf00      	nop
 8005e4c:	40020010 	.word	0x40020010
 8005e50:	40020028 	.word	0x40020028
 8005e54:	40020040 	.word	0x40020040
 8005e58:	40020058 	.word	0x40020058
 8005e5c:	40020070 	.word	0x40020070
 8005e60:	40020088 	.word	0x40020088
 8005e64:	400200a0 	.word	0x400200a0
 8005e68:	400200b8 	.word	0x400200b8
 8005e6c:	40020410 	.word	0x40020410
 8005e70:	40020428 	.word	0x40020428
 8005e74:	40020440 	.word	0x40020440
 8005e78:	40020458 	.word	0x40020458
 8005e7c:	40020470 	.word	0x40020470
 8005e80:	40020488 	.word	0x40020488
 8005e84:	400204a0 	.word	0x400204a0
 8005e88:	400204b8 	.word	0x400204b8
 8005e8c:	58025408 	.word	0x58025408
 8005e90:	5802541c 	.word	0x5802541c
 8005e94:	58025430 	.word	0x58025430
 8005e98:	58025444 	.word	0x58025444
 8005e9c:	58025458 	.word	0x58025458
 8005ea0:	5802546c 	.word	0x5802546c
 8005ea4:	58025480 	.word	0x58025480
 8005ea8:	58025494 	.word	0x58025494
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d028      	beq.n	8005f04 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ee0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop

08005f30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f3c:	4b67      	ldr	r3, [pc, #412]	; (80060dc <HAL_DMA_IRQHandler+0x1ac>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a67      	ldr	r2, [pc, #412]	; (80060e0 <HAL_DMA_IRQHandler+0x1b0>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	0a9b      	lsrs	r3, r3, #10
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a5f      	ldr	r2, [pc, #380]	; (80060e4 <HAL_DMA_IRQHandler+0x1b4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d04a      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5d      	ldr	r2, [pc, #372]	; (80060e8 <HAL_DMA_IRQHandler+0x1b8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d045      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a5c      	ldr	r2, [pc, #368]	; (80060ec <HAL_DMA_IRQHandler+0x1bc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d040      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a5a      	ldr	r2, [pc, #360]	; (80060f0 <HAL_DMA_IRQHandler+0x1c0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d03b      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a59      	ldr	r2, [pc, #356]	; (80060f4 <HAL_DMA_IRQHandler+0x1c4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d036      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_DMA_IRQHandler+0x1c8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d031      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_DMA_IRQHandler+0x1cc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d02c      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_DMA_IRQHandler+0x1d0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d027      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a53      	ldr	r2, [pc, #332]	; (8006104 <HAL_DMA_IRQHandler+0x1d4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a51      	ldr	r2, [pc, #324]	; (8006108 <HAL_DMA_IRQHandler+0x1d8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01d      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a50      	ldr	r2, [pc, #320]	; (800610c <HAL_DMA_IRQHandler+0x1dc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d018      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a4e      	ldr	r2, [pc, #312]	; (8006110 <HAL_DMA_IRQHandler+0x1e0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a4d      	ldr	r2, [pc, #308]	; (8006114 <HAL_DMA_IRQHandler+0x1e4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a4b      	ldr	r2, [pc, #300]	; (8006118 <HAL_DMA_IRQHandler+0x1e8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a4a      	ldr	r2, [pc, #296]	; (800611c <HAL_DMA_IRQHandler+0x1ec>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a48      	ldr	r2, [pc, #288]	; (8006120 <HAL_DMA_IRQHandler+0x1f0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <HAL_DMA_IRQHandler+0xd6>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <HAL_DMA_IRQHandler+0xd8>
 8006006:	2300      	movs	r3, #0
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 842b 	beq.w	8006864 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2208      	movs	r2, #8
 8006018:	409a      	lsls	r2, r3
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80a2 	beq.w	8006168 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2e      	ldr	r2, [pc, #184]	; (80060e4 <HAL_DMA_IRQHandler+0x1b4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d04a      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2d      	ldr	r2, [pc, #180]	; (80060e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d045      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <HAL_DMA_IRQHandler+0x1bc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d040      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d03b      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a28      	ldr	r2, [pc, #160]	; (80060f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d036      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <HAL_DMA_IRQHandler+0x1c8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d031      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a25      	ldr	r2, [pc, #148]	; (80060fc <HAL_DMA_IRQHandler+0x1cc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02c      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a24      	ldr	r2, [pc, #144]	; (8006100 <HAL_DMA_IRQHandler+0x1d0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <HAL_DMA_IRQHandler+0x1d4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a21      	ldr	r2, [pc, #132]	; (8006108 <HAL_DMA_IRQHandler+0x1d8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_DMA_IRQHandler+0x1dc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1e      	ldr	r2, [pc, #120]	; (8006110 <HAL_DMA_IRQHandler+0x1e0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_DMA_IRQHandler+0x1e4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_DMA_IRQHandler+0x1e8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_DMA_IRQHandler+0x1ec>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <HAL_DMA_IRQHandler+0x1f0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d12f      	bne.n	8006124 <HAL_DMA_IRQHandler+0x1f4>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	e02e      	b.n	8006138 <HAL_DMA_IRQHandler+0x208>
 80060da:	bf00      	nop
 80060dc:	24000084 	.word	0x24000084
 80060e0:	1b4e81b5 	.word	0x1b4e81b5
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	bf14      	ite	ne
 8006132:	2301      	movne	r3, #1
 8006134:	2300      	moveq	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0204 	bic.w	r2, r2, #4
 800614a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2208      	movs	r2, #8
 8006156:	409a      	lsls	r2, r3
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0201 	orr.w	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	fa22 f303 	lsr.w	r3, r2, r3
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d06e      	beq.n	800625c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a69      	ldr	r2, [pc, #420]	; (8006328 <HAL_DMA_IRQHandler+0x3f8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d04a      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a67      	ldr	r2, [pc, #412]	; (800632c <HAL_DMA_IRQHandler+0x3fc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d045      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a66      	ldr	r2, [pc, #408]	; (8006330 <HAL_DMA_IRQHandler+0x400>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d040      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a64      	ldr	r2, [pc, #400]	; (8006334 <HAL_DMA_IRQHandler+0x404>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d03b      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a63      	ldr	r2, [pc, #396]	; (8006338 <HAL_DMA_IRQHandler+0x408>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d036      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a61      	ldr	r2, [pc, #388]	; (800633c <HAL_DMA_IRQHandler+0x40c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d031      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a60      	ldr	r2, [pc, #384]	; (8006340 <HAL_DMA_IRQHandler+0x410>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d02c      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5e      	ldr	r2, [pc, #376]	; (8006344 <HAL_DMA_IRQHandler+0x414>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d027      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a5d      	ldr	r2, [pc, #372]	; (8006348 <HAL_DMA_IRQHandler+0x418>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d022      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a5b      	ldr	r2, [pc, #364]	; (800634c <HAL_DMA_IRQHandler+0x41c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01d      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5a      	ldr	r2, [pc, #360]	; (8006350 <HAL_DMA_IRQHandler+0x420>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a58      	ldr	r2, [pc, #352]	; (8006354 <HAL_DMA_IRQHandler+0x424>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a57      	ldr	r2, [pc, #348]	; (8006358 <HAL_DMA_IRQHandler+0x428>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a55      	ldr	r2, [pc, #340]	; (800635c <HAL_DMA_IRQHandler+0x42c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a54      	ldr	r2, [pc, #336]	; (8006360 <HAL_DMA_IRQHandler+0x430>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_DMA_IRQHandler+0x434>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d10a      	bne.n	8006234 <HAL_DMA_IRQHandler+0x304>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf14      	ite	ne
 800622c:	2301      	movne	r3, #1
 800622e:	2300      	moveq	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	e003      	b.n	800623c <HAL_DMA_IRQHandler+0x30c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2201      	movs	r2, #1
 800624a:	409a      	lsls	r2, r3
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	f043 0202 	orr.w	r2, r3, #2
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2204      	movs	r2, #4
 8006266:	409a      	lsls	r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 808f 	beq.w	8006390 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <HAL_DMA_IRQHandler+0x3f8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d04a      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <HAL_DMA_IRQHandler+0x3fc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d045      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a29      	ldr	r2, [pc, #164]	; (8006330 <HAL_DMA_IRQHandler+0x400>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d040      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a27      	ldr	r2, [pc, #156]	; (8006334 <HAL_DMA_IRQHandler+0x404>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d03b      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a26      	ldr	r2, [pc, #152]	; (8006338 <HAL_DMA_IRQHandler+0x408>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d036      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a24      	ldr	r2, [pc, #144]	; (800633c <HAL_DMA_IRQHandler+0x40c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d031      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a23      	ldr	r2, [pc, #140]	; (8006340 <HAL_DMA_IRQHandler+0x410>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d02c      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a21      	ldr	r2, [pc, #132]	; (8006344 <HAL_DMA_IRQHandler+0x414>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d027      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a20      	ldr	r2, [pc, #128]	; (8006348 <HAL_DMA_IRQHandler+0x418>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d022      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1e      	ldr	r2, [pc, #120]	; (800634c <HAL_DMA_IRQHandler+0x41c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01d      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1d      	ldr	r2, [pc, #116]	; (8006350 <HAL_DMA_IRQHandler+0x420>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_DMA_IRQHandler+0x424>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <HAL_DMA_IRQHandler+0x428>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a18      	ldr	r2, [pc, #96]	; (800635c <HAL_DMA_IRQHandler+0x42c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a17      	ldr	r2, [pc, #92]	; (8006360 <HAL_DMA_IRQHandler+0x430>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a15      	ldr	r2, [pc, #84]	; (8006364 <HAL_DMA_IRQHandler+0x434>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d12a      	bne.n	8006368 <HAL_DMA_IRQHandler+0x438>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e023      	b.n	8006370 <HAL_DMA_IRQHandler+0x440>
 8006328:	40020010 	.word	0x40020010
 800632c:	40020028 	.word	0x40020028
 8006330:	40020040 	.word	0x40020040
 8006334:	40020058 	.word	0x40020058
 8006338:	40020070 	.word	0x40020070
 800633c:	40020088 	.word	0x40020088
 8006340:	400200a0 	.word	0x400200a0
 8006344:	400200b8 	.word	0x400200b8
 8006348:	40020410 	.word	0x40020410
 800634c:	40020428 	.word	0x40020428
 8006350:	40020440 	.word	0x40020440
 8006354:	40020458 	.word	0x40020458
 8006358:	40020470 	.word	0x40020470
 800635c:	40020488 	.word	0x40020488
 8006360:	400204a0 	.word	0x400204a0
 8006364:	400204b8 	.word	0x400204b8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2204      	movs	r2, #4
 800637e:	409a      	lsls	r2, r3
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	f043 0204 	orr.w	r2, r3, #4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	2210      	movs	r2, #16
 800639a:	409a      	lsls	r2, r3
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 80a6 	beq.w	80064f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a85      	ldr	r2, [pc, #532]	; (80065c0 <HAL_DMA_IRQHandler+0x690>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a83      	ldr	r2, [pc, #524]	; (80065c4 <HAL_DMA_IRQHandler+0x694>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a82      	ldr	r2, [pc, #520]	; (80065c8 <HAL_DMA_IRQHandler+0x698>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a80      	ldr	r2, [pc, #512]	; (80065cc <HAL_DMA_IRQHandler+0x69c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7f      	ldr	r2, [pc, #508]	; (80065d0 <HAL_DMA_IRQHandler+0x6a0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a7d      	ldr	r2, [pc, #500]	; (80065d4 <HAL_DMA_IRQHandler+0x6a4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a7c      	ldr	r2, [pc, #496]	; (80065d8 <HAL_DMA_IRQHandler+0x6a8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7a      	ldr	r2, [pc, #488]	; (80065dc <HAL_DMA_IRQHandler+0x6ac>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a79      	ldr	r2, [pc, #484]	; (80065e0 <HAL_DMA_IRQHandler+0x6b0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a77      	ldr	r2, [pc, #476]	; (80065e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a76      	ldr	r2, [pc, #472]	; (80065e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a74      	ldr	r2, [pc, #464]	; (80065ec <HAL_DMA_IRQHandler+0x6bc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a73      	ldr	r2, [pc, #460]	; (80065f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a71      	ldr	r2, [pc, #452]	; (80065f4 <HAL_DMA_IRQHandler+0x6c4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a70      	ldr	r2, [pc, #448]	; (80065f8 <HAL_DMA_IRQHandler+0x6c8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a6e      	ldr	r2, [pc, #440]	; (80065fc <HAL_DMA_IRQHandler+0x6cc>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d10a      	bne.n	800645c <HAL_DMA_IRQHandler+0x52c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	e009      	b.n	8006470 <HAL_DMA_IRQHandler+0x540>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d03e      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2210      	movs	r2, #16
 800647e:	409a      	lsls	r2, r3
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d018      	beq.n	80064c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d108      	bne.n	80064b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d024      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	e01f      	b.n	80064f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
 80064c2:	e016      	b.n	80064f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d107      	bne.n	80064e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0208 	bic.w	r2, r2, #8
 80064e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2220      	movs	r2, #32
 80064fc:	409a      	lsls	r2, r3
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8110 	beq.w	8006728 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <HAL_DMA_IRQHandler+0x690>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d04a      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <HAL_DMA_IRQHandler+0x694>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d045      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <HAL_DMA_IRQHandler+0x698>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d040      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a28      	ldr	r2, [pc, #160]	; (80065cc <HAL_DMA_IRQHandler+0x69c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d03b      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <HAL_DMA_IRQHandler+0x6a0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d036      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a25      	ldr	r2, [pc, #148]	; (80065d4 <HAL_DMA_IRQHandler+0x6a4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d031      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <HAL_DMA_IRQHandler+0x6a8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d02c      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a22      	ldr	r2, [pc, #136]	; (80065dc <HAL_DMA_IRQHandler+0x6ac>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d027      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a20      	ldr	r2, [pc, #128]	; (80065e0 <HAL_DMA_IRQHandler+0x6b0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d022      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d01d      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <HAL_DMA_IRQHandler+0x6bc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1a      	ldr	r2, [pc, #104]	; (80065f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <HAL_DMA_IRQHandler+0x6c4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <HAL_DMA_IRQHandler+0x6c8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a16      	ldr	r2, [pc, #88]	; (80065fc <HAL_DMA_IRQHandler+0x6cc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d12b      	bne.n	8006600 <HAL_DMA_IRQHandler+0x6d0>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf14      	ite	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	2300      	moveq	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	e02a      	b.n	8006614 <HAL_DMA_IRQHandler+0x6e4>
 80065be:	bf00      	nop
 80065c0:	40020010 	.word	0x40020010
 80065c4:	40020028 	.word	0x40020028
 80065c8:	40020040 	.word	0x40020040
 80065cc:	40020058 	.word	0x40020058
 80065d0:	40020070 	.word	0x40020070
 80065d4:	40020088 	.word	0x40020088
 80065d8:	400200a0 	.word	0x400200a0
 80065dc:	400200b8 	.word	0x400200b8
 80065e0:	40020410 	.word	0x40020410
 80065e4:	40020428 	.word	0x40020428
 80065e8:	40020440 	.word	0x40020440
 80065ec:	40020458 	.word	0x40020458
 80065f0:	40020470 	.word	0x40020470
 80065f4:	40020488 	.word	0x40020488
 80065f8:	400204a0 	.word	0x400204a0
 80065fc:	400204b8 	.word	0x400204b8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8087 	beq.w	8006728 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2220      	movs	r2, #32
 8006624:	409a      	lsls	r2, r3
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b04      	cmp	r3, #4
 8006634:	d139      	bne.n	80066aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0216 	bic.w	r2, r2, #22
 8006644:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695a      	ldr	r2, [r3, #20]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006654:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <HAL_DMA_IRQHandler+0x736>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0208 	bic.w	r2, r2, #8
 8006674:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	223f      	movs	r2, #63	; 0x3f
 8006680:	409a      	lsls	r2, r3
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 834a 	beq.w	8006d34 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
          }
          return;
 80066a8:	e344      	b.n	8006d34 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d018      	beq.n	80066ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d108      	bne.n	80066d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02c      	beq.n	8006728 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
 80066d6:	e027      	b.n	8006728 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d023      	beq.n	8006728 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	4798      	blx	r3
 80066e8:	e01e      	b.n	8006728 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10f      	bne.n	8006718 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0210 	bic.w	r2, r2, #16
 8006706:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8306 	beq.w	8006d3e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8088 	beq.w	8006850 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2204      	movs	r2, #4
 8006744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a7a      	ldr	r2, [pc, #488]	; (8006938 <HAL_DMA_IRQHandler+0xa08>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d04a      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a79      	ldr	r2, [pc, #484]	; (800693c <HAL_DMA_IRQHandler+0xa0c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d045      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a77      	ldr	r2, [pc, #476]	; (8006940 <HAL_DMA_IRQHandler+0xa10>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d040      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a76      	ldr	r2, [pc, #472]	; (8006944 <HAL_DMA_IRQHandler+0xa14>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d03b      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a74      	ldr	r2, [pc, #464]	; (8006948 <HAL_DMA_IRQHandler+0xa18>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d036      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a73      	ldr	r2, [pc, #460]	; (800694c <HAL_DMA_IRQHandler+0xa1c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d031      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a71      	ldr	r2, [pc, #452]	; (8006950 <HAL_DMA_IRQHandler+0xa20>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d02c      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a70      	ldr	r2, [pc, #448]	; (8006954 <HAL_DMA_IRQHandler+0xa24>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d027      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a6e      	ldr	r2, [pc, #440]	; (8006958 <HAL_DMA_IRQHandler+0xa28>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d022      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a6d      	ldr	r2, [pc, #436]	; (800695c <HAL_DMA_IRQHandler+0xa2c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d01d      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a6b      	ldr	r2, [pc, #428]	; (8006960 <HAL_DMA_IRQHandler+0xa30>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d018      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a6a      	ldr	r2, [pc, #424]	; (8006964 <HAL_DMA_IRQHandler+0xa34>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a68      	ldr	r2, [pc, #416]	; (8006968 <HAL_DMA_IRQHandler+0xa38>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00e      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a67      	ldr	r2, [pc, #412]	; (800696c <HAL_DMA_IRQHandler+0xa3c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a65      	ldr	r2, [pc, #404]	; (8006970 <HAL_DMA_IRQHandler+0xa40>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a64      	ldr	r2, [pc, #400]	; (8006974 <HAL_DMA_IRQHandler+0xa44>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d108      	bne.n	80067fa <HAL_DMA_IRQHandler+0x8ca>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0201 	bic.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e007      	b.n	800680a <HAL_DMA_IRQHandler+0x8da>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006812:	429a      	cmp	r2, r3
 8006814:	d307      	bcc.n	8006826 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f2      	bne.n	800680a <HAL_DMA_IRQHandler+0x8da>
 8006824:	e000      	b.n	8006828 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006826:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2203      	movs	r2, #3
 800683a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800683e:	e003      	b.n	8006848 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8272 	beq.w	8006d3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
 8006862:	e26c      	b.n	8006d3e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a43      	ldr	r2, [pc, #268]	; (8006978 <HAL_DMA_IRQHandler+0xa48>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d022      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a42      	ldr	r2, [pc, #264]	; (800697c <HAL_DMA_IRQHandler+0xa4c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01d      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a40      	ldr	r2, [pc, #256]	; (8006980 <HAL_DMA_IRQHandler+0xa50>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d018      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a3f      	ldr	r2, [pc, #252]	; (8006984 <HAL_DMA_IRQHandler+0xa54>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a3d      	ldr	r2, [pc, #244]	; (8006988 <HAL_DMA_IRQHandler+0xa58>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00e      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a3c      	ldr	r2, [pc, #240]	; (800698c <HAL_DMA_IRQHandler+0xa5c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d009      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a3a      	ldr	r2, [pc, #232]	; (8006990 <HAL_DMA_IRQHandler+0xa60>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x984>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a39      	ldr	r2, [pc, #228]	; (8006994 <HAL_DMA_IRQHandler+0xa64>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d101      	bne.n	80068b8 <HAL_DMA_IRQHandler+0x988>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_DMA_IRQHandler+0x98a>
 80068b8:	2300      	movs	r3, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 823f 	beq.w	8006d3e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2204      	movs	r2, #4
 80068d2:	409a      	lsls	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80cd 	beq.w	8006a78 <HAL_DMA_IRQHandler+0xb48>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80c7 	beq.w	8006a78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2204      	movs	r2, #4
 80068f4:	409a      	lsls	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d049      	beq.n	8006998 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8210 	beq.w	8006d38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006920:	e20a      	b.n	8006d38 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8206 	beq.w	8006d38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006934:	e200      	b.n	8006d38 <HAL_DMA_IRQHandler+0xe08>
 8006936:	bf00      	nop
 8006938:	40020010 	.word	0x40020010
 800693c:	40020028 	.word	0x40020028
 8006940:	40020040 	.word	0x40020040
 8006944:	40020058 	.word	0x40020058
 8006948:	40020070 	.word	0x40020070
 800694c:	40020088 	.word	0x40020088
 8006950:	400200a0 	.word	0x400200a0
 8006954:	400200b8 	.word	0x400200b8
 8006958:	40020410 	.word	0x40020410
 800695c:	40020428 	.word	0x40020428
 8006960:	40020440 	.word	0x40020440
 8006964:	40020458 	.word	0x40020458
 8006968:	40020470 	.word	0x40020470
 800696c:	40020488 	.word	0x40020488
 8006970:	400204a0 	.word	0x400204a0
 8006974:	400204b8 	.word	0x400204b8
 8006978:	58025408 	.word	0x58025408
 800697c:	5802541c 	.word	0x5802541c
 8006980:	58025430 	.word	0x58025430
 8006984:	58025444 	.word	0x58025444
 8006988:	58025458 	.word	0x58025458
 800698c:	5802546c 	.word	0x5802546c
 8006990:	58025480 	.word	0x58025480
 8006994:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d160      	bne.n	8006a64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a7f      	ldr	r2, [pc, #508]	; (8006ba4 <HAL_DMA_IRQHandler+0xc74>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d04a      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a7d      	ldr	r2, [pc, #500]	; (8006ba8 <HAL_DMA_IRQHandler+0xc78>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d045      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a7c      	ldr	r2, [pc, #496]	; (8006bac <HAL_DMA_IRQHandler+0xc7c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d040      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a7a      	ldr	r2, [pc, #488]	; (8006bb0 <HAL_DMA_IRQHandler+0xc80>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d03b      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a79      	ldr	r2, [pc, #484]	; (8006bb4 <HAL_DMA_IRQHandler+0xc84>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d036      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a77      	ldr	r2, [pc, #476]	; (8006bb8 <HAL_DMA_IRQHandler+0xc88>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d031      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a76      	ldr	r2, [pc, #472]	; (8006bbc <HAL_DMA_IRQHandler+0xc8c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d02c      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a74      	ldr	r2, [pc, #464]	; (8006bc0 <HAL_DMA_IRQHandler+0xc90>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d027      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a73      	ldr	r2, [pc, #460]	; (8006bc4 <HAL_DMA_IRQHandler+0xc94>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d022      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a71      	ldr	r2, [pc, #452]	; (8006bc8 <HAL_DMA_IRQHandler+0xc98>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01d      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a70      	ldr	r2, [pc, #448]	; (8006bcc <HAL_DMA_IRQHandler+0xc9c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d018      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a6e      	ldr	r2, [pc, #440]	; (8006bd0 <HAL_DMA_IRQHandler+0xca0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a6d      	ldr	r2, [pc, #436]	; (8006bd4 <HAL_DMA_IRQHandler+0xca4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a6b      	ldr	r2, [pc, #428]	; (8006bd8 <HAL_DMA_IRQHandler+0xca8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6a      	ldr	r2, [pc, #424]	; (8006bdc <HAL_DMA_IRQHandler+0xcac>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a68      	ldr	r2, [pc, #416]	; (8006be0 <HAL_DMA_IRQHandler+0xcb0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d108      	bne.n	8006a54 <HAL_DMA_IRQHandler+0xb24>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0208 	bic.w	r2, r2, #8
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e007      	b.n	8006a64 <HAL_DMA_IRQHandler+0xb34>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0204 	bic.w	r2, r2, #4
 8006a62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8165 	beq.w	8006d38 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a76:	e15f      	b.n	8006d38 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2202      	movs	r2, #2
 8006a82:	409a      	lsls	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80c5 	beq.w	8006c18 <HAL_DMA_IRQHandler+0xce8>
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80bf 	beq.w	8006c18 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	409a      	lsls	r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d018      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 813a 	beq.w	8006d3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad0:	e134      	b.n	8006d3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8130 	beq.w	8006d3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ae4:	e12a      	b.n	8006d3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 8089 	bne.w	8006c04 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <HAL_DMA_IRQHandler+0xc74>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d04a      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a29      	ldr	r2, [pc, #164]	; (8006ba8 <HAL_DMA_IRQHandler+0xc78>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d045      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a28      	ldr	r2, [pc, #160]	; (8006bac <HAL_DMA_IRQHandler+0xc7c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d040      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a26      	ldr	r2, [pc, #152]	; (8006bb0 <HAL_DMA_IRQHandler+0xc80>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d03b      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <HAL_DMA_IRQHandler+0xc84>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d036      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <HAL_DMA_IRQHandler+0xc88>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d031      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <HAL_DMA_IRQHandler+0xc8c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d02c      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <HAL_DMA_IRQHandler+0xc90>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d027      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_DMA_IRQHandler+0xc94>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d022      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <HAL_DMA_IRQHandler+0xc98>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01d      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <HAL_DMA_IRQHandler+0xc9c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1a      	ldr	r2, [pc, #104]	; (8006bd0 <HAL_DMA_IRQHandler+0xca0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_DMA_IRQHandler+0xca4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <HAL_DMA_IRQHandler+0xca8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <HAL_DMA_IRQHandler+0xcac>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <HAL_DMA_IRQHandler+0xcb0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d128      	bne.n	8006be4 <HAL_DMA_IRQHandler+0xcb4>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0214 	bic.w	r2, r2, #20
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e027      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xcc4>
 8006ba4:	40020010 	.word	0x40020010
 8006ba8:	40020028 	.word	0x40020028
 8006bac:	40020040 	.word	0x40020040
 8006bb0:	40020058 	.word	0x40020058
 8006bb4:	40020070 	.word	0x40020070
 8006bb8:	40020088 	.word	0x40020088
 8006bbc:	400200a0 	.word	0x400200a0
 8006bc0:	400200b8 	.word	0x400200b8
 8006bc4:	40020410 	.word	0x40020410
 8006bc8:	40020428 	.word	0x40020428
 8006bcc:	40020440 	.word	0x40020440
 8006bd0:	40020458 	.word	0x40020458
 8006bd4:	40020470 	.word	0x40020470
 8006bd8:	40020488 	.word	0x40020488
 8006bdc:	400204a0 	.word	0x400204a0
 8006be0:	400204b8 	.word	0x400204b8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 020a 	bic.w	r2, r2, #10
 8006bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8097 	beq.w	8006d3c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c16:	e091      	b.n	8006d3c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2208      	movs	r2, #8
 8006c22:	409a      	lsls	r2, r3
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8088 	beq.w	8006d3e <HAL_DMA_IRQHandler+0xe0e>
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8082 	beq.w	8006d3e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a41      	ldr	r2, [pc, #260]	; (8006d44 <HAL_DMA_IRQHandler+0xe14>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d04a      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <HAL_DMA_IRQHandler+0xe18>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d045      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a3e      	ldr	r2, [pc, #248]	; (8006d4c <HAL_DMA_IRQHandler+0xe1c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d040      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a3c      	ldr	r2, [pc, #240]	; (8006d50 <HAL_DMA_IRQHandler+0xe20>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d03b      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3b      	ldr	r2, [pc, #236]	; (8006d54 <HAL_DMA_IRQHandler+0xe24>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d036      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a39      	ldr	r2, [pc, #228]	; (8006d58 <HAL_DMA_IRQHandler+0xe28>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d031      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a38      	ldr	r2, [pc, #224]	; (8006d5c <HAL_DMA_IRQHandler+0xe2c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d02c      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a36      	ldr	r2, [pc, #216]	; (8006d60 <HAL_DMA_IRQHandler+0xe30>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d027      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a35      	ldr	r2, [pc, #212]	; (8006d64 <HAL_DMA_IRQHandler+0xe34>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d022      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a33      	ldr	r2, [pc, #204]	; (8006d68 <HAL_DMA_IRQHandler+0xe38>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a32      	ldr	r2, [pc, #200]	; (8006d6c <HAL_DMA_IRQHandler+0xe3c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a30      	ldr	r2, [pc, #192]	; (8006d70 <HAL_DMA_IRQHandler+0xe40>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2f      	ldr	r2, [pc, #188]	; (8006d74 <HAL_DMA_IRQHandler+0xe44>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2d      	ldr	r2, [pc, #180]	; (8006d78 <HAL_DMA_IRQHandler+0xe48>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2c      	ldr	r2, [pc, #176]	; (8006d7c <HAL_DMA_IRQHandler+0xe4c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2a      	ldr	r2, [pc, #168]	; (8006d80 <HAL_DMA_IRQHandler+0xe50>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <HAL_DMA_IRQHandler+0xdbc>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 021c 	bic.w	r2, r2, #28
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e007      	b.n	8006cfc <HAL_DMA_IRQHandler+0xdcc>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 020e 	bic.w	r2, r2, #14
 8006cfa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2201      	movs	r2, #1
 8006d06:	409a      	lsls	r2, r3
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	e004      	b.n	8006d3e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d3e:	3728      	adds	r7, #40	; 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40020010 	.word	0x40020010
 8006d48:	40020028 	.word	0x40020028
 8006d4c:	40020040 	.word	0x40020040
 8006d50:	40020058 	.word	0x40020058
 8006d54:	40020070 	.word	0x40020070
 8006d58:	40020088 	.word	0x40020088
 8006d5c:	400200a0 	.word	0x400200a0
 8006d60:	400200b8 	.word	0x400200b8
 8006d64:	40020410 	.word	0x40020410
 8006d68:	40020428 	.word	0x40020428
 8006d6c:	40020440 	.word	0x40020440
 8006d70:	40020458 	.word	0x40020458
 8006d74:	40020470 	.word	0x40020470
 8006d78:	40020488 	.word	0x40020488
 8006d7c:	400204a0 	.word	0x400204a0
 8006d80:	400204b8 	.word	0x400204b8

08006d84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a7f      	ldr	r2, [pc, #508]	; (8006fa0 <DMA_SetConfig+0x21c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d072      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a7d      	ldr	r2, [pc, #500]	; (8006fa4 <DMA_SetConfig+0x220>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d06d      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a7c      	ldr	r2, [pc, #496]	; (8006fa8 <DMA_SetConfig+0x224>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d068      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a7a      	ldr	r2, [pc, #488]	; (8006fac <DMA_SetConfig+0x228>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d063      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a79      	ldr	r2, [pc, #484]	; (8006fb0 <DMA_SetConfig+0x22c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d05e      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a77      	ldr	r2, [pc, #476]	; (8006fb4 <DMA_SetConfig+0x230>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d059      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a76      	ldr	r2, [pc, #472]	; (8006fb8 <DMA_SetConfig+0x234>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d054      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a74      	ldr	r2, [pc, #464]	; (8006fbc <DMA_SetConfig+0x238>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d04f      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a73      	ldr	r2, [pc, #460]	; (8006fc0 <DMA_SetConfig+0x23c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04a      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a71      	ldr	r2, [pc, #452]	; (8006fc4 <DMA_SetConfig+0x240>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d045      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a70      	ldr	r2, [pc, #448]	; (8006fc8 <DMA_SetConfig+0x244>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d040      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a6e      	ldr	r2, [pc, #440]	; (8006fcc <DMA_SetConfig+0x248>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03b      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a6d      	ldr	r2, [pc, #436]	; (8006fd0 <DMA_SetConfig+0x24c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d036      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6b      	ldr	r2, [pc, #428]	; (8006fd4 <DMA_SetConfig+0x250>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a6a      	ldr	r2, [pc, #424]	; (8006fd8 <DMA_SetConfig+0x254>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d02c      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a68      	ldr	r2, [pc, #416]	; (8006fdc <DMA_SetConfig+0x258>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d027      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a67      	ldr	r2, [pc, #412]	; (8006fe0 <DMA_SetConfig+0x25c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a65      	ldr	r2, [pc, #404]	; (8006fe4 <DMA_SetConfig+0x260>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a64      	ldr	r2, [pc, #400]	; (8006fe8 <DMA_SetConfig+0x264>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d018      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a62      	ldr	r2, [pc, #392]	; (8006fec <DMA_SetConfig+0x268>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a61      	ldr	r2, [pc, #388]	; (8006ff0 <DMA_SetConfig+0x26c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a5f      	ldr	r2, [pc, #380]	; (8006ff4 <DMA_SetConfig+0x270>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a5e      	ldr	r2, [pc, #376]	; (8006ff8 <DMA_SetConfig+0x274>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <DMA_SetConfig+0x10a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a5c      	ldr	r2, [pc, #368]	; (8006ffc <DMA_SetConfig+0x278>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <DMA_SetConfig+0x10e>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <DMA_SetConfig+0x110>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ea0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006eb2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a39      	ldr	r2, [pc, #228]	; (8006fa0 <DMA_SetConfig+0x21c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d04a      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a38      	ldr	r2, [pc, #224]	; (8006fa4 <DMA_SetConfig+0x220>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d045      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a36      	ldr	r2, [pc, #216]	; (8006fa8 <DMA_SetConfig+0x224>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d040      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a35      	ldr	r2, [pc, #212]	; (8006fac <DMA_SetConfig+0x228>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d03b      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a33      	ldr	r2, [pc, #204]	; (8006fb0 <DMA_SetConfig+0x22c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d036      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a32      	ldr	r2, [pc, #200]	; (8006fb4 <DMA_SetConfig+0x230>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d031      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a30      	ldr	r2, [pc, #192]	; (8006fb8 <DMA_SetConfig+0x234>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02c      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a2f      	ldr	r2, [pc, #188]	; (8006fbc <DMA_SetConfig+0x238>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d027      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2d      	ldr	r2, [pc, #180]	; (8006fc0 <DMA_SetConfig+0x23c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d022      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <DMA_SetConfig+0x240>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d01d      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <DMA_SetConfig+0x244>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <DMA_SetConfig+0x248>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a27      	ldr	r2, [pc, #156]	; (8006fd0 <DMA_SetConfig+0x24c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <DMA_SetConfig+0x250>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <DMA_SetConfig+0x254>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <DMA_SetConfig+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <DMA_SetConfig+0x258>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d101      	bne.n	8006f58 <DMA_SetConfig+0x1d4>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <DMA_SetConfig+0x1d6>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d059      	beq.n	8007012 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	223f      	movs	r2, #63	; 0x3f
 8006f68:	409a      	lsls	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f7c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d138      	bne.n	8007000 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f9e:	e086      	b.n	80070ae <DMA_SetConfig+0x32a>
 8006fa0:	40020010 	.word	0x40020010
 8006fa4:	40020028 	.word	0x40020028
 8006fa8:	40020040 	.word	0x40020040
 8006fac:	40020058 	.word	0x40020058
 8006fb0:	40020070 	.word	0x40020070
 8006fb4:	40020088 	.word	0x40020088
 8006fb8:	400200a0 	.word	0x400200a0
 8006fbc:	400200b8 	.word	0x400200b8
 8006fc0:	40020410 	.word	0x40020410
 8006fc4:	40020428 	.word	0x40020428
 8006fc8:	40020440 	.word	0x40020440
 8006fcc:	40020458 	.word	0x40020458
 8006fd0:	40020470 	.word	0x40020470
 8006fd4:	40020488 	.word	0x40020488
 8006fd8:	400204a0 	.word	0x400204a0
 8006fdc:	400204b8 	.word	0x400204b8
 8006fe0:	58025408 	.word	0x58025408
 8006fe4:	5802541c 	.word	0x5802541c
 8006fe8:	58025430 	.word	0x58025430
 8006fec:	58025444 	.word	0x58025444
 8006ff0:	58025458 	.word	0x58025458
 8006ff4:	5802546c 	.word	0x5802546c
 8006ff8:	58025480 	.word	0x58025480
 8006ffc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]
}
 8007010:	e04d      	b.n	80070ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a29      	ldr	r2, [pc, #164]	; (80070bc <DMA_SetConfig+0x338>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d022      	beq.n	8007062 <DMA_SetConfig+0x2de>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a27      	ldr	r2, [pc, #156]	; (80070c0 <DMA_SetConfig+0x33c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01d      	beq.n	8007062 <DMA_SetConfig+0x2de>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a26      	ldr	r2, [pc, #152]	; (80070c4 <DMA_SetConfig+0x340>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d018      	beq.n	8007062 <DMA_SetConfig+0x2de>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a24      	ldr	r2, [pc, #144]	; (80070c8 <DMA_SetConfig+0x344>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <DMA_SetConfig+0x2de>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a23      	ldr	r2, [pc, #140]	; (80070cc <DMA_SetConfig+0x348>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00e      	beq.n	8007062 <DMA_SetConfig+0x2de>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <DMA_SetConfig+0x34c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d009      	beq.n	8007062 <DMA_SetConfig+0x2de>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a20      	ldr	r2, [pc, #128]	; (80070d4 <DMA_SetConfig+0x350>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <DMA_SetConfig+0x2de>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1e      	ldr	r2, [pc, #120]	; (80070d8 <DMA_SetConfig+0x354>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d101      	bne.n	8007066 <DMA_SetConfig+0x2e2>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <DMA_SetConfig+0x2e4>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d020      	beq.n	80070ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	2201      	movs	r2, #1
 8007076:	409a      	lsls	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d108      	bne.n	800709e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	60da      	str	r2, [r3, #12]
}
 800709c:	e007      	b.n	80070ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	60da      	str	r2, [r3, #12]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	58025408 	.word	0x58025408
 80070c0:	5802541c 	.word	0x5802541c
 80070c4:	58025430 	.word	0x58025430
 80070c8:	58025444 	.word	0x58025444
 80070cc:	58025458 	.word	0x58025458
 80070d0:	5802546c 	.word	0x5802546c
 80070d4:	58025480 	.word	0x58025480
 80070d8:	58025494 	.word	0x58025494

080070dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a42      	ldr	r2, [pc, #264]	; (80071f4 <DMA_CalcBaseAndBitshift+0x118>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d04a      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a41      	ldr	r2, [pc, #260]	; (80071f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d045      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a3f      	ldr	r2, [pc, #252]	; (80071fc <DMA_CalcBaseAndBitshift+0x120>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d040      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a3e      	ldr	r2, [pc, #248]	; (8007200 <DMA_CalcBaseAndBitshift+0x124>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d03b      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3c      	ldr	r2, [pc, #240]	; (8007204 <DMA_CalcBaseAndBitshift+0x128>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d036      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3b      	ldr	r2, [pc, #236]	; (8007208 <DMA_CalcBaseAndBitshift+0x12c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d031      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a39      	ldr	r2, [pc, #228]	; (800720c <DMA_CalcBaseAndBitshift+0x130>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d02c      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a38      	ldr	r2, [pc, #224]	; (8007210 <DMA_CalcBaseAndBitshift+0x134>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d027      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a36      	ldr	r2, [pc, #216]	; (8007214 <DMA_CalcBaseAndBitshift+0x138>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d022      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a35      	ldr	r2, [pc, #212]	; (8007218 <DMA_CalcBaseAndBitshift+0x13c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d01d      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a33      	ldr	r2, [pc, #204]	; (800721c <DMA_CalcBaseAndBitshift+0x140>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a32      	ldr	r2, [pc, #200]	; (8007220 <DMA_CalcBaseAndBitshift+0x144>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a30      	ldr	r2, [pc, #192]	; (8007224 <DMA_CalcBaseAndBitshift+0x148>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2f      	ldr	r2, [pc, #188]	; (8007228 <DMA_CalcBaseAndBitshift+0x14c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2d      	ldr	r2, [pc, #180]	; (800722c <DMA_CalcBaseAndBitshift+0x150>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2c      	ldr	r2, [pc, #176]	; (8007230 <DMA_CalcBaseAndBitshift+0x154>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d101      	bne.n	8007188 <DMA_CalcBaseAndBitshift+0xac>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <DMA_CalcBaseAndBitshift+0xae>
 8007188:	2300      	movs	r3, #0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d024      	beq.n	80071d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	3b10      	subs	r3, #16
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <DMA_CalcBaseAndBitshift+0x158>)
 8007198:	fba2 2303 	umull	r2, r3, r2, r3
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	4a24      	ldr	r2, [pc, #144]	; (8007238 <DMA_CalcBaseAndBitshift+0x15c>)
 80071a8:	5cd3      	ldrb	r3, [r2, r3]
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d908      	bls.n	80071c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	4b1f      	ldr	r3, [pc, #124]	; (800723c <DMA_CalcBaseAndBitshift+0x160>)
 80071be:	4013      	ands	r3, r2
 80071c0:	1d1a      	adds	r2, r3, #4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	659a      	str	r2, [r3, #88]	; 0x58
 80071c6:	e00d      	b.n	80071e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	4b1b      	ldr	r3, [pc, #108]	; (800723c <DMA_CalcBaseAndBitshift+0x160>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6593      	str	r3, [r2, #88]	; 0x58
 80071d6:	e005      	b.n	80071e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	40020010 	.word	0x40020010
 80071f8:	40020028 	.word	0x40020028
 80071fc:	40020040 	.word	0x40020040
 8007200:	40020058 	.word	0x40020058
 8007204:	40020070 	.word	0x40020070
 8007208:	40020088 	.word	0x40020088
 800720c:	400200a0 	.word	0x400200a0
 8007210:	400200b8 	.word	0x400200b8
 8007214:	40020410 	.word	0x40020410
 8007218:	40020428 	.word	0x40020428
 800721c:	40020440 	.word	0x40020440
 8007220:	40020458 	.word	0x40020458
 8007224:	40020470 	.word	0x40020470
 8007228:	40020488 	.word	0x40020488
 800722c:	400204a0 	.word	0x400204a0
 8007230:	400204b8 	.word	0x400204b8
 8007234:	aaaaaaab 	.word	0xaaaaaaab
 8007238:	08010e00 	.word	0x08010e00
 800723c:	fffffc00 	.word	0xfffffc00

08007240 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d120      	bne.n	8007296 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	2b03      	cmp	r3, #3
 800725a:	d858      	bhi.n	800730e <DMA_CheckFifoParam+0xce>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <DMA_CheckFifoParam+0x24>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007275 	.word	0x08007275
 8007268:	08007287 	.word	0x08007287
 800726c:	08007275 	.word	0x08007275
 8007270:	0800730f 	.word	0x0800730f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d048      	beq.n	8007312 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007284:	e045      	b.n	8007312 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800728e:	d142      	bne.n	8007316 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007294:	e03f      	b.n	8007316 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729e:	d123      	bne.n	80072e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d838      	bhi.n	800731a <DMA_CheckFifoParam+0xda>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <DMA_CheckFifoParam+0x70>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072c7 	.word	0x080072c7
 80072b8:	080072c1 	.word	0x080072c1
 80072bc:	080072d9 	.word	0x080072d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
        break;
 80072c4:	e030      	b.n	8007328 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d025      	beq.n	800731e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072d6:	e022      	b.n	800731e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072e0:	d11f      	bne.n	8007322 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072e6:	e01c      	b.n	8007322 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d902      	bls.n	80072f6 <DMA_CheckFifoParam+0xb6>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d003      	beq.n	80072fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80072f4:	e018      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	73fb      	strb	r3, [r7, #15]
        break;
 80072fa:	e015      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00e      	beq.n	8007326 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]
    break;
 800730c:	e00b      	b.n	8007326 <DMA_CheckFifoParam+0xe6>
        break;
 800730e:	bf00      	nop
 8007310:	e00a      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        break;
 8007312:	bf00      	nop
 8007314:	e008      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        break;
 8007316:	bf00      	nop
 8007318:	e006      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        break;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
        break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <DMA_CheckFifoParam+0xe8>
    break;
 8007326:	bf00      	nop
    }
  }

  return status;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a38      	ldr	r2, [pc, #224]	; (800742c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d022      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a36      	ldr	r2, [pc, #216]	; (8007430 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01d      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a35      	ldr	r2, [pc, #212]	; (8007434 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a33      	ldr	r2, [pc, #204]	; (8007438 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a32      	ldr	r2, [pc, #200]	; (800743c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a30      	ldr	r2, [pc, #192]	; (8007440 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a2f      	ldr	r2, [pc, #188]	; (8007444 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2d      	ldr	r2, [pc, #180]	; (8007448 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	3b08      	subs	r3, #8
 80073a8:	4a28      	ldr	r2, [pc, #160]	; (800744c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4b26      	ldr	r3, [pc, #152]	; (8007450 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	461a      	mov	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a24      	ldr	r2, [pc, #144]	; (8007454 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80073c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2201      	movs	r2, #1
 80073ce:	409a      	lsls	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80073d4:	e024      	b.n	8007420 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	3b10      	subs	r3, #16
 80073de:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4a1c      	ldr	r2, [pc, #112]	; (800745c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d806      	bhi.n	80073fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d902      	bls.n	80073fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3308      	adds	r3, #8
 80073fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4b18      	ldr	r3, [pc, #96]	; (8007464 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a16      	ldr	r2, [pc, #88]	; (8007468 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007410:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	2201      	movs	r2, #1
 800741a:	409a      	lsls	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	58025408 	.word	0x58025408
 8007430:	5802541c 	.word	0x5802541c
 8007434:	58025430 	.word	0x58025430
 8007438:	58025444 	.word	0x58025444
 800743c:	58025458 	.word	0x58025458
 8007440:	5802546c 	.word	0x5802546c
 8007444:	58025480 	.word	0x58025480
 8007448:	58025494 	.word	0x58025494
 800744c:	cccccccd 	.word	0xcccccccd
 8007450:	16009600 	.word	0x16009600
 8007454:	58025880 	.word	0x58025880
 8007458:	aaaaaaab 	.word	0xaaaaaaab
 800745c:	400204b8 	.word	0x400204b8
 8007460:	4002040f 	.word	0x4002040f
 8007464:	10008200 	.word	0x10008200
 8007468:	40020880 	.word	0x40020880

0800746c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d04a      	beq.n	8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d847      	bhi.n	8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a25      	ldr	r2, [pc, #148]	; (8007524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d022      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a24      	ldr	r2, [pc, #144]	; (8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d01d      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d018      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a21      	ldr	r2, [pc, #132]	; (8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d013      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00e      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d009      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	; (800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d101      	bne.n	80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80074dc:	2300      	movs	r3, #0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4b17      	ldr	r3, [pc, #92]	; (8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80074f4:	671a      	str	r2, [r3, #112]	; 0x70
 80074f6:	e009      	b.n	800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4b14      	ldr	r3, [pc, #80]	; (800754c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a11      	ldr	r2, [pc, #68]	; (8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800750a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3b01      	subs	r3, #1
 8007510:	2201      	movs	r2, #1
 8007512:	409a      	lsls	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	58025408 	.word	0x58025408
 8007528:	5802541c 	.word	0x5802541c
 800752c:	58025430 	.word	0x58025430
 8007530:	58025444 	.word	0x58025444
 8007534:	58025458 	.word	0x58025458
 8007538:	5802546c 	.word	0x5802546c
 800753c:	58025480 	.word	0x58025480
 8007540:	58025494 	.word	0x58025494
 8007544:	1600963f 	.word	0x1600963f
 8007548:	58025940 	.word	0x58025940
 800754c:	1000823f 	.word	0x1000823f
 8007550:	40020940 	.word	0x40020940

08007554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007554:	b480      	push	{r7}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800755e:	2300      	movs	r3, #0
 8007560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007562:	4b89      	ldr	r3, [pc, #548]	; (8007788 <HAL_GPIO_Init+0x234>)
 8007564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007566:	e194      	b.n	8007892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	2101      	movs	r1, #1
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	4013      	ands	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8186 	beq.w	800788c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d005      	beq.n	8007598 <HAL_GPIO_Init+0x44>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d130      	bne.n	80075fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	2203      	movs	r2, #3
 80075a4:	fa02 f303 	lsl.w	r3, r2, r3
 80075a8:	43db      	mvns	r3, r3
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	4013      	ands	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4313      	orrs	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80075ce:	2201      	movs	r2, #1
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	43db      	mvns	r3, r3
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	4013      	ands	r3, r2
 80075dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	f003 0201 	and.w	r2, r3, #1
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	fa02 f303 	lsl.w	r3, r2, r3
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d017      	beq.n	8007636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	2203      	movs	r2, #3
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	43db      	mvns	r3, r3
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	4013      	ands	r3, r2
 800761c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	4313      	orrs	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d123      	bne.n	800768a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	08da      	lsrs	r2, r3, #3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3208      	adds	r2, #8
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	220f      	movs	r2, #15
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	43db      	mvns	r3, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4013      	ands	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	4313      	orrs	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	08da      	lsrs	r2, r3, #3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3208      	adds	r2, #8
 8007684:	69b9      	ldr	r1, [r7, #24]
 8007686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	2203      	movs	r2, #3
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	43db      	mvns	r3, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4013      	ands	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f003 0203 	and.w	r2, r3, #3
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	fa02 f303 	lsl.w	r3, r2, r3
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80e0 	beq.w	800788c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076cc:	4b2f      	ldr	r3, [pc, #188]	; (800778c <HAL_GPIO_Init+0x238>)
 80076ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076d2:	4a2e      	ldr	r2, [pc, #184]	; (800778c <HAL_GPIO_Init+0x238>)
 80076d4:	f043 0302 	orr.w	r3, r3, #2
 80076d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80076dc:	4b2b      	ldr	r3, [pc, #172]	; (800778c <HAL_GPIO_Init+0x238>)
 80076de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076ea:	4a29      	ldr	r2, [pc, #164]	; (8007790 <HAL_GPIO_Init+0x23c>)
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	089b      	lsrs	r3, r3, #2
 80076f0:	3302      	adds	r3, #2
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	220f      	movs	r2, #15
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	43db      	mvns	r3, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4013      	ands	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a20      	ldr	r2, [pc, #128]	; (8007794 <HAL_GPIO_Init+0x240>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d052      	beq.n	80077bc <HAL_GPIO_Init+0x268>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a1f      	ldr	r2, [pc, #124]	; (8007798 <HAL_GPIO_Init+0x244>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d031      	beq.n	8007782 <HAL_GPIO_Init+0x22e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a1e      	ldr	r2, [pc, #120]	; (800779c <HAL_GPIO_Init+0x248>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02b      	beq.n	800777e <HAL_GPIO_Init+0x22a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a1d      	ldr	r2, [pc, #116]	; (80077a0 <HAL_GPIO_Init+0x24c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d025      	beq.n	800777a <HAL_GPIO_Init+0x226>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1c      	ldr	r2, [pc, #112]	; (80077a4 <HAL_GPIO_Init+0x250>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d01f      	beq.n	8007776 <HAL_GPIO_Init+0x222>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a1b      	ldr	r2, [pc, #108]	; (80077a8 <HAL_GPIO_Init+0x254>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d019      	beq.n	8007772 <HAL_GPIO_Init+0x21e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a1a      	ldr	r2, [pc, #104]	; (80077ac <HAL_GPIO_Init+0x258>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <HAL_GPIO_Init+0x21a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <HAL_GPIO_Init+0x25c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00d      	beq.n	800776a <HAL_GPIO_Init+0x216>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <HAL_GPIO_Init+0x260>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <HAL_GPIO_Init+0x212>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <HAL_GPIO_Init+0x264>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <HAL_GPIO_Init+0x20e>
 800775e:	2309      	movs	r3, #9
 8007760:	e02d      	b.n	80077be <HAL_GPIO_Init+0x26a>
 8007762:	230a      	movs	r3, #10
 8007764:	e02b      	b.n	80077be <HAL_GPIO_Init+0x26a>
 8007766:	2308      	movs	r3, #8
 8007768:	e029      	b.n	80077be <HAL_GPIO_Init+0x26a>
 800776a:	2307      	movs	r3, #7
 800776c:	e027      	b.n	80077be <HAL_GPIO_Init+0x26a>
 800776e:	2306      	movs	r3, #6
 8007770:	e025      	b.n	80077be <HAL_GPIO_Init+0x26a>
 8007772:	2305      	movs	r3, #5
 8007774:	e023      	b.n	80077be <HAL_GPIO_Init+0x26a>
 8007776:	2304      	movs	r3, #4
 8007778:	e021      	b.n	80077be <HAL_GPIO_Init+0x26a>
 800777a:	2303      	movs	r3, #3
 800777c:	e01f      	b.n	80077be <HAL_GPIO_Init+0x26a>
 800777e:	2302      	movs	r3, #2
 8007780:	e01d      	b.n	80077be <HAL_GPIO_Init+0x26a>
 8007782:	2301      	movs	r3, #1
 8007784:	e01b      	b.n	80077be <HAL_GPIO_Init+0x26a>
 8007786:	bf00      	nop
 8007788:	58000080 	.word	0x58000080
 800778c:	58024400 	.word	0x58024400
 8007790:	58000400 	.word	0x58000400
 8007794:	58020000 	.word	0x58020000
 8007798:	58020400 	.word	0x58020400
 800779c:	58020800 	.word	0x58020800
 80077a0:	58020c00 	.word	0x58020c00
 80077a4:	58021000 	.word	0x58021000
 80077a8:	58021400 	.word	0x58021400
 80077ac:	58021800 	.word	0x58021800
 80077b0:	58021c00 	.word	0x58021c00
 80077b4:	58022000 	.word	0x58022000
 80077b8:	58022400 	.word	0x58022400
 80077bc:	2300      	movs	r3, #0
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	f002 0203 	and.w	r2, r2, #3
 80077c4:	0092      	lsls	r2, r2, #2
 80077c6:	4093      	lsls	r3, r2
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077ce:	4938      	ldr	r1, [pc, #224]	; (80078b0 <HAL_GPIO_Init+0x35c>)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	089b      	lsrs	r3, r3, #2
 80077d4:	3302      	adds	r3, #2
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	43db      	mvns	r3, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4013      	ands	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800780a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	43db      	mvns	r3, r3
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	4013      	ands	r3, r2
 800781a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	43db      	mvns	r3, r3
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4013      	ands	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	43db      	mvns	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	3301      	adds	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	f47f ae63 	bne.w	8007568 <HAL_GPIO_Init+0x14>
  }
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	3724      	adds	r7, #36	; 0x24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	58000400 	.word	0x58000400

080078b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	887b      	ldrh	r3, [r7, #2]
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
 80078d0:	e001      	b.n	80078d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	807b      	strh	r3, [r7, #2]
 80078f0:	4613      	mov	r3, r2
 80078f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078f4:	787b      	ldrb	r3, [r7, #1]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078fa:	887a      	ldrh	r2, [r7, #2]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007900:	e003      	b.n	800790a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	041a      	lsls	r2, r3, #16
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	619a      	str	r2, [r3, #24]
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e08b      	b.n	8007a42 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fa fb02 	bl	8001f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2224      	movs	r2, #36	; 0x24
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0201 	bic.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007968:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007978:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d107      	bne.n	8007992 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800798e:	609a      	str	r2, [r3, #8]
 8007990:	e006      	b.n	80079a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800799e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d108      	bne.n	80079ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	e007      	b.n	80079ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6859      	ldr	r1, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <HAL_I2C_Init+0x134>)
 80079d6:	430b      	orrs	r3, r1
 80079d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69d9      	ldr	r1, [r3, #28]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a1a      	ldr	r2, [r3, #32]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	02008000 	.word	0x02008000

08007a50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	817b      	strh	r3, [r7, #10]
 8007a60:	4613      	mov	r3, r2
 8007a62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	f040 80fd 	bne.w	8007c6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_I2C_Master_Transmit+0x30>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e0f6      	b.n	8007c6e <HAL_I2C_Master_Transmit+0x21e>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a88:	f7fa feac 	bl	80027e4 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2319      	movs	r3, #25
 8007a94:	2201      	movs	r2, #1
 8007a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fa0a 	bl	8007eb4 <I2C_WaitOnFlagUntilTimeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e0e1      	b.n	8007c6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2221      	movs	r2, #33	; 0x21
 8007aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	893a      	ldrh	r2, [r7, #8]
 8007aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2bff      	cmp	r3, #255	; 0xff
 8007ada:	d906      	bls.n	8007aea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	22ff      	movs	r2, #255	; 0xff
 8007ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e007      	b.n	8007afa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007af8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d024      	beq.n	8007b4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	781a      	ldrb	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	3301      	adds	r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	8979      	ldrh	r1, [r7, #10]
 8007b3e:	4b4e      	ldr	r3, [pc, #312]	; (8007c78 <HAL_I2C_Master_Transmit+0x228>)
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fc05 	bl	8008354 <I2C_TransferConfig>
 8007b4a:	e066      	b.n	8007c1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	8979      	ldrh	r1, [r7, #10]
 8007b54:	4b48      	ldr	r3, [pc, #288]	; (8007c78 <HAL_I2C_Master_Transmit+0x228>)
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 fbfa 	bl	8008354 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b60:	e05b      	b.n	8007c1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	6a39      	ldr	r1, [r7, #32]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f9fd 	bl	8007f66 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e07b      	b.n	8007c6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	781a      	ldrb	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d034      	beq.n	8007c1a <HAL_I2C_Master_Transmit+0x1ca>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d130      	bne.n	8007c1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2180      	movs	r1, #128	; 0x80
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f976 	bl	8007eb4 <I2C_WaitOnFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e04d      	b.n	8007c6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2bff      	cmp	r3, #255	; 0xff
 8007bda:	d90e      	bls.n	8007bfa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	22ff      	movs	r2, #255	; 0xff
 8007be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	8979      	ldrh	r1, [r7, #10]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fbae 	bl	8008354 <I2C_TransferConfig>
 8007bf8:	e00f      	b.n	8007c1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	8979      	ldrh	r1, [r7, #10]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fb9d 	bl	8008354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d19e      	bne.n	8007b62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	6a39      	ldr	r1, [r7, #32]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f9e3 	bl	8007ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e01a      	b.n	8007c6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_I2C_Master_Transmit+0x22c>)
 8007c4c:	400b      	ands	r3, r1
 8007c4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e000      	b.n	8007c6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007c6c:	2302      	movs	r3, #2
  }
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	80002000 	.word	0x80002000
 8007c7c:	fe00e800 	.word	0xfe00e800

08007c80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	817b      	strh	r3, [r7, #10]
 8007c90:	4613      	mov	r3, r2
 8007c92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	f040 80db 	bne.w	8007e58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_I2C_Master_Receive+0x30>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e0d4      	b.n	8007e5a <HAL_I2C_Master_Receive+0x1da>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cb8:	f7fa fd94 	bl	80027e4 <HAL_GetTick>
 8007cbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	2319      	movs	r3, #25
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f8f2 	bl	8007eb4 <I2C_WaitOnFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e0bf      	b.n	8007e5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2222      	movs	r2, #34	; 0x22
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2210      	movs	r2, #16
 8007ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	893a      	ldrh	r2, [r7, #8]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2bff      	cmp	r3, #255	; 0xff
 8007d0a:	d90e      	bls.n	8007d2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	22ff      	movs	r2, #255	; 0xff
 8007d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	8979      	ldrh	r1, [r7, #10]
 8007d1a:	4b52      	ldr	r3, [pc, #328]	; (8007e64 <HAL_I2C_Master_Receive+0x1e4>)
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fb16 	bl	8008354 <I2C_TransferConfig>
 8007d28:	e06d      	b.n	8007e06 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	8979      	ldrh	r1, [r7, #10]
 8007d3c:	4b49      	ldr	r3, [pc, #292]	; (8007e64 <HAL_I2C_Master_Receive+0x1e4>)
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fb05 	bl	8008354 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007d4a:	e05c      	b.n	8007e06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	6a39      	ldr	r1, [r7, #32]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f993 	bl	800807c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e07c      	b.n	8007e5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d034      	beq.n	8007e06 <HAL_I2C_Master_Receive+0x186>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d130      	bne.n	8007e06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	2200      	movs	r2, #0
 8007dac:	2180      	movs	r1, #128	; 0x80
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 f880 	bl	8007eb4 <I2C_WaitOnFlagUntilTimeout>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e04d      	b.n	8007e5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2bff      	cmp	r3, #255	; 0xff
 8007dc6:	d90e      	bls.n	8007de6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	22ff      	movs	r2, #255	; 0xff
 8007dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	8979      	ldrh	r1, [r7, #10]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fab8 	bl	8008354 <I2C_TransferConfig>
 8007de4:	e00f      	b.n	8007e06 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	8979      	ldrh	r1, [r7, #10]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 faa7 	bl	8008354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d19d      	bne.n	8007d4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	6a39      	ldr	r1, [r7, #32]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f8ed 	bl	8007ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e01a      	b.n	8007e5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6859      	ldr	r1, [r3, #4]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <HAL_I2C_Master_Receive+0x1e8>)
 8007e38:	400b      	ands	r3, r1
 8007e3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	80002400 	.word	0x80002400
 8007e68:	fe00e800 	.word	0xfe00e800

08007e6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d103      	bne.n	8007e8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d007      	beq.n	8007ea8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	619a      	str	r2, [r3, #24]
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec4:	e03b      	b.n	8007f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f962 	bl	8008194 <I2C_IsErrorOccurred>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e041      	b.n	8007f5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee0:	d02d      	beq.n	8007f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee2:	f7fa fc7f 	bl	80027e4 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d302      	bcc.n	8007ef8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d122      	bne.n	8007f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d113      	bne.n	8007f3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	f043 0220 	orr.w	r2, r3, #32
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e00f      	b.n	8007f5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699a      	ldr	r2, [r3, #24]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4013      	ands	r3, r2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	bf0c      	ite	eq
 8007f4e:	2301      	moveq	r3, #1
 8007f50:	2300      	movne	r3, #0
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d0b4      	beq.n	8007ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f72:	e033      	b.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f90b 	bl	8008194 <I2C_IsErrorOccurred>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e031      	b.n	8007fec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f8e:	d025      	beq.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f90:	f7fa fc28 	bl	80027e4 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d302      	bcc.n	8007fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d11a      	bne.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d013      	beq.n	8007fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb8:	f043 0220 	orr.w	r2, r3, #32
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e007      	b.n	8007fec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d1c4      	bne.n	8007f74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008000:	e02f      	b.n	8008062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f8c4 	bl	8008194 <I2C_IsErrorOccurred>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e02d      	b.n	8008072 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008016:	f7fa fbe5 	bl	80027e4 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	429a      	cmp	r2, r3
 8008024:	d302      	bcc.n	800802c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11a      	bne.n	8008062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b20      	cmp	r3, #32
 8008038:	d013      	beq.n	8008062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e007      	b.n	8008072 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b20      	cmp	r3, #32
 800806e:	d1c8      	bne.n	8008002 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800808c:	e071      	b.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f87e 	bl	8008194 <I2C_IsErrorOccurred>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d13b      	bne.n	8008128 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d138      	bne.n	8008128 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d105      	bne.n	80080d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b10      	cmp	r3, #16
 80080dc:	d121      	bne.n	8008122 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2210      	movs	r2, #16
 80080e4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2204      	movs	r2, #4
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2220      	movs	r2, #32
 80080f2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6859      	ldr	r1, [r3, #4]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b24      	ldr	r3, [pc, #144]	; (8008190 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008100:	400b      	ands	r3, r1
 8008102:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
 8008120:	e002      	b.n	8008128 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008128:	f7fa fb5c 	bl	80027e4 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	429a      	cmp	r2, r3
 8008136:	d302      	bcc.n	800813e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d119      	bne.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d116      	bne.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b04      	cmp	r3, #4
 8008150:	d00f      	beq.n	8008172 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	f043 0220 	orr.w	r2, r3, #32
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2220      	movs	r2, #32
 8008162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b04      	cmp	r3, #4
 800817e:	d002      	beq.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d083      	beq.n	800808e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	fe00e800 	.word	0xfe00e800

08008194 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d068      	beq.n	8008292 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2210      	movs	r2, #16
 80081c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081c8:	e049      	b.n	800825e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d0:	d045      	beq.n	800825e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081d2:	f7fa fb07 	bl	80027e4 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <I2C_IsErrorOccurred+0x54>
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d13a      	bne.n	800825e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820a:	d121      	bne.n	8008250 <I2C_IsErrorOccurred+0xbc>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008212:	d01d      	beq.n	8008250 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008214:	7cfb      	ldrb	r3, [r7, #19]
 8008216:	2b20      	cmp	r3, #32
 8008218:	d01a      	beq.n	8008250 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008228:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800822a:	f7fa fadb 	bl	80027e4 <HAL_GetTick>
 800822e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008230:	e00e      	b.n	8008250 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008232:	f7fa fad7 	bl	80027e4 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b19      	cmp	r3, #25
 800823e:	d907      	bls.n	8008250 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	f043 0320 	orr.w	r3, r3, #32
 8008246:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800824e:	e006      	b.n	800825e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b20      	cmp	r3, #32
 800825c:	d1e9      	bne.n	8008232 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b20      	cmp	r3, #32
 800826a:	d003      	beq.n	8008274 <I2C_IsErrorOccurred+0xe0>
 800826c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0aa      	beq.n	80081ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2220      	movs	r2, #32
 8008282:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	f043 0304 	orr.w	r3, r3, #4
 800828a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00b      	beq.n	80082de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f043 0308 	orr.w	r3, r3, #8
 80082cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f043 0302 	orr.w	r3, r3, #2
 80082ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01c      	beq.n	8008342 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fdaf 	bl	8007e6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6859      	ldr	r1, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <I2C_IsErrorOccurred+0x1bc>)
 800831a:	400b      	ands	r3, r1
 800831c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	431a      	orrs	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008346:	4618      	mov	r0, r3
 8008348:	3728      	adds	r7, #40	; 0x28
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	fe00e800 	.word	0xfe00e800

08008354 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	607b      	str	r3, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	817b      	strh	r3, [r7, #10]
 8008362:	4613      	mov	r3, r2
 8008364:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008366:	897b      	ldrh	r3, [r7, #10]
 8008368:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800836c:	7a7b      	ldrb	r3, [r7, #9]
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008374:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	4313      	orrs	r3, r2
 800837e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008382:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	0d5b      	lsrs	r3, r3, #21
 800838e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <I2C_TransferConfig+0x60>)
 8008394:	430b      	orrs	r3, r1
 8008396:	43db      	mvns	r3, r3
 8008398:	ea02 0103 	and.w	r1, r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	03ff63ff 	.word	0x03ff63ff

080083b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d138      	bne.n	8008440 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083d8:	2302      	movs	r3, #2
 80083da:	e032      	b.n	8008442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2224      	movs	r2, #36	; 0x24
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0201 	bic.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800840a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6819      	ldr	r1, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b20      	cmp	r3, #32
 8008462:	d139      	bne.n	80084d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800846e:	2302      	movs	r3, #2
 8008470:	e033      	b.n	80084da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2224      	movs	r2, #36	; 0x24
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0201 	bic.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0201 	orr.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e000      	b.n	80084da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084d8:	2302      	movs	r3, #2
  }
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80084f4:	4b18      	ldr	r3, [pc, #96]	; (8008558 <HAL_PWR_EnterSTOPMode+0x70>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f023 0201 	bic.w	r2, r3, #1
 80084fc:	4916      	ldr	r1, [pc, #88]	; (8008558 <HAL_PWR_EnterSTOPMode+0x70>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4313      	orrs	r3, r2
 8008502:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008504:	4b14      	ldr	r3, [pc, #80]	; (8008558 <HAL_PWR_EnterSTOPMode+0x70>)
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	4a13      	ldr	r2, [pc, #76]	; (8008558 <HAL_PWR_EnterSTOPMode+0x70>)
 800850a:	f023 0305 	bic.w	r3, r3, #5
 800850e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008510:	4b11      	ldr	r3, [pc, #68]	; (8008558 <HAL_PWR_EnterSTOPMode+0x70>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	4a10      	ldr	r2, [pc, #64]	; (8008558 <HAL_PWR_EnterSTOPMode+0x70>)
 8008516:	f023 0302 	bic.w	r3, r3, #2
 800851a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800851c:	4b0f      	ldr	r3, [pc, #60]	; (800855c <HAL_PWR_EnterSTOPMode+0x74>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4a0e      	ldr	r2, [pc, #56]	; (800855c <HAL_PWR_EnterSTOPMode+0x74>)
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008528:	f3bf 8f4f 	dsb	sy
}
 800852c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800852e:	f3bf 8f6f 	isb	sy
}
 8008532:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800853a:	bf30      	wfi
 800853c:	e000      	b.n	8008540 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800853e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008540:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_PWR_EnterSTOPMode+0x74>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	4a05      	ldr	r2, [pc, #20]	; (800855c <HAL_PWR_EnterSTOPMode+0x74>)
 8008546:	f023 0304 	bic.w	r3, r3, #4
 800854a:	6113      	str	r3, [r2, #16]
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	58024800 	.word	0x58024800
 800855c:	e000ed00 	.word	0xe000ed00

08008560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008568:	4b19      	ldr	r3, [pc, #100]	; (80085d0 <HAL_PWREx_ConfigSupply+0x70>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b04      	cmp	r3, #4
 8008572:	d00a      	beq.n	800858a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008574:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <HAL_PWREx_ConfigSupply+0x70>)
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d001      	beq.n	8008586 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e01f      	b.n	80085c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	e01d      	b.n	80085c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800858a:	4b11      	ldr	r3, [pc, #68]	; (80085d0 <HAL_PWREx_ConfigSupply+0x70>)
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f023 0207 	bic.w	r2, r3, #7
 8008592:	490f      	ldr	r1, [pc, #60]	; (80085d0 <HAL_PWREx_ConfigSupply+0x70>)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4313      	orrs	r3, r2
 8008598:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800859a:	f7fa f923 	bl	80027e4 <HAL_GetTick>
 800859e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085a0:	e009      	b.n	80085b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085a2:	f7fa f91f 	bl	80027e4 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b0:	d901      	bls.n	80085b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e007      	b.n	80085c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085b6:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <HAL_PWREx_ConfigSupply+0x70>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c2:	d1ee      	bne.n	80085a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	58024800 	.word	0x58024800

080085d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	; 0x30
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f000 bc48 	b.w	8008e78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8088 	beq.w	8008706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085f6:	4b99      	ldr	r3, [pc, #612]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008600:	4b96      	ldr	r3, [pc, #600]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	2b10      	cmp	r3, #16
 800860a:	d007      	beq.n	800861c <HAL_RCC_OscConfig+0x48>
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	2b18      	cmp	r3, #24
 8008610:	d111      	bne.n	8008636 <HAL_RCC_OscConfig+0x62>
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	f003 0303 	and.w	r3, r3, #3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d10c      	bne.n	8008636 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861c:	4b8f      	ldr	r3, [pc, #572]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d06d      	beq.n	8008704 <HAL_RCC_OscConfig+0x130>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d169      	bne.n	8008704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f000 bc21 	b.w	8008e78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863e:	d106      	bne.n	800864e <HAL_RCC_OscConfig+0x7a>
 8008640:	4b86      	ldr	r3, [pc, #536]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a85      	ldr	r2, [pc, #532]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	e02e      	b.n	80086ac <HAL_RCC_OscConfig+0xd8>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10c      	bne.n	8008670 <HAL_RCC_OscConfig+0x9c>
 8008656:	4b81      	ldr	r3, [pc, #516]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a80      	ldr	r2, [pc, #512]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800865c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	4b7e      	ldr	r3, [pc, #504]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a7d      	ldr	r2, [pc, #500]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	e01d      	b.n	80086ac <HAL_RCC_OscConfig+0xd8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008678:	d10c      	bne.n	8008694 <HAL_RCC_OscConfig+0xc0>
 800867a:	4b78      	ldr	r3, [pc, #480]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a77      	ldr	r2, [pc, #476]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4b75      	ldr	r3, [pc, #468]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a74      	ldr	r2, [pc, #464]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800868c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	e00b      	b.n	80086ac <HAL_RCC_OscConfig+0xd8>
 8008694:	4b71      	ldr	r3, [pc, #452]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a70      	ldr	r2, [pc, #448]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800869a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	4b6e      	ldr	r3, [pc, #440]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a6d      	ldr	r2, [pc, #436]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80086a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d013      	beq.n	80086dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fa f896 	bl	80027e4 <HAL_GetTick>
 80086b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086bc:	f7fa f892 	bl	80027e4 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b64      	cmp	r3, #100	; 0x64
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e3d4      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ce:	4b63      	ldr	r3, [pc, #396]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCC_OscConfig+0xe8>
 80086da:	e014      	b.n	8008706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086dc:	f7fa f882 	bl	80027e4 <HAL_GetTick>
 80086e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086e4:	f7fa f87e 	bl	80027e4 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b64      	cmp	r3, #100	; 0x64
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e3c0      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086f6:	4b59      	ldr	r3, [pc, #356]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x110>
 8008702:	e000      	b.n	8008706 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80ca 	beq.w	80088a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008714:	4b51      	ldr	r3, [pc, #324]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800871c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800871e:	4b4f      	ldr	r3, [pc, #316]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008722:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <HAL_RCC_OscConfig+0x166>
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	2b18      	cmp	r3, #24
 800872e:	d156      	bne.n	80087de <HAL_RCC_OscConfig+0x20a>
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d151      	bne.n	80087de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800873a:	4b48      	ldr	r3, [pc, #288]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	d005      	beq.n	8008752 <HAL_RCC_OscConfig+0x17e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e392      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008752:	4b42      	ldr	r3, [pc, #264]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f023 0219 	bic.w	r2, r3, #25
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	493f      	ldr	r1, [pc, #252]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008764:	f7fa f83e 	bl	80027e4 <HAL_GetTick>
 8008768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800876c:	f7fa f83a 	bl	80027e4 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e37c      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800877e:	4b37      	ldr	r3, [pc, #220]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f0      	beq.n	800876c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800878a:	f7fa f847 	bl	800281c <HAL_GetREVID>
 800878e:	4603      	mov	r3, r0
 8008790:	f241 0203 	movw	r2, #4099	; 0x1003
 8008794:	4293      	cmp	r3, r2
 8008796:	d817      	bhi.n	80087c8 <HAL_RCC_OscConfig+0x1f4>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d108      	bne.n	80087b2 <HAL_RCC_OscConfig+0x1de>
 80087a0:	4b2e      	ldr	r3, [pc, #184]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087a8:	4a2c      	ldr	r2, [pc, #176]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087b0:	e07a      	b.n	80088a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b2:	4b2a      	ldr	r3, [pc, #168]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	031b      	lsls	r3, r3, #12
 80087c0:	4926      	ldr	r1, [pc, #152]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087c6:	e06f      	b.n	80088a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c8:	4b24      	ldr	r3, [pc, #144]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	061b      	lsls	r3, r3, #24
 80087d6:	4921      	ldr	r1, [pc, #132]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087dc:	e064      	b.n	80088a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d047      	beq.n	8008876 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f023 0219 	bic.w	r2, r3, #25
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	491a      	ldr	r1, [pc, #104]	; (800885c <HAL_RCC_OscConfig+0x288>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f8:	f7f9 fff4 	bl	80027e4 <HAL_GetTick>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087fe:	e008      	b.n	8008812 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008800:	f7f9 fff0 	bl	80027e4 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e332      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f0      	beq.n	8008800 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881e:	f7f9 fffd 	bl	800281c <HAL_GetREVID>
 8008822:	4603      	mov	r3, r0
 8008824:	f241 0203 	movw	r2, #4099	; 0x1003
 8008828:	4293      	cmp	r3, r2
 800882a:	d819      	bhi.n	8008860 <HAL_RCC_OscConfig+0x28c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d108      	bne.n	8008846 <HAL_RCC_OscConfig+0x272>
 8008834:	4b09      	ldr	r3, [pc, #36]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800883c:	4a07      	ldr	r2, [pc, #28]	; (800885c <HAL_RCC_OscConfig+0x288>)
 800883e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008842:	6053      	str	r3, [r2, #4]
 8008844:	e030      	b.n	80088a8 <HAL_RCC_OscConfig+0x2d4>
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	031b      	lsls	r3, r3, #12
 8008854:	4901      	ldr	r1, [pc, #4]	; (800885c <HAL_RCC_OscConfig+0x288>)
 8008856:	4313      	orrs	r3, r2
 8008858:	604b      	str	r3, [r1, #4]
 800885a:	e025      	b.n	80088a8 <HAL_RCC_OscConfig+0x2d4>
 800885c:	58024400 	.word	0x58024400
 8008860:	4b9a      	ldr	r3, [pc, #616]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	4997      	ldr	r1, [pc, #604]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008870:	4313      	orrs	r3, r2
 8008872:	604b      	str	r3, [r1, #4]
 8008874:	e018      	b.n	80088a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008876:	4b95      	ldr	r3, [pc, #596]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a94      	ldr	r2, [pc, #592]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 800887c:	f023 0301 	bic.w	r3, r3, #1
 8008880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008882:	f7f9 ffaf 	bl	80027e4 <HAL_GetTick>
 8008886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800888a:	f7f9 ffab 	bl	80027e4 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e2ed      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800889c:	4b8b      	ldr	r3, [pc, #556]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80a9 	beq.w	8008a08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088b6:	4b85      	ldr	r3, [pc, #532]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088c0:	4b82      	ldr	r3, [pc, #520]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d007      	beq.n	80088dc <HAL_RCC_OscConfig+0x308>
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b18      	cmp	r3, #24
 80088d0:	d13a      	bne.n	8008948 <HAL_RCC_OscConfig+0x374>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d135      	bne.n	8008948 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088dc:	4b7b      	ldr	r3, [pc, #492]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_RCC_OscConfig+0x320>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e2c1      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088f4:	f7f9 ff92 	bl	800281c <HAL_GetREVID>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80088fe:	4293      	cmp	r3, r2
 8008900:	d817      	bhi.n	8008932 <HAL_RCC_OscConfig+0x35e>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	2b20      	cmp	r3, #32
 8008908:	d108      	bne.n	800891c <HAL_RCC_OscConfig+0x348>
 800890a:	4b70      	ldr	r3, [pc, #448]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008912:	4a6e      	ldr	r2, [pc, #440]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008918:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800891a:	e075      	b.n	8008a08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800891c:	4b6b      	ldr	r3, [pc, #428]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	069b      	lsls	r3, r3, #26
 800892a:	4968      	ldr	r1, [pc, #416]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 800892c:	4313      	orrs	r3, r2
 800892e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008930:	e06a      	b.n	8008a08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008932:	4b66      	ldr	r3, [pc, #408]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	061b      	lsls	r3, r3, #24
 8008940:	4962      	ldr	r1, [pc, #392]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008942:	4313      	orrs	r3, r2
 8008944:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008946:	e05f      	b.n	8008a08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d042      	beq.n	80089d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008950:	4b5e      	ldr	r3, [pc, #376]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a5d      	ldr	r2, [pc, #372]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7f9 ff42 	bl	80027e4 <HAL_GetTick>
 8008960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008964:	f7f9 ff3e 	bl	80027e4 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e280      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008976:	4b55      	ldr	r3, [pc, #340]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f0      	beq.n	8008964 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008982:	f7f9 ff4b 	bl	800281c <HAL_GetREVID>
 8008986:	4603      	mov	r3, r0
 8008988:	f241 0203 	movw	r2, #4099	; 0x1003
 800898c:	4293      	cmp	r3, r2
 800898e:	d817      	bhi.n	80089c0 <HAL_RCC_OscConfig+0x3ec>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	2b20      	cmp	r3, #32
 8008996:	d108      	bne.n	80089aa <HAL_RCC_OscConfig+0x3d6>
 8008998:	4b4c      	ldr	r3, [pc, #304]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089a0:	4a4a      	ldr	r2, [pc, #296]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a6:	6053      	str	r3, [r2, #4]
 80089a8:	e02e      	b.n	8008a08 <HAL_RCC_OscConfig+0x434>
 80089aa:	4b48      	ldr	r3, [pc, #288]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	069b      	lsls	r3, r3, #26
 80089b8:	4944      	ldr	r1, [pc, #272]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	604b      	str	r3, [r1, #4]
 80089be:	e023      	b.n	8008a08 <HAL_RCC_OscConfig+0x434>
 80089c0:	4b42      	ldr	r3, [pc, #264]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	061b      	lsls	r3, r3, #24
 80089ce:	493f      	ldr	r1, [pc, #252]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60cb      	str	r3, [r1, #12]
 80089d4:	e018      	b.n	8008a08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089d6:	4b3d      	ldr	r3, [pc, #244]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e2:	f7f9 feff 	bl	80027e4 <HAL_GetTick>
 80089e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089e8:	e008      	b.n	80089fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089ea:	f7f9 fefb 	bl	80027e4 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d901      	bls.n	80089fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e23d      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089fc:	4b33      	ldr	r3, [pc, #204]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1f0      	bne.n	80089ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d036      	beq.n	8008a82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d019      	beq.n	8008a50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a1c:	4b2b      	ldr	r3, [pc, #172]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a20:	4a2a      	ldr	r2, [pc, #168]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a28:	f7f9 fedc 	bl	80027e4 <HAL_GetTick>
 8008a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a2e:	e008      	b.n	8008a42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a30:	f7f9 fed8 	bl	80027e4 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e21a      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a42:	4b22      	ldr	r3, [pc, #136]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0f0      	beq.n	8008a30 <HAL_RCC_OscConfig+0x45c>
 8008a4e:	e018      	b.n	8008a82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a50:	4b1e      	ldr	r3, [pc, #120]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a54:	4a1d      	ldr	r2, [pc, #116]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a56:	f023 0301 	bic.w	r3, r3, #1
 8008a5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a5c:	f7f9 fec2 	bl	80027e4 <HAL_GetTick>
 8008a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a64:	f7f9 febe 	bl	80027e4 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e200      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a76:	4b15      	ldr	r3, [pc, #84]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d039      	beq.n	8008b02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01c      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a96:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a0c      	ldr	r2, [pc, #48]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008aa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008aa2:	f7f9 fe9f 	bl	80027e4 <HAL_GetTick>
 8008aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aaa:	f7f9 fe9b 	bl	80027e4 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e1dd      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008abc:	4b03      	ldr	r3, [pc, #12]	; (8008acc <HAL_RCC_OscConfig+0x4f8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f0      	beq.n	8008aaa <HAL_RCC_OscConfig+0x4d6>
 8008ac8:	e01b      	b.n	8008b02 <HAL_RCC_OscConfig+0x52e>
 8008aca:	bf00      	nop
 8008acc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ad0:	4b9b      	ldr	r3, [pc, #620]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a9a      	ldr	r2, [pc, #616]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008adc:	f7f9 fe82 	bl	80027e4 <HAL_GetTick>
 8008ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ae4:	f7f9 fe7e 	bl	80027e4 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e1c0      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008af6:	4b92      	ldr	r3, [pc, #584]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f0      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8081 	beq.w	8008c12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b10:	4b8c      	ldr	r3, [pc, #560]	; (8008d44 <HAL_RCC_OscConfig+0x770>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a8b      	ldr	r2, [pc, #556]	; (8008d44 <HAL_RCC_OscConfig+0x770>)
 8008b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b1c:	f7f9 fe62 	bl	80027e4 <HAL_GetTick>
 8008b20:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b24:	f7f9 fe5e 	bl	80027e4 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b64      	cmp	r3, #100	; 0x64
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e1a0      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b36:	4b83      	ldr	r3, [pc, #524]	; (8008d44 <HAL_RCC_OscConfig+0x770>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d106      	bne.n	8008b58 <HAL_RCC_OscConfig+0x584>
 8008b4a:	4b7d      	ldr	r3, [pc, #500]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	4a7c      	ldr	r2, [pc, #496]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b50:	f043 0301 	orr.w	r3, r3, #1
 8008b54:	6713      	str	r3, [r2, #112]	; 0x70
 8008b56:	e02d      	b.n	8008bb4 <HAL_RCC_OscConfig+0x5e0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10c      	bne.n	8008b7a <HAL_RCC_OscConfig+0x5a6>
 8008b60:	4b77      	ldr	r3, [pc, #476]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b64:	4a76      	ldr	r2, [pc, #472]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b66:	f023 0301 	bic.w	r3, r3, #1
 8008b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b6c:	4b74      	ldr	r3, [pc, #464]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b70:	4a73      	ldr	r2, [pc, #460]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b72:	f023 0304 	bic.w	r3, r3, #4
 8008b76:	6713      	str	r3, [r2, #112]	; 0x70
 8008b78:	e01c      	b.n	8008bb4 <HAL_RCC_OscConfig+0x5e0>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d10c      	bne.n	8008b9c <HAL_RCC_OscConfig+0x5c8>
 8008b82:	4b6f      	ldr	r3, [pc, #444]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b86:	4a6e      	ldr	r2, [pc, #440]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b88:	f043 0304 	orr.w	r3, r3, #4
 8008b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b8e:	4b6c      	ldr	r3, [pc, #432]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b92:	4a6b      	ldr	r2, [pc, #428]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b94:	f043 0301 	orr.w	r3, r3, #1
 8008b98:	6713      	str	r3, [r2, #112]	; 0x70
 8008b9a:	e00b      	b.n	8008bb4 <HAL_RCC_OscConfig+0x5e0>
 8008b9c:	4b68      	ldr	r3, [pc, #416]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba0:	4a67      	ldr	r2, [pc, #412]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba8:	4b65      	ldr	r3, [pc, #404]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bac:	4a64      	ldr	r2, [pc, #400]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008bae:	f023 0304 	bic.w	r3, r3, #4
 8008bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d015      	beq.n	8008be8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbc:	f7f9 fe12 	bl	80027e4 <HAL_GetTick>
 8008bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc2:	e00a      	b.n	8008bda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc4:	f7f9 fe0e 	bl	80027e4 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e14e      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bda:	4b59      	ldr	r3, [pc, #356]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0ee      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x5f0>
 8008be6:	e014      	b.n	8008c12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be8:	f7f9 fdfc 	bl	80027e4 <HAL_GetTick>
 8008bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bee:	e00a      	b.n	8008c06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf0:	f7f9 fdf8 	bl	80027e4 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e138      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c06:	4b4e      	ldr	r3, [pc, #312]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1ee      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 812d 	beq.w	8008e76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c1c:	4b48      	ldr	r3, [pc, #288]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c24:	2b18      	cmp	r3, #24
 8008c26:	f000 80bd 	beq.w	8008da4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	f040 809e 	bne.w	8008d70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c34:	4b42      	ldr	r3, [pc, #264]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a41      	ldr	r2, [pc, #260]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c40:	f7f9 fdd0 	bl	80027e4 <HAL_GetTick>
 8008c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c48:	f7f9 fdcc 	bl	80027e4 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e10e      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c5a:	4b39      	ldr	r3, [pc, #228]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1f0      	bne.n	8008c48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c66:	4b36      	ldr	r3, [pc, #216]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c6a:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <HAL_RCC_OscConfig+0x774>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c76:	0112      	lsls	r2, r2, #4
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	4931      	ldr	r1, [pc, #196]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c84:	3b01      	subs	r3, #1
 8008c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	025b      	lsls	r3, r3, #9
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	041b      	lsls	r3, r3, #16
 8008c9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	061b      	lsls	r3, r3, #24
 8008cac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cb0:	4923      	ldr	r1, [pc, #140]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008cb6:	4b22      	ldr	r3, [pc, #136]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cba:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cc2:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc6:	4b21      	ldr	r3, [pc, #132]	; (8008d4c <HAL_RCC_OscConfig+0x778>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cce:	00d2      	lsls	r2, r2, #3
 8008cd0:	491b      	ldr	r1, [pc, #108]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	f023 020c 	bic.w	r2, r3, #12
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	4917      	ldr	r1, [pc, #92]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ce8:	4b15      	ldr	r3, [pc, #84]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	f023 0202 	bic.w	r2, r3, #2
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf4:	4912      	ldr	r1, [pc, #72]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4a10      	ldr	r2, [pc, #64]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d06:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a0d      	ldr	r2, [pc, #52]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d12:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	4a0a      	ldr	r2, [pc, #40]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d1e:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d24:	f043 0301 	orr.w	r3, r3, #1
 8008d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <HAL_RCC_OscConfig+0x76c>)
 8008d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d36:	f7f9 fd55 	bl	80027e4 <HAL_GetTick>
 8008d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d3c:	e011      	b.n	8008d62 <HAL_RCC_OscConfig+0x78e>
 8008d3e:	bf00      	nop
 8008d40:	58024400 	.word	0x58024400
 8008d44:	58024800 	.word	0x58024800
 8008d48:	fffffc0c 	.word	0xfffffc0c
 8008d4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d50:	f7f9 fd48 	bl	80027e4 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e08a      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d62:	4b47      	ldr	r3, [pc, #284]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f0      	beq.n	8008d50 <HAL_RCC_OscConfig+0x77c>
 8008d6e:	e082      	b.n	8008e76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d70:	4b43      	ldr	r3, [pc, #268]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a42      	ldr	r2, [pc, #264]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7c:	f7f9 fd32 	bl	80027e4 <HAL_GetTick>
 8008d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d84:	f7f9 fd2e 	bl	80027e4 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e070      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d96:	4b3a      	ldr	r3, [pc, #232]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1f0      	bne.n	8008d84 <HAL_RCC_OscConfig+0x7b0>
 8008da2:	e068      	b.n	8008e76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008da4:	4b36      	ldr	r3, [pc, #216]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008daa:	4b35      	ldr	r3, [pc, #212]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d031      	beq.n	8008e1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f003 0203 	and.w	r2, r3, #3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d12a      	bne.n	8008e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	091b      	lsrs	r3, r3, #4
 8008dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d122      	bne.n	8008e1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d11a      	bne.n	8008e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	0a5b      	lsrs	r3, r3, #9
 8008dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d111      	bne.n	8008e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d108      	bne.n	8008e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	0e1b      	lsrs	r3, r3, #24
 8008e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d001      	beq.n	8008e20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e02b      	b.n	8008e78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e20:	4b17      	ldr	r3, [pc, #92]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	08db      	lsrs	r3, r3, #3
 8008e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d01f      	beq.n	8008e76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e36:	4b12      	ldr	r3, [pc, #72]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e3c:	f023 0301 	bic.w	r3, r3, #1
 8008e40:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e42:	f7f9 fccf 	bl	80027e4 <HAL_GetTick>
 8008e46:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e48:	bf00      	nop
 8008e4a:	f7f9 fccb 	bl	80027e4 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d0f9      	beq.n	8008e4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <HAL_RCC_OscConfig+0x8b0>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e62:	00d2      	lsls	r2, r2, #3
 8008e64:	4906      	ldr	r1, [pc, #24]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <HAL_RCC_OscConfig+0x8ac>)
 8008e70:	f043 0301 	orr.w	r3, r3, #1
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3730      	adds	r7, #48	; 0x30
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	58024400 	.word	0x58024400
 8008e84:	ffff0007 	.word	0xffff0007

08008e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e19c      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e9c:	4b8a      	ldr	r3, [pc, #552]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 030f 	and.w	r3, r3, #15
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d910      	bls.n	8008ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eaa:	4b87      	ldr	r3, [pc, #540]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f023 020f 	bic.w	r2, r3, #15
 8008eb2:	4985      	ldr	r1, [pc, #532]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eba:	4b83      	ldr	r3, [pc, #524]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d001      	beq.n	8008ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e184      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	4b7b      	ldr	r3, [pc, #492]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d908      	bls.n	8008efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ee8:	4b78      	ldr	r3, [pc, #480]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	4975      	ldr	r1, [pc, #468]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d010      	beq.n	8008f28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	695a      	ldr	r2, [r3, #20]
 8008f0a:	4b70      	ldr	r3, [pc, #448]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d908      	bls.n	8008f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f16:	4b6d      	ldr	r3, [pc, #436]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	496a      	ldr	r1, [pc, #424]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0310 	and.w	r3, r3, #16
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d010      	beq.n	8008f56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699a      	ldr	r2, [r3, #24]
 8008f38:	4b64      	ldr	r3, [pc, #400]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d908      	bls.n	8008f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f44:	4b61      	ldr	r3, [pc, #388]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	495e      	ldr	r1, [pc, #376]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d010      	beq.n	8008f84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69da      	ldr	r2, [r3, #28]
 8008f66:	4b59      	ldr	r3, [pc, #356]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d908      	bls.n	8008f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f72:	4b56      	ldr	r3, [pc, #344]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	4953      	ldr	r1, [pc, #332]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d010      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	4b4d      	ldr	r3, [pc, #308]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d908      	bls.n	8008fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fa0:	4b4a      	ldr	r3, [pc, #296]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	f023 020f 	bic.w	r2, r3, #15
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4947      	ldr	r1, [pc, #284]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d055      	beq.n	800906a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fbe:	4b43      	ldr	r3, [pc, #268]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	4940      	ldr	r1, [pc, #256]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d107      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fd8:	4b3c      	ldr	r3, [pc, #240]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d121      	bne.n	8009028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e0f6      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d107      	bne.n	8009000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ff0:	4b36      	ldr	r3, [pc, #216]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d115      	bne.n	8009028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e0ea      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d107      	bne.n	8009018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009008:	4b30      	ldr	r3, [pc, #192]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009010:	2b00      	cmp	r3, #0
 8009012:	d109      	bne.n	8009028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0de      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009018:	4b2c      	ldr	r3, [pc, #176]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e0d6      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009028:	4b28      	ldr	r3, [pc, #160]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f023 0207 	bic.w	r2, r3, #7
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4925      	ldr	r1, [pc, #148]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8009036:	4313      	orrs	r3, r2
 8009038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800903a:	f7f9 fbd3 	bl	80027e4 <HAL_GetTick>
 800903e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009040:	e00a      	b.n	8009058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009042:	f7f9 fbcf 	bl	80027e4 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009050:	4293      	cmp	r3, r2
 8009052:	d901      	bls.n	8009058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e0be      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009058:	4b1c      	ldr	r3, [pc, #112]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	429a      	cmp	r2, r3
 8009068:	d1eb      	bne.n	8009042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d010      	beq.n	8009098 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	4b14      	ldr	r3, [pc, #80]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	429a      	cmp	r2, r3
 8009084:	d208      	bcs.n	8009098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f023 020f 	bic.w	r2, r3, #15
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	490e      	ldr	r1, [pc, #56]	; (80090cc <HAL_RCC_ClockConfig+0x244>)
 8009094:	4313      	orrs	r3, r2
 8009096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d214      	bcs.n	80090d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090a6:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f023 020f 	bic.w	r2, r3, #15
 80090ae:	4906      	ldr	r1, [pc, #24]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090b6:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <HAL_RCC_ClockConfig+0x240>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d005      	beq.n	80090d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e086      	b.n	80091d6 <HAL_RCC_ClockConfig+0x34e>
 80090c8:	52002000 	.word	0x52002000
 80090cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	4b3f      	ldr	r3, [pc, #252]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d208      	bcs.n	80090fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090ec:	4b3c      	ldr	r3, [pc, #240]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	4939      	ldr	r1, [pc, #228]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d010      	beq.n	800912c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	695a      	ldr	r2, [r3, #20]
 800910e:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009116:	429a      	cmp	r2, r3
 8009118:	d208      	bcs.n	800912c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800911a:	4b31      	ldr	r3, [pc, #196]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	492e      	ldr	r1, [pc, #184]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 8009128:	4313      	orrs	r3, r2
 800912a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	d010      	beq.n	800915a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	699a      	ldr	r2, [r3, #24]
 800913c:	4b28      	ldr	r3, [pc, #160]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009144:	429a      	cmp	r2, r3
 8009146:	d208      	bcs.n	800915a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009148:	4b25      	ldr	r3, [pc, #148]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4922      	ldr	r1, [pc, #136]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 8009156:	4313      	orrs	r3, r2
 8009158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d010      	beq.n	8009188 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	69da      	ldr	r2, [r3, #28]
 800916a:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009172:	429a      	cmp	r2, r3
 8009174:	d208      	bcs.n	8009188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009176:	4b1a      	ldr	r3, [pc, #104]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	4917      	ldr	r1, [pc, #92]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 8009184:	4313      	orrs	r3, r2
 8009186:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009188:	f000 f834 	bl	80091f4 <HAL_RCC_GetSysClockFreq>
 800918c:	4602      	mov	r2, r0
 800918e:	4b14      	ldr	r3, [pc, #80]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	4912      	ldr	r1, [pc, #72]	; (80091e4 <HAL_RCC_ClockConfig+0x35c>)
 800919a:	5ccb      	ldrb	r3, [r1, r3]
 800919c:	f003 031f 	and.w	r3, r3, #31
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
 80091a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091a6:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <HAL_RCC_ClockConfig+0x358>)
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	4a0d      	ldr	r2, [pc, #52]	; (80091e4 <HAL_RCC_ClockConfig+0x35c>)
 80091b0:	5cd3      	ldrb	r3, [r2, r3]
 80091b2:	f003 031f 	and.w	r3, r3, #31
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	fa22 f303 	lsr.w	r3, r2, r3
 80091bc:	4a0a      	ldr	r2, [pc, #40]	; (80091e8 <HAL_RCC_ClockConfig+0x360>)
 80091be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <HAL_RCC_ClockConfig+0x364>)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80091c6:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <HAL_RCC_ClockConfig+0x368>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f9 fac0 	bl	8002750 <HAL_InitTick>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
 80091e4:	08010df0 	.word	0x08010df0
 80091e8:	24000088 	.word	0x24000088
 80091ec:	24000084 	.word	0x24000084
 80091f0:	2400008c 	.word	0x2400008c

080091f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b089      	sub	sp, #36	; 0x24
 80091f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091fa:	4bb3      	ldr	r3, [pc, #716]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009202:	2b18      	cmp	r3, #24
 8009204:	f200 8155 	bhi.w	80094b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009208:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009275 	.word	0x08009275
 8009214:	080094b3 	.word	0x080094b3
 8009218:	080094b3 	.word	0x080094b3
 800921c:	080094b3 	.word	0x080094b3
 8009220:	080094b3 	.word	0x080094b3
 8009224:	080094b3 	.word	0x080094b3
 8009228:	080094b3 	.word	0x080094b3
 800922c:	080094b3 	.word	0x080094b3
 8009230:	0800929b 	.word	0x0800929b
 8009234:	080094b3 	.word	0x080094b3
 8009238:	080094b3 	.word	0x080094b3
 800923c:	080094b3 	.word	0x080094b3
 8009240:	080094b3 	.word	0x080094b3
 8009244:	080094b3 	.word	0x080094b3
 8009248:	080094b3 	.word	0x080094b3
 800924c:	080094b3 	.word	0x080094b3
 8009250:	080092a1 	.word	0x080092a1
 8009254:	080094b3 	.word	0x080094b3
 8009258:	080094b3 	.word	0x080094b3
 800925c:	080094b3 	.word	0x080094b3
 8009260:	080094b3 	.word	0x080094b3
 8009264:	080094b3 	.word	0x080094b3
 8009268:	080094b3 	.word	0x080094b3
 800926c:	080094b3 	.word	0x080094b3
 8009270:	080092a7 	.word	0x080092a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009274:	4b94      	ldr	r3, [pc, #592]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009280:	4b91      	ldr	r3, [pc, #580]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	08db      	lsrs	r3, r3, #3
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	4a90      	ldr	r2, [pc, #576]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
 8009290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009292:	e111      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009294:	4b8d      	ldr	r3, [pc, #564]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009296:	61bb      	str	r3, [r7, #24]
      break;
 8009298:	e10e      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800929a:	4b8d      	ldr	r3, [pc, #564]	; (80094d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800929c:	61bb      	str	r3, [r7, #24]
      break;
 800929e:	e10b      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80092a0:	4b8c      	ldr	r3, [pc, #560]	; (80094d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80092a2:	61bb      	str	r3, [r7, #24]
      break;
 80092a4:	e108      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092a6:	4b88      	ldr	r3, [pc, #544]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092b0:	4b85      	ldr	r3, [pc, #532]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b4:	091b      	lsrs	r3, r3, #4
 80092b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092bc:	4b82      	ldr	r3, [pc, #520]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092c6:	4b80      	ldr	r3, [pc, #512]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	08db      	lsrs	r3, r3, #3
 80092cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	fb02 f303 	mul.w	r3, r2, r3
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 80e1 	beq.w	80094ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	f000 8083 	beq.w	80093f8 <HAL_RCC_GetSysClockFreq+0x204>
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	f200 80a1 	bhi.w	800943c <HAL_RCC_GetSysClockFreq+0x248>
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_RCC_GetSysClockFreq+0x114>
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d056      	beq.n	80093b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009306:	e099      	b.n	800943c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009308:	4b6f      	ldr	r3, [pc, #444]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02d      	beq.n	8009370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009314:	4b6c      	ldr	r3, [pc, #432]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	08db      	lsrs	r3, r3, #3
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	4a6b      	ldr	r2, [pc, #428]	; (80094cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009320:	fa22 f303 	lsr.w	r3, r2, r3
 8009324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b62      	ldr	r3, [pc, #392]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009352:	eddf 5a61 	vldr	s11, [pc, #388]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800936e:	e087      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b51      	ldr	r3, [pc, #324]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a02 	vldr	s12, [r7, #8]
 8009396:	eddf 5a50 	vldr	s11, [pc, #320]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093b2:	e065      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80094e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b40      	ldr	r3, [pc, #256]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093f6:	e043      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b2f      	ldr	r3, [pc, #188]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a02 	vldr	s12, [r7, #8]
 800941e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800943a:	e021      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a26 	vldr	s13, [pc, #152]	; 80094e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b1e      	ldr	r3, [pc, #120]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009462:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800947e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009484:	0a5b      	lsrs	r3, r3, #9
 8009486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948a:	3301      	adds	r3, #1
 800948c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	ee07 3a90 	vmov	s15, r3
 8009494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009498:	edd7 6a07 	vldr	s13, [r7, #28]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a4:	ee17 3a90 	vmov	r3, s15
 80094a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80094aa:	e005      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
      break;
 80094b0:	e002      	b.n	80094b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094b2:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094b4:	61bb      	str	r3, [r7, #24]
      break;
 80094b6:	bf00      	nop
  }

  return sysclockfreq;
 80094b8:	69bb      	ldr	r3, [r7, #24]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3724      	adds	r7, #36	; 0x24
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	58024400 	.word	0x58024400
 80094cc:	03d09000 	.word	0x03d09000
 80094d0:	003d0900 	.word	0x003d0900
 80094d4:	017d7840 	.word	0x017d7840
 80094d8:	46000000 	.word	0x46000000
 80094dc:	4c742400 	.word	0x4c742400
 80094e0:	4a742400 	.word	0x4a742400
 80094e4:	4bbebc20 	.word	0x4bbebc20

080094e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094ee:	f7ff fe81 	bl	80091f4 <HAL_RCC_GetSysClockFreq>
 80094f2:	4602      	mov	r2, r0
 80094f4:	4b10      	ldr	r3, [pc, #64]	; (8009538 <HAL_RCC_GetHCLKFreq+0x50>)
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	490f      	ldr	r1, [pc, #60]	; (800953c <HAL_RCC_GetHCLKFreq+0x54>)
 8009500:	5ccb      	ldrb	r3, [r1, r3]
 8009502:	f003 031f 	and.w	r3, r3, #31
 8009506:	fa22 f303 	lsr.w	r3, r2, r3
 800950a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <HAL_RCC_GetHCLKFreq+0x50>)
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	4a09      	ldr	r2, [pc, #36]	; (800953c <HAL_RCC_GetHCLKFreq+0x54>)
 8009516:	5cd3      	ldrb	r3, [r2, r3]
 8009518:	f003 031f 	and.w	r3, r3, #31
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	fa22 f303 	lsr.w	r3, r2, r3
 8009522:	4a07      	ldr	r2, [pc, #28]	; (8009540 <HAL_RCC_GetHCLKFreq+0x58>)
 8009524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009526:	4a07      	ldr	r2, [pc, #28]	; (8009544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <HAL_RCC_GetHCLKFreq+0x58>)
 800952e:	681b      	ldr	r3, [r3, #0]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	58024400 	.word	0x58024400
 800953c:	08010df0 	.word	0x08010df0
 8009540:	24000088 	.word	0x24000088
 8009544:	24000084 	.word	0x24000084

08009548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800954c:	f7ff ffcc 	bl	80094e8 <HAL_RCC_GetHCLKFreq>
 8009550:	4602      	mov	r2, r0
 8009552:	4b06      	ldr	r3, [pc, #24]	; (800956c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	091b      	lsrs	r3, r3, #4
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	4904      	ldr	r1, [pc, #16]	; (8009570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800955e:	5ccb      	ldrb	r3, [r1, r3]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009568:	4618      	mov	r0, r3
 800956a:	bd80      	pop	{r7, pc}
 800956c:	58024400 	.word	0x58024400
 8009570:	08010df0 	.word	0x08010df0

08009574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009578:	f7ff ffb6 	bl	80094e8 <HAL_RCC_GetHCLKFreq>
 800957c:	4602      	mov	r2, r0
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	4904      	ldr	r1, [pc, #16]	; (800959c <HAL_RCC_GetPCLK2Freq+0x28>)
 800958a:	5ccb      	ldrb	r3, [r1, r3]
 800958c:	f003 031f 	and.w	r3, r3, #31
 8009590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009594:	4618      	mov	r0, r3
 8009596:	bd80      	pop	{r7, pc}
 8009598:	58024400 	.word	0x58024400
 800959c:	08010df0 	.word	0x08010df0

080095a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095a4:	b0ca      	sub	sp, #296	; 0x128
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095ac:	2300      	movs	r3, #0
 80095ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80095c4:	2500      	movs	r5, #0
 80095c6:	ea54 0305 	orrs.w	r3, r4, r5
 80095ca:	d049      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d6:	d02f      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80095d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095dc:	d828      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095e2:	d01a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80095e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095e8:	d822      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80095ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095f2:	d007      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095f4:	e01c      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f6:	4bb8      	ldr	r3, [pc, #736]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fa:	4ab7      	ldr	r2, [pc, #732]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009600:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009602:	e01a      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	3308      	adds	r3, #8
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f002 fb61 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009618:	e00f      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961e:	3328      	adds	r3, #40	; 0x28
 8009620:	2102      	movs	r1, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f002 fc08 	bl	800be38 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800962e:	e004      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009636:	e000      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800963a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009642:	4ba5      	ldr	r3, [pc, #660]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009646:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009650:	4aa1      	ldr	r2, [pc, #644]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009652:	430b      	orrs	r3, r1
 8009654:	6513      	str	r3, [r2, #80]	; 0x50
 8009656:	e003      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800965c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800966c:	f04f 0900 	mov.w	r9, #0
 8009670:	ea58 0309 	orrs.w	r3, r8, r9
 8009674:	d047      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967c:	2b04      	cmp	r3, #4
 800967e:	d82a      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009680:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009686:	bf00      	nop
 8009688:	0800969d 	.word	0x0800969d
 800968c:	080096ab 	.word	0x080096ab
 8009690:	080096c1 	.word	0x080096c1
 8009694:	080096df 	.word	0x080096df
 8009698:	080096df 	.word	0x080096df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969c:	4b8e      	ldr	r3, [pc, #568]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a8d      	ldr	r2, [pc, #564]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096a8:	e01a      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ae:	3308      	adds	r3, #8
 80096b0:	2100      	movs	r1, #0
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 fb0e 	bl	800bcd4 <RCCEx_PLL2_Config>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096be:	e00f      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c4:	3328      	adds	r3, #40	; 0x28
 80096c6:	2100      	movs	r1, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f002 fbb5 	bl	800be38 <RCCEx_PLL3_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096d4:	e004      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096dc:	e000      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80096de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096e8:	4b7b      	ldr	r3, [pc, #492]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	f023 0107 	bic.w	r1, r3, #7
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f6:	4a78      	ldr	r2, [pc, #480]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096f8:	430b      	orrs	r3, r1
 80096fa:	6513      	str	r3, [r2, #80]	; 0x50
 80096fc:	e003      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009712:	f04f 0b00 	mov.w	fp, #0
 8009716:	ea5a 030b 	orrs.w	r3, sl, fp
 800971a:	d04c      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800971c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009726:	d030      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972c:	d829      	bhi.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800972e:	2bc0      	cmp	r3, #192	; 0xc0
 8009730:	d02d      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009732:	2bc0      	cmp	r3, #192	; 0xc0
 8009734:	d825      	bhi.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009736:	2b80      	cmp	r3, #128	; 0x80
 8009738:	d018      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800973a:	2b80      	cmp	r3, #128	; 0x80
 800973c:	d821      	bhi.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d007      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009746:	e01c      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009748:	4b63      	ldr	r3, [pc, #396]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a62      	ldr	r2, [pc, #392]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800974e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009754:	e01c      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975a:	3308      	adds	r3, #8
 800975c:	2100      	movs	r1, #0
 800975e:	4618      	mov	r0, r3
 8009760:	f002 fab8 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800976a:	e011      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800976c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009770:	3328      	adds	r3, #40	; 0x28
 8009772:	2100      	movs	r1, #0
 8009774:	4618      	mov	r0, r3
 8009776:	f002 fb5f 	bl	800be38 <RCCEx_PLL3_Config>
 800977a:	4603      	mov	r3, r0
 800977c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009780:	e006      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009788:	e002      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800978a:	bf00      	nop
 800978c:	e000      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800978e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009798:	4b4f      	ldr	r3, [pc, #316]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80097a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a6:	4a4c      	ldr	r2, [pc, #304]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6513      	str	r3, [r2, #80]	; 0x50
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80097c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80097cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80097d0:	460b      	mov	r3, r1
 80097d2:	4313      	orrs	r3, r2
 80097d4:	d053      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80097d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097e2:	d035      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80097e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097e8:	d82e      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80097ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097ee:	d031      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80097f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097f4:	d828      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80097f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097fa:	d01a      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80097fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009800:	d822      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800980a:	d007      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800980c:	e01c      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800980e:	4b32      	ldr	r3, [pc, #200]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	4a31      	ldr	r2, [pc, #196]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800981a:	e01c      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800981c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009820:	3308      	adds	r3, #8
 8009822:	2100      	movs	r1, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fa55 	bl	800bcd4 <RCCEx_PLL2_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009830:	e011      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009836:	3328      	adds	r3, #40	; 0x28
 8009838:	2100      	movs	r1, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f002 fafc 	bl	800be38 <RCCEx_PLL3_Config>
 8009840:	4603      	mov	r3, r0
 8009842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009846:	e006      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800984e:	e002      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800985e:	4b1e      	ldr	r3, [pc, #120]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009862:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800986e:	4a1a      	ldr	r2, [pc, #104]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009870:	430b      	orrs	r3, r1
 8009872:	6593      	str	r3, [r2, #88]	; 0x58
 8009874:	e003      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800987a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800988a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800988e:	2300      	movs	r3, #0
 8009890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009898:	460b      	mov	r3, r1
 800989a:	4313      	orrs	r3, r2
 800989c:	d056      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098aa:	d038      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80098ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098b0:	d831      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098b6:	d034      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80098b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098bc:	d82b      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098c2:	d01d      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80098c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098c8:	d825      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d006      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80098ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098d2:	d00a      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80098d4:	e01f      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098d6:	bf00      	nop
 80098d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4ba2      	ldr	r3, [pc, #648]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4aa1      	ldr	r2, [pc, #644]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e8:	e01c      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ee:	3308      	adds	r3, #8
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f002 f9ee 	bl	800bcd4 <RCCEx_PLL2_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098fe:	e011      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009904:	3328      	adds	r3, #40	; 0x28
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f002 fa95 	bl	800be38 <RCCEx_PLL3_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009914:	e006      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10b      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800992c:	4b8e      	ldr	r3, [pc, #568]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800992e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009930:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800993c:	4a8a      	ldr	r2, [pc, #552]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800993e:	430b      	orrs	r3, r1
 8009940:	6593      	str	r3, [r2, #88]	; 0x58
 8009942:	e003      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800995c:	2300      	movs	r3, #0
 800995e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d03a      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009972:	2b30      	cmp	r3, #48	; 0x30
 8009974:	d01f      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009976:	2b30      	cmp	r3, #48	; 0x30
 8009978:	d819      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800997a:	2b20      	cmp	r3, #32
 800997c:	d00c      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800997e:	2b20      	cmp	r3, #32
 8009980:	d815      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d019      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009986:	2b10      	cmp	r3, #16
 8009988:	d111      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800998a:	4b77      	ldr	r3, [pc, #476]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	4a76      	ldr	r2, [pc, #472]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009996:	e011      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999c:	3308      	adds	r3, #8
 800999e:	2102      	movs	r1, #2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 f997 	bl	800bcd4 <RCCEx_PLL2_Config>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80099ac:	e006      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099b4:	e002      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80099b6:	bf00      	nop
 80099b8:	e000      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80099ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099c4:	4b68      	ldr	r3, [pc, #416]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80099cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	4a65      	ldr	r2, [pc, #404]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099d4:	430b      	orrs	r3, r1
 80099d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099d8:	e003      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80099ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80099f2:	2300      	movs	r3, #0
 80099f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4313      	orrs	r3, r2
 8009a00:	d051      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a0c:	d035      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a12:	d82e      	bhi.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a18:	d031      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a1e:	d828      	bhi.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a24:	d01a      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2a:	d822      	bhi.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a34:	d007      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009a36:	e01c      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a38:	4b4b      	ldr	r3, [pc, #300]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	4a4a      	ldr	r2, [pc, #296]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a44:	e01c      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f002 f940 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a5a:	e011      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a60:	3328      	adds	r3, #40	; 0x28
 8009a62:	2100      	movs	r1, #0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f002 f9e7 	bl	800be38 <RCCEx_PLL3_Config>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a70:	e006      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a78:	e002      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a7a:	bf00      	nop
 8009a7c:	e000      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a88:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a96:	4a34      	ldr	r2, [pc, #208]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a98:	430b      	orrs	r3, r1
 8009a9a:	6513      	str	r3, [r2, #80]	; 0x50
 8009a9c:	e003      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	d056      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad0:	d033      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad6:	d82c      	bhi.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ad8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009adc:	d02f      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ae2:	d826      	bhi.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ae4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ae8:	d02b      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009aea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009aee:	d820      	bhi.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af4:	d012      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009afa:	d81a      	bhi.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d022      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b04:	d115      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 f8e0 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b1a:	e015      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b20:	3328      	adds	r3, #40	; 0x28
 8009b22:	2101      	movs	r1, #1
 8009b24:	4618      	mov	r0, r3
 8009b26:	f002 f987 	bl	800be38 <RCCEx_PLL3_Config>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b30:	e00a      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b38:	e006      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b3a:	bf00      	nop
 8009b3c:	e004      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b3e:	bf00      	nop
 8009b40:	e002      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b42:	bf00      	nop
 8009b44:	e000      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10d      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b5e:	4a02      	ldr	r2, [pc, #8]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	6513      	str	r3, [r2, #80]	; 0x50
 8009b64:	e006      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b84:	2300      	movs	r3, #0
 8009b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4313      	orrs	r3, r2
 8009b92:	d055      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba0:	d033      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba6:	d82c      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bac:	d02f      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb2:	d826      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bb8:	d02b      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bbe:	d820      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc4:	d012      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bca:	d81a      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d022      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd4:	d115      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bda:	3308      	adds	r3, #8
 8009bdc:	2101      	movs	r1, #1
 8009bde:	4618      	mov	r0, r3
 8009be0:	f002 f878 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bea:	e015      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf0:	3328      	adds	r3, #40	; 0x28
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f002 f91f 	bl	800be38 <RCCEx_PLL3_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c00:	e00a      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c08:	e006      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e004      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c0e:	bf00      	nop
 8009c10:	e002      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c12:	bf00      	nop
 8009c14:	e000      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c20:	4ba3      	ldr	r3, [pc, #652]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c24:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c30:	4a9f      	ldr	r2, [pc, #636]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c32:	430b      	orrs	r3, r1
 8009c34:	6593      	str	r3, [r2, #88]	; 0x58
 8009c36:	e003      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	d037      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c6a:	d00e      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c70:	d816      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d018      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c7a:	d111      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c7c:	4b8c      	ldr	r3, [pc, #560]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a8b      	ldr	r2, [pc, #556]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c88:	e00f      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2101      	movs	r1, #1
 8009c92:	4618      	mov	r0, r3
 8009c94:	f002 f81e 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c9e:	e004      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ca6:	e000      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009cb2:	4b7f      	ldr	r3, [pc, #508]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc0:	4a7b      	ldr	r2, [pc, #492]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	6513      	str	r3, [r2, #80]	; 0x50
 8009cc6:	e003      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ccc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ce6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	d039      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d81c      	bhi.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009cfa:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d3d 	.word	0x08009d3d
 8009d04:	08009d11 	.word	0x08009d11
 8009d08:	08009d1f 	.word	0x08009d1f
 8009d0c:	08009d3d 	.word	0x08009d3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d10:	4b67      	ldr	r3, [pc, #412]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d14:	4a66      	ldr	r2, [pc, #408]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d1c:	e00f      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d22:	3308      	adds	r3, #8
 8009d24:	2102      	movs	r1, #2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 ffd4 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d32:	e004      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d3a:	e000      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d46:	4b5a      	ldr	r3, [pc, #360]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4a:	f023 0103 	bic.w	r1, r3, #3
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d54:	4a56      	ldr	r2, [pc, #344]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d56:	430b      	orrs	r3, r1
 8009d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d5a:	e003      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d74:	2300      	movs	r3, #0
 8009d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f000 809f 	beq.w	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d86:	4b4b      	ldr	r3, [pc, #300]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a4a      	ldr	r2, [pc, #296]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d92:	f7f8 fd27 	bl	80027e4 <HAL_GetTick>
 8009d96:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d9a:	e00b      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d9c:	f7f8 fd22 	bl	80027e4 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b64      	cmp	r3, #100	; 0x64
 8009daa:	d903      	bls.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009db2:	e005      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009db4:	4b3f      	ldr	r3, [pc, #252]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0ed      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d179      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009dc8:	4b39      	ldr	r3, [pc, #228]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dd4:	4053      	eors	r3, r2
 8009dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d015      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dde:	4b34      	ldr	r3, [pc, #208]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dea:	4b31      	ldr	r3, [pc, #196]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dee:	4a30      	ldr	r2, [pc, #192]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009df6:	4b2e      	ldr	r3, [pc, #184]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	4a2d      	ldr	r2, [pc, #180]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e02:	4a2b      	ldr	r2, [pc, #172]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e16:	d118      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e18:	f7f8 fce4 	bl	80027e4 <HAL_GetTick>
 8009e1c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e20:	e00d      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e22:	f7f8 fcdf 	bl	80027e4 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009e2c:	1ad2      	subs	r2, r2, r3
 8009e2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d903      	bls.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009e3c:	e005      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e3e:	4b1c      	ldr	r3, [pc, #112]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0eb      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d129      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e62:	d10e      	bne.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009e64:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e74:	091a      	lsrs	r2, r3, #4
 8009e76:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	4a0d      	ldr	r2, [pc, #52]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	6113      	str	r3, [r2, #16]
 8009e80:	e005      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009e82:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	4a0a      	ldr	r2, [pc, #40]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e8c:	6113      	str	r3, [r2, #16]
 8009e8e:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e9e:	4a04      	ldr	r2, [pc, #16]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ea4:	e00e      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009eae:	e009      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009eb0:	58024400 	.word	0x58024400
 8009eb4:	58024800 	.word	0x58024800
 8009eb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f002 0301 	and.w	r3, r2, #1
 8009ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f000 8089 	beq.w	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eec:	2b28      	cmp	r3, #40	; 0x28
 8009eee:	d86b      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009ef0:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009fd1 	.word	0x08009fd1
 8009efc:	08009fc9 	.word	0x08009fc9
 8009f00:	08009fc9 	.word	0x08009fc9
 8009f04:	08009fc9 	.word	0x08009fc9
 8009f08:	08009fc9 	.word	0x08009fc9
 8009f0c:	08009fc9 	.word	0x08009fc9
 8009f10:	08009fc9 	.word	0x08009fc9
 8009f14:	08009fc9 	.word	0x08009fc9
 8009f18:	08009f9d 	.word	0x08009f9d
 8009f1c:	08009fc9 	.word	0x08009fc9
 8009f20:	08009fc9 	.word	0x08009fc9
 8009f24:	08009fc9 	.word	0x08009fc9
 8009f28:	08009fc9 	.word	0x08009fc9
 8009f2c:	08009fc9 	.word	0x08009fc9
 8009f30:	08009fc9 	.word	0x08009fc9
 8009f34:	08009fc9 	.word	0x08009fc9
 8009f38:	08009fb3 	.word	0x08009fb3
 8009f3c:	08009fc9 	.word	0x08009fc9
 8009f40:	08009fc9 	.word	0x08009fc9
 8009f44:	08009fc9 	.word	0x08009fc9
 8009f48:	08009fc9 	.word	0x08009fc9
 8009f4c:	08009fc9 	.word	0x08009fc9
 8009f50:	08009fc9 	.word	0x08009fc9
 8009f54:	08009fc9 	.word	0x08009fc9
 8009f58:	08009fd1 	.word	0x08009fd1
 8009f5c:	08009fc9 	.word	0x08009fc9
 8009f60:	08009fc9 	.word	0x08009fc9
 8009f64:	08009fc9 	.word	0x08009fc9
 8009f68:	08009fc9 	.word	0x08009fc9
 8009f6c:	08009fc9 	.word	0x08009fc9
 8009f70:	08009fc9 	.word	0x08009fc9
 8009f74:	08009fc9 	.word	0x08009fc9
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fc9 	.word	0x08009fc9
 8009f80:	08009fc9 	.word	0x08009fc9
 8009f84:	08009fc9 	.word	0x08009fc9
 8009f88:	08009fc9 	.word	0x08009fc9
 8009f8c:	08009fc9 	.word	0x08009fc9
 8009f90:	08009fc9 	.word	0x08009fc9
 8009f94:	08009fc9 	.word	0x08009fc9
 8009f98:	08009fd1 	.word	0x08009fd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f001 fe95 	bl	800bcd4 <RCCEx_PLL2_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fb0:	e00f      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb6:	3328      	adds	r3, #40	; 0x28
 8009fb8:	2101      	movs	r1, #1
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 ff3c 	bl	800be38 <RCCEx_PLL3_Config>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fc6:	e004      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fce:	e000      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fda:	4bbf      	ldr	r3, [pc, #764]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fde:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fe8:	4abb      	ldr	r2, [pc, #748]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fea:	430b      	orrs	r3, r1
 8009fec:	6553      	str	r3, [r2, #84]	; 0x54
 8009fee:	e003      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f002 0302 	and.w	r3, r2, #2
 800a004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a008:	2300      	movs	r3, #0
 800a00a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a00e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a012:	460b      	mov	r3, r1
 800a014:	4313      	orrs	r3, r2
 800a016:	d041      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a01e:	2b05      	cmp	r3, #5
 800a020:	d824      	bhi.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a022:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a075 	.word	0x0800a075
 800a02c:	0800a041 	.word	0x0800a041
 800a030:	0800a057 	.word	0x0800a057
 800a034:	0800a075 	.word	0x0800a075
 800a038:	0800a075 	.word	0x0800a075
 800a03c:	0800a075 	.word	0x0800a075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a044:	3308      	adds	r3, #8
 800a046:	2101      	movs	r1, #1
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 fe43 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a04e:	4603      	mov	r3, r0
 800a050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a054:	e00f      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05a:	3328      	adds	r3, #40	; 0x28
 800a05c:	2101      	movs	r1, #1
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 feea 	bl	800be38 <RCCEx_PLL3_Config>
 800a064:	4603      	mov	r3, r0
 800a066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a06a:	e004      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a072:	e000      	b.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a074:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a07e:	4b96      	ldr	r3, [pc, #600]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a082:	f023 0107 	bic.w	r1, r3, #7
 800a086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a08c:	4a92      	ldr	r2, [pc, #584]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a08e:	430b      	orrs	r3, r1
 800a090:	6553      	str	r3, [r2, #84]	; 0x54
 800a092:	e003      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a098:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f002 0304 	and.w	r3, r2, #4
 800a0a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	d044      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0c4:	2b05      	cmp	r3, #5
 800a0c6:	d825      	bhi.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a11d 	.word	0x0800a11d
 800a0d4:	0800a0e9 	.word	0x0800a0e9
 800a0d8:	0800a0ff 	.word	0x0800a0ff
 800a0dc:	0800a11d 	.word	0x0800a11d
 800a0e0:	0800a11d 	.word	0x0800a11d
 800a0e4:	0800a11d 	.word	0x0800a11d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 fdef 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0fc:	e00f      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a102:	3328      	adds	r3, #40	; 0x28
 800a104:	2101      	movs	r1, #1
 800a106:	4618      	mov	r0, r3
 800a108:	f001 fe96 	bl	800be38 <RCCEx_PLL3_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a112:	e004      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a11a:	e000      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10b      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a126:	4b6c      	ldr	r3, [pc, #432]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12a:	f023 0107 	bic.w	r1, r3, #7
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a136:	4a68      	ldr	r2, [pc, #416]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a138:	430b      	orrs	r3, r1
 800a13a:	6593      	str	r3, [r2, #88]	; 0x58
 800a13c:	e003      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f002 0320 	and.w	r3, r2, #32
 800a152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a156:	2300      	movs	r3, #0
 800a158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a15c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a160:	460b      	mov	r3, r1
 800a162:	4313      	orrs	r3, r2
 800a164:	d055      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a172:	d033      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a178:	d82c      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17e:	d02f      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a184:	d826      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a186:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a18a:	d02b      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a18c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a190:	d820      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a196:	d012      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19c:	d81a      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d022      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a1a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1a6:	d115      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 fd8f 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1bc:	e015      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c2:	3328      	adds	r3, #40	; 0x28
 800a1c4:	2102      	movs	r1, #2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f001 fe36 	bl	800be38 <RCCEx_PLL3_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1d2:	e00a      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1da:	e006      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1dc:	bf00      	nop
 800a1de:	e004      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1e0:	bf00      	nop
 800a1e2:	e002      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1e4:	bf00      	nop
 800a1e6:	e000      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10b      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1f2:	4b39      	ldr	r3, [pc, #228]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a202:	4a35      	ldr	r2, [pc, #212]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a204:	430b      	orrs	r3, r1
 800a206:	6553      	str	r3, [r2, #84]	; 0x54
 800a208:	e003      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a20e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a21e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a222:	2300      	movs	r3, #0
 800a224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4313      	orrs	r3, r2
 800a230:	d058      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a23a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a23e:	d033      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a240:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a244:	d82c      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24a:	d02f      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a250:	d826      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a252:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a256:	d02b      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a25c:	d820      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a25e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a262:	d012      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a268:	d81a      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d022      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a26e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a272:	d115      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a278:	3308      	adds	r3, #8
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f001 fd29 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a288:	e015      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28e:	3328      	adds	r3, #40	; 0x28
 800a290:	2102      	movs	r1, #2
 800a292:	4618      	mov	r0, r3
 800a294:	f001 fdd0 	bl	800be38 <RCCEx_PLL3_Config>
 800a298:	4603      	mov	r3, r0
 800a29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a29e:	e00a      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2a6:	e006      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2a8:	bf00      	nop
 800a2aa:	e004      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2ac:	bf00      	nop
 800a2ae:	e002      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2b0:	bf00      	nop
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10e      	bne.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2ce:	4a02      	ldr	r2, [pc, #8]	; (800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a2d4:	e006      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a2d6:	bf00      	nop
 800a2d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a2f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a2fe:	460b      	mov	r3, r1
 800a300:	4313      	orrs	r3, r2
 800a302:	d055      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a30c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a310:	d033      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a312:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a316:	d82c      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a31c:	d02f      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a322:	d826      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a324:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a328:	d02b      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a32a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a32e:	d820      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a334:	d012      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a33a:	d81a      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d022      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a344:	d115      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34a:	3308      	adds	r3, #8
 800a34c:	2100      	movs	r1, #0
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 fcc0 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a35a:	e015      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a360:	3328      	adds	r3, #40	; 0x28
 800a362:	2102      	movs	r1, #2
 800a364:	4618      	mov	r0, r3
 800a366:	f001 fd67 	bl	800be38 <RCCEx_PLL3_Config>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a370:	e00a      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a378:	e006      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a37a:	bf00      	nop
 800a37c:	e004      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a37e:	bf00      	nop
 800a380:	e002      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a382:	bf00      	nop
 800a384:	e000      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a386:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10b      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a390:	4ba1      	ldr	r3, [pc, #644]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a394:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3a0:	4a9d      	ldr	r2, [pc, #628]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3a2:	430b      	orrs	r3, r1
 800a3a4:	6593      	str	r3, [r2, #88]	; 0x58
 800a3a6:	e003      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f002 0308 	and.w	r3, r2, #8
 800a3bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a3c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	d01e      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e2:	3328      	adds	r3, #40	; 0x28
 800a3e4:	2102      	movs	r1, #2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 fd26 	bl	800be38 <RCCEx_PLL3_Config>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a3f8:	4b87      	ldr	r3, [pc, #540]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a408:	4a83      	ldr	r2, [pc, #524]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a40a:	430b      	orrs	r3, r1
 800a40c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f002 0310 	and.w	r3, r2, #16
 800a41a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a41e:	2300      	movs	r3, #0
 800a420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a428:	460b      	mov	r3, r1
 800a42a:	4313      	orrs	r3, r2
 800a42c:	d01e      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a43a:	d10c      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a440:	3328      	adds	r3, #40	; 0x28
 800a442:	2102      	movs	r1, #2
 800a444:	4618      	mov	r0, r3
 800a446:	f001 fcf7 	bl	800be38 <RCCEx_PLL3_Config>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a456:	4b70      	ldr	r3, [pc, #448]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a466:	4a6c      	ldr	r2, [pc, #432]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a468:	430b      	orrs	r3, r1
 800a46a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	d03e      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a498:	d022      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a49a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a49e:	d81b      	bhi.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a8:	d00b      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a4aa:	e015      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f001 fc0d 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4c0:	e00f      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	3328      	adds	r3, #40	; 0x28
 800a4c8:	2102      	movs	r1, #2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 fcb4 	bl	800be38 <RCCEx_PLL3_Config>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4d6:	e004      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4de:	e000      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10b      	bne.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4ea:	4b4b      	ldr	r3, [pc, #300]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4fa:	4a47      	ldr	r2, [pc, #284]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	6593      	str	r3, [r2, #88]	; 0x58
 800a500:	e003      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a516:	67bb      	str	r3, [r7, #120]	; 0x78
 800a518:	2300      	movs	r3, #0
 800a51a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a51c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a520:	460b      	mov	r3, r1
 800a522:	4313      	orrs	r3, r2
 800a524:	d03b      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a532:	d01f      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a538:	d818      	bhi.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a53a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a53e:	d003      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a544:	d007      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a546:	e011      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a548:	4b33      	ldr	r3, [pc, #204]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	4a32      	ldr	r2, [pc, #200]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a54e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a554:	e00f      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55a:	3328      	adds	r3, #40	; 0x28
 800a55c:	2101      	movs	r1, #1
 800a55e:	4618      	mov	r0, r3
 800a560:	f001 fc6a 	bl	800be38 <RCCEx_PLL3_Config>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a56a:	e004      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a572:	e000      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a574:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a57e:	4b26      	ldr	r3, [pc, #152]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a582:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58e:	4a22      	ldr	r2, [pc, #136]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a590:	430b      	orrs	r3, r1
 800a592:	6553      	str	r3, [r2, #84]	; 0x54
 800a594:	e003      	b.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a59a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a5aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	677b      	str	r3, [r7, #116]	; 0x74
 800a5b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	d034      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a5c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c8:	d007      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a5ca:	e011      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5cc:	4b12      	ldr	r3, [pc, #72]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	4a11      	ldr	r2, [pc, #68]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5d8:	e00e      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5de:	3308      	adds	r3, #8
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 fb76 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5ee:	e003      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10d      	bne.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a600:	4b05      	ldr	r3, [pc, #20]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60e:	4a02      	ldr	r2, [pc, #8]	; (800a618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a610:	430b      	orrs	r3, r1
 800a612:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a614:	e006      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a616:	bf00      	nop
 800a618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a620:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a630:	66bb      	str	r3, [r7, #104]	; 0x68
 800a632:	2300      	movs	r3, #0
 800a634:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a63a:	460b      	mov	r3, r1
 800a63c:	4313      	orrs	r3, r2
 800a63e:	d00c      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a644:	3328      	adds	r3, #40	; 0x28
 800a646:	2102      	movs	r1, #2
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 fbf5 	bl	800be38 <RCCEx_PLL3_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a666:	663b      	str	r3, [r7, #96]	; 0x60
 800a668:	2300      	movs	r3, #0
 800a66a:	667b      	str	r3, [r7, #100]	; 0x64
 800a66c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a670:	460b      	mov	r3, r1
 800a672:	4313      	orrs	r3, r2
 800a674:	d038      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a67e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a682:	d018      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a688:	d811      	bhi.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a68a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a68e:	d014      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a694:	d80b      	bhi.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d011      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a69e:	d106      	bne.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a0:	4bc3      	ldr	r3, [pc, #780]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a4:	4ac2      	ldr	r2, [pc, #776]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a6ac:	e008      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6b4:	e004      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a6b6:	bf00      	nop
 800a6b8:	e002      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a6ba:	bf00      	nop
 800a6bc:	e000      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a6be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10b      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6c8:	4bb9      	ldr	r3, [pc, #740]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d8:	4ab5      	ldr	r2, [pc, #724]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6da:	430b      	orrs	r3, r1
 800a6dc:	6553      	str	r3, [r2, #84]	; 0x54
 800a6de:	e003      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a6f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d009      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a704:	4baa      	ldr	r3, [pc, #680]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a712:	4aa7      	ldr	r2, [pc, #668]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a724:	653b      	str	r3, [r7, #80]	; 0x50
 800a726:	2300      	movs	r3, #0
 800a728:	657b      	str	r3, [r7, #84]	; 0x54
 800a72a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a72e:	460b      	mov	r3, r1
 800a730:	4313      	orrs	r3, r2
 800a732:	d00a      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a734:	4b9e      	ldr	r3, [pc, #632]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a744:	4a9a      	ldr	r2, [pc, #616]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a746:	430b      	orrs	r3, r1
 800a748:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a756:	64bb      	str	r3, [r7, #72]	; 0x48
 800a758:	2300      	movs	r3, #0
 800a75a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a75c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a760:	460b      	mov	r3, r1
 800a762:	4313      	orrs	r3, r2
 800a764:	d009      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a766:	4b92      	ldr	r3, [pc, #584]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a774:	4a8e      	ldr	r2, [pc, #568]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a776:	430b      	orrs	r3, r1
 800a778:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a786:	643b      	str	r3, [r7, #64]	; 0x40
 800a788:	2300      	movs	r3, #0
 800a78a:	647b      	str	r3, [r7, #68]	; 0x44
 800a78c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a790:	460b      	mov	r3, r1
 800a792:	4313      	orrs	r3, r2
 800a794:	d00e      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a796:	4b86      	ldr	r3, [pc, #536]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	4a85      	ldr	r2, [pc, #532]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a79c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7a0:	6113      	str	r3, [r2, #16]
 800a7a2:	4b83      	ldr	r3, [pc, #524]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7a4:	6919      	ldr	r1, [r3, #16]
 800a7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a7ae:	4a80      	ldr	r2, [pc, #512]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	d009      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a7d0:	4b77      	ldr	r3, [pc, #476]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	4a74      	ldr	r2, [pc, #464]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a7f0:	633b      	str	r3, [r7, #48]	; 0x30
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	d00a      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a800:	4b6b      	ldr	r3, [pc, #428]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a804:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a810:	4a67      	ldr	r2, [pc, #412]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a812:	430b      	orrs	r3, r1
 800a814:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	2100      	movs	r1, #0
 800a820:	62b9      	str	r1, [r7, #40]	; 0x28
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a82c:	460b      	mov	r3, r1
 800a82e:	4313      	orrs	r3, r2
 800a830:	d011      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a836:	3308      	adds	r3, #8
 800a838:	2100      	movs	r1, #0
 800a83a:	4618      	mov	r0, r3
 800a83c:	f001 fa4a 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a840:	4603      	mov	r3, r0
 800a842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	2100      	movs	r1, #0
 800a860:	6239      	str	r1, [r7, #32]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
 800a868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a86c:	460b      	mov	r3, r1
 800a86e:	4313      	orrs	r3, r2
 800a870:	d011      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a876:	3308      	adds	r3, #8
 800a878:	2101      	movs	r1, #1
 800a87a:	4618      	mov	r0, r3
 800a87c:	f001 fa2a 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a880:	4603      	mov	r3, r0
 800a882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	2100      	movs	r1, #0
 800a8a0:	61b9      	str	r1, [r7, #24]
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	d011      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	2102      	movs	r1, #2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 fa0a 	bl	800bcd4 <RCCEx_PLL2_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	2100      	movs	r1, #0
 800a8e0:	6139      	str	r1, [r7, #16]
 800a8e2:	f003 0308 	and.w	r3, r3, #8
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	d011      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f6:	3328      	adds	r3, #40	; 0x28
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 fa9c 	bl	800be38 <RCCEx_PLL3_Config>
 800a900:	4603      	mov	r3, r0
 800a902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	2100      	movs	r1, #0
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	f003 0310 	and.w	r3, r3, #16
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a92c:	460b      	mov	r3, r1
 800a92e:	4313      	orrs	r3, r2
 800a930:	d011      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a936:	3328      	adds	r3, #40	; 0x28
 800a938:	2101      	movs	r1, #1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f001 fa7c 	bl	800be38 <RCCEx_PLL3_Config>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	2100      	movs	r1, #0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	607b      	str	r3, [r7, #4]
 800a968:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a96c:	460b      	mov	r3, r1
 800a96e:	4313      	orrs	r3, r2
 800a970:	d011      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a976:	3328      	adds	r3, #40	; 0x28
 800a978:	2102      	movs	r1, #2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 fa5c 	bl	800be38 <RCCEx_PLL3_Config>
 800a980:	4603      	mov	r3, r0
 800a982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d003      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a996:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e000      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9b0:	58024400 	.word	0x58024400

0800a9b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b090      	sub	sp, #64	; 0x40
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a9be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	f040 8094 	bne.w	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a9cc:	4b9e      	ldr	r3, [pc, #632]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	f200 8087 	bhi.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a9de:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e4:	0800a9f9 	.word	0x0800a9f9
 800a9e8:	0800aa21 	.word	0x0800aa21
 800a9ec:	0800aa49 	.word	0x0800aa49
 800a9f0:	0800aae5 	.word	0x0800aae5
 800a9f4:	0800aa71 	.word	0x0800aa71
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9f8:	4b93      	ldr	r3, [pc, #588]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa04:	d108      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 f810 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa14:	f000 bd45 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa1c:	f000 bd41 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa20:	4b89      	ldr	r3, [pc, #548]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa2c:	d108      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa2e:	f107 0318 	add.w	r3, r7, #24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fd54 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3c:	f000 bd31 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa44:	f000 bd2d 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa48:	4b7f      	ldr	r3, [pc, #508]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa54:	d108      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa56:	f107 030c 	add.w	r3, r7, #12
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fe94 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa64:	f000 bd1d 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa6c:	f000 bd19 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa70:	4b75      	ldr	r3, [pc, #468]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa7a:	4b73      	ldr	r3, [pc, #460]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d10c      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d109      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa8c:	4b6e      	ldr	r3, [pc, #440]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	08db      	lsrs	r3, r3, #3
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	4a6d      	ldr	r2, [pc, #436]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa98:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa9e:	e01f      	b.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaa0:	4b69      	ldr	r3, [pc, #420]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaac:	d106      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aab4:	d102      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aab6:	4b66      	ldr	r3, [pc, #408]	; (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaba:	e011      	b.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aabc:	4b62      	ldr	r3, [pc, #392]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac8:	d106      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aad0:	d102      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aad2:	4b60      	ldr	r3, [pc, #384]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aad6:	e003      	b.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aadc:	f000 bce1 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aae0:	f000 bcdf 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aae4:	4b5c      	ldr	r3, [pc, #368]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae8:	f000 bcdb 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf0:	f000 bcd7 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aaf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800aafc:	430b      	orrs	r3, r1
 800aafe:	f040 80ad 	bne.w	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ab02:	4b51      	ldr	r3, [pc, #324]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ab0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab12:	d056      	beq.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab1a:	f200 8090 	bhi.w	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	2bc0      	cmp	r3, #192	; 0xc0
 800ab22:	f000 8088 	beq.w	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	2bc0      	cmp	r3, #192	; 0xc0
 800ab2a:	f200 8088 	bhi.w	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	2b80      	cmp	r3, #128	; 0x80
 800ab32:	d032      	beq.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	2b80      	cmp	r3, #128	; 0x80
 800ab38:	f200 8081 	bhi.w	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	2b40      	cmp	r3, #64	; 0x40
 800ab46:	d014      	beq.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ab48:	e079      	b.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab4a:	4b3f      	ldr	r3, [pc, #252]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab56:	d108      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 ff67 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab66:	f000 bc9c 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab6e:	f000 bc98 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab72:	4b35      	ldr	r3, [pc, #212]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab7e:	d108      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab80:	f107 0318 	add.w	r3, r7, #24
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 fcab 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab8e:	f000 bc88 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab96:	f000 bc84 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab9a:	4b2b      	ldr	r3, [pc, #172]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aba6:	d108      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aba8:	f107 030c 	add.w	r3, r7, #12
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fdeb 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb6:	f000 bc74 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abbe:	f000 bc70 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abc2:	4b21      	ldr	r3, [pc, #132]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abcc:	4b1e      	ldr	r3, [pc, #120]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	d10c      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abde:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	08db      	lsrs	r3, r3, #3
 800abe4:	f003 0303 	and.w	r3, r3, #3
 800abe8:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abea:	fa22 f303 	lsr.w	r3, r2, r3
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf0:	e01f      	b.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abf2:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfe:	d106      	bne.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac06:	d102      	bne.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac08:	4b11      	ldr	r3, [pc, #68]	; (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ac0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac0c:	e011      	b.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac0e:	4b0e      	ldr	r3, [pc, #56]	; (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1a:	d106      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac22:	d102      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac24:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac28:	e003      	b.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac2e:	f000 bc38 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac32:	f000 bc36 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac36:	4b08      	ldr	r3, [pc, #32]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac3a:	f000 bc32 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac42:	f000 bc2e 	b.w	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac46:	bf00      	nop
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	03d09000 	.word	0x03d09000
 800ac50:	003d0900 	.word	0x003d0900
 800ac54:	017d7840 	.word	0x017d7840
 800ac58:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ac5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac60:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ac64:	430b      	orrs	r3, r1
 800ac66:	f040 809c 	bne.w	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac6a:	4b9e      	ldr	r3, [pc, #632]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ac72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac7a:	d054      	beq.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac82:	f200 808b 	bhi.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac8c:	f000 8083 	beq.w	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac96:	f200 8081 	bhi.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aca0:	d02f      	beq.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aca8:	d878      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acb6:	d012      	beq.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800acb8:	e070      	b.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acba:	4b8a      	ldr	r3, [pc, #552]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acc6:	d107      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800accc:	4618      	mov	r0, r3
 800acce:	f000 feaf 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd6:	e3e4      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acdc:	e3e1      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acde:	4b81      	ldr	r3, [pc, #516]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ace6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acea:	d107      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acec:	f107 0318 	add.w	r3, r7, #24
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fbf5 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acfa:	e3d2      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad00:	e3cf      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad02:	4b78      	ldr	r3, [pc, #480]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad0e:	d107      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad10:	f107 030c 	add.w	r3, r7, #12
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fd37 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1e:	e3c0      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad24:	e3bd      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad26:	4b6f      	ldr	r3, [pc, #444]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad30:	4b6c      	ldr	r3, [pc, #432]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 0304 	and.w	r3, r3, #4
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d10c      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d109      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad42:	4b68      	ldr	r3, [pc, #416]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	08db      	lsrs	r3, r3, #3
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	4a66      	ldr	r2, [pc, #408]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad54:	e01e      	b.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad56:	4b63      	ldr	r3, [pc, #396]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad62:	d106      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad6a:	d102      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad6c:	4b5f      	ldr	r3, [pc, #380]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad70:	e010      	b.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad72:	4b5c      	ldr	r3, [pc, #368]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad7e:	d106      	bne.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad86:	d102      	bne.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad88:	4b59      	ldr	r3, [pc, #356]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad8c:	e002      	b.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad92:	e386      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad94:	e385      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad96:	4b57      	ldr	r3, [pc, #348]	; (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ad98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad9a:	e382      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ada0:	e37f      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ada2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800adaa:	430b      	orrs	r3, r1
 800adac:	f040 80a7 	bne.w	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800adb0:	4b4c      	ldr	r3, [pc, #304]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800adb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adc0:	d055      	beq.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adc8:	f200 8096 	bhi.w	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800add2:	f000 8084 	beq.w	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800addc:	f200 808c 	bhi.w	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ade6:	d030      	beq.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adee:	f200 8083 	bhi.w	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d004      	beq.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800adfe:	d012      	beq.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ae00:	e07a      	b.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae02:	4b38      	ldr	r3, [pc, #224]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae0e:	d107      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fe0b 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1e:	e340      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae24:	e33d      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae26:	4b2f      	ldr	r3, [pc, #188]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae32:	d107      	bne.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae34:	f107 0318 	add.w	r3, r7, #24
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fb51 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae42:	e32e      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae48:	e32b      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae4a:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae56:	d107      	bne.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae58:	f107 030c 	add.w	r3, r7, #12
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 fc93 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae66:	e31c      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae6c:	e319      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae6e:	4b1d      	ldr	r3, [pc, #116]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae78:	4b1a      	ldr	r3, [pc, #104]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d10c      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d109      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	08db      	lsrs	r3, r3, #3
 800ae90:	f003 0303 	and.w	r3, r3, #3
 800ae94:	4a14      	ldr	r2, [pc, #80]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae96:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae9c:	e01e      	b.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeaa:	d106      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeb2:	d102      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb8:	e010      	b.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeba:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aec6:	d106      	bne.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aece:	d102      	bne.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aed4:	e002      	b.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aeda:	e2e2      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aedc:	e2e1      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aede:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee2:	e2de      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aee4:	58024400 	.word	0x58024400
 800aee8:	03d09000 	.word	0x03d09000
 800aeec:	003d0900 	.word	0x003d0900
 800aef0:	017d7840 	.word	0x017d7840
 800aef4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aefc:	e2d1      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af02:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800af06:	430b      	orrs	r3, r1
 800af08:	f040 809c 	bne.w	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800af0c:	4b93      	ldr	r3, [pc, #588]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af10:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800af14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af1c:	d054      	beq.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af24:	f200 808b 	bhi.w	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af2e:	f000 8083 	beq.w	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af38:	f200 8081 	bhi.w	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af42:	d02f      	beq.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800af44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af4a:	d878      	bhi.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d004      	beq.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800af52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af58:	d012      	beq.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800af5a:	e070      	b.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af5c:	4b7f      	ldr	r3, [pc, #508]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af68:	d107      	bne.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 fd5e 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af78:	e293      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af7e:	e290      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af80:	4b76      	ldr	r3, [pc, #472]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af8c:	d107      	bne.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af8e:	f107 0318 	add.w	r3, r7, #24
 800af92:	4618      	mov	r0, r3
 800af94:	f000 faa4 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9c:	e281      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa2:	e27e      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afa4:	4b6d      	ldr	r3, [pc, #436]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb0:	d107      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb2:	f107 030c 	add.w	r3, r7, #12
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fbe6 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc0:	e26f      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc6:	e26c      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afc8:	4b64      	ldr	r3, [pc, #400]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afd0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afd2:	4b62      	ldr	r3, [pc, #392]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d10c      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d109      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afe4:	4b5d      	ldr	r3, [pc, #372]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	08db      	lsrs	r3, r3, #3
 800afea:	f003 0303 	and.w	r3, r3, #3
 800afee:	4a5c      	ldr	r2, [pc, #368]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aff0:	fa22 f303 	lsr.w	r3, r2, r3
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aff6:	e01e      	b.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aff8:	4b58      	ldr	r3, [pc, #352]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b004:	d106      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b00c:	d102      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b00e:	4b55      	ldr	r3, [pc, #340]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b012:	e010      	b.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b014:	4b51      	ldr	r3, [pc, #324]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b020:	d106      	bne.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b028:	d102      	bne.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b02a:	4b4f      	ldr	r3, [pc, #316]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b02c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b02e:	e002      	b.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b034:	e235      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b036:	e234      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b038:	4b4c      	ldr	r3, [pc, #304]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03c:	e231      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b042:	e22e      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b044:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b048:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b04c:	430b      	orrs	r3, r1
 800b04e:	f040 808f 	bne.w	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b052:	4b42      	ldr	r3, [pc, #264]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b056:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b05a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b062:	d06b      	beq.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b06a:	d874      	bhi.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b072:	d056      	beq.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b07a:	d86c      	bhi.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b082:	d03b      	beq.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b08a:	d864      	bhi.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b092:	d021      	beq.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b09a:	d85c      	bhi.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d004      	beq.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a8:	d004      	beq.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b0aa:	e054      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b0ac:	f7fe fa4c 	bl	8009548 <HAL_RCC_GetPCLK1Freq>
 800b0b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0b2:	e1f6      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b4:	4b29      	ldr	r3, [pc, #164]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c0:	d107      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c2:	f107 0318 	add.w	r3, r7, #24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 fa0a 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d0:	e1e7      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d6:	e1e4      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0d8:	4b20      	ldr	r3, [pc, #128]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e4:	d107      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e6:	f107 030c 	add.w	r3, r7, #12
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fb4c 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f4:	e1d5      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fa:	e1d2      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0fc:	4b17      	ldr	r3, [pc, #92]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b04      	cmp	r3, #4
 800b106:	d109      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b108:	4b14      	ldr	r3, [pc, #80]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	08db      	lsrs	r3, r3, #3
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	4a13      	ldr	r2, [pc, #76]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b114:	fa22 f303 	lsr.w	r3, r2, r3
 800b118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b11a:	e1c2      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b120:	e1bf      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b122:	4b0e      	ldr	r3, [pc, #56]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12e:	d102      	bne.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b130:	4b0c      	ldr	r3, [pc, #48]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b134:	e1b5      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b13a:	e1b2      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b13c:	4b07      	ldr	r3, [pc, #28]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b148:	d102      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b14a:	4b07      	ldr	r3, [pc, #28]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14e:	e1a8      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b154:	e1a5      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b15a:	e1a2      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b15c:	58024400 	.word	0x58024400
 800b160:	03d09000 	.word	0x03d09000
 800b164:	003d0900 	.word	0x003d0900
 800b168:	017d7840 	.word	0x017d7840
 800b16c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b174:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b178:	430b      	orrs	r3, r1
 800b17a:	d173      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b17c:	4b9c      	ldr	r3, [pc, #624]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b17e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b184:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b18c:	d02f      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b194:	d863      	bhi.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a2:	d012      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b1a4:	e05b      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1a6:	4b92      	ldr	r3, [pc, #584]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1b2:	d107      	bne.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1b4:	f107 0318 	add.w	r3, r7, #24
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 f991 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c2:	e16e      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c8:	e16b      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1ca:	4b89      	ldr	r3, [pc, #548]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d6:	d107      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1d8:	f107 030c 	add.w	r3, r7, #12
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fad3 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e6:	e15c      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ec:	e159      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1ee:	4b80      	ldr	r3, [pc, #512]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1f8:	4b7d      	ldr	r3, [pc, #500]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0304 	and.w	r3, r3, #4
 800b200:	2b04      	cmp	r3, #4
 800b202:	d10c      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	2b00      	cmp	r3, #0
 800b208:	d109      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b20a:	4b79      	ldr	r3, [pc, #484]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	08db      	lsrs	r3, r3, #3
 800b210:	f003 0303 	and.w	r3, r3, #3
 800b214:	4a77      	ldr	r2, [pc, #476]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b216:	fa22 f303 	lsr.w	r3, r2, r3
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b21c:	e01e      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b21e:	4b74      	ldr	r3, [pc, #464]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b22a:	d106      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b232:	d102      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b234:	4b70      	ldr	r3, [pc, #448]	; (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b238:	e010      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b23a:	4b6d      	ldr	r3, [pc, #436]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b246:	d106      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b24e:	d102      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b250:	4b6a      	ldr	r3, [pc, #424]	; (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b254:	e002      	b.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b25a:	e122      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b25c:	e121      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b262:	e11e      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b264:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b268:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b26c:	430b      	orrs	r3, r1
 800b26e:	d133      	bne.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b270:	4b5f      	ldr	r3, [pc, #380]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b278:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d004      	beq.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b286:	d012      	beq.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b288:	e023      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b28a:	4b59      	ldr	r3, [pc, #356]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b296:	d107      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 fbc7 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a6:	e0fc      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ac:	e0f9      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2ae:	4b50      	ldr	r3, [pc, #320]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ba:	d107      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2bc:	f107 0318 	add.w	r3, r7, #24
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f90d 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ca:	e0ea      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d0:	e0e7      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d6:	e0e4      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b2d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2dc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	f040 808d 	bne.w	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b2e6:	4b42      	ldr	r3, [pc, #264]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b2ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2f6:	d06b      	beq.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2fe:	d874      	bhi.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b306:	d056      	beq.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b30e:	d86c      	bhi.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b316:	d03b      	beq.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b31e:	d864      	bhi.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b326:	d021      	beq.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b32e:	d85c      	bhi.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	2b00      	cmp	r3, #0
 800b334:	d004      	beq.n	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b33c:	d004      	beq.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b33e:	e054      	b.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b340:	f000 f8b8 	bl	800b4b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b344:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b346:	e0ac      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b348:	4b29      	ldr	r3, [pc, #164]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b354:	d107      	bne.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b356:	f107 0318 	add.w	r3, r7, #24
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f8c0 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b364:	e09d      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b36a:	e09a      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b36c:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b378:	d107      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37a:	f107 030c 	add.w	r3, r7, #12
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fa02 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b388:	e08b      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38e:	e088      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b390:	4b17      	ldr	r3, [pc, #92]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d109      	bne.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b39c:	4b14      	ldr	r3, [pc, #80]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	08db      	lsrs	r3, r3, #3
 800b3a2:	f003 0303 	and.w	r3, r3, #3
 800b3a6:	4a13      	ldr	r2, [pc, #76]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ae:	e078      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b4:	e075      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3b6:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c2:	d102      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c8:	e06b      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ce:	e068      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3dc:	d102      	bne.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e2:	e05e      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e8:	e05b      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ee:	e058      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	03d09000 	.word	0x03d09000
 800b3f8:	003d0900 	.word	0x003d0900
 800b3fc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b404:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b408:	430b      	orrs	r3, r1
 800b40a:	d148      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b40c:	4b27      	ldr	r3, [pc, #156]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b414:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b41c:	d02a      	beq.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b424:	d838      	bhi.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b432:	d00d      	beq.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b434:	e030      	b.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b436:	4b1d      	ldr	r3, [pc, #116]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b442:	d102      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b444:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b448:	e02b      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b44e:	e028      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b450:	4b16      	ldr	r3, [pc, #88]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b45c:	d107      	bne.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b45e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fae4 	bl	800ba30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b46c:	e019      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b472:	e016      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b474:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b47c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b480:	d107      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b482:	f107 0318 	add.w	r3, r7, #24
 800b486:	4618      	mov	r0, r3
 800b488:	f000 f82a 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b490:	e007      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b496:	e004      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b49c:	e001      	b.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3740      	adds	r7, #64	; 0x40
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	58024400 	.word	0x58024400
 800b4b0:	017d7840 	.word	0x017d7840

0800b4b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b4b8:	f7fe f816 	bl	80094e8 <HAL_RCC_GetHCLKFreq>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	091b      	lsrs	r3, r3, #4
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	4904      	ldr	r1, [pc, #16]	; (800b4dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b4ca:	5ccb      	ldrb	r3, [r1, r3]
 800b4cc:	f003 031f 	and.w	r3, r3, #31
 800b4d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	08010df0 	.word	0x08010df0

0800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b089      	sub	sp, #36	; 0x24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4e8:	4ba1      	ldr	r3, [pc, #644]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ec:	f003 0303 	and.w	r3, r3, #3
 800b4f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b4f2:	4b9f      	ldr	r3, [pc, #636]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f6:	0b1b      	lsrs	r3, r3, #12
 800b4f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b4fe:	4b9c      	ldr	r3, [pc, #624]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	091b      	lsrs	r3, r3, #4
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b50a:	4b99      	ldr	r3, [pc, #612]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b50e:	08db      	lsrs	r3, r3, #3
 800b510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	fb02 f303 	mul.w	r3, r2, r3
 800b51a:	ee07 3a90 	vmov	s15, r3
 800b51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b522:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 8111 	beq.w	800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b02      	cmp	r3, #2
 800b532:	f000 8083 	beq.w	800b63c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	2b02      	cmp	r3, #2
 800b53a:	f200 80a1 	bhi.w	800b680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d056      	beq.n	800b5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b54a:	e099      	b.n	800b680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b54c:	4b88      	ldr	r3, [pc, #544]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0320 	and.w	r3, r3, #32
 800b554:	2b00      	cmp	r3, #0
 800b556:	d02d      	beq.n	800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b558:	4b85      	ldr	r3, [pc, #532]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	08db      	lsrs	r3, r3, #3
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	4a84      	ldr	r2, [pc, #528]	; (800b774 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b564:	fa22 f303 	lsr.w	r3, r2, r3
 800b568:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b582:	4b7b      	ldr	r3, [pc, #492]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b592:	ed97 6a03 	vldr	s12, [r7, #12]
 800b596:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5b2:	e087      	b.n	800b6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c6:	4b6a      	ldr	r3, [pc, #424]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5f6:	e065      	b.n	800b6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b602:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b60a:	4b59      	ldr	r3, [pc, #356]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b612:	ee07 3a90 	vmov	s15, r3
 800b616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b63a:	e043      	b.n	800b6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b646:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64e:	4b48      	ldr	r3, [pc, #288]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b662:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b67e:	e021      	b.n	800b6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b692:	4b37      	ldr	r3, [pc, #220]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b6c4:	4b2a      	ldr	r3, [pc, #168]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c8:	0a5b      	lsrs	r3, r3, #9
 800b6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ea:	ee17 2a90 	vmov	r2, s15
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b6f2:	4b1f      	ldr	r3, [pc, #124]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f6:	0c1b      	lsrs	r3, r3, #16
 800b6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6fc:	ee07 3a90 	vmov	s15, r3
 800b700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b70c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b718:	ee17 2a90 	vmov	r2, s15
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b720:	4b13      	ldr	r3, [pc, #76]	; (800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	0e1b      	lsrs	r3, r3, #24
 800b726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b73a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b746:	ee17 2a90 	vmov	r2, s15
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b74e:	e008      	b.n	800b762 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	609a      	str	r2, [r3, #8]
}
 800b762:	bf00      	nop
 800b764:	3724      	adds	r7, #36	; 0x24
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	58024400 	.word	0x58024400
 800b774:	03d09000 	.word	0x03d09000
 800b778:	46000000 	.word	0x46000000
 800b77c:	4c742400 	.word	0x4c742400
 800b780:	4a742400 	.word	0x4a742400
 800b784:	4bbebc20 	.word	0x4bbebc20

0800b788 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b788:	b480      	push	{r7}
 800b78a:	b089      	sub	sp, #36	; 0x24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b790:	4ba1      	ldr	r3, [pc, #644]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b794:	f003 0303 	and.w	r3, r3, #3
 800b798:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b79a:	4b9f      	ldr	r3, [pc, #636]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	0d1b      	lsrs	r3, r3, #20
 800b7a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b7a6:	4b9c      	ldr	r3, [pc, #624]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	0a1b      	lsrs	r3, r3, #8
 800b7ac:	f003 0301 	and.w	r3, r3, #1
 800b7b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b7b2:	4b99      	ldr	r3, [pc, #612]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b6:	08db      	lsrs	r3, r3, #3
 800b7b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	fb02 f303 	mul.w	r3, r2, r3
 800b7c2:	ee07 3a90 	vmov	s15, r3
 800b7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 8111 	beq.w	800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	f000 8083 	beq.w	800b8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	f200 80a1 	bhi.w	800b928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d056      	beq.n	800b8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b7f2:	e099      	b.n	800b928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7f4:	4b88      	ldr	r3, [pc, #544]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0320 	and.w	r3, r3, #32
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d02d      	beq.n	800b85c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b800:	4b85      	ldr	r3, [pc, #532]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	08db      	lsrs	r3, r3, #3
 800b806:	f003 0303 	and.w	r3, r3, #3
 800b80a:	4a84      	ldr	r2, [pc, #528]	; (800ba1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b80c:	fa22 f303 	lsr.w	r3, r2, r3
 800b810:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b82a:	4b7b      	ldr	r3, [pc, #492]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b83e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b85a:	e087      	b.n	800b96c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b86e:	4b6a      	ldr	r3, [pc, #424]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b876:	ee07 3a90 	vmov	s15, r3
 800b87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b882:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b89a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b89e:	e065      	b.n	800b96c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8b2:	4b59      	ldr	r3, [pc, #356]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ba:	ee07 3a90 	vmov	s15, r3
 800b8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8e2:	e043      	b.n	800b96c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8f6:	4b48      	ldr	r3, [pc, #288]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b906:	ed97 6a03 	vldr	s12, [r7, #12]
 800b90a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b926:	e021      	b.n	800b96c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b93a:	4b37      	ldr	r3, [pc, #220]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b942:	ee07 3a90 	vmov	s15, r3
 800b946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b94e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b96a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b96c:	4b2a      	ldr	r3, [pc, #168]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	0a5b      	lsrs	r3, r3, #9
 800b972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b976:	ee07 3a90 	vmov	s15, r3
 800b97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b982:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b986:	edd7 6a07 	vldr	s13, [r7, #28]
 800b98a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b98e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b992:	ee17 2a90 	vmov	r2, s15
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b99a:	4b1f      	ldr	r3, [pc, #124]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99e:	0c1b      	lsrs	r3, r3, #16
 800b9a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a4:	ee07 3a90 	vmov	s15, r3
 800b9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c0:	ee17 2a90 	vmov	r2, s15
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b9c8:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9cc:	0e1b      	lsrs	r3, r3, #24
 800b9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ee:	ee17 2a90 	vmov	r2, s15
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b9f6:	e008      	b.n	800ba0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	609a      	str	r2, [r3, #8]
}
 800ba0a:	bf00      	nop
 800ba0c:	3724      	adds	r7, #36	; 0x24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	58024400 	.word	0x58024400
 800ba1c:	03d09000 	.word	0x03d09000
 800ba20:	46000000 	.word	0x46000000
 800ba24:	4c742400 	.word	0x4c742400
 800ba28:	4a742400 	.word	0x4a742400
 800ba2c:	4bbebc20 	.word	0x4bbebc20

0800ba30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b089      	sub	sp, #36	; 0x24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba38:	4ba0      	ldr	r3, [pc, #640]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ba42:	4b9e      	ldr	r3, [pc, #632]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba46:	091b      	lsrs	r3, r3, #4
 800ba48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ba4e:	4b9b      	ldr	r3, [pc, #620]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ba58:	4b98      	ldr	r3, [pc, #608]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5c:	08db      	lsrs	r3, r3, #3
 800ba5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	fb02 f303 	mul.w	r3, r2, r3
 800ba68:	ee07 3a90 	vmov	s15, r3
 800ba6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8111 	beq.w	800bc9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	f000 8083 	beq.w	800bb8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	f200 80a1 	bhi.w	800bbce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d056      	beq.n	800bb46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba98:	e099      	b.n	800bbce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba9a:	4b88      	ldr	r3, [pc, #544]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 0320 	and.w	r3, r3, #32
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d02d      	beq.n	800bb02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800baa6:	4b85      	ldr	r3, [pc, #532]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	08db      	lsrs	r3, r3, #3
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	4a83      	ldr	r2, [pc, #524]	; (800bcc0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bab2:	fa22 f303 	lsr.w	r3, r2, r3
 800bab6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bacc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad0:	4b7a      	ldr	r3, [pc, #488]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb00:	e087      	b.n	800bc12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	ee07 3a90 	vmov	s15, r3
 800bb08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb14:	4b69      	ldr	r3, [pc, #420]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb1c:	ee07 3a90 	vmov	s15, r3
 800bb20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb24:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb28:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb44:	e065      	b.n	800bc12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	ee07 3a90 	vmov	s15, r3
 800bb4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bccc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bb54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb58:	4b58      	ldr	r3, [pc, #352]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb60:	ee07 3a90 	vmov	s15, r3
 800bb64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb68:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb88:	e043      	b.n	800bc12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb9c:	4b47      	ldr	r3, [pc, #284]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba4:	ee07 3a90 	vmov	s15, r3
 800bba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbac:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbcc:	e021      	b.n	800bc12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe0:	4b36      	ldr	r3, [pc, #216]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe8:	ee07 3a90 	vmov	s15, r3
 800bbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbf4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc12:	4b2a      	ldr	r3, [pc, #168]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc16:	0a5b      	lsrs	r3, r3, #9
 800bc18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1c:	ee07 3a90 	vmov	s15, r3
 800bc20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc38:	ee17 2a90 	vmov	r2, s15
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc40:	4b1e      	ldr	r3, [pc, #120]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc66:	ee17 2a90 	vmov	r2, s15
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc6e:	4b13      	ldr	r3, [pc, #76]	; (800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc72:	0e1b      	lsrs	r3, r3, #24
 800bc74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc78:	ee07 3a90 	vmov	s15, r3
 800bc7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc88:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc94:	ee17 2a90 	vmov	r2, s15
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc9c:	e008      	b.n	800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	609a      	str	r2, [r3, #8]
}
 800bcb0:	bf00      	nop
 800bcb2:	3724      	adds	r7, #36	; 0x24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	58024400 	.word	0x58024400
 800bcc0:	03d09000 	.word	0x03d09000
 800bcc4:	46000000 	.word	0x46000000
 800bcc8:	4c742400 	.word	0x4c742400
 800bccc:	4a742400 	.word	0x4a742400
 800bcd0:	4bbebc20 	.word	0x4bbebc20

0800bcd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bce2:	4b53      	ldr	r3, [pc, #332]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce6:	f003 0303 	and.w	r3, r3, #3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d101      	bne.n	800bcf2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e099      	b.n	800be26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bcf2:	4b4f      	ldr	r3, [pc, #316]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a4e      	ldr	r2, [pc, #312]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bcf8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcfe:	f7f6 fd71 	bl	80027e4 <HAL_GetTick>
 800bd02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd04:	e008      	b.n	800bd18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd06:	f7f6 fd6d 	bl	80027e4 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d901      	bls.n	800bd18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd14:	2303      	movs	r3, #3
 800bd16:	e086      	b.n	800be26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd18:	4b45      	ldr	r3, [pc, #276]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1f0      	bne.n	800bd06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd24:	4b42      	ldr	r3, [pc, #264]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	031b      	lsls	r3, r3, #12
 800bd32:	493f      	ldr	r1, [pc, #252]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	628b      	str	r3, [r1, #40]	; 0x28
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	025b      	lsls	r3, r3, #9
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	041b      	lsls	r3, r3, #16
 800bd56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	061b      	lsls	r3, r3, #24
 800bd64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd68:	4931      	ldr	r1, [pc, #196]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd6e:	4b30      	ldr	r3, [pc, #192]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	492d      	ldr	r1, [pc, #180]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd80:	4b2b      	ldr	r3, [pc, #172]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd84:	f023 0220 	bic.w	r2, r3, #32
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	4928      	ldr	r1, [pc, #160]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd92:	4b27      	ldr	r3, [pc, #156]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	4a26      	ldr	r2, [pc, #152]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bd98:	f023 0310 	bic.w	r3, r3, #16
 800bd9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd9e:	4b24      	ldr	r3, [pc, #144]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bda0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bda2:	4b24      	ldr	r3, [pc, #144]	; (800be34 <RCCEx_PLL2_Config+0x160>)
 800bda4:	4013      	ands	r3, r2
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	69d2      	ldr	r2, [r2, #28]
 800bdaa:	00d2      	lsls	r2, r2, #3
 800bdac:	4920      	ldr	r1, [pc, #128]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bdb2:	4b1f      	ldr	r3, [pc, #124]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb6:	4a1e      	ldr	r2, [pc, #120]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdb8:	f043 0310 	orr.w	r3, r3, #16
 800bdbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d106      	bne.n	800bdd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bdc4:	4b1a      	ldr	r3, [pc, #104]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	4a19      	ldr	r2, [pc, #100]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdd0:	e00f      	b.n	800bdf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d106      	bne.n	800bde6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bdd8:	4b15      	ldr	r3, [pc, #84]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	4a14      	ldr	r2, [pc, #80]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bde2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bde4:	e005      	b.n	800bdf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bde6:	4b12      	ldr	r3, [pc, #72]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdea:	4a11      	ldr	r2, [pc, #68]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a0e      	ldr	r2, [pc, #56]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800bdf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdfe:	f7f6 fcf1 	bl	80027e4 <HAL_GetTick>
 800be02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be04:	e008      	b.n	800be18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be06:	f7f6 fced 	bl	80027e4 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b02      	cmp	r3, #2
 800be12:	d901      	bls.n	800be18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	e006      	b.n	800be26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be18:	4b05      	ldr	r3, [pc, #20]	; (800be30 <RCCEx_PLL2_Config+0x15c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d0f0      	beq.n	800be06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be24:	7bfb      	ldrb	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	58024400 	.word	0x58024400
 800be34:	ffff0007 	.word	0xffff0007

0800be38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be46:	4b53      	ldr	r3, [pc, #332]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800be48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d101      	bne.n	800be56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e099      	b.n	800bf8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be56:	4b4f      	ldr	r3, [pc, #316]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a4e      	ldr	r2, [pc, #312]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800be5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be62:	f7f6 fcbf 	bl	80027e4 <HAL_GetTick>
 800be66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be68:	e008      	b.n	800be7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be6a:	f7f6 fcbb 	bl	80027e4 <HAL_GetTick>
 800be6e:	4602      	mov	r2, r0
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	2b02      	cmp	r3, #2
 800be76:	d901      	bls.n	800be7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e086      	b.n	800bf8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be7c:	4b45      	ldr	r3, [pc, #276]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1f0      	bne.n	800be6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be88:	4b42      	ldr	r3, [pc, #264]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800be8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	051b      	lsls	r3, r3, #20
 800be96:	493f      	ldr	r1, [pc, #252]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	628b      	str	r3, [r1, #40]	; 0x28
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	3b01      	subs	r3, #1
 800beac:	025b      	lsls	r3, r3, #9
 800beae:	b29b      	uxth	r3, r3
 800beb0:	431a      	orrs	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	041b      	lsls	r3, r3, #16
 800beba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bebe:	431a      	orrs	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	061b      	lsls	r3, r3, #24
 800bec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800becc:	4931      	ldr	r1, [pc, #196]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bece:	4313      	orrs	r3, r2
 800bed0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bed2:	4b30      	ldr	r3, [pc, #192]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	492d      	ldr	r1, [pc, #180]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bee0:	4313      	orrs	r3, r2
 800bee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bee4:	4b2b      	ldr	r3, [pc, #172]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	4928      	ldr	r1, [pc, #160]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bef6:	4b27      	ldr	r3, [pc, #156]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befa:	4a26      	ldr	r2, [pc, #152]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800befc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf02:	4b24      	ldr	r3, [pc, #144]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf06:	4b24      	ldr	r3, [pc, #144]	; (800bf98 <RCCEx_PLL3_Config+0x160>)
 800bf08:	4013      	ands	r3, r2
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	69d2      	ldr	r2, [r2, #28]
 800bf0e:	00d2      	lsls	r2, r2, #3
 800bf10:	4920      	ldr	r1, [pc, #128]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf16:	4b1f      	ldr	r3, [pc, #124]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	4a1e      	ldr	r2, [pc, #120]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf28:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2c:	4a19      	ldr	r2, [pc, #100]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bf32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf34:	e00f      	b.n	800bf56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d106      	bne.n	800bf4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf3c:	4b15      	ldr	r3, [pc, #84]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	4a14      	ldr	r2, [pc, #80]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf48:	e005      	b.n	800bf56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf4a:	4b12      	ldr	r3, [pc, #72]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	4a11      	ldr	r2, [pc, #68]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf56:	4b0f      	ldr	r3, [pc, #60]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a0e      	ldr	r2, [pc, #56]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf62:	f7f6 fc3f 	bl	80027e4 <HAL_GetTick>
 800bf66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf68:	e008      	b.n	800bf7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf6a:	f7f6 fc3b 	bl	80027e4 <HAL_GetTick>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d901      	bls.n	800bf7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e006      	b.n	800bf8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf7c:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <RCCEx_PLL3_Config+0x15c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0f0      	beq.n	800bf6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	58024400 	.word	0x58024400
 800bf98:	ffff0007 	.word	0xffff0007

0800bf9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d101      	bne.n	800bfae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e10f      	b.n	800c1ce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a87      	ldr	r2, [pc, #540]	; (800c1d8 <HAL_SPI_Init+0x23c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00f      	beq.n	800bfde <HAL_SPI_Init+0x42>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a86      	ldr	r2, [pc, #536]	; (800c1dc <HAL_SPI_Init+0x240>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d00a      	beq.n	800bfde <HAL_SPI_Init+0x42>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a84      	ldr	r2, [pc, #528]	; (800c1e0 <HAL_SPI_Init+0x244>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d005      	beq.n	800bfde <HAL_SPI_Init+0x42>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	2b0f      	cmp	r3, #15
 800bfd8:	d901      	bls.n	800bfde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e0f7      	b.n	800c1ce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fc12 	bl	800c808 <SPI_GetPacketSize>
 800bfe4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a7b      	ldr	r2, [pc, #492]	; (800c1d8 <HAL_SPI_Init+0x23c>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d00c      	beq.n	800c00a <HAL_SPI_Init+0x6e>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a79      	ldr	r2, [pc, #484]	; (800c1dc <HAL_SPI_Init+0x240>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <HAL_SPI_Init+0x6e>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a78      	ldr	r2, [pc, #480]	; (800c1e0 <HAL_SPI_Init+0x244>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d002      	beq.n	800c00a <HAL_SPI_Init+0x6e>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b08      	cmp	r3, #8
 800c008:	d811      	bhi.n	800c02e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c00e:	4a72      	ldr	r2, [pc, #456]	; (800c1d8 <HAL_SPI_Init+0x23c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d009      	beq.n	800c028 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a70      	ldr	r2, [pc, #448]	; (800c1dc <HAL_SPI_Init+0x240>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d004      	beq.n	800c028 <HAL_SPI_Init+0x8c>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a6f      	ldr	r2, [pc, #444]	; (800c1e0 <HAL_SPI_Init+0x244>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d104      	bne.n	800c032 <HAL_SPI_Init+0x96>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b10      	cmp	r3, #16
 800c02c:	d901      	bls.n	800c032 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	e0cd      	b.n	800c1ce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7f5 ffe8 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2202      	movs	r2, #2
 800c050:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0201 	bic.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c06e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c078:	d119      	bne.n	800c0ae <HAL_SPI_Init+0x112>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c082:	d103      	bne.n	800c08c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d008      	beq.n	800c09e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10c      	bne.n	800c0ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c09c:	d107      	bne.n	800c0ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c0ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00f      	beq.n	800c0da <HAL_SPI_Init+0x13e>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	2b06      	cmp	r3, #6
 800c0c0:	d90b      	bls.n	800c0da <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	e007      	b.n	800c0ea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	69da      	ldr	r2, [r3, #28]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	ea42 0103 	orr.w	r1, r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68da      	ldr	r2, [r3, #12]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	431a      	orrs	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11a:	431a      	orrs	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	431a      	orrs	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	431a      	orrs	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	431a      	orrs	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	431a      	orrs	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c13e:	431a      	orrs	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	431a      	orrs	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c14a:	ea42 0103 	orr.w	r1, r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	430a      	orrs	r2, r1
 800c158:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d113      	bne.n	800c18a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c174:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c188:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 0201 	bic.w	r2, r2, #1
 800c198:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00a      	beq.n	800c1bc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	430a      	orrs	r2, r1
 800c1ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	40013000 	.word	0x40013000
 800c1dc:	40003800 	.word	0x40003800
 800c1e0:	40003c00 	.word	0x40003c00

0800c1e4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	603b      	str	r3, [r7, #0]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f8:	095b      	lsrs	r3, r3, #5
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3330      	adds	r3, #48	; 0x30
 800c206:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c208:	f7f6 faec 	bl	80027e4 <HAL_GetTick>
 800c20c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b01      	cmp	r3, #1
 800c218:	d001      	beq.n	800c21e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c21a:	2302      	movs	r3, #2
 800c21c:	e250      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <HAL_SPI_Receive+0x46>
 800c224:	88fb      	ldrh	r3, [r7, #6]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e248      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c234:	2b01      	cmp	r3, #1
 800c236:	d101      	bne.n	800c23c <HAL_SPI_Receive+0x58>
 800c238:	2302      	movs	r3, #2
 800c23a:	e241      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2204      	movs	r2, #4
 800c248:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	88fa      	ldrh	r2, [r7, #6]
 800c25e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	88fa      	ldrh	r2, [r7, #6]
 800c266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c294:	d108      	bne.n	800c2a8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	e009      	b.n	800c2bc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c2ba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	4b95      	ldr	r3, [pc, #596]	; (800c518 <HAL_SPI_Receive+0x334>)
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	88f9      	ldrh	r1, [r7, #6]
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	6812      	ldr	r2, [r2, #0]
 800c2cc:	430b      	orrs	r3, r1
 800c2ce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f042 0201 	orr.w	r2, r2, #1
 800c2de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2e8:	d107      	bne.n	800c2fa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	2b0f      	cmp	r3, #15
 800c300:	d96c      	bls.n	800c3dc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c302:	e064      	b.n	800c3ce <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	f003 0301 	and.w	r3, r3, #1
 800c316:	2b01      	cmp	r3, #1
 800c318:	d114      	bne.n	800c344 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c324:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c32a:	1d1a      	adds	r2, r3, #4
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c336:	b29b      	uxth	r3, r3
 800c338:	3b01      	subs	r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c342:	e044      	b.n	800c3ce <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	8bfa      	ldrh	r2, [r7, #30]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d919      	bls.n	800c386 <HAL_SPI_Receive+0x1a2>
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d014      	beq.n	800c386 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c364:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c366:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c36c:	1d1a      	adds	r2, r3, #4
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c378:	b29b      	uxth	r3, r3
 800c37a:	3b01      	subs	r3, #1
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c384:	e023      	b.n	800c3ce <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c386:	f7f6 fa2d 	bl	80027e4 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d803      	bhi.n	800c39e <HAL_SPI_Receive+0x1ba>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c39c:	d102      	bne.n	800c3a4 <HAL_SPI_Receive+0x1c0>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d114      	bne.n	800c3ce <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 f98f 	bl	800c6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e178      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d194      	bne.n	800c304 <HAL_SPI_Receive+0x120>
 800c3da:	e15e      	b.n	800c69a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	2b07      	cmp	r3, #7
 800c3e2:	f240 8153 	bls.w	800c68c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c3e6:	e08f      	b.n	800c508 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d114      	bne.n	800c428 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	8812      	ldrh	r2, [r2, #0]
 800c406:	b292      	uxth	r2, r2
 800c408:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c40e:	1c9a      	adds	r2, r3, #2
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	3b01      	subs	r3, #1
 800c41e:	b29a      	uxth	r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c426:	e06f      	b.n	800c508 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c42e:	b29b      	uxth	r3, r3
 800c430:	8bfa      	ldrh	r2, [r7, #30]
 800c432:	429a      	cmp	r2, r3
 800c434:	d924      	bls.n	800c480 <HAL_SPI_Receive+0x29c>
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01f      	beq.n	800c480 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c444:	69ba      	ldr	r2, [r7, #24]
 800c446:	8812      	ldrh	r2, [r2, #0]
 800c448:	b292      	uxth	r2, r2
 800c44a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c450:	1c9a      	adds	r2, r3, #2
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c45a:	69ba      	ldr	r2, [r7, #24]
 800c45c:	8812      	ldrh	r2, [r2, #0]
 800c45e:	b292      	uxth	r2, r2
 800c460:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c466:	1c9a      	adds	r2, r3, #2
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c472:	b29b      	uxth	r3, r3
 800c474:	3b02      	subs	r3, #2
 800c476:	b29a      	uxth	r2, r3
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c47e:	e043      	b.n	800c508 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c486:	b29b      	uxth	r3, r3
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d119      	bne.n	800c4c0 <HAL_SPI_Receive+0x2dc>
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c492:	2b00      	cmp	r3, #0
 800c494:	d014      	beq.n	800c4c0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c49a:	69ba      	ldr	r2, [r7, #24]
 800c49c:	8812      	ldrh	r2, [r2, #0]
 800c49e:	b292      	uxth	r2, r2
 800c4a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4a6:	1c9a      	adds	r2, r3, #2
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c4be:	e023      	b.n	800c508 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4c0:	f7f6 f990 	bl	80027e4 <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d803      	bhi.n	800c4d8 <HAL_SPI_Receive+0x2f4>
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4d6:	d102      	bne.n	800c4de <HAL_SPI_Receive+0x2fa>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d114      	bne.n	800c508 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f000 f8f2 	bl	800c6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e0db      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c50e:	b29b      	uxth	r3, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	f47f af69 	bne.w	800c3e8 <HAL_SPI_Receive+0x204>
 800c516:	e0c0      	b.n	800c69a <HAL_SPI_Receive+0x4b6>
 800c518:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d117      	bne.n	800c562 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c53e:	7812      	ldrb	r2, [r2, #0]
 800c540:	b2d2      	uxtb	r2, r2
 800c542:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c554:	b29b      	uxth	r3, r3
 800c556:	3b01      	subs	r3, #1
 800c558:	b29a      	uxth	r2, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c560:	e094      	b.n	800c68c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c568:	b29b      	uxth	r3, r3
 800c56a:	8bfa      	ldrh	r2, [r7, #30]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d946      	bls.n	800c5fe <HAL_SPI_Receive+0x41a>
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d041      	beq.n	800c5fe <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c586:	7812      	ldrb	r2, [r2, #0]
 800c588:	b2d2      	uxtb	r2, r2
 800c58a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5a2:	7812      	ldrb	r2, [r2, #0]
 800c5a4:	b2d2      	uxtb	r2, r2
 800c5a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5be:	7812      	ldrb	r2, [r2, #0]
 800c5c0:	b2d2      	uxtb	r2, r2
 800c5c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5da:	7812      	ldrb	r2, [r2, #0]
 800c5dc:	b2d2      	uxtb	r2, r2
 800c5de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	3b04      	subs	r3, #4
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5fc:	e046      	b.n	800c68c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c604:	b29b      	uxth	r3, r3
 800c606:	2b03      	cmp	r3, #3
 800c608:	d81c      	bhi.n	800c644 <HAL_SPI_Receive+0x460>
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d017      	beq.n	800c644 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c620:	7812      	ldrb	r2, [r2, #0]
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c636:	b29b      	uxth	r3, r3
 800c638:	3b01      	subs	r3, #1
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c642:	e023      	b.n	800c68c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c644:	f7f6 f8ce 	bl	80027e4 <HAL_GetTick>
 800c648:	4602      	mov	r2, r0
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	429a      	cmp	r2, r3
 800c652:	d803      	bhi.n	800c65c <HAL_SPI_Receive+0x478>
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c65a:	d102      	bne.n	800c662 <HAL_SPI_Receive+0x47e>
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d114      	bne.n	800c68c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 f830 	bl	800c6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c66e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	e019      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c692:	b29b      	uxth	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	f47f af41 	bne.w	800c51c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 f814 	bl	800c6c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e000      	b.n	800c6c0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c6be:	2300      	movs	r3, #0
  }
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	699a      	ldr	r2, [r3, #24]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f042 0208 	orr.w	r2, r2, #8
 800c6e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	699a      	ldr	r2, [r3, #24]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f042 0210 	orr.w	r2, r2, #16
 800c6f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f022 0201 	bic.w	r2, r2, #1
 800c706:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6919      	ldr	r1, [r3, #16]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	4b3c      	ldr	r3, [pc, #240]	; (800c804 <SPI_CloseTransfer+0x13c>)
 800c714:	400b      	ands	r3, r1
 800c716:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	689a      	ldr	r2, [r3, #8]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c726:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b04      	cmp	r3, #4
 800c732:	d014      	beq.n	800c75e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f003 0320 	and.w	r3, r3, #32
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00f      	beq.n	800c75e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c744:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	699a      	ldr	r2, [r3, #24]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f042 0220 	orr.w	r2, r2, #32
 800c75c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b03      	cmp	r3, #3
 800c768:	d014      	beq.n	800c794 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00f      	beq.n	800c794 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c77a:	f043 0204 	orr.w	r2, r3, #4
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	699a      	ldr	r2, [r3, #24]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c792:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00f      	beq.n	800c7be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7a4:	f043 0201 	orr.w	r2, r3, #1
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	699a      	ldr	r2, [r3, #24]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00f      	beq.n	800c7e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ce:	f043 0208 	orr.w	r2, r3, #8
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	699a      	ldr	r2, [r3, #24]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c7f8:	bf00      	nop
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	fffffc90 	.word	0xfffffc90

0800c808 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c814:	095b      	lsrs	r3, r3, #5
 800c816:	3301      	adds	r3, #1
 800c818:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	3301      	adds	r3, #1
 800c820:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	3307      	adds	r3, #7
 800c826:	08db      	lsrs	r3, r3, #3
 800c828:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c832:	4618      	mov	r0, r3
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e049      	b.n	800c8e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d106      	bne.n	800c86a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7f5 fccf 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2202      	movs	r2, #2
 800c86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3304      	adds	r3, #4
 800c87a:	4619      	mov	r1, r3
 800c87c:	4610      	mov	r0, r2
 800c87e:	f000 ffad 	bl	800d7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d001      	beq.n	800c904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e04c      	b.n	800c99e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a26      	ldr	r2, [pc, #152]	; (800c9ac <HAL_TIM_Base_Start+0xc0>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d022      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c91e:	d01d      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a22      	ldr	r2, [pc, #136]	; (800c9b0 <HAL_TIM_Base_Start+0xc4>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d018      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a21      	ldr	r2, [pc, #132]	; (800c9b4 <HAL_TIM_Base_Start+0xc8>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d013      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a1f      	ldr	r2, [pc, #124]	; (800c9b8 <HAL_TIM_Base_Start+0xcc>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d00e      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a1e      	ldr	r2, [pc, #120]	; (800c9bc <HAL_TIM_Base_Start+0xd0>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d009      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a1c      	ldr	r2, [pc, #112]	; (800c9c0 <HAL_TIM_Base_Start+0xd4>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d004      	beq.n	800c95c <HAL_TIM_Base_Start+0x70>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a1b      	ldr	r2, [pc, #108]	; (800c9c4 <HAL_TIM_Base_Start+0xd8>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d115      	bne.n	800c988 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	689a      	ldr	r2, [r3, #8]
 800c962:	4b19      	ldr	r3, [pc, #100]	; (800c9c8 <HAL_TIM_Base_Start+0xdc>)
 800c964:	4013      	ands	r3, r2
 800c966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b06      	cmp	r3, #6
 800c96c:	d015      	beq.n	800c99a <HAL_TIM_Base_Start+0xae>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c974:	d011      	beq.n	800c99a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f042 0201 	orr.w	r2, r2, #1
 800c984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c986:	e008      	b.n	800c99a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f042 0201 	orr.w	r2, r2, #1
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	e000      	b.n	800c99c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c99a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	40010000 	.word	0x40010000
 800c9b0:	40000400 	.word	0x40000400
 800c9b4:	40000800 	.word	0x40000800
 800c9b8:	40000c00 	.word	0x40000c00
 800c9bc:	40010400 	.word	0x40010400
 800c9c0:	40001800 	.word	0x40001800
 800c9c4:	40014000 	.word	0x40014000
 800c9c8:	00010007 	.word	0x00010007

0800c9cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	6a1a      	ldr	r2, [r3, #32]
 800c9da:	f241 1311 	movw	r3, #4369	; 0x1111
 800c9de:	4013      	ands	r3, r2
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10f      	bne.n	800ca04 <HAL_TIM_Base_Stop+0x38>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6a1a      	ldr	r2, [r3, #32]
 800c9ea:	f240 4344 	movw	r3, #1092	; 0x444
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d107      	bne.n	800ca04 <HAL_TIM_Base_Stop+0x38>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f022 0201 	bic.w	r2, r2, #1
 800ca02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
	...

0800ca1c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d109      	bne.n	800ca44 <HAL_TIM_OC_Start_IT+0x28>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	bf14      	ite	ne
 800ca3c:	2301      	movne	r3, #1
 800ca3e:	2300      	moveq	r3, #0
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	e03c      	b.n	800cabe <HAL_TIM_OC_Start_IT+0xa2>
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	d109      	bne.n	800ca5e <HAL_TIM_OC_Start_IT+0x42>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	bf14      	ite	ne
 800ca56:	2301      	movne	r3, #1
 800ca58:	2300      	moveq	r3, #0
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	e02f      	b.n	800cabe <HAL_TIM_OC_Start_IT+0xa2>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b08      	cmp	r3, #8
 800ca62:	d109      	bne.n	800ca78 <HAL_TIM_OC_Start_IT+0x5c>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	bf14      	ite	ne
 800ca70:	2301      	movne	r3, #1
 800ca72:	2300      	moveq	r3, #0
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	e022      	b.n	800cabe <HAL_TIM_OC_Start_IT+0xa2>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b0c      	cmp	r3, #12
 800ca7c:	d109      	bne.n	800ca92 <HAL_TIM_OC_Start_IT+0x76>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	bf14      	ite	ne
 800ca8a:	2301      	movne	r3, #1
 800ca8c:	2300      	moveq	r3, #0
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	e015      	b.n	800cabe <HAL_TIM_OC_Start_IT+0xa2>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b10      	cmp	r3, #16
 800ca96:	d109      	bne.n	800caac <HAL_TIM_OC_Start_IT+0x90>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	bf14      	ite	ne
 800caa4:	2301      	movne	r3, #1
 800caa6:	2300      	moveq	r3, #0
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	e008      	b.n	800cabe <HAL_TIM_OC_Start_IT+0xa2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	bf14      	ite	ne
 800cab8:	2301      	movne	r3, #1
 800caba:	2300      	moveq	r3, #0
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e0ec      	b.n	800cca0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <HAL_TIM_OC_Start_IT+0xba>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2202      	movs	r2, #2
 800cad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cad4:	e023      	b.n	800cb1e <HAL_TIM_OC_Start_IT+0x102>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b04      	cmp	r3, #4
 800cada:	d104      	bne.n	800cae6 <HAL_TIM_OC_Start_IT+0xca>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cae4:	e01b      	b.n	800cb1e <HAL_TIM_OC_Start_IT+0x102>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b08      	cmp	r3, #8
 800caea:	d104      	bne.n	800caf6 <HAL_TIM_OC_Start_IT+0xda>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2202      	movs	r2, #2
 800caf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800caf4:	e013      	b.n	800cb1e <HAL_TIM_OC_Start_IT+0x102>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b0c      	cmp	r3, #12
 800cafa:	d104      	bne.n	800cb06 <HAL_TIM_OC_Start_IT+0xea>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb04:	e00b      	b.n	800cb1e <HAL_TIM_OC_Start_IT+0x102>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b10      	cmp	r3, #16
 800cb0a:	d104      	bne.n	800cb16 <HAL_TIM_OC_Start_IT+0xfa>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb14:	e003      	b.n	800cb1e <HAL_TIM_OC_Start_IT+0x102>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b0c      	cmp	r3, #12
 800cb22:	d841      	bhi.n	800cba8 <HAL_TIM_OC_Start_IT+0x18c>
 800cb24:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <HAL_TIM_OC_Start_IT+0x110>)
 800cb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cb61 	.word	0x0800cb61
 800cb30:	0800cba9 	.word	0x0800cba9
 800cb34:	0800cba9 	.word	0x0800cba9
 800cb38:	0800cba9 	.word	0x0800cba9
 800cb3c:	0800cb73 	.word	0x0800cb73
 800cb40:	0800cba9 	.word	0x0800cba9
 800cb44:	0800cba9 	.word	0x0800cba9
 800cb48:	0800cba9 	.word	0x0800cba9
 800cb4c:	0800cb85 	.word	0x0800cb85
 800cb50:	0800cba9 	.word	0x0800cba9
 800cb54:	0800cba9 	.word	0x0800cba9
 800cb58:	0800cba9 	.word	0x0800cba9
 800cb5c:	0800cb97 	.word	0x0800cb97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68da      	ldr	r2, [r3, #12]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f042 0202 	orr.w	r2, r2, #2
 800cb6e:	60da      	str	r2, [r3, #12]
      break;
 800cb70:	e01d      	b.n	800cbae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f042 0204 	orr.w	r2, r2, #4
 800cb80:	60da      	str	r2, [r3, #12]
      break;
 800cb82:	e014      	b.n	800cbae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0208 	orr.w	r2, r2, #8
 800cb92:	60da      	str	r2, [r3, #12]
      break;
 800cb94:	e00b      	b.n	800cbae <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68da      	ldr	r2, [r3, #12]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f042 0210 	orr.w	r2, r2, #16
 800cba4:	60da      	str	r2, [r3, #12]
      break;
 800cba6:	e002      	b.n	800cbae <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	73fb      	strb	r3, [r7, #15]
      break;
 800cbac:	bf00      	nop
  }

  if (status == HAL_OK)
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d174      	bne.n	800cc9e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f001 fa27 	bl	800e010 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a38      	ldr	r2, [pc, #224]	; (800cca8 <HAL_TIM_OC_Start_IT+0x28c>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d013      	beq.n	800cbf4 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a36      	ldr	r2, [pc, #216]	; (800ccac <HAL_TIM_OC_Start_IT+0x290>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d00e      	beq.n	800cbf4 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a35      	ldr	r2, [pc, #212]	; (800ccb0 <HAL_TIM_OC_Start_IT+0x294>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d009      	beq.n	800cbf4 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a33      	ldr	r2, [pc, #204]	; (800ccb4 <HAL_TIM_OC_Start_IT+0x298>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d004      	beq.n	800cbf4 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a32      	ldr	r2, [pc, #200]	; (800ccb8 <HAL_TIM_OC_Start_IT+0x29c>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d101      	bne.n	800cbf8 <HAL_TIM_OC_Start_IT+0x1dc>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e000      	b.n	800cbfa <HAL_TIM_OC_Start_IT+0x1de>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d007      	beq.n	800cc0e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a25      	ldr	r2, [pc, #148]	; (800cca8 <HAL_TIM_OC_Start_IT+0x28c>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d022      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc20:	d01d      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a25      	ldr	r2, [pc, #148]	; (800ccbc <HAL_TIM_OC_Start_IT+0x2a0>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d018      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a23      	ldr	r2, [pc, #140]	; (800ccc0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d013      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a22      	ldr	r2, [pc, #136]	; (800ccc4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d00e      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a19      	ldr	r2, [pc, #100]	; (800ccac <HAL_TIM_OC_Start_IT+0x290>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d009      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a1e      	ldr	r2, [pc, #120]	; (800ccc8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d004      	beq.n	800cc5e <HAL_TIM_OC_Start_IT+0x242>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <HAL_TIM_OC_Start_IT+0x294>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d115      	bne.n	800cc8a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	4b19      	ldr	r3, [pc, #100]	; (800cccc <HAL_TIM_OC_Start_IT+0x2b0>)
 800cc66:	4013      	ands	r3, r2
 800cc68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2b06      	cmp	r3, #6
 800cc6e:	d015      	beq.n	800cc9c <HAL_TIM_OC_Start_IT+0x280>
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc76:	d011      	beq.n	800cc9c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f042 0201 	orr.w	r2, r2, #1
 800cc86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc88:	e008      	b.n	800cc9c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f042 0201 	orr.w	r2, r2, #1
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	e000      	b.n	800cc9e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	40010000 	.word	0x40010000
 800ccac:	40010400 	.word	0x40010400
 800ccb0:	40014000 	.word	0x40014000
 800ccb4:	40014400 	.word	0x40014400
 800ccb8:	40014800 	.word	0x40014800
 800ccbc:	40000400 	.word	0x40000400
 800ccc0:	40000800 	.word	0x40000800
 800ccc4:	40000c00 	.word	0x40000c00
 800ccc8:	40001800 	.word	0x40001800
 800cccc:	00010007 	.word	0x00010007

0800ccd0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	2b0c      	cmp	r3, #12
 800cce2:	d841      	bhi.n	800cd68 <HAL_TIM_OC_Stop_IT+0x98>
 800cce4:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <HAL_TIM_OC_Stop_IT+0x1c>)
 800cce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccea:	bf00      	nop
 800ccec:	0800cd21 	.word	0x0800cd21
 800ccf0:	0800cd69 	.word	0x0800cd69
 800ccf4:	0800cd69 	.word	0x0800cd69
 800ccf8:	0800cd69 	.word	0x0800cd69
 800ccfc:	0800cd33 	.word	0x0800cd33
 800cd00:	0800cd69 	.word	0x0800cd69
 800cd04:	0800cd69 	.word	0x0800cd69
 800cd08:	0800cd69 	.word	0x0800cd69
 800cd0c:	0800cd45 	.word	0x0800cd45
 800cd10:	0800cd69 	.word	0x0800cd69
 800cd14:	0800cd69 	.word	0x0800cd69
 800cd18:	0800cd69 	.word	0x0800cd69
 800cd1c:	0800cd57 	.word	0x0800cd57
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f022 0202 	bic.w	r2, r2, #2
 800cd2e:	60da      	str	r2, [r3, #12]
      break;
 800cd30:	e01d      	b.n	800cd6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0204 	bic.w	r2, r2, #4
 800cd40:	60da      	str	r2, [r3, #12]
      break;
 800cd42:	e014      	b.n	800cd6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68da      	ldr	r2, [r3, #12]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f022 0208 	bic.w	r2, r2, #8
 800cd52:	60da      	str	r2, [r3, #12]
      break;
 800cd54:	e00b      	b.n	800cd6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68da      	ldr	r2, [r3, #12]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f022 0210 	bic.w	r2, r2, #16
 800cd64:	60da      	str	r2, [r3, #12]
      break;
 800cd66:	e002      	b.n	800cd6e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd6c:	bf00      	nop
  }

  if (status == HAL_OK)
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f040 8081 	bne.w	800ce78 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f001 f946 	bl	800e010 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a3e      	ldr	r2, [pc, #248]	; (800ce84 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d013      	beq.n	800cdb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a3d      	ldr	r2, [pc, #244]	; (800ce88 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d00e      	beq.n	800cdb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a3b      	ldr	r2, [pc, #236]	; (800ce8c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d009      	beq.n	800cdb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a3a      	ldr	r2, [pc, #232]	; (800ce90 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d004      	beq.n	800cdb6 <HAL_TIM_OC_Stop_IT+0xe6>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a38      	ldr	r2, [pc, #224]	; (800ce94 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d101      	bne.n	800cdba <HAL_TIM_OC_Stop_IT+0xea>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <HAL_TIM_OC_Stop_IT+0xec>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d017      	beq.n	800cdf0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6a1a      	ldr	r2, [r3, #32]
 800cdc6:	f241 1311 	movw	r3, #4369	; 0x1111
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10f      	bne.n	800cdf0 <HAL_TIM_OC_Stop_IT+0x120>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6a1a      	ldr	r2, [r3, #32]
 800cdd6:	f240 4344 	movw	r3, #1092	; 0x444
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d107      	bne.n	800cdf0 <HAL_TIM_OC_Stop_IT+0x120>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cdee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6a1a      	ldr	r2, [r3, #32]
 800cdf6:	f241 1311 	movw	r3, #4369	; 0x1111
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10f      	bne.n	800ce20 <HAL_TIM_OC_Stop_IT+0x150>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	6a1a      	ldr	r2, [r3, #32]
 800ce06:	f240 4344 	movw	r3, #1092	; 0x444
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d107      	bne.n	800ce20 <HAL_TIM_OC_Stop_IT+0x150>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 0201 	bic.w	r2, r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d104      	bne.n	800ce30 <HAL_TIM_OC_Stop_IT+0x160>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce2e:	e023      	b.n	800ce78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	d104      	bne.n	800ce40 <HAL_TIM_OC_Stop_IT+0x170>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce3e:	e01b      	b.n	800ce78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b08      	cmp	r3, #8
 800ce44:	d104      	bne.n	800ce50 <HAL_TIM_OC_Stop_IT+0x180>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce4e:	e013      	b.n	800ce78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b0c      	cmp	r3, #12
 800ce54:	d104      	bne.n	800ce60 <HAL_TIM_OC_Stop_IT+0x190>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce5e:	e00b      	b.n	800ce78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2b10      	cmp	r3, #16
 800ce64:	d104      	bne.n	800ce70 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce6e:	e003      	b.n	800ce78 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	40010000 	.word	0x40010000
 800ce88:	40010400 	.word	0x40010400
 800ce8c:	40014000 	.word	0x40014000
 800ce90:	40014400 	.word	0x40014400
 800ce94:	40014800 	.word	0x40014800

0800ce98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e049      	b.n	800cf3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7f5 f962 	bl	8002188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2202      	movs	r2, #2
 800cec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3304      	adds	r3, #4
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f000 fc80 	bl	800d7dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2201      	movs	r2, #1
 800cee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <HAL_TIM_PWM_Start+0x24>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	bf14      	ite	ne
 800cf64:	2301      	movne	r3, #1
 800cf66:	2300      	moveq	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	e03c      	b.n	800cfe6 <HAL_TIM_PWM_Start+0x9e>
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d109      	bne.n	800cf86 <HAL_TIM_PWM_Start+0x3e>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	bf14      	ite	ne
 800cf7e:	2301      	movne	r3, #1
 800cf80:	2300      	moveq	r3, #0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	e02f      	b.n	800cfe6 <HAL_TIM_PWM_Start+0x9e>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b08      	cmp	r3, #8
 800cf8a:	d109      	bne.n	800cfa0 <HAL_TIM_PWM_Start+0x58>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	bf14      	ite	ne
 800cf98:	2301      	movne	r3, #1
 800cf9a:	2300      	moveq	r3, #0
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	e022      	b.n	800cfe6 <HAL_TIM_PWM_Start+0x9e>
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2b0c      	cmp	r3, #12
 800cfa4:	d109      	bne.n	800cfba <HAL_TIM_PWM_Start+0x72>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	bf14      	ite	ne
 800cfb2:	2301      	movne	r3, #1
 800cfb4:	2300      	moveq	r3, #0
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	e015      	b.n	800cfe6 <HAL_TIM_PWM_Start+0x9e>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b10      	cmp	r3, #16
 800cfbe:	d109      	bne.n	800cfd4 <HAL_TIM_PWM_Start+0x8c>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	bf14      	ite	ne
 800cfcc:	2301      	movne	r3, #1
 800cfce:	2300      	moveq	r3, #0
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	e008      	b.n	800cfe6 <HAL_TIM_PWM_Start+0x9e>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	bf14      	ite	ne
 800cfe0:	2301      	movne	r3, #1
 800cfe2:	2300      	moveq	r3, #0
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e0a1      	b.n	800d132 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d104      	bne.n	800cffe <HAL_TIM_PWM_Start+0xb6>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2202      	movs	r2, #2
 800cff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cffc:	e023      	b.n	800d046 <HAL_TIM_PWM_Start+0xfe>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b04      	cmp	r3, #4
 800d002:	d104      	bne.n	800d00e <HAL_TIM_PWM_Start+0xc6>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d00c:	e01b      	b.n	800d046 <HAL_TIM_PWM_Start+0xfe>
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b08      	cmp	r3, #8
 800d012:	d104      	bne.n	800d01e <HAL_TIM_PWM_Start+0xd6>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2202      	movs	r2, #2
 800d018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d01c:	e013      	b.n	800d046 <HAL_TIM_PWM_Start+0xfe>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b0c      	cmp	r3, #12
 800d022:	d104      	bne.n	800d02e <HAL_TIM_PWM_Start+0xe6>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2202      	movs	r2, #2
 800d028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d02c:	e00b      	b.n	800d046 <HAL_TIM_PWM_Start+0xfe>
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b10      	cmp	r3, #16
 800d032:	d104      	bne.n	800d03e <HAL_TIM_PWM_Start+0xf6>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2202      	movs	r2, #2
 800d038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d03c:	e003      	b.n	800d046 <HAL_TIM_PWM_Start+0xfe>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2202      	movs	r2, #2
 800d042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2201      	movs	r2, #1
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 ffde 	bl	800e010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a38      	ldr	r2, [pc, #224]	; (800d13c <HAL_TIM_PWM_Start+0x1f4>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d013      	beq.n	800d086 <HAL_TIM_PWM_Start+0x13e>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a37      	ldr	r2, [pc, #220]	; (800d140 <HAL_TIM_PWM_Start+0x1f8>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d00e      	beq.n	800d086 <HAL_TIM_PWM_Start+0x13e>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a35      	ldr	r2, [pc, #212]	; (800d144 <HAL_TIM_PWM_Start+0x1fc>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d009      	beq.n	800d086 <HAL_TIM_PWM_Start+0x13e>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a34      	ldr	r2, [pc, #208]	; (800d148 <HAL_TIM_PWM_Start+0x200>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d004      	beq.n	800d086 <HAL_TIM_PWM_Start+0x13e>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a32      	ldr	r2, [pc, #200]	; (800d14c <HAL_TIM_PWM_Start+0x204>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d101      	bne.n	800d08a <HAL_TIM_PWM_Start+0x142>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <HAL_TIM_PWM_Start+0x144>
 800d08a:	2300      	movs	r3, #0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d09e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a25      	ldr	r2, [pc, #148]	; (800d13c <HAL_TIM_PWM_Start+0x1f4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d022      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0b2:	d01d      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a25      	ldr	r2, [pc, #148]	; (800d150 <HAL_TIM_PWM_Start+0x208>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d018      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a24      	ldr	r2, [pc, #144]	; (800d154 <HAL_TIM_PWM_Start+0x20c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d013      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a22      	ldr	r2, [pc, #136]	; (800d158 <HAL_TIM_PWM_Start+0x210>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d00e      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a1a      	ldr	r2, [pc, #104]	; (800d140 <HAL_TIM_PWM_Start+0x1f8>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d009      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a1e      	ldr	r2, [pc, #120]	; (800d15c <HAL_TIM_PWM_Start+0x214>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d004      	beq.n	800d0f0 <HAL_TIM_PWM_Start+0x1a8>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a16      	ldr	r2, [pc, #88]	; (800d144 <HAL_TIM_PWM_Start+0x1fc>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d115      	bne.n	800d11c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	689a      	ldr	r2, [r3, #8]
 800d0f6:	4b1a      	ldr	r3, [pc, #104]	; (800d160 <HAL_TIM_PWM_Start+0x218>)
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b06      	cmp	r3, #6
 800d100:	d015      	beq.n	800d12e <HAL_TIM_PWM_Start+0x1e6>
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d108:	d011      	beq.n	800d12e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f042 0201 	orr.w	r2, r2, #1
 800d118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d11a:	e008      	b.n	800d12e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f042 0201 	orr.w	r2, r2, #1
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	e000      	b.n	800d130 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d12e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	40010000 	.word	0x40010000
 800d140:	40010400 	.word	0x40010400
 800d144:	40014000 	.word	0x40014000
 800d148:	40014400 	.word	0x40014400
 800d14c:	40014800 	.word	0x40014800
 800d150:	40000400 	.word	0x40000400
 800d154:	40000800 	.word	0x40000800
 800d158:	40000c00 	.word	0x40000c00
 800d15c:	40001800 	.word	0x40001800
 800d160:	00010007 	.word	0x00010007

0800d164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	f003 0302 	and.w	r3, r3, #2
 800d182:	2b00      	cmp	r3, #0
 800d184:	d020      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f003 0302 	and.w	r3, r3, #2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01b      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f06f 0202 	mvn.w	r2, #2
 800d198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	f003 0303 	and.w	r3, r3, #3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 faf6 	bl	800d7a0 <HAL_TIM_IC_CaptureCallback>
 800d1b4:	e005      	b.n	800d1c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7f3 fcec 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 faf9 	bl	800d7b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f003 0304 	and.w	r3, r3, #4
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d020      	beq.n	800d214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f003 0304 	and.w	r3, r3, #4
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d01b      	beq.n	800d214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f06f 0204 	mvn.w	r2, #4
 800d1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fad0 	bl	800d7a0 <HAL_TIM_IC_CaptureCallback>
 800d200:	e005      	b.n	800d20e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7f3 fcc6 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fad3 	bl	800d7b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f003 0308 	and.w	r3, r3, #8
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d020      	beq.n	800d260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f003 0308 	and.w	r3, r3, #8
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01b      	beq.n	800d260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f06f 0208 	mvn.w	r2, #8
 800d230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2204      	movs	r2, #4
 800d236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	69db      	ldr	r3, [r3, #28]
 800d23e:	f003 0303 	and.w	r3, r3, #3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 faaa 	bl	800d7a0 <HAL_TIM_IC_CaptureCallback>
 800d24c:	e005      	b.n	800d25a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7f3 fca0 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 faad 	bl	800d7b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f003 0310 	and.w	r3, r3, #16
 800d266:	2b00      	cmp	r3, #0
 800d268:	d020      	beq.n	800d2ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b00      	cmp	r3, #0
 800d272:	d01b      	beq.n	800d2ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f06f 0210 	mvn.w	r2, #16
 800d27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2208      	movs	r2, #8
 800d282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa84 	bl	800d7a0 <HAL_TIM_IC_CaptureCallback>
 800d298:	e005      	b.n	800d2a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7f3 fc7a 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fa87 	bl	800d7b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00c      	beq.n	800d2d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f003 0301 	and.w	r3, r3, #1
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d007      	beq.n	800d2d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f06f 0201 	mvn.w	r2, #1
 800d2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fa5e 	bl	800d78c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d104      	bne.n	800d2e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00c      	beq.n	800d2fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d007      	beq.n	800d2fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 ffc5 	bl	800e288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00c      	beq.n	800d322 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d007      	beq.n	800d322 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 ffbd 	bl	800e29c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00c      	beq.n	800d346 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d332:	2b00      	cmp	r3, #0
 800d334:	d007      	beq.n	800d346 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fa41 	bl	800d7c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f003 0320 	and.w	r3, r3, #32
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00c      	beq.n	800d36a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b00      	cmp	r3, #0
 800d358:	d007      	beq.n	800d36a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f06f 0220 	mvn.w	r2, #32
 800d362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 ff85 	bl	800e274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d36a:	bf00      	nop
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d101      	bne.n	800d392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d38e:	2302      	movs	r3, #2
 800d390:	e0ff      	b.n	800d592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b14      	cmp	r3, #20
 800d39e:	f200 80f0 	bhi.w	800d582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3a2:	a201      	add	r2, pc, #4	; (adr r2, 800d3a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a8:	0800d3fd 	.word	0x0800d3fd
 800d3ac:	0800d583 	.word	0x0800d583
 800d3b0:	0800d583 	.word	0x0800d583
 800d3b4:	0800d583 	.word	0x0800d583
 800d3b8:	0800d43d 	.word	0x0800d43d
 800d3bc:	0800d583 	.word	0x0800d583
 800d3c0:	0800d583 	.word	0x0800d583
 800d3c4:	0800d583 	.word	0x0800d583
 800d3c8:	0800d47f 	.word	0x0800d47f
 800d3cc:	0800d583 	.word	0x0800d583
 800d3d0:	0800d583 	.word	0x0800d583
 800d3d4:	0800d583 	.word	0x0800d583
 800d3d8:	0800d4bf 	.word	0x0800d4bf
 800d3dc:	0800d583 	.word	0x0800d583
 800d3e0:	0800d583 	.word	0x0800d583
 800d3e4:	0800d583 	.word	0x0800d583
 800d3e8:	0800d501 	.word	0x0800d501
 800d3ec:	0800d583 	.word	0x0800d583
 800d3f0:	0800d583 	.word	0x0800d583
 800d3f4:	0800d583 	.word	0x0800d583
 800d3f8:	0800d541 	.word	0x0800d541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68b9      	ldr	r1, [r7, #8]
 800d402:	4618      	mov	r0, r3
 800d404:	f000 fa90 	bl	800d928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	699a      	ldr	r2, [r3, #24]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f042 0208 	orr.w	r2, r2, #8
 800d416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	699a      	ldr	r2, [r3, #24]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f022 0204 	bic.w	r2, r2, #4
 800d426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6999      	ldr	r1, [r3, #24]
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	691a      	ldr	r2, [r3, #16]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	619a      	str	r2, [r3, #24]
      break;
 800d43a:	e0a5      	b.n	800d588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68b9      	ldr	r1, [r7, #8]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 fb00 	bl	800da48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	699a      	ldr	r2, [r3, #24]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	699a      	ldr	r2, [r3, #24]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6999      	ldr	r1, [r3, #24]
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	021a      	lsls	r2, r3, #8
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	430a      	orrs	r2, r1
 800d47a:	619a      	str	r2, [r3, #24]
      break;
 800d47c:	e084      	b.n	800d588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68b9      	ldr	r1, [r7, #8]
 800d484:	4618      	mov	r0, r3
 800d486:	f000 fb69 	bl	800db5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	69da      	ldr	r2, [r3, #28]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f042 0208 	orr.w	r2, r2, #8
 800d498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69da      	ldr	r2, [r3, #28]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f022 0204 	bic.w	r2, r2, #4
 800d4a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	69d9      	ldr	r1, [r3, #28]
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	691a      	ldr	r2, [r3, #16]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	430a      	orrs	r2, r1
 800d4ba:	61da      	str	r2, [r3, #28]
      break;
 800d4bc:	e064      	b.n	800d588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68b9      	ldr	r1, [r7, #8]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fbd1 	bl	800dc6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	69da      	ldr	r2, [r3, #28]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	69da      	ldr	r2, [r3, #28]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	69d9      	ldr	r1, [r3, #28]
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	021a      	lsls	r2, r3, #8
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	430a      	orrs	r2, r1
 800d4fc:	61da      	str	r2, [r3, #28]
      break;
 800d4fe:	e043      	b.n	800d588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68b9      	ldr	r1, [r7, #8]
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fc1a 	bl	800dd40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f042 0208 	orr.w	r2, r2, #8
 800d51a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0204 	bic.w	r2, r2, #4
 800d52a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	430a      	orrs	r2, r1
 800d53c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d53e:	e023      	b.n	800d588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	68b9      	ldr	r1, [r7, #8]
 800d546:	4618      	mov	r0, r3
 800d548:	f000 fc5e 	bl	800de08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d55a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d56a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	021a      	lsls	r2, r3, #8
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d580:	e002      	b.n	800d588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	75fb      	strb	r3, [r7, #23]
      break;
 800d586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop

0800d59c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d101      	bne.n	800d5b8 <HAL_TIM_ConfigClockSource+0x1c>
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e0dc      	b.n	800d772 <HAL_TIM_ConfigClockSource+0x1d6>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	4b6a      	ldr	r3, [pc, #424]	; (800d77c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a64      	ldr	r2, [pc, #400]	; (800d780 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	f000 80a9 	beq.w	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5f4:	4a62      	ldr	r2, [pc, #392]	; (800d780 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	f200 80ae 	bhi.w	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5fc:	4a61      	ldr	r2, [pc, #388]	; (800d784 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	f000 80a1 	beq.w	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d604:	4a5f      	ldr	r2, [pc, #380]	; (800d784 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d606:	4293      	cmp	r3, r2
 800d608:	f200 80a6 	bhi.w	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d60c:	4a5e      	ldr	r2, [pc, #376]	; (800d788 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	f000 8099 	beq.w	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d614:	4a5c      	ldr	r2, [pc, #368]	; (800d788 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d616:	4293      	cmp	r3, r2
 800d618:	f200 809e 	bhi.w	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d61c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d620:	f000 8091 	beq.w	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d624:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d628:	f200 8096 	bhi.w	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d62c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d630:	f000 8089 	beq.w	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d638:	f200 808e 	bhi.w	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d63c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d640:	d03e      	beq.n	800d6c0 <HAL_TIM_ConfigClockSource+0x124>
 800d642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d646:	f200 8087 	bhi.w	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d64a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d64e:	f000 8086 	beq.w	800d75e <HAL_TIM_ConfigClockSource+0x1c2>
 800d652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d656:	d87f      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d658:	2b70      	cmp	r3, #112	; 0x70
 800d65a:	d01a      	beq.n	800d692 <HAL_TIM_ConfigClockSource+0xf6>
 800d65c:	2b70      	cmp	r3, #112	; 0x70
 800d65e:	d87b      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d660:	2b60      	cmp	r3, #96	; 0x60
 800d662:	d050      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x16a>
 800d664:	2b60      	cmp	r3, #96	; 0x60
 800d666:	d877      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d668:	2b50      	cmp	r3, #80	; 0x50
 800d66a:	d03c      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x14a>
 800d66c:	2b50      	cmp	r3, #80	; 0x50
 800d66e:	d873      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d670:	2b40      	cmp	r3, #64	; 0x40
 800d672:	d058      	beq.n	800d726 <HAL_TIM_ConfigClockSource+0x18a>
 800d674:	2b40      	cmp	r3, #64	; 0x40
 800d676:	d86f      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d678:	2b30      	cmp	r3, #48	; 0x30
 800d67a:	d064      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d67c:	2b30      	cmp	r3, #48	; 0x30
 800d67e:	d86b      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d680:	2b20      	cmp	r3, #32
 800d682:	d060      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d684:	2b20      	cmp	r3, #32
 800d686:	d867      	bhi.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d05c      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d68c:	2b10      	cmp	r3, #16
 800d68e:	d05a      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x1aa>
 800d690:	e062      	b.n	800d758 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6a2:	f000 fc95 	bl	800dfd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d6b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	609a      	str	r2, [r3, #8]
      break;
 800d6be:	e04f      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6d0:	f000 fc7e 	bl	800dfd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	689a      	ldr	r2, [r3, #8]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6e2:	609a      	str	r2, [r3, #8]
      break;
 800d6e4:	e03c      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f000 fbee 	bl	800ded4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2150      	movs	r1, #80	; 0x50
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 fc48 	bl	800df94 <TIM_ITRx_SetConfig>
      break;
 800d704:	e02c      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d712:	461a      	mov	r2, r3
 800d714:	f000 fc0d 	bl	800df32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2160      	movs	r1, #96	; 0x60
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 fc38 	bl	800df94 <TIM_ITRx_SetConfig>
      break;
 800d724:	e01c      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d732:	461a      	mov	r2, r3
 800d734:	f000 fbce 	bl	800ded4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2140      	movs	r1, #64	; 0x40
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 fc28 	bl	800df94 <TIM_ITRx_SetConfig>
      break;
 800d744:	e00c      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4619      	mov	r1, r3
 800d750:	4610      	mov	r0, r2
 800d752:	f000 fc1f 	bl	800df94 <TIM_ITRx_SetConfig>
      break;
 800d756:	e003      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d758:	2301      	movs	r3, #1
 800d75a:	73fb      	strb	r3, [r7, #15]
      break;
 800d75c:	e000      	b.n	800d760 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d75e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d770:	7bfb      	ldrb	r3, [r7, #15]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	ffceff88 	.word	0xffceff88
 800d780:	00100040 	.word	0x00100040
 800d784:	00100030 	.word	0x00100030
 800d788:	00100020 	.word	0x00100020

0800d78c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a46      	ldr	r2, [pc, #280]	; (800d908 <TIM_Base_SetConfig+0x12c>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d013      	beq.n	800d81c <TIM_Base_SetConfig+0x40>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7fa:	d00f      	beq.n	800d81c <TIM_Base_SetConfig+0x40>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4a43      	ldr	r2, [pc, #268]	; (800d90c <TIM_Base_SetConfig+0x130>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d00b      	beq.n	800d81c <TIM_Base_SetConfig+0x40>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a42      	ldr	r2, [pc, #264]	; (800d910 <TIM_Base_SetConfig+0x134>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d007      	beq.n	800d81c <TIM_Base_SetConfig+0x40>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a41      	ldr	r2, [pc, #260]	; (800d914 <TIM_Base_SetConfig+0x138>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d003      	beq.n	800d81c <TIM_Base_SetConfig+0x40>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a40      	ldr	r2, [pc, #256]	; (800d918 <TIM_Base_SetConfig+0x13c>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d108      	bne.n	800d82e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a35      	ldr	r2, [pc, #212]	; (800d908 <TIM_Base_SetConfig+0x12c>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d01f      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d83c:	d01b      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a32      	ldr	r2, [pc, #200]	; (800d90c <TIM_Base_SetConfig+0x130>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d017      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a31      	ldr	r2, [pc, #196]	; (800d910 <TIM_Base_SetConfig+0x134>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d013      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a30      	ldr	r2, [pc, #192]	; (800d914 <TIM_Base_SetConfig+0x138>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d00f      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a2f      	ldr	r2, [pc, #188]	; (800d918 <TIM_Base_SetConfig+0x13c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d00b      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a2e      	ldr	r2, [pc, #184]	; (800d91c <TIM_Base_SetConfig+0x140>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d007      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a2d      	ldr	r2, [pc, #180]	; (800d920 <TIM_Base_SetConfig+0x144>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d003      	beq.n	800d876 <TIM_Base_SetConfig+0x9a>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a2c      	ldr	r2, [pc, #176]	; (800d924 <TIM_Base_SetConfig+0x148>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d108      	bne.n	800d888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d87c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	4313      	orrs	r3, r2
 800d886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	4313      	orrs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	689a      	ldr	r2, [r3, #8]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4a16      	ldr	r2, [pc, #88]	; (800d908 <TIM_Base_SetConfig+0x12c>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d00f      	beq.n	800d8d4 <TIM_Base_SetConfig+0xf8>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a18      	ldr	r2, [pc, #96]	; (800d918 <TIM_Base_SetConfig+0x13c>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d00b      	beq.n	800d8d4 <TIM_Base_SetConfig+0xf8>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a17      	ldr	r2, [pc, #92]	; (800d91c <TIM_Base_SetConfig+0x140>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d007      	beq.n	800d8d4 <TIM_Base_SetConfig+0xf8>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a16      	ldr	r2, [pc, #88]	; (800d920 <TIM_Base_SetConfig+0x144>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d003      	beq.n	800d8d4 <TIM_Base_SetConfig+0xf8>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a15      	ldr	r2, [pc, #84]	; (800d924 <TIM_Base_SetConfig+0x148>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d103      	bne.n	800d8dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	691a      	ldr	r2, [r3, #16]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	f003 0301 	and.w	r3, r3, #1
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d105      	bne.n	800d8fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	f023 0201 	bic.w	r2, r3, #1
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	611a      	str	r2, [r3, #16]
  }
}
 800d8fa:	bf00      	nop
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	40010000 	.word	0x40010000
 800d90c:	40000400 	.word	0x40000400
 800d910:	40000800 	.word	0x40000800
 800d914:	40000c00 	.word	0x40000c00
 800d918:	40010400 	.word	0x40010400
 800d91c:	40014000 	.word	0x40014000
 800d920:	40014400 	.word	0x40014400
 800d924:	40014800 	.word	0x40014800

0800d928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d928:	b480      	push	{r7}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	f023 0201 	bic.w	r2, r3, #1
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	4b37      	ldr	r3, [pc, #220]	; (800da30 <TIM_OC1_SetConfig+0x108>)
 800d954:	4013      	ands	r3, r2
 800d956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f023 0303 	bic.w	r3, r3, #3
 800d95e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4313      	orrs	r3, r2
 800d968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f023 0302 	bic.w	r3, r3, #2
 800d970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	4313      	orrs	r3, r2
 800d97a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a2d      	ldr	r2, [pc, #180]	; (800da34 <TIM_OC1_SetConfig+0x10c>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d00f      	beq.n	800d9a4 <TIM_OC1_SetConfig+0x7c>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a2c      	ldr	r2, [pc, #176]	; (800da38 <TIM_OC1_SetConfig+0x110>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d00b      	beq.n	800d9a4 <TIM_OC1_SetConfig+0x7c>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a2b      	ldr	r2, [pc, #172]	; (800da3c <TIM_OC1_SetConfig+0x114>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d007      	beq.n	800d9a4 <TIM_OC1_SetConfig+0x7c>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a2a      	ldr	r2, [pc, #168]	; (800da40 <TIM_OC1_SetConfig+0x118>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d003      	beq.n	800d9a4 <TIM_OC1_SetConfig+0x7c>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a29      	ldr	r2, [pc, #164]	; (800da44 <TIM_OC1_SetConfig+0x11c>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d10c      	bne.n	800d9be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f023 0308 	bic.w	r3, r3, #8
 800d9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	f023 0304 	bic.w	r3, r3, #4
 800d9bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a1c      	ldr	r2, [pc, #112]	; (800da34 <TIM_OC1_SetConfig+0x10c>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d00f      	beq.n	800d9e6 <TIM_OC1_SetConfig+0xbe>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a1b      	ldr	r2, [pc, #108]	; (800da38 <TIM_OC1_SetConfig+0x110>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d00b      	beq.n	800d9e6 <TIM_OC1_SetConfig+0xbe>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <TIM_OC1_SetConfig+0x114>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d007      	beq.n	800d9e6 <TIM_OC1_SetConfig+0xbe>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a19      	ldr	r2, [pc, #100]	; (800da40 <TIM_OC1_SetConfig+0x118>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d003      	beq.n	800d9e6 <TIM_OC1_SetConfig+0xbe>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4a18      	ldr	r2, [pc, #96]	; (800da44 <TIM_OC1_SetConfig+0x11c>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d111      	bne.n	800da0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d9f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	699b      	ldr	r3, [r3, #24]
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	4313      	orrs	r3, r2
 800da08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	621a      	str	r2, [r3, #32]
}
 800da24:	bf00      	nop
 800da26:	371c      	adds	r7, #28
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	fffeff8f 	.word	0xfffeff8f
 800da34:	40010000 	.word	0x40010000
 800da38:	40010400 	.word	0x40010400
 800da3c:	40014000 	.word	0x40014000
 800da40:	40014400 	.word	0x40014400
 800da44:	40014800 	.word	0x40014800

0800da48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	f023 0210 	bic.w	r2, r3, #16
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4b34      	ldr	r3, [pc, #208]	; (800db44 <TIM_OC2_SetConfig+0xfc>)
 800da74:	4013      	ands	r3, r2
 800da76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	021b      	lsls	r3, r3, #8
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	4313      	orrs	r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	f023 0320 	bic.w	r3, r3, #32
 800da92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	011b      	lsls	r3, r3, #4
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4a29      	ldr	r2, [pc, #164]	; (800db48 <TIM_OC2_SetConfig+0x100>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d003      	beq.n	800dab0 <TIM_OC2_SetConfig+0x68>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a28      	ldr	r2, [pc, #160]	; (800db4c <TIM_OC2_SetConfig+0x104>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d10d      	bne.n	800dacc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	011b      	lsls	r3, r3, #4
 800dabe:	697a      	ldr	r2, [r7, #20]
 800dac0:	4313      	orrs	r3, r2
 800dac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a1e      	ldr	r2, [pc, #120]	; (800db48 <TIM_OC2_SetConfig+0x100>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d00f      	beq.n	800daf4 <TIM_OC2_SetConfig+0xac>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a1d      	ldr	r2, [pc, #116]	; (800db4c <TIM_OC2_SetConfig+0x104>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d00b      	beq.n	800daf4 <TIM_OC2_SetConfig+0xac>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a1c      	ldr	r2, [pc, #112]	; (800db50 <TIM_OC2_SetConfig+0x108>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d007      	beq.n	800daf4 <TIM_OC2_SetConfig+0xac>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a1b      	ldr	r2, [pc, #108]	; (800db54 <TIM_OC2_SetConfig+0x10c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d003      	beq.n	800daf4 <TIM_OC2_SetConfig+0xac>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a1a      	ldr	r2, [pc, #104]	; (800db58 <TIM_OC2_SetConfig+0x110>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d113      	bne.n	800db1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dafa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	695b      	ldr	r3, [r3, #20]
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	4313      	orrs	r3, r2
 800db1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	621a      	str	r2, [r3, #32]
}
 800db36:	bf00      	nop
 800db38:	371c      	adds	r7, #28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	feff8fff 	.word	0xfeff8fff
 800db48:	40010000 	.word	0x40010000
 800db4c:	40010400 	.word	0x40010400
 800db50:	40014000 	.word	0x40014000
 800db54:	40014400 	.word	0x40014400
 800db58:	40014800 	.word	0x40014800

0800db5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b087      	sub	sp, #28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a1b      	ldr	r3, [r3, #32]
 800db6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a1b      	ldr	r3, [r3, #32]
 800db70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	69db      	ldr	r3, [r3, #28]
 800db82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	4b33      	ldr	r3, [pc, #204]	; (800dc54 <TIM_OC3_SetConfig+0xf8>)
 800db88:	4013      	ands	r3, r2
 800db8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f023 0303 	bic.w	r3, r3, #3
 800db92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	689b      	ldr	r3, [r3, #8]
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	697a      	ldr	r2, [r7, #20]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4a28      	ldr	r2, [pc, #160]	; (800dc58 <TIM_OC3_SetConfig+0xfc>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d003      	beq.n	800dbc2 <TIM_OC3_SetConfig+0x66>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a27      	ldr	r2, [pc, #156]	; (800dc5c <TIM_OC3_SetConfig+0x100>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d10d      	bne.n	800dbde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	697a      	ldr	r2, [r7, #20]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a1d      	ldr	r2, [pc, #116]	; (800dc58 <TIM_OC3_SetConfig+0xfc>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d00f      	beq.n	800dc06 <TIM_OC3_SetConfig+0xaa>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a1c      	ldr	r2, [pc, #112]	; (800dc5c <TIM_OC3_SetConfig+0x100>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d00b      	beq.n	800dc06 <TIM_OC3_SetConfig+0xaa>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4a1b      	ldr	r2, [pc, #108]	; (800dc60 <TIM_OC3_SetConfig+0x104>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d007      	beq.n	800dc06 <TIM_OC3_SetConfig+0xaa>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a1a      	ldr	r2, [pc, #104]	; (800dc64 <TIM_OC3_SetConfig+0x108>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d003      	beq.n	800dc06 <TIM_OC3_SetConfig+0xaa>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a19      	ldr	r2, [pc, #100]	; (800dc68 <TIM_OC3_SetConfig+0x10c>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d113      	bne.n	800dc2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	011b      	lsls	r3, r3, #4
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	011b      	lsls	r3, r3, #4
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	693a      	ldr	r2, [r7, #16]
 800dc32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	697a      	ldr	r2, [r7, #20]
 800dc46:	621a      	str	r2, [r3, #32]
}
 800dc48:	bf00      	nop
 800dc4a:	371c      	adds	r7, #28
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	fffeff8f 	.word	0xfffeff8f
 800dc58:	40010000 	.word	0x40010000
 800dc5c:	40010400 	.word	0x40010400
 800dc60:	40014000 	.word	0x40014000
 800dc64:	40014400 	.word	0x40014400
 800dc68:	40014800 	.word	0x40014800

0800dc6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b087      	sub	sp, #28
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a1b      	ldr	r3, [r3, #32]
 800dc7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a1b      	ldr	r3, [r3, #32]
 800dc80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4b24      	ldr	r3, [pc, #144]	; (800dd28 <TIM_OC4_SetConfig+0xbc>)
 800dc98:	4013      	ands	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	021b      	lsls	r3, r3, #8
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	031b      	lsls	r3, r3, #12
 800dcbe:	693a      	ldr	r2, [r7, #16]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a19      	ldr	r2, [pc, #100]	; (800dd2c <TIM_OC4_SetConfig+0xc0>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d00f      	beq.n	800dcec <TIM_OC4_SetConfig+0x80>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	4a18      	ldr	r2, [pc, #96]	; (800dd30 <TIM_OC4_SetConfig+0xc4>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d00b      	beq.n	800dcec <TIM_OC4_SetConfig+0x80>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4a17      	ldr	r2, [pc, #92]	; (800dd34 <TIM_OC4_SetConfig+0xc8>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d007      	beq.n	800dcec <TIM_OC4_SetConfig+0x80>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a16      	ldr	r2, [pc, #88]	; (800dd38 <TIM_OC4_SetConfig+0xcc>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d003      	beq.n	800dcec <TIM_OC4_SetConfig+0x80>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a15      	ldr	r2, [pc, #84]	; (800dd3c <TIM_OC4_SetConfig+0xd0>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d109      	bne.n	800dd00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	695b      	ldr	r3, [r3, #20]
 800dcf8:	019b      	lsls	r3, r3, #6
 800dcfa:	697a      	ldr	r2, [r7, #20]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	693a      	ldr	r2, [r7, #16]
 800dd18:	621a      	str	r2, [r3, #32]
}
 800dd1a:	bf00      	nop
 800dd1c:	371c      	adds	r7, #28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	feff8fff 	.word	0xfeff8fff
 800dd2c:	40010000 	.word	0x40010000
 800dd30:	40010400 	.word	0x40010400
 800dd34:	40014000 	.word	0x40014000
 800dd38:	40014400 	.word	0x40014400
 800dd3c:	40014800 	.word	0x40014800

0800dd40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a1b      	ldr	r3, [r3, #32]
 800dd4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a1b      	ldr	r3, [r3, #32]
 800dd54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	4b21      	ldr	r3, [pc, #132]	; (800ddf0 <TIM_OC5_SetConfig+0xb0>)
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dd80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	041b      	lsls	r3, r3, #16
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a18      	ldr	r2, [pc, #96]	; (800ddf4 <TIM_OC5_SetConfig+0xb4>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00f      	beq.n	800ddb6 <TIM_OC5_SetConfig+0x76>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a17      	ldr	r2, [pc, #92]	; (800ddf8 <TIM_OC5_SetConfig+0xb8>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d00b      	beq.n	800ddb6 <TIM_OC5_SetConfig+0x76>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a16      	ldr	r2, [pc, #88]	; (800ddfc <TIM_OC5_SetConfig+0xbc>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d007      	beq.n	800ddb6 <TIM_OC5_SetConfig+0x76>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a15      	ldr	r2, [pc, #84]	; (800de00 <TIM_OC5_SetConfig+0xc0>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d003      	beq.n	800ddb6 <TIM_OC5_SetConfig+0x76>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4a14      	ldr	r2, [pc, #80]	; (800de04 <TIM_OC5_SetConfig+0xc4>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d109      	bne.n	800ddca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	021b      	lsls	r3, r3, #8
 800ddc4:	697a      	ldr	r2, [r7, #20]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	685a      	ldr	r2, [r3, #4]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	693a      	ldr	r2, [r7, #16]
 800dde2:	621a      	str	r2, [r3, #32]
}
 800dde4:	bf00      	nop
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	fffeff8f 	.word	0xfffeff8f
 800ddf4:	40010000 	.word	0x40010000
 800ddf8:	40010400 	.word	0x40010400
 800ddfc:	40014000 	.word	0x40014000
 800de00:	40014400 	.word	0x40014400
 800de04:	40014800 	.word	0x40014800

0800de08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de08:	b480      	push	{r7}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a1b      	ldr	r3, [r3, #32]
 800de1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4b22      	ldr	r3, [pc, #136]	; (800debc <TIM_OC6_SetConfig+0xb4>)
 800de34:	4013      	ands	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	021b      	lsls	r3, r3, #8
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	4313      	orrs	r3, r2
 800de42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	051b      	lsls	r3, r3, #20
 800de52:	693a      	ldr	r2, [r7, #16]
 800de54:	4313      	orrs	r3, r2
 800de56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a19      	ldr	r2, [pc, #100]	; (800dec0 <TIM_OC6_SetConfig+0xb8>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d00f      	beq.n	800de80 <TIM_OC6_SetConfig+0x78>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a18      	ldr	r2, [pc, #96]	; (800dec4 <TIM_OC6_SetConfig+0xbc>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d00b      	beq.n	800de80 <TIM_OC6_SetConfig+0x78>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a17      	ldr	r2, [pc, #92]	; (800dec8 <TIM_OC6_SetConfig+0xc0>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d007      	beq.n	800de80 <TIM_OC6_SetConfig+0x78>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a16      	ldr	r2, [pc, #88]	; (800decc <TIM_OC6_SetConfig+0xc4>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d003      	beq.n	800de80 <TIM_OC6_SetConfig+0x78>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a15      	ldr	r2, [pc, #84]	; (800ded0 <TIM_OC6_SetConfig+0xc8>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d109      	bne.n	800de94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	029b      	lsls	r3, r3, #10
 800de8e:	697a      	ldr	r2, [r7, #20]
 800de90:	4313      	orrs	r3, r2
 800de92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	685a      	ldr	r2, [r3, #4]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	621a      	str	r2, [r3, #32]
}
 800deae:	bf00      	nop
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	feff8fff 	.word	0xfeff8fff
 800dec0:	40010000 	.word	0x40010000
 800dec4:	40010400 	.word	0x40010400
 800dec8:	40014000 	.word	0x40014000
 800decc:	40014400 	.word	0x40014400
 800ded0:	40014800 	.word	0x40014800

0800ded4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6a1b      	ldr	r3, [r3, #32]
 800dee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	f023 0201 	bic.w	r2, r3, #1
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800defe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	011b      	lsls	r3, r3, #4
 800df04:	693a      	ldr	r2, [r7, #16]
 800df06:	4313      	orrs	r3, r2
 800df08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f023 030a 	bic.w	r3, r3, #10
 800df10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	4313      	orrs	r3, r2
 800df18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	693a      	ldr	r2, [r7, #16]
 800df1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	621a      	str	r2, [r3, #32]
}
 800df26:	bf00      	nop
 800df28:	371c      	adds	r7, #28
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df32:	b480      	push	{r7}
 800df34:	b087      	sub	sp, #28
 800df36:	af00      	add	r7, sp, #0
 800df38:	60f8      	str	r0, [r7, #12]
 800df3a:	60b9      	str	r1, [r7, #8]
 800df3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a1b      	ldr	r3, [r3, #32]
 800df48:	f023 0210 	bic.w	r2, r3, #16
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	031b      	lsls	r3, r3, #12
 800df62:	693a      	ldr	r2, [r7, #16]
 800df64:	4313      	orrs	r3, r2
 800df66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	011b      	lsls	r3, r3, #4
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	4313      	orrs	r3, r2
 800df78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	621a      	str	r2, [r3, #32]
}
 800df86:	bf00      	nop
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
	...

0800df94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <TIM_ITRx_SetConfig+0x38>)
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	f043 0307 	orr.w	r3, r3, #7
 800dfb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	609a      	str	r2, [r3, #8]
}
 800dfbe:	bf00      	nop
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	ffcfff8f 	.word	0xffcfff8f

0800dfd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dfea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	021a      	lsls	r2, r3, #8
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	431a      	orrs	r2, r3
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	4313      	orrs	r3, r2
 800dff8:	697a      	ldr	r2, [r7, #20]
 800dffa:	4313      	orrs	r3, r2
 800dffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	609a      	str	r2, [r3, #8]
}
 800e004:	bf00      	nop
 800e006:	371c      	adds	r7, #28
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e010:	b480      	push	{r7}
 800e012:	b087      	sub	sp, #28
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	f003 031f 	and.w	r3, r3, #31
 800e022:	2201      	movs	r2, #1
 800e024:	fa02 f303 	lsl.w	r3, r2, r3
 800e028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6a1a      	ldr	r2, [r3, #32]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	43db      	mvns	r3, r3
 800e032:	401a      	ands	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6a1a      	ldr	r2, [r3, #32]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	f003 031f 	and.w	r3, r3, #31
 800e042:	6879      	ldr	r1, [r7, #4]
 800e044:	fa01 f303 	lsl.w	r3, r1, r3
 800e048:	431a      	orrs	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	621a      	str	r2, [r3, #32]
}
 800e04e:	bf00      	nop
 800e050:	371c      	adds	r7, #28
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
	...

0800e05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d101      	bne.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e070:	2302      	movs	r3, #2
 800e072:	e06d      	b.n	800e150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2202      	movs	r2, #2
 800e080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a30      	ldr	r2, [pc, #192]	; (800e15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d004      	beq.n	800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a2f      	ldr	r2, [pc, #188]	; (800e160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d108      	bne.n	800e0ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e0ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a20      	ldr	r2, [pc, #128]	; (800e15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d022      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0e6:	d01d      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a1d      	ldr	r2, [pc, #116]	; (800e164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d018      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a1c      	ldr	r2, [pc, #112]	; (800e168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d013      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a1a      	ldr	r2, [pc, #104]	; (800e16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d00e      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a15      	ldr	r2, [pc, #84]	; (800e160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d009      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a16      	ldr	r2, [pc, #88]	; (800e170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d004      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a15      	ldr	r2, [pc, #84]	; (800e174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d10c      	bne.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e12a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	4313      	orrs	r3, r2
 800e134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2201      	movs	r2, #1
 800e142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	40010000 	.word	0x40010000
 800e160:	40010400 	.word	0x40010400
 800e164:	40000400 	.word	0x40000400
 800e168:	40000800 	.word	0x40000800
 800e16c:	40000c00 	.word	0x40000c00
 800e170:	40001800 	.word	0x40001800
 800e174:	40014000 	.word	0x40014000

0800e178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e182:	2300      	movs	r3, #0
 800e184:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d101      	bne.n	800e194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e190:	2302      	movs	r3, #2
 800e192:	e065      	b.n	800e260 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	699b      	ldr	r3, [r3, #24]
 800e208:	041b      	lsls	r3, r3, #16
 800e20a:	4313      	orrs	r3, r2
 800e20c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a16      	ldr	r2, [pc, #88]	; (800e26c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d004      	beq.n	800e222 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a14      	ldr	r2, [pc, #80]	; (800e270 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d115      	bne.n	800e24e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22c:	051b      	lsls	r3, r3, #20
 800e22e:	4313      	orrs	r3, r2
 800e230:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	69db      	ldr	r3, [r3, #28]
 800e23c:	4313      	orrs	r3, r2
 800e23e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	40010000 	.word	0x40010000
 800e270:	40010400 	.word	0x40010400

0800e274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e042      	b.n	800e348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d106      	bne.n	800e2da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f4 f821 	bl	800231c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2224      	movs	r2, #36	; 0x24
 800e2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f022 0201 	bic.w	r2, r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f001 fa44 	bl	800f788 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fcd9 	bl	800ecb8 <UART_SetConfig>
 800e306:	4603      	mov	r3, r0
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d101      	bne.n	800e310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e30c:	2301      	movs	r3, #1
 800e30e:	e01b      	b.n	800e348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e31e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689a      	ldr	r2, [r3, #8]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e32e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f042 0201 	orr.w	r2, r2, #1
 800e33e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 fac3 	bl	800f8cc <UART_CheckIdleState>
 800e346:	4603      	mov	r3, r0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08a      	sub	sp, #40	; 0x28
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	4613      	mov	r3, r2
 800e35e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e366:	2b20      	cmp	r3, #32
 800e368:	d17b      	bne.n	800e462 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <HAL_UART_Transmit+0x26>
 800e370:	88fb      	ldrh	r3, [r7, #6]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	e074      	b.n	800e464 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2200      	movs	r2, #0
 800e37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2221      	movs	r2, #33	; 0x21
 800e386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e38a:	f7f4 fa2b 	bl	80027e4 <HAL_GetTick>
 800e38e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	88fa      	ldrh	r2, [r7, #6]
 800e394:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	88fa      	ldrh	r2, [r7, #6]
 800e39c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3a8:	d108      	bne.n	800e3bc <HAL_UART_Transmit+0x6c>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d104      	bne.n	800e3bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	61bb      	str	r3, [r7, #24]
 800e3ba:	e003      	b.n	800e3c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e3c4:	e030      	b.n	800e428 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2180      	movs	r1, #128	; 0x80
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f001 fb25 	bl	800fa20 <UART_WaitOnFlagUntilTimeout>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d005      	beq.n	800e3e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2220      	movs	r2, #32
 800e3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	e03d      	b.n	800e464 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10b      	bne.n	800e406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	3302      	adds	r3, #2
 800e402:	61bb      	str	r3, [r7, #24]
 800e404:	e007      	b.n	800e416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	781a      	ldrb	r2, [r3, #0]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	3301      	adds	r3, #1
 800e414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	3b01      	subs	r3, #1
 800e420:	b29a      	uxth	r2, r3
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1c8      	bne.n	800e3c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	2200      	movs	r2, #0
 800e43c:	2140      	movs	r1, #64	; 0x40
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f001 faee 	bl	800fa20 <UART_WaitOnFlagUntilTimeout>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d005      	beq.n	800e456 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e452:	2303      	movs	r3, #3
 800e454:	e006      	b.n	800e464 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2220      	movs	r2, #32
 800e45a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e45e:	2300      	movs	r3, #0
 800e460:	e000      	b.n	800e464 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e462:	2302      	movs	r3, #2
  }
}
 800e464:	4618      	mov	r0, r3
 800e466:	3720      	adds	r7, #32
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08a      	sub	sp, #40	; 0x28
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e480:	2b20      	cmp	r3, #32
 800e482:	d137      	bne.n	800e4f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <HAL_UART_Receive_IT+0x24>
 800e48a:	88fb      	ldrh	r3, [r7, #6]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d101      	bne.n	800e494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e490:	2301      	movs	r3, #1
 800e492:	e030      	b.n	800e4f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2200      	movs	r2, #0
 800e498:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a18      	ldr	r2, [pc, #96]	; (800e500 <HAL_UART_Receive_IT+0x94>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d01f      	beq.n	800e4e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d018      	beq.n	800e4e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	e853 3f00 	ldrex	r3, [r3]
 800e4be:	613b      	str	r3, [r7, #16]
   return(result);
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	623b      	str	r3, [r7, #32]
 800e4d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	69f9      	ldr	r1, [r7, #28]
 800e4d6:	6a3a      	ldr	r2, [r7, #32]
 800e4d8:	e841 2300 	strex	r3, r2, [r1]
 800e4dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e6      	bne.n	800e4b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e4e4:	88fb      	ldrh	r3, [r7, #6]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	68b9      	ldr	r1, [r7, #8]
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f001 fb06 	bl	800fafc <UART_Start_Receive_IT>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	e000      	b.n	800e4f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e4f4:	2302      	movs	r3, #2
  }
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3728      	adds	r7, #40	; 0x28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	58000c00 	.word	0x58000c00

0800e504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b0ba      	sub	sp, #232	; 0xe8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	69db      	ldr	r3, [r3, #28]
 800e512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e52a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e52e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e532:	4013      	ands	r3, r2
 800e534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d11b      	bne.n	800e578 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e544:	f003 0320 	and.w	r3, r3, #32
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d015      	beq.n	800e578 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e550:	f003 0320 	and.w	r3, r3, #32
 800e554:	2b00      	cmp	r3, #0
 800e556:	d105      	bne.n	800e564 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e55c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d009      	beq.n	800e578 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 8377 	beq.w	800ec5c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	4798      	blx	r3
      }
      return;
 800e576:	e371      	b.n	800ec5c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 8123 	beq.w	800e7c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e582:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e586:	4b8d      	ldr	r3, [pc, #564]	; (800e7bc <HAL_UART_IRQHandler+0x2b8>)
 800e588:	4013      	ands	r3, r2
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e58e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e592:	4b8b      	ldr	r3, [pc, #556]	; (800e7c0 <HAL_UART_IRQHandler+0x2bc>)
 800e594:	4013      	ands	r3, r2
 800e596:	2b00      	cmp	r3, #0
 800e598:	f000 8116 	beq.w	800e7c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5a0:	f003 0301 	and.w	r3, r3, #1
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d011      	beq.n	800e5cc <HAL_UART_IRQHandler+0xc8>
 800e5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00b      	beq.n	800e5cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c2:	f043 0201 	orr.w	r2, r3, #1
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5d0:	f003 0302 	and.w	r3, r3, #2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d011      	beq.n	800e5fc <HAL_UART_IRQHandler+0xf8>
 800e5d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00b      	beq.n	800e5fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2202      	movs	r2, #2
 800e5ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f2:	f043 0204 	orr.w	r2, r3, #4
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b00      	cmp	r3, #0
 800e606:	d011      	beq.n	800e62c <HAL_UART_IRQHandler+0x128>
 800e608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e60c:	f003 0301 	and.w	r3, r3, #1
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00b      	beq.n	800e62c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2204      	movs	r2, #4
 800e61a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e622:	f043 0202 	orr.w	r2, r3, #2
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e630:	f003 0308 	and.w	r3, r3, #8
 800e634:	2b00      	cmp	r3, #0
 800e636:	d017      	beq.n	800e668 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e63c:	f003 0320 	and.w	r3, r3, #32
 800e640:	2b00      	cmp	r3, #0
 800e642:	d105      	bne.n	800e650 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e644:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e648:	4b5c      	ldr	r3, [pc, #368]	; (800e7bc <HAL_UART_IRQHandler+0x2b8>)
 800e64a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00b      	beq.n	800e668 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2208      	movs	r2, #8
 800e656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e65e:	f043 0208 	orr.w	r2, r3, #8
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e670:	2b00      	cmp	r3, #0
 800e672:	d012      	beq.n	800e69a <HAL_UART_IRQHandler+0x196>
 800e674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00c      	beq.n	800e69a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e690:	f043 0220 	orr.w	r2, r3, #32
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 82dd 	beq.w	800ec60 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6aa:	f003 0320 	and.w	r3, r3, #32
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d013      	beq.n	800e6da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b6:	f003 0320 	and.w	r3, r3, #32
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d105      	bne.n	800e6ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ee:	2b40      	cmp	r3, #64	; 0x40
 800e6f0:	d005      	beq.n	800e6fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d054      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f001 fb1e 	bl	800fd40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e70e:	2b40      	cmp	r3, #64	; 0x40
 800e710:	d146      	bne.n	800e7a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	3308      	adds	r3, #8
 800e718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e71c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e720:	e853 3f00 	ldrex	r3, [r3]
 800e724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e73e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e74a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e74e:	e841 2300 	strex	r3, r2, [r1]
 800e752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1d9      	bne.n	800e712 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e764:	2b00      	cmp	r3, #0
 800e766:	d017      	beq.n	800e798 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e76e:	4a15      	ldr	r2, [pc, #84]	; (800e7c4 <HAL_UART_IRQHandler+0x2c0>)
 800e770:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f7 f993 	bl	8005aa4 <HAL_DMA_Abort_IT>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d019      	beq.n	800e7b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e792:	4610      	mov	r0, r2
 800e794:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e796:	e00f      	b.n	800e7b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fa77 	bl	800ec8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e79e:	e00b      	b.n	800e7b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 fa73 	bl	800ec8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7a6:	e007      	b.n	800e7b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fa6f 	bl	800ec8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e7b6:	e253      	b.n	800ec60 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b8:	bf00      	nop
    return;
 800e7ba:	e251      	b.n	800ec60 <HAL_UART_IRQHandler+0x75c>
 800e7bc:	10000001 	.word	0x10000001
 800e7c0:	04000120 	.word	0x04000120
 800e7c4:	0800fe0d 	.word	0x0800fe0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	f040 81e7 	bne.w	800eba0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7d6:	f003 0310 	and.w	r3, r3, #16
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 81e0 	beq.w	800eba0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7e4:	f003 0310 	and.w	r3, r3, #16
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 81d9 	beq.w	800eba0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2210      	movs	r2, #16
 800e7f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e800:	2b40      	cmp	r3, #64	; 0x40
 800e802:	f040 8151 	bne.w	800eaa8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a96      	ldr	r2, [pc, #600]	; (800ea68 <HAL_UART_IRQHandler+0x564>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d068      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a93      	ldr	r2, [pc, #588]	; (800ea6c <HAL_UART_IRQHandler+0x568>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d061      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a91      	ldr	r2, [pc, #580]	; (800ea70 <HAL_UART_IRQHandler+0x56c>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d05a      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a8e      	ldr	r2, [pc, #568]	; (800ea74 <HAL_UART_IRQHandler+0x570>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d053      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a8c      	ldr	r2, [pc, #560]	; (800ea78 <HAL_UART_IRQHandler+0x574>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d04c      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a89      	ldr	r2, [pc, #548]	; (800ea7c <HAL_UART_IRQHandler+0x578>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d045      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a87      	ldr	r2, [pc, #540]	; (800ea80 <HAL_UART_IRQHandler+0x57c>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d03e      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a84      	ldr	r2, [pc, #528]	; (800ea84 <HAL_UART_IRQHandler+0x580>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d037      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a82      	ldr	r2, [pc, #520]	; (800ea88 <HAL_UART_IRQHandler+0x584>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d030      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a7f      	ldr	r2, [pc, #508]	; (800ea8c <HAL_UART_IRQHandler+0x588>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d029      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a7d      	ldr	r2, [pc, #500]	; (800ea90 <HAL_UART_IRQHandler+0x58c>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d022      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a7a      	ldr	r2, [pc, #488]	; (800ea94 <HAL_UART_IRQHandler+0x590>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d01b      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a78      	ldr	r2, [pc, #480]	; (800ea98 <HAL_UART_IRQHandler+0x594>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d014      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4a75      	ldr	r2, [pc, #468]	; (800ea9c <HAL_UART_IRQHandler+0x598>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d00d      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a73      	ldr	r2, [pc, #460]	; (800eaa0 <HAL_UART_IRQHandler+0x59c>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d006      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x3e2>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a70      	ldr	r2, [pc, #448]	; (800eaa4 <HAL_UART_IRQHandler+0x5a0>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d106      	bne.n	800e8f4 <HAL_UART_IRQHandler+0x3f0>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	e005      	b.n	800e900 <HAL_UART_IRQHandler+0x3fc>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f000 81ab 	beq.w	800ec64 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e914:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e918:	429a      	cmp	r2, r3
 800e91a:	f080 81a3 	bcs.w	800ec64 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e92e:	69db      	ldr	r3, [r3, #28]
 800e930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e934:	f000 8087 	beq.w	800ea46 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e94c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	461a      	mov	r2, r3
 800e95e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e966:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e96e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e972:	e841 2300 	strex	r3, r2, [r1]
 800e976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1da      	bne.n	800e938 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3308      	adds	r3, #8
 800e988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e98c:	e853 3f00 	ldrex	r3, [r3]
 800e990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e994:	f023 0301 	bic.w	r3, r3, #1
 800e998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e9a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e9aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e9ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9b2:	e841 2300 	strex	r3, r2, [r1]
 800e9b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1e1      	bne.n	800e982 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9c8:	e853 3f00 	ldrex	r3, [r3]
 800e9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	3308      	adds	r3, #8
 800e9de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e9e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9ea:	e841 2300 	strex	r3, r2, [r1]
 800e9ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1e3      	bne.n	800e9be <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2220      	movs	r2, #32
 800e9fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2200      	movs	r2, #0
 800ea02:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea0c:	e853 3f00 	ldrex	r3, [r3]
 800ea10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea14:	f023 0310 	bic.w	r3, r3, #16
 800ea18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	461a      	mov	r2, r3
 800ea22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea26:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea2e:	e841 2300 	strex	r3, r2, [r1]
 800ea32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e4      	bne.n	800ea04 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7f6 fd11 	bl	8005468 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2202      	movs	r2, #2
 800ea4a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 f91d 	bl	800eca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea66:	e0fd      	b.n	800ec64 <HAL_UART_IRQHandler+0x760>
 800ea68:	40020010 	.word	0x40020010
 800ea6c:	40020028 	.word	0x40020028
 800ea70:	40020040 	.word	0x40020040
 800ea74:	40020058 	.word	0x40020058
 800ea78:	40020070 	.word	0x40020070
 800ea7c:	40020088 	.word	0x40020088
 800ea80:	400200a0 	.word	0x400200a0
 800ea84:	400200b8 	.word	0x400200b8
 800ea88:	40020410 	.word	0x40020410
 800ea8c:	40020428 	.word	0x40020428
 800ea90:	40020440 	.word	0x40020440
 800ea94:	40020458 	.word	0x40020458
 800ea98:	40020470 	.word	0x40020470
 800ea9c:	40020488 	.word	0x40020488
 800eaa0:	400204a0 	.word	0x400204a0
 800eaa4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 80cf 	beq.w	800ec68 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eaca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f000 80ca 	beq.w	800ec68 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eaf6:	647b      	str	r3, [r7, #68]	; 0x44
 800eaf8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eafc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e4      	bne.n	800ead4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	3308      	adds	r3, #8
 800eb10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb14:	e853 3f00 	ldrex	r3, [r3]
 800eb18:	623b      	str	r3, [r7, #32]
   return(result);
 800eb1a:	6a3a      	ldr	r2, [r7, #32]
 800eb1c:	4b55      	ldr	r3, [pc, #340]	; (800ec74 <HAL_UART_IRQHandler+0x770>)
 800eb1e:	4013      	ands	r3, r2
 800eb20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	3308      	adds	r3, #8
 800eb2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eb2e:	633a      	str	r2, [r7, #48]	; 0x30
 800eb30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb36:	e841 2300 	strex	r3, r2, [r1]
 800eb3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1e3      	bne.n	800eb0a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2220      	movs	r2, #32
 800eb46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	e853 3f00 	ldrex	r3, [r3]
 800eb62:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f023 0310 	bic.w	r3, r3, #16
 800eb6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eb78:	61fb      	str	r3, [r7, #28]
 800eb7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7c:	69b9      	ldr	r1, [r7, #24]
 800eb7e:	69fa      	ldr	r2, [r7, #28]
 800eb80:	e841 2300 	strex	r3, r2, [r1]
 800eb84:	617b      	str	r3, [r7, #20]
   return(result);
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1e4      	bne.n	800eb56 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2202      	movs	r2, #2
 800eb90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb96:	4619      	mov	r1, r3
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f881 	bl	800eca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb9e:	e063      	b.n	800ec68 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00e      	beq.n	800ebca <HAL_UART_IRQHandler+0x6c6>
 800ebac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d008      	beq.n	800ebca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ebc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f001 fe80 	bl	80108c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebc8:	e051      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d014      	beq.n	800ec00 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ebd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d105      	bne.n	800ebee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ebe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d008      	beq.n	800ec00 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d03a      	beq.n	800ec6c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	4798      	blx	r3
    }
    return;
 800ebfe:	e035      	b.n	800ec6c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d009      	beq.n	800ec20 <HAL_UART_IRQHandler+0x71c>
 800ec0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f001 f90d 	bl	800fe38 <UART_EndTransmit_IT>
    return;
 800ec1e:	e026      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d009      	beq.n	800ec40 <HAL_UART_IRQHandler+0x73c>
 800ec2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d003      	beq.n	800ec40 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f001 fe59 	bl	80108f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec3e:	e016      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d010      	beq.n	800ec6e <HAL_UART_IRQHandler+0x76a>
 800ec4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	da0c      	bge.n	800ec6e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f001 fe41 	bl	80108dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec5a:	e008      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec5c:	bf00      	nop
 800ec5e:	e006      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
    return;
 800ec60:	bf00      	nop
 800ec62:	e004      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec64:	bf00      	nop
 800ec66:	e002      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec68:	bf00      	nop
 800ec6a:	e000      	b.n	800ec6e <HAL_UART_IRQHandler+0x76a>
    return;
 800ec6c:	bf00      	nop
  }
}
 800ec6e:	37e8      	adds	r7, #232	; 0xe8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	effffffe 	.word	0xeffffffe

0800ec78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecbc:	b092      	sub	sp, #72	; 0x48
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	689a      	ldr	r2, [r3, #8]
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	431a      	orrs	r2, r3
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	69db      	ldr	r3, [r3, #28]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	4bbe      	ldr	r3, [pc, #760]	; (800efe0 <UART_SetConfig+0x328>)
 800ece8:	4013      	ands	r3, r2
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	6812      	ldr	r2, [r2, #0]
 800ecee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecf0:	430b      	orrs	r3, r1
 800ecf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	430a      	orrs	r2, r1
 800ed08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4ab3      	ldr	r2, [pc, #716]	; (800efe4 <UART_SetConfig+0x32c>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d004      	beq.n	800ed24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed20:	4313      	orrs	r3, r2
 800ed22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	689a      	ldr	r2, [r3, #8]
 800ed2a:	4baf      	ldr	r3, [pc, #700]	; (800efe8 <UART_SetConfig+0x330>)
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	6812      	ldr	r2, [r2, #0]
 800ed32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed34:	430b      	orrs	r3, r1
 800ed36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3e:	f023 010f 	bic.w	r1, r3, #15
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4aa6      	ldr	r2, [pc, #664]	; (800efec <UART_SetConfig+0x334>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d177      	bne.n	800ee48 <UART_SetConfig+0x190>
 800ed58:	4ba5      	ldr	r3, [pc, #660]	; (800eff0 <UART_SetConfig+0x338>)
 800ed5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed60:	2b28      	cmp	r3, #40	; 0x28
 800ed62:	d86d      	bhi.n	800ee40 <UART_SetConfig+0x188>
 800ed64:	a201      	add	r2, pc, #4	; (adr r2, 800ed6c <UART_SetConfig+0xb4>)
 800ed66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6a:	bf00      	nop
 800ed6c:	0800ee11 	.word	0x0800ee11
 800ed70:	0800ee41 	.word	0x0800ee41
 800ed74:	0800ee41 	.word	0x0800ee41
 800ed78:	0800ee41 	.word	0x0800ee41
 800ed7c:	0800ee41 	.word	0x0800ee41
 800ed80:	0800ee41 	.word	0x0800ee41
 800ed84:	0800ee41 	.word	0x0800ee41
 800ed88:	0800ee41 	.word	0x0800ee41
 800ed8c:	0800ee19 	.word	0x0800ee19
 800ed90:	0800ee41 	.word	0x0800ee41
 800ed94:	0800ee41 	.word	0x0800ee41
 800ed98:	0800ee41 	.word	0x0800ee41
 800ed9c:	0800ee41 	.word	0x0800ee41
 800eda0:	0800ee41 	.word	0x0800ee41
 800eda4:	0800ee41 	.word	0x0800ee41
 800eda8:	0800ee41 	.word	0x0800ee41
 800edac:	0800ee21 	.word	0x0800ee21
 800edb0:	0800ee41 	.word	0x0800ee41
 800edb4:	0800ee41 	.word	0x0800ee41
 800edb8:	0800ee41 	.word	0x0800ee41
 800edbc:	0800ee41 	.word	0x0800ee41
 800edc0:	0800ee41 	.word	0x0800ee41
 800edc4:	0800ee41 	.word	0x0800ee41
 800edc8:	0800ee41 	.word	0x0800ee41
 800edcc:	0800ee29 	.word	0x0800ee29
 800edd0:	0800ee41 	.word	0x0800ee41
 800edd4:	0800ee41 	.word	0x0800ee41
 800edd8:	0800ee41 	.word	0x0800ee41
 800eddc:	0800ee41 	.word	0x0800ee41
 800ede0:	0800ee41 	.word	0x0800ee41
 800ede4:	0800ee41 	.word	0x0800ee41
 800ede8:	0800ee41 	.word	0x0800ee41
 800edec:	0800ee31 	.word	0x0800ee31
 800edf0:	0800ee41 	.word	0x0800ee41
 800edf4:	0800ee41 	.word	0x0800ee41
 800edf8:	0800ee41 	.word	0x0800ee41
 800edfc:	0800ee41 	.word	0x0800ee41
 800ee00:	0800ee41 	.word	0x0800ee41
 800ee04:	0800ee41 	.word	0x0800ee41
 800ee08:	0800ee41 	.word	0x0800ee41
 800ee0c:	0800ee39 	.word	0x0800ee39
 800ee10:	2301      	movs	r3, #1
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e222      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee18:	2304      	movs	r3, #4
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e21e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee20:	2308      	movs	r3, #8
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee26:	e21a      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee28:	2310      	movs	r3, #16
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e216      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee30:	2320      	movs	r3, #32
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee36:	e212      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee38:	2340      	movs	r3, #64	; 0x40
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e20e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee40:	2380      	movs	r3, #128	; 0x80
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e20a      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a69      	ldr	r2, [pc, #420]	; (800eff4 <UART_SetConfig+0x33c>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d130      	bne.n	800eeb4 <UART_SetConfig+0x1fc>
 800ee52:	4b67      	ldr	r3, [pc, #412]	; (800eff0 <UART_SetConfig+0x338>)
 800ee54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee56:	f003 0307 	and.w	r3, r3, #7
 800ee5a:	2b05      	cmp	r3, #5
 800ee5c:	d826      	bhi.n	800eeac <UART_SetConfig+0x1f4>
 800ee5e:	a201      	add	r2, pc, #4	; (adr r2, 800ee64 <UART_SetConfig+0x1ac>)
 800ee60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee64:	0800ee7d 	.word	0x0800ee7d
 800ee68:	0800ee85 	.word	0x0800ee85
 800ee6c:	0800ee8d 	.word	0x0800ee8d
 800ee70:	0800ee95 	.word	0x0800ee95
 800ee74:	0800ee9d 	.word	0x0800ee9d
 800ee78:	0800eea5 	.word	0x0800eea5
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e1ec      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee84:	2304      	movs	r3, #4
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e1e8      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee8c:	2308      	movs	r3, #8
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e1e4      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee94:	2310      	movs	r3, #16
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e1e0      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ee9c:	2320      	movs	r3, #32
 800ee9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea2:	e1dc      	b.n	800f25e <UART_SetConfig+0x5a6>
 800eea4:	2340      	movs	r3, #64	; 0x40
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e1d8      	b.n	800f25e <UART_SetConfig+0x5a6>
 800eeac:	2380      	movs	r3, #128	; 0x80
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e1d4      	b.n	800f25e <UART_SetConfig+0x5a6>
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a4f      	ldr	r2, [pc, #316]	; (800eff8 <UART_SetConfig+0x340>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d130      	bne.n	800ef20 <UART_SetConfig+0x268>
 800eebe:	4b4c      	ldr	r3, [pc, #304]	; (800eff0 <UART_SetConfig+0x338>)
 800eec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eec2:	f003 0307 	and.w	r3, r3, #7
 800eec6:	2b05      	cmp	r3, #5
 800eec8:	d826      	bhi.n	800ef18 <UART_SetConfig+0x260>
 800eeca:	a201      	add	r2, pc, #4	; (adr r2, 800eed0 <UART_SetConfig+0x218>)
 800eecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed0:	0800eee9 	.word	0x0800eee9
 800eed4:	0800eef1 	.word	0x0800eef1
 800eed8:	0800eef9 	.word	0x0800eef9
 800eedc:	0800ef01 	.word	0x0800ef01
 800eee0:	0800ef09 	.word	0x0800ef09
 800eee4:	0800ef11 	.word	0x0800ef11
 800eee8:	2300      	movs	r3, #0
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e1b6      	b.n	800f25e <UART_SetConfig+0x5a6>
 800eef0:	2304      	movs	r3, #4
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e1b2      	b.n	800f25e <UART_SetConfig+0x5a6>
 800eef8:	2308      	movs	r3, #8
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e1ae      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef00:	2310      	movs	r3, #16
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e1aa      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef08:	2320      	movs	r3, #32
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0e:	e1a6      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef10:	2340      	movs	r3, #64	; 0x40
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e1a2      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef18:	2380      	movs	r3, #128	; 0x80
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e19e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a35      	ldr	r2, [pc, #212]	; (800effc <UART_SetConfig+0x344>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d130      	bne.n	800ef8c <UART_SetConfig+0x2d4>
 800ef2a:	4b31      	ldr	r3, [pc, #196]	; (800eff0 <UART_SetConfig+0x338>)
 800ef2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef2e:	f003 0307 	and.w	r3, r3, #7
 800ef32:	2b05      	cmp	r3, #5
 800ef34:	d826      	bhi.n	800ef84 <UART_SetConfig+0x2cc>
 800ef36:	a201      	add	r2, pc, #4	; (adr r2, 800ef3c <UART_SetConfig+0x284>)
 800ef38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef3c:	0800ef55 	.word	0x0800ef55
 800ef40:	0800ef5d 	.word	0x0800ef5d
 800ef44:	0800ef65 	.word	0x0800ef65
 800ef48:	0800ef6d 	.word	0x0800ef6d
 800ef4c:	0800ef75 	.word	0x0800ef75
 800ef50:	0800ef7d 	.word	0x0800ef7d
 800ef54:	2300      	movs	r3, #0
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5a:	e180      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef5c:	2304      	movs	r3, #4
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef62:	e17c      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef64:	2308      	movs	r3, #8
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e178      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef6c:	2310      	movs	r3, #16
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e174      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef74:	2320      	movs	r3, #32
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7a:	e170      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef7c:	2340      	movs	r3, #64	; 0x40
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef82:	e16c      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef84:	2380      	movs	r3, #128	; 0x80
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8a:	e168      	b.n	800f25e <UART_SetConfig+0x5a6>
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a1b      	ldr	r2, [pc, #108]	; (800f000 <UART_SetConfig+0x348>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d142      	bne.n	800f01c <UART_SetConfig+0x364>
 800ef96:	4b16      	ldr	r3, [pc, #88]	; (800eff0 <UART_SetConfig+0x338>)
 800ef98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef9a:	f003 0307 	and.w	r3, r3, #7
 800ef9e:	2b05      	cmp	r3, #5
 800efa0:	d838      	bhi.n	800f014 <UART_SetConfig+0x35c>
 800efa2:	a201      	add	r2, pc, #4	; (adr r2, 800efa8 <UART_SetConfig+0x2f0>)
 800efa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa8:	0800efc1 	.word	0x0800efc1
 800efac:	0800efc9 	.word	0x0800efc9
 800efb0:	0800efd1 	.word	0x0800efd1
 800efb4:	0800efd9 	.word	0x0800efd9
 800efb8:	0800f005 	.word	0x0800f005
 800efbc:	0800f00d 	.word	0x0800f00d
 800efc0:	2300      	movs	r3, #0
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc6:	e14a      	b.n	800f25e <UART_SetConfig+0x5a6>
 800efc8:	2304      	movs	r3, #4
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efce:	e146      	b.n	800f25e <UART_SetConfig+0x5a6>
 800efd0:	2308      	movs	r3, #8
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd6:	e142      	b.n	800f25e <UART_SetConfig+0x5a6>
 800efd8:	2310      	movs	r3, #16
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efde:	e13e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800efe0:	cfff69f3 	.word	0xcfff69f3
 800efe4:	58000c00 	.word	0x58000c00
 800efe8:	11fff4ff 	.word	0x11fff4ff
 800efec:	40011000 	.word	0x40011000
 800eff0:	58024400 	.word	0x58024400
 800eff4:	40004400 	.word	0x40004400
 800eff8:	40004800 	.word	0x40004800
 800effc:	40004c00 	.word	0x40004c00
 800f000:	40005000 	.word	0x40005000
 800f004:	2320      	movs	r3, #32
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00a:	e128      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f00c:	2340      	movs	r3, #64	; 0x40
 800f00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f012:	e124      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f014:	2380      	movs	r3, #128	; 0x80
 800f016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01a:	e120      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4acb      	ldr	r2, [pc, #812]	; (800f350 <UART_SetConfig+0x698>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d176      	bne.n	800f114 <UART_SetConfig+0x45c>
 800f026:	4bcb      	ldr	r3, [pc, #812]	; (800f354 <UART_SetConfig+0x69c>)
 800f028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f02a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f02e:	2b28      	cmp	r3, #40	; 0x28
 800f030:	d86c      	bhi.n	800f10c <UART_SetConfig+0x454>
 800f032:	a201      	add	r2, pc, #4	; (adr r2, 800f038 <UART_SetConfig+0x380>)
 800f034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f038:	0800f0dd 	.word	0x0800f0dd
 800f03c:	0800f10d 	.word	0x0800f10d
 800f040:	0800f10d 	.word	0x0800f10d
 800f044:	0800f10d 	.word	0x0800f10d
 800f048:	0800f10d 	.word	0x0800f10d
 800f04c:	0800f10d 	.word	0x0800f10d
 800f050:	0800f10d 	.word	0x0800f10d
 800f054:	0800f10d 	.word	0x0800f10d
 800f058:	0800f0e5 	.word	0x0800f0e5
 800f05c:	0800f10d 	.word	0x0800f10d
 800f060:	0800f10d 	.word	0x0800f10d
 800f064:	0800f10d 	.word	0x0800f10d
 800f068:	0800f10d 	.word	0x0800f10d
 800f06c:	0800f10d 	.word	0x0800f10d
 800f070:	0800f10d 	.word	0x0800f10d
 800f074:	0800f10d 	.word	0x0800f10d
 800f078:	0800f0ed 	.word	0x0800f0ed
 800f07c:	0800f10d 	.word	0x0800f10d
 800f080:	0800f10d 	.word	0x0800f10d
 800f084:	0800f10d 	.word	0x0800f10d
 800f088:	0800f10d 	.word	0x0800f10d
 800f08c:	0800f10d 	.word	0x0800f10d
 800f090:	0800f10d 	.word	0x0800f10d
 800f094:	0800f10d 	.word	0x0800f10d
 800f098:	0800f0f5 	.word	0x0800f0f5
 800f09c:	0800f10d 	.word	0x0800f10d
 800f0a0:	0800f10d 	.word	0x0800f10d
 800f0a4:	0800f10d 	.word	0x0800f10d
 800f0a8:	0800f10d 	.word	0x0800f10d
 800f0ac:	0800f10d 	.word	0x0800f10d
 800f0b0:	0800f10d 	.word	0x0800f10d
 800f0b4:	0800f10d 	.word	0x0800f10d
 800f0b8:	0800f0fd 	.word	0x0800f0fd
 800f0bc:	0800f10d 	.word	0x0800f10d
 800f0c0:	0800f10d 	.word	0x0800f10d
 800f0c4:	0800f10d 	.word	0x0800f10d
 800f0c8:	0800f10d 	.word	0x0800f10d
 800f0cc:	0800f10d 	.word	0x0800f10d
 800f0d0:	0800f10d 	.word	0x0800f10d
 800f0d4:	0800f10d 	.word	0x0800f10d
 800f0d8:	0800f105 	.word	0x0800f105
 800f0dc:	2301      	movs	r3, #1
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e2:	e0bc      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ea:	e0b8      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f0ec:	2308      	movs	r3, #8
 800f0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f2:	e0b4      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f0f4:	2310      	movs	r3, #16
 800f0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fa:	e0b0      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f0fc:	2320      	movs	r3, #32
 800f0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f102:	e0ac      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f104:	2340      	movs	r3, #64	; 0x40
 800f106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10a:	e0a8      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f10c:	2380      	movs	r3, #128	; 0x80
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f112:	e0a4      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a8f      	ldr	r2, [pc, #572]	; (800f358 <UART_SetConfig+0x6a0>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d130      	bne.n	800f180 <UART_SetConfig+0x4c8>
 800f11e:	4b8d      	ldr	r3, [pc, #564]	; (800f354 <UART_SetConfig+0x69c>)
 800f120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f122:	f003 0307 	and.w	r3, r3, #7
 800f126:	2b05      	cmp	r3, #5
 800f128:	d826      	bhi.n	800f178 <UART_SetConfig+0x4c0>
 800f12a:	a201      	add	r2, pc, #4	; (adr r2, 800f130 <UART_SetConfig+0x478>)
 800f12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f130:	0800f149 	.word	0x0800f149
 800f134:	0800f151 	.word	0x0800f151
 800f138:	0800f159 	.word	0x0800f159
 800f13c:	0800f161 	.word	0x0800f161
 800f140:	0800f169 	.word	0x0800f169
 800f144:	0800f171 	.word	0x0800f171
 800f148:	2300      	movs	r3, #0
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14e:	e086      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f150:	2304      	movs	r3, #4
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f156:	e082      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f158:	2308      	movs	r3, #8
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15e:	e07e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f160:	2310      	movs	r3, #16
 800f162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f166:	e07a      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f168:	2320      	movs	r3, #32
 800f16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16e:	e076      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f170:	2340      	movs	r3, #64	; 0x40
 800f172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f176:	e072      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f178:	2380      	movs	r3, #128	; 0x80
 800f17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17e:	e06e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4a75      	ldr	r2, [pc, #468]	; (800f35c <UART_SetConfig+0x6a4>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d130      	bne.n	800f1ec <UART_SetConfig+0x534>
 800f18a:	4b72      	ldr	r3, [pc, #456]	; (800f354 <UART_SetConfig+0x69c>)
 800f18c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18e:	f003 0307 	and.w	r3, r3, #7
 800f192:	2b05      	cmp	r3, #5
 800f194:	d826      	bhi.n	800f1e4 <UART_SetConfig+0x52c>
 800f196:	a201      	add	r2, pc, #4	; (adr r2, 800f19c <UART_SetConfig+0x4e4>)
 800f198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19c:	0800f1b5 	.word	0x0800f1b5
 800f1a0:	0800f1bd 	.word	0x0800f1bd
 800f1a4:	0800f1c5 	.word	0x0800f1c5
 800f1a8:	0800f1cd 	.word	0x0800f1cd
 800f1ac:	0800f1d5 	.word	0x0800f1d5
 800f1b0:	0800f1dd 	.word	0x0800f1dd
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ba:	e050      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1bc:	2304      	movs	r3, #4
 800f1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c2:	e04c      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1c4:	2308      	movs	r3, #8
 800f1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ca:	e048      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1cc:	2310      	movs	r3, #16
 800f1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d2:	e044      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1d4:	2320      	movs	r3, #32
 800f1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1da:	e040      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1dc:	2340      	movs	r3, #64	; 0x40
 800f1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e2:	e03c      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1e4:	2380      	movs	r3, #128	; 0x80
 800f1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ea:	e038      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a5b      	ldr	r2, [pc, #364]	; (800f360 <UART_SetConfig+0x6a8>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d130      	bne.n	800f258 <UART_SetConfig+0x5a0>
 800f1f6:	4b57      	ldr	r3, [pc, #348]	; (800f354 <UART_SetConfig+0x69c>)
 800f1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1fa:	f003 0307 	and.w	r3, r3, #7
 800f1fe:	2b05      	cmp	r3, #5
 800f200:	d826      	bhi.n	800f250 <UART_SetConfig+0x598>
 800f202:	a201      	add	r2, pc, #4	; (adr r2, 800f208 <UART_SetConfig+0x550>)
 800f204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f208:	0800f221 	.word	0x0800f221
 800f20c:	0800f229 	.word	0x0800f229
 800f210:	0800f231 	.word	0x0800f231
 800f214:	0800f239 	.word	0x0800f239
 800f218:	0800f241 	.word	0x0800f241
 800f21c:	0800f249 	.word	0x0800f249
 800f220:	2302      	movs	r3, #2
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f226:	e01a      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f228:	2304      	movs	r3, #4
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22e:	e016      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f230:	2308      	movs	r3, #8
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f236:	e012      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f238:	2310      	movs	r3, #16
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23e:	e00e      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f240:	2320      	movs	r3, #32
 800f242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f246:	e00a      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f248:	2340      	movs	r3, #64	; 0x40
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24e:	e006      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f250:	2380      	movs	r3, #128	; 0x80
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f256:	e002      	b.n	800f25e <UART_SetConfig+0x5a6>
 800f258:	2380      	movs	r3, #128	; 0x80
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a3f      	ldr	r2, [pc, #252]	; (800f360 <UART_SetConfig+0x6a8>)
 800f264:	4293      	cmp	r3, r2
 800f266:	f040 80f8 	bne.w	800f45a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f26a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f26e:	2b20      	cmp	r3, #32
 800f270:	dc46      	bgt.n	800f300 <UART_SetConfig+0x648>
 800f272:	2b02      	cmp	r3, #2
 800f274:	f2c0 8082 	blt.w	800f37c <UART_SetConfig+0x6c4>
 800f278:	3b02      	subs	r3, #2
 800f27a:	2b1e      	cmp	r3, #30
 800f27c:	d87e      	bhi.n	800f37c <UART_SetConfig+0x6c4>
 800f27e:	a201      	add	r2, pc, #4	; (adr r2, 800f284 <UART_SetConfig+0x5cc>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f307 	.word	0x0800f307
 800f288:	0800f37d 	.word	0x0800f37d
 800f28c:	0800f30f 	.word	0x0800f30f
 800f290:	0800f37d 	.word	0x0800f37d
 800f294:	0800f37d 	.word	0x0800f37d
 800f298:	0800f37d 	.word	0x0800f37d
 800f29c:	0800f31f 	.word	0x0800f31f
 800f2a0:	0800f37d 	.word	0x0800f37d
 800f2a4:	0800f37d 	.word	0x0800f37d
 800f2a8:	0800f37d 	.word	0x0800f37d
 800f2ac:	0800f37d 	.word	0x0800f37d
 800f2b0:	0800f37d 	.word	0x0800f37d
 800f2b4:	0800f37d 	.word	0x0800f37d
 800f2b8:	0800f37d 	.word	0x0800f37d
 800f2bc:	0800f32f 	.word	0x0800f32f
 800f2c0:	0800f37d 	.word	0x0800f37d
 800f2c4:	0800f37d 	.word	0x0800f37d
 800f2c8:	0800f37d 	.word	0x0800f37d
 800f2cc:	0800f37d 	.word	0x0800f37d
 800f2d0:	0800f37d 	.word	0x0800f37d
 800f2d4:	0800f37d 	.word	0x0800f37d
 800f2d8:	0800f37d 	.word	0x0800f37d
 800f2dc:	0800f37d 	.word	0x0800f37d
 800f2e0:	0800f37d 	.word	0x0800f37d
 800f2e4:	0800f37d 	.word	0x0800f37d
 800f2e8:	0800f37d 	.word	0x0800f37d
 800f2ec:	0800f37d 	.word	0x0800f37d
 800f2f0:	0800f37d 	.word	0x0800f37d
 800f2f4:	0800f37d 	.word	0x0800f37d
 800f2f8:	0800f37d 	.word	0x0800f37d
 800f2fc:	0800f36f 	.word	0x0800f36f
 800f300:	2b40      	cmp	r3, #64	; 0x40
 800f302:	d037      	beq.n	800f374 <UART_SetConfig+0x6bc>
 800f304:	e03a      	b.n	800f37c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f306:	f7fc f8d5 	bl	800b4b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f30a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f30c:	e03c      	b.n	800f388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f312:	4618      	mov	r0, r3
 800f314:	f7fc f8e4 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f31c:	e034      	b.n	800f388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f31e:	f107 0318 	add.w	r3, r7, #24
 800f322:	4618      	mov	r0, r3
 800f324:	f7fc fa30 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f32c:	e02c      	b.n	800f388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f32e:	4b09      	ldr	r3, [pc, #36]	; (800f354 <UART_SetConfig+0x69c>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f003 0320 	and.w	r3, r3, #32
 800f336:	2b00      	cmp	r3, #0
 800f338:	d016      	beq.n	800f368 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <UART_SetConfig+0x69c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	08db      	lsrs	r3, r3, #3
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	4a07      	ldr	r2, [pc, #28]	; (800f364 <UART_SetConfig+0x6ac>)
 800f346:	fa22 f303 	lsr.w	r3, r2, r3
 800f34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f34c:	e01c      	b.n	800f388 <UART_SetConfig+0x6d0>
 800f34e:	bf00      	nop
 800f350:	40011400 	.word	0x40011400
 800f354:	58024400 	.word	0x58024400
 800f358:	40007800 	.word	0x40007800
 800f35c:	40007c00 	.word	0x40007c00
 800f360:	58000c00 	.word	0x58000c00
 800f364:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f368:	4b9d      	ldr	r3, [pc, #628]	; (800f5e0 <UART_SetConfig+0x928>)
 800f36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f36c:	e00c      	b.n	800f388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f36e:	4b9d      	ldr	r3, [pc, #628]	; (800f5e4 <UART_SetConfig+0x92c>)
 800f370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f372:	e009      	b.n	800f388 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f37a:	e005      	b.n	800f388 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f37c:	2300      	movs	r3, #0
 800f37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f386:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f000 81de 	beq.w	800f74c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f394:	4a94      	ldr	r2, [pc, #592]	; (800f5e8 <UART_SetConfig+0x930>)
 800f396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f39a:	461a      	mov	r2, r3
 800f39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d305      	bcc.n	800f3c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d903      	bls.n	800f3c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3c6:	e1c1      	b.n	800f74c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	60bb      	str	r3, [r7, #8]
 800f3ce:	60fa      	str	r2, [r7, #12]
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d4:	4a84      	ldr	r2, [pc, #528]	; (800f5e8 <UART_SetConfig+0x930>)
 800f3d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	2200      	movs	r2, #0
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	607a      	str	r2, [r7, #4]
 800f3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3ea:	f7f0 ff75 	bl	80002d8 <__aeabi_uldivmod>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	f04f 0200 	mov.w	r2, #0
 800f3fa:	f04f 0300 	mov.w	r3, #0
 800f3fe:	020b      	lsls	r3, r1, #8
 800f400:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f404:	0202      	lsls	r2, r0, #8
 800f406:	6979      	ldr	r1, [r7, #20]
 800f408:	6849      	ldr	r1, [r1, #4]
 800f40a:	0849      	lsrs	r1, r1, #1
 800f40c:	2000      	movs	r0, #0
 800f40e:	460c      	mov	r4, r1
 800f410:	4605      	mov	r5, r0
 800f412:	eb12 0804 	adds.w	r8, r2, r4
 800f416:	eb43 0905 	adc.w	r9, r3, r5
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	469a      	mov	sl, r3
 800f422:	4693      	mov	fp, r2
 800f424:	4652      	mov	r2, sl
 800f426:	465b      	mov	r3, fp
 800f428:	4640      	mov	r0, r8
 800f42a:	4649      	mov	r1, r9
 800f42c:	f7f0 ff54 	bl	80002d8 <__aeabi_uldivmod>
 800f430:	4602      	mov	r2, r0
 800f432:	460b      	mov	r3, r1
 800f434:	4613      	mov	r3, r2
 800f436:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f43e:	d308      	bcc.n	800f452 <UART_SetConfig+0x79a>
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f446:	d204      	bcs.n	800f452 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f44e:	60da      	str	r2, [r3, #12]
 800f450:	e17c      	b.n	800f74c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f458:	e178      	b.n	800f74c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	69db      	ldr	r3, [r3, #28]
 800f45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f462:	f040 80c5 	bne.w	800f5f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f466:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f46a:	2b20      	cmp	r3, #32
 800f46c:	dc48      	bgt.n	800f500 <UART_SetConfig+0x848>
 800f46e:	2b00      	cmp	r3, #0
 800f470:	db7b      	blt.n	800f56a <UART_SetConfig+0x8b2>
 800f472:	2b20      	cmp	r3, #32
 800f474:	d879      	bhi.n	800f56a <UART_SetConfig+0x8b2>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <UART_SetConfig+0x7c4>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f507 	.word	0x0800f507
 800f480:	0800f50f 	.word	0x0800f50f
 800f484:	0800f56b 	.word	0x0800f56b
 800f488:	0800f56b 	.word	0x0800f56b
 800f48c:	0800f517 	.word	0x0800f517
 800f490:	0800f56b 	.word	0x0800f56b
 800f494:	0800f56b 	.word	0x0800f56b
 800f498:	0800f56b 	.word	0x0800f56b
 800f49c:	0800f527 	.word	0x0800f527
 800f4a0:	0800f56b 	.word	0x0800f56b
 800f4a4:	0800f56b 	.word	0x0800f56b
 800f4a8:	0800f56b 	.word	0x0800f56b
 800f4ac:	0800f56b 	.word	0x0800f56b
 800f4b0:	0800f56b 	.word	0x0800f56b
 800f4b4:	0800f56b 	.word	0x0800f56b
 800f4b8:	0800f56b 	.word	0x0800f56b
 800f4bc:	0800f537 	.word	0x0800f537
 800f4c0:	0800f56b 	.word	0x0800f56b
 800f4c4:	0800f56b 	.word	0x0800f56b
 800f4c8:	0800f56b 	.word	0x0800f56b
 800f4cc:	0800f56b 	.word	0x0800f56b
 800f4d0:	0800f56b 	.word	0x0800f56b
 800f4d4:	0800f56b 	.word	0x0800f56b
 800f4d8:	0800f56b 	.word	0x0800f56b
 800f4dc:	0800f56b 	.word	0x0800f56b
 800f4e0:	0800f56b 	.word	0x0800f56b
 800f4e4:	0800f56b 	.word	0x0800f56b
 800f4e8:	0800f56b 	.word	0x0800f56b
 800f4ec:	0800f56b 	.word	0x0800f56b
 800f4f0:	0800f56b 	.word	0x0800f56b
 800f4f4:	0800f56b 	.word	0x0800f56b
 800f4f8:	0800f56b 	.word	0x0800f56b
 800f4fc:	0800f55d 	.word	0x0800f55d
 800f500:	2b40      	cmp	r3, #64	; 0x40
 800f502:	d02e      	beq.n	800f562 <UART_SetConfig+0x8aa>
 800f504:	e031      	b.n	800f56a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f506:	f7fa f81f 	bl	8009548 <HAL_RCC_GetPCLK1Freq>
 800f50a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f50c:	e033      	b.n	800f576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f50e:	f7fa f831 	bl	8009574 <HAL_RCC_GetPCLK2Freq>
 800f512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f514:	e02f      	b.n	800f576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fb ffe0 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f524:	e027      	b.n	800f576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f526:	f107 0318 	add.w	r3, r7, #24
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fc f92c 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f534:	e01f      	b.n	800f576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f536:	4b2d      	ldr	r3, [pc, #180]	; (800f5ec <UART_SetConfig+0x934>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f003 0320 	and.w	r3, r3, #32
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d009      	beq.n	800f556 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f542:	4b2a      	ldr	r3, [pc, #168]	; (800f5ec <UART_SetConfig+0x934>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	08db      	lsrs	r3, r3, #3
 800f548:	f003 0303 	and.w	r3, r3, #3
 800f54c:	4a24      	ldr	r2, [pc, #144]	; (800f5e0 <UART_SetConfig+0x928>)
 800f54e:	fa22 f303 	lsr.w	r3, r2, r3
 800f552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f554:	e00f      	b.n	800f576 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f556:	4b22      	ldr	r3, [pc, #136]	; (800f5e0 <UART_SetConfig+0x928>)
 800f558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f55a:	e00c      	b.n	800f576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f55c:	4b21      	ldr	r3, [pc, #132]	; (800f5e4 <UART_SetConfig+0x92c>)
 800f55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f560:	e009      	b.n	800f576 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f568:	e005      	b.n	800f576 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f56a:	2300      	movs	r3, #0
 800f56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f56e:	2301      	movs	r3, #1
 800f570:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f574:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f000 80e7 	beq.w	800f74c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f582:	4a19      	ldr	r2, [pc, #100]	; (800f5e8 <UART_SetConfig+0x930>)
 800f584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f588:	461a      	mov	r2, r3
 800f58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f590:	005a      	lsls	r2, r3, #1
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	085b      	lsrs	r3, r3, #1
 800f598:	441a      	add	r2, r3
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a6:	2b0f      	cmp	r3, #15
 800f5a8:	d916      	bls.n	800f5d8 <UART_SetConfig+0x920>
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5b0:	d212      	bcs.n	800f5d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	f023 030f 	bic.w	r3, r3, #15
 800f5ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	085b      	lsrs	r3, r3, #1
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	f003 0307 	and.w	r3, r3, #7
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5d4:	60da      	str	r2, [r3, #12]
 800f5d6:	e0b9      	b.n	800f74c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f5de:	e0b5      	b.n	800f74c <UART_SetConfig+0xa94>
 800f5e0:	03d09000 	.word	0x03d09000
 800f5e4:	003d0900 	.word	0x003d0900
 800f5e8:	08010e08 	.word	0x08010e08
 800f5ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f5f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5f4:	2b20      	cmp	r3, #32
 800f5f6:	dc49      	bgt.n	800f68c <UART_SetConfig+0x9d4>
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	db7c      	blt.n	800f6f6 <UART_SetConfig+0xa3e>
 800f5fc:	2b20      	cmp	r3, #32
 800f5fe:	d87a      	bhi.n	800f6f6 <UART_SetConfig+0xa3e>
 800f600:	a201      	add	r2, pc, #4	; (adr r2, 800f608 <UART_SetConfig+0x950>)
 800f602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f606:	bf00      	nop
 800f608:	0800f693 	.word	0x0800f693
 800f60c:	0800f69b 	.word	0x0800f69b
 800f610:	0800f6f7 	.word	0x0800f6f7
 800f614:	0800f6f7 	.word	0x0800f6f7
 800f618:	0800f6a3 	.word	0x0800f6a3
 800f61c:	0800f6f7 	.word	0x0800f6f7
 800f620:	0800f6f7 	.word	0x0800f6f7
 800f624:	0800f6f7 	.word	0x0800f6f7
 800f628:	0800f6b3 	.word	0x0800f6b3
 800f62c:	0800f6f7 	.word	0x0800f6f7
 800f630:	0800f6f7 	.word	0x0800f6f7
 800f634:	0800f6f7 	.word	0x0800f6f7
 800f638:	0800f6f7 	.word	0x0800f6f7
 800f63c:	0800f6f7 	.word	0x0800f6f7
 800f640:	0800f6f7 	.word	0x0800f6f7
 800f644:	0800f6f7 	.word	0x0800f6f7
 800f648:	0800f6c3 	.word	0x0800f6c3
 800f64c:	0800f6f7 	.word	0x0800f6f7
 800f650:	0800f6f7 	.word	0x0800f6f7
 800f654:	0800f6f7 	.word	0x0800f6f7
 800f658:	0800f6f7 	.word	0x0800f6f7
 800f65c:	0800f6f7 	.word	0x0800f6f7
 800f660:	0800f6f7 	.word	0x0800f6f7
 800f664:	0800f6f7 	.word	0x0800f6f7
 800f668:	0800f6f7 	.word	0x0800f6f7
 800f66c:	0800f6f7 	.word	0x0800f6f7
 800f670:	0800f6f7 	.word	0x0800f6f7
 800f674:	0800f6f7 	.word	0x0800f6f7
 800f678:	0800f6f7 	.word	0x0800f6f7
 800f67c:	0800f6f7 	.word	0x0800f6f7
 800f680:	0800f6f7 	.word	0x0800f6f7
 800f684:	0800f6f7 	.word	0x0800f6f7
 800f688:	0800f6e9 	.word	0x0800f6e9
 800f68c:	2b40      	cmp	r3, #64	; 0x40
 800f68e:	d02e      	beq.n	800f6ee <UART_SetConfig+0xa36>
 800f690:	e031      	b.n	800f6f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f692:	f7f9 ff59 	bl	8009548 <HAL_RCC_GetPCLK1Freq>
 800f696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f698:	e033      	b.n	800f702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f69a:	f7f9 ff6b 	bl	8009574 <HAL_RCC_GetPCLK2Freq>
 800f69e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6a0:	e02f      	b.n	800f702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fb ff1a 	bl	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6b0:	e027      	b.n	800f702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6b2:	f107 0318 	add.w	r3, r7, #24
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fc f866 	bl	800b788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c0:	e01f      	b.n	800f702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6c2:	4b2d      	ldr	r3, [pc, #180]	; (800f778 <UART_SetConfig+0xac0>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f003 0320 	and.w	r3, r3, #32
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d009      	beq.n	800f6e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6ce:	4b2a      	ldr	r3, [pc, #168]	; (800f778 <UART_SetConfig+0xac0>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	08db      	lsrs	r3, r3, #3
 800f6d4:	f003 0303 	and.w	r3, r3, #3
 800f6d8:	4a28      	ldr	r2, [pc, #160]	; (800f77c <UART_SetConfig+0xac4>)
 800f6da:	fa22 f303 	lsr.w	r3, r2, r3
 800f6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6e0:	e00f      	b.n	800f702 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f6e2:	4b26      	ldr	r3, [pc, #152]	; (800f77c <UART_SetConfig+0xac4>)
 800f6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e6:	e00c      	b.n	800f702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6e8:	4b25      	ldr	r3, [pc, #148]	; (800f780 <UART_SetConfig+0xac8>)
 800f6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ec:	e009      	b.n	800f702 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6f4:	e005      	b.n	800f702 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f700:	bf00      	nop
    }

    if (pclk != 0U)
 800f702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f704:	2b00      	cmp	r3, #0
 800f706:	d021      	beq.n	800f74c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70c:	4a1d      	ldr	r2, [pc, #116]	; (800f784 <UART_SetConfig+0xacc>)
 800f70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f712:	461a      	mov	r2, r3
 800f714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f716:	fbb3 f2f2 	udiv	r2, r3, r2
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	085b      	lsrs	r3, r3, #1
 800f720:	441a      	add	r2, r3
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	fbb2 f3f3 	udiv	r3, r2, r3
 800f72a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	2b0f      	cmp	r3, #15
 800f730:	d909      	bls.n	800f746 <UART_SetConfig+0xa8e>
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f738:	d205      	bcs.n	800f746 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	60da      	str	r2, [r3, #12]
 800f744:	e002      	b.n	800f74c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f746:	2301      	movs	r3, #1
 800f748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	2201      	movs	r2, #1
 800f750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2201      	movs	r2, #1
 800f758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	2200      	movs	r2, #0
 800f760:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2200      	movs	r2, #0
 800f766:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f768:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3748      	adds	r7, #72	; 0x48
 800f770:	46bd      	mov	sp, r7
 800f772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f776:	bf00      	nop
 800f778:	58024400 	.word	0x58024400
 800f77c:	03d09000 	.word	0x03d09000
 800f780:	003d0900 	.word	0x003d0900
 800f784:	08010e08 	.word	0x08010e08

0800f788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f794:	f003 0308 	and.w	r3, r3, #8
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00a      	beq.n	800f7b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b6:	f003 0301 	and.w	r3, r3, #1
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00a      	beq.n	800f7d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	430a      	orrs	r2, r1
 800f7d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d8:	f003 0302 	and.w	r3, r3, #2
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00a      	beq.n	800f7f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	430a      	orrs	r2, r1
 800f7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fa:	f003 0304 	and.w	r3, r3, #4
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00a      	beq.n	800f818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	430a      	orrs	r2, r1
 800f816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f81c:	f003 0310 	and.w	r3, r3, #16
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00a      	beq.n	800f83a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	430a      	orrs	r2, r1
 800f838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f83e:	f003 0320 	and.w	r3, r3, #32
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	430a      	orrs	r2, r1
 800f85a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f864:	2b00      	cmp	r3, #0
 800f866:	d01a      	beq.n	800f89e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	430a      	orrs	r2, r1
 800f87c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f886:	d10a      	bne.n	800f89e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	430a      	orrs	r2, r1
 800f89c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00a      	beq.n	800f8c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	430a      	orrs	r2, r1
 800f8be:	605a      	str	r2, [r3, #4]
  }
}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b098      	sub	sp, #96	; 0x60
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8dc:	f7f2 ff82 	bl	80027e4 <HAL_GetTick>
 800f8e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f003 0308 	and.w	r3, r3, #8
 800f8ec:	2b08      	cmp	r3, #8
 800f8ee:	d12f      	bne.n	800f950 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 f88e 	bl	800fa20 <UART_WaitOnFlagUntilTimeout>
 800f904:	4603      	mov	r3, r0
 800f906:	2b00      	cmp	r3, #0
 800f908:	d022      	beq.n	800f950 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f912:	e853 3f00 	ldrex	r3, [r3]
 800f916:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f91e:	653b      	str	r3, [r7, #80]	; 0x50
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	461a      	mov	r2, r3
 800f926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f928:	647b      	str	r3, [r7, #68]	; 0x44
 800f92a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f92e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f930:	e841 2300 	strex	r3, r2, [r1]
 800f934:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1e6      	bne.n	800f90a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2220      	movs	r2, #32
 800f940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f94c:	2303      	movs	r3, #3
 800f94e:	e063      	b.n	800fa18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f003 0304 	and.w	r3, r3, #4
 800f95a:	2b04      	cmp	r3, #4
 800f95c:	d149      	bne.n	800f9f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f95e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f966:	2200      	movs	r2, #0
 800f968:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f857 	bl	800fa20 <UART_WaitOnFlagUntilTimeout>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d03c      	beq.n	800f9f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	e853 3f00 	ldrex	r3, [r3]
 800f984:	623b      	str	r3, [r7, #32]
   return(result);
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f98c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f996:	633b      	str	r3, [r7, #48]	; 0x30
 800f998:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f99c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f99e:	e841 2300 	strex	r3, r2, [r1]
 800f9a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1e6      	bne.n	800f978 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	3308      	adds	r3, #8
 800f9b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	e853 3f00 	ldrex	r3, [r3]
 800f9b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f023 0301 	bic.w	r3, r3, #1
 800f9c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9ca:	61fa      	str	r2, [r7, #28]
 800f9cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ce:	69b9      	ldr	r1, [r7, #24]
 800f9d0:	69fa      	ldr	r2, [r7, #28]
 800f9d2:	e841 2300 	strex	r3, r2, [r1]
 800f9d6:	617b      	str	r3, [r7, #20]
   return(result);
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e5      	bne.n	800f9aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2220      	movs	r2, #32
 800f9e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e012      	b.n	800fa18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2220      	movs	r2, #32
 800f9f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2220      	movs	r2, #32
 800f9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3758      	adds	r7, #88	; 0x58
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	603b      	str	r3, [r7, #0]
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa30:	e04f      	b.n	800fad2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa38:	d04b      	beq.n	800fad2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa3a:	f7f2 fed3 	bl	80027e4 <HAL_GetTick>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	69ba      	ldr	r2, [r7, #24]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d302      	bcc.n	800fa50 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa50:	2303      	movs	r3, #3
 800fa52:	e04e      	b.n	800faf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f003 0304 	and.w	r3, r3, #4
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d037      	beq.n	800fad2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2b80      	cmp	r3, #128	; 0x80
 800fa66:	d034      	beq.n	800fad2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2b40      	cmp	r3, #64	; 0x40
 800fa6c:	d031      	beq.n	800fad2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	f003 0308 	and.w	r3, r3, #8
 800fa78:	2b08      	cmp	r3, #8
 800fa7a:	d110      	bne.n	800fa9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2208      	movs	r2, #8
 800fa82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f000 f95b 	bl	800fd40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2208      	movs	r2, #8
 800fa8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2200      	movs	r2, #0
 800fa96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e029      	b.n	800faf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800faa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800faac:	d111      	bne.n	800fad2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f000 f941 	bl	800fd40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2220      	movs	r2, #32
 800fac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800face:	2303      	movs	r3, #3
 800fad0:	e00f      	b.n	800faf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	69da      	ldr	r2, [r3, #28]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	4013      	ands	r3, r2
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	429a      	cmp	r2, r3
 800fae0:	bf0c      	ite	eq
 800fae2:	2301      	moveq	r3, #1
 800fae4:	2300      	movne	r3, #0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	461a      	mov	r2, r3
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	429a      	cmp	r2, r3
 800faee:	d0a0      	beq.n	800fa32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
	...

0800fafc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b0a3      	sub	sp, #140	; 0x8c
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	4613      	mov	r3, r2
 800fb08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	68ba      	ldr	r2, [r7, #8]
 800fb0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	88fa      	ldrh	r2, [r7, #6]
 800fb14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	88fa      	ldrh	r2, [r7, #6]
 800fb1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2200      	movs	r2, #0
 800fb24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb2e:	d10e      	bne.n	800fb4e <UART_Start_Receive_IT+0x52>
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d105      	bne.n	800fb44 <UART_Start_Receive_IT+0x48>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb42:	e02d      	b.n	800fba0 <UART_Start_Receive_IT+0xa4>
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	22ff      	movs	r2, #255	; 0xff
 800fb48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb4c:	e028      	b.n	800fba0 <UART_Start_Receive_IT+0xa4>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10d      	bne.n	800fb72 <UART_Start_Receive_IT+0x76>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d104      	bne.n	800fb68 <UART_Start_Receive_IT+0x6c>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	22ff      	movs	r2, #255	; 0xff
 800fb62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb66:	e01b      	b.n	800fba0 <UART_Start_Receive_IT+0xa4>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	227f      	movs	r2, #127	; 0x7f
 800fb6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb70:	e016      	b.n	800fba0 <UART_Start_Receive_IT+0xa4>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb7a:	d10d      	bne.n	800fb98 <UART_Start_Receive_IT+0x9c>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d104      	bne.n	800fb8e <UART_Start_Receive_IT+0x92>
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	227f      	movs	r2, #127	; 0x7f
 800fb88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb8c:	e008      	b.n	800fba0 <UART_Start_Receive_IT+0xa4>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	223f      	movs	r2, #63	; 0x3f
 800fb92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb96:	e003      	b.n	800fba0 <UART_Start_Receive_IT+0xa4>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2222      	movs	r2, #34	; 0x22
 800fbac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3308      	adds	r3, #8
 800fbb6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbba:	e853 3f00 	ldrex	r3, [r3]
 800fbbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fbc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbc2:	f043 0301 	orr.w	r3, r3, #1
 800fbc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fbd4:	673a      	str	r2, [r7, #112]	; 0x70
 800fbd6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fbda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbdc:	e841 2300 	strex	r3, r2, [r1]
 800fbe0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fbe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1e3      	bne.n	800fbb0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbf0:	d14f      	bne.n	800fc92 <UART_Start_Receive_IT+0x196>
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fbf8:	88fa      	ldrh	r2, [r7, #6]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d349      	bcc.n	800fc92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc06:	d107      	bne.n	800fc18 <UART_Start_Receive_IT+0x11c>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d103      	bne.n	800fc18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	4a47      	ldr	r2, [pc, #284]	; (800fd30 <UART_Start_Receive_IT+0x234>)
 800fc14:	675a      	str	r2, [r3, #116]	; 0x74
 800fc16:	e002      	b.n	800fc1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4a46      	ldr	r2, [pc, #280]	; (800fd34 <UART_Start_Receive_IT+0x238>)
 800fc1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d01a      	beq.n	800fc5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2e:	e853 3f00 	ldrex	r3, [r3]
 800fc32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fc34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc50:	e841 2300 	strex	r3, r2, [r1]
 800fc54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fc56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1e4      	bne.n	800fc26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	3308      	adds	r3, #8
 800fc62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc66:	e853 3f00 	ldrex	r3, [r3]
 800fc6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc72:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	3308      	adds	r3, #8
 800fc7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fc7c:	64ba      	str	r2, [r7, #72]	; 0x48
 800fc7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc84:	e841 2300 	strex	r3, r2, [r1]
 800fc88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1e5      	bne.n	800fc5c <UART_Start_Receive_IT+0x160>
 800fc90:	e046      	b.n	800fd20 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc9a:	d107      	bne.n	800fcac <UART_Start_Receive_IT+0x1b0>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	691b      	ldr	r3, [r3, #16]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d103      	bne.n	800fcac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4a24      	ldr	r2, [pc, #144]	; (800fd38 <UART_Start_Receive_IT+0x23c>)
 800fca8:	675a      	str	r2, [r3, #116]	; 0x74
 800fcaa:	e002      	b.n	800fcb2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	4a23      	ldr	r2, [pc, #140]	; (800fd3c <UART_Start_Receive_IT+0x240>)
 800fcb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d019      	beq.n	800fcee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	e853 3f00 	ldrex	r3, [r3]
 800fcc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fcce:	677b      	str	r3, [r7, #116]	; 0x74
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcd8:	637b      	str	r3, [r7, #52]	; 0x34
 800fcda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fce0:	e841 2300 	strex	r3, r2, [r1]
 800fce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1e6      	bne.n	800fcba <UART_Start_Receive_IT+0x1be>
 800fcec:	e018      	b.n	800fd20 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	e853 3f00 	ldrex	r3, [r3]
 800fcfa:	613b      	str	r3, [r7, #16]
   return(result);
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	f043 0320 	orr.w	r3, r3, #32
 800fd02:	67bb      	str	r3, [r7, #120]	; 0x78
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd0c:	623b      	str	r3, [r7, #32]
 800fd0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	69f9      	ldr	r1, [r7, #28]
 800fd12:	6a3a      	ldr	r2, [r7, #32]
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e6      	bne.n	800fcee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	378c      	adds	r7, #140	; 0x8c
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	08010561 	.word	0x08010561
 800fd34:	08010201 	.word	0x08010201
 800fd38:	08010049 	.word	0x08010049
 800fd3c:	0800fe91 	.word	0x0800fe91

0800fd40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b095      	sub	sp, #84	; 0x54
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd50:	e853 3f00 	ldrex	r3, [r3]
 800fd54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd66:	643b      	str	r3, [r7, #64]	; 0x40
 800fd68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd6e:	e841 2300 	strex	r3, r2, [r1]
 800fd72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d1e6      	bne.n	800fd48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	3308      	adds	r3, #8
 800fd80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd82:	6a3b      	ldr	r3, [r7, #32]
 800fd84:	e853 3f00 	ldrex	r3, [r3]
 800fd88:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd8a:	69fa      	ldr	r2, [r7, #28]
 800fd8c:	4b1e      	ldr	r3, [pc, #120]	; (800fe08 <UART_EndRxTransfer+0xc8>)
 800fd8e:	4013      	ands	r3, r2
 800fd90:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3308      	adds	r3, #8
 800fd98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fda0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda2:	e841 2300 	strex	r3, r2, [r1]
 800fda6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1e5      	bne.n	800fd7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d118      	bne.n	800fde8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	e853 3f00 	ldrex	r3, [r3]
 800fdc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	f023 0310 	bic.w	r3, r3, #16
 800fdca:	647b      	str	r3, [r7, #68]	; 0x44
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdd4:	61bb      	str	r3, [r7, #24]
 800fdd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd8:	6979      	ldr	r1, [r7, #20]
 800fdda:	69ba      	ldr	r2, [r7, #24]
 800fddc:	e841 2300 	strex	r3, r2, [r1]
 800fde0:	613b      	str	r3, [r7, #16]
   return(result);
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1e6      	bne.n	800fdb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2220      	movs	r2, #32
 800fdec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fdfc:	bf00      	nop
 800fdfe:	3754      	adds	r7, #84	; 0x54
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	effffffe 	.word	0xeffffffe

0800fe0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	f7fe ff2e 	bl	800ec8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe30:	bf00      	nop
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b088      	sub	sp, #32
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	e853 3f00 	ldrex	r3, [r3]
 800fe4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe54:	61fb      	str	r3, [r7, #28]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	61bb      	str	r3, [r7, #24]
 800fe60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe62:	6979      	ldr	r1, [r7, #20]
 800fe64:	69ba      	ldr	r2, [r7, #24]
 800fe66:	e841 2300 	strex	r3, r2, [r1]
 800fe6a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1e6      	bne.n	800fe40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2220      	movs	r2, #32
 800fe76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7fe fef9 	bl	800ec78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe86:	bf00      	nop
 800fe88:	3720      	adds	r7, #32
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b09c      	sub	sp, #112	; 0x70
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fea8:	2b22      	cmp	r3, #34	; 0x22
 800feaa:	f040 80be 	bne.w	801002a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800feb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800febc:	b2d9      	uxtb	r1, r3
 800febe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fec2:	b2da      	uxtb	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fec8:	400a      	ands	r2, r1
 800feca:	b2d2      	uxtb	r2, r2
 800fecc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fede:	b29b      	uxth	r3, r3
 800fee0:	3b01      	subs	r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f040 80a1 	bne.w	801003a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff00:	e853 3f00 	ldrex	r3, [r3]
 800ff04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff16:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff1e:	e841 2300 	strex	r3, r2, [r1]
 800ff22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1e6      	bne.n	800fef8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3308      	adds	r3, #8
 800ff30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	e853 3f00 	ldrex	r3, [r3]
 800ff38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3c:	f023 0301 	bic.w	r3, r3, #1
 800ff40:	667b      	str	r3, [r7, #100]	; 0x64
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	3308      	adds	r3, #8
 800ff48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff4a:	647a      	str	r2, [r7, #68]	; 0x44
 800ff4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff52:	e841 2300 	strex	r3, r2, [r1]
 800ff56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1e5      	bne.n	800ff2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2220      	movs	r2, #32
 800ff62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a33      	ldr	r2, [pc, #204]	; (8010044 <UART_RxISR_8BIT+0x1b4>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d01f      	beq.n	800ffbc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d018      	beq.n	800ffbc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	e853 3f00 	ldrex	r3, [r3]
 800ff96:	623b      	str	r3, [r7, #32]
   return(result);
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ff9e:	663b      	str	r3, [r7, #96]	; 0x60
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffa8:	633b      	str	r3, [r7, #48]	; 0x30
 800ffaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffb0:	e841 2300 	strex	r3, r2, [r1]
 800ffb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ffb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d1e6      	bne.n	800ff8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d12e      	bne.n	8010022 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	e853 3f00 	ldrex	r3, [r3]
 800ffd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f023 0310 	bic.w	r3, r3, #16
 800ffde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffe8:	61fb      	str	r3, [r7, #28]
 800ffea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffec:	69b9      	ldr	r1, [r7, #24]
 800ffee:	69fa      	ldr	r2, [r7, #28]
 800fff0:	e841 2300 	strex	r3, r2, [r1]
 800fff4:	617b      	str	r3, [r7, #20]
   return(result);
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1e6      	bne.n	800ffca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	69db      	ldr	r3, [r3, #28]
 8010002:	f003 0310 	and.w	r3, r3, #16
 8010006:	2b10      	cmp	r3, #16
 8010008:	d103      	bne.n	8010012 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2210      	movs	r2, #16
 8010010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f7fe fe40 	bl	800eca0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010020:	e00b      	b.n	801003a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7f0 fe42 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 8010028:	e007      	b.n	801003a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	699a      	ldr	r2, [r3, #24]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f042 0208 	orr.w	r2, r2, #8
 8010038:	619a      	str	r2, [r3, #24]
}
 801003a:	bf00      	nop
 801003c:	3770      	adds	r7, #112	; 0x70
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	58000c00 	.word	0x58000c00

08010048 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b09c      	sub	sp, #112	; 0x70
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010056:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010060:	2b22      	cmp	r3, #34	; 0x22
 8010062:	f040 80be 	bne.w	80101e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010074:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010076:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801007a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801007e:	4013      	ands	r3, r2
 8010080:	b29a      	uxth	r2, r3
 8010082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010084:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801008a:	1c9a      	adds	r2, r3, #2
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010096:	b29b      	uxth	r3, r3
 8010098:	3b01      	subs	r3, #1
 801009a:	b29a      	uxth	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f040 80a1 	bne.w	80101f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100b8:	e853 3f00 	ldrex	r3, [r3]
 80100bc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80100be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100c4:	667b      	str	r3, [r7, #100]	; 0x64
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	461a      	mov	r2, r3
 80100cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100ce:	657b      	str	r3, [r7, #84]	; 0x54
 80100d0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100d6:	e841 2300 	strex	r3, r2, [r1]
 80100da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1e6      	bne.n	80100b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3308      	adds	r3, #8
 80100e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	e853 3f00 	ldrex	r3, [r3]
 80100f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f4:	f023 0301 	bic.w	r3, r3, #1
 80100f8:	663b      	str	r3, [r7, #96]	; 0x60
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3308      	adds	r3, #8
 8010100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010102:	643a      	str	r2, [r7, #64]	; 0x40
 8010104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801010a:	e841 2300 	strex	r3, r2, [r1]
 801010e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1e5      	bne.n	80100e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2220      	movs	r2, #32
 801011a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4a33      	ldr	r2, [pc, #204]	; (80101fc <UART_RxISR_16BIT+0x1b4>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d01f      	beq.n	8010174 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801013e:	2b00      	cmp	r3, #0
 8010140:	d018      	beq.n	8010174 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	e853 3f00 	ldrex	r3, [r3]
 801014e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	461a      	mov	r2, r3
 801015e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010162:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010168:	e841 2300 	strex	r3, r2, [r1]
 801016c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1e6      	bne.n	8010142 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010178:	2b01      	cmp	r3, #1
 801017a:	d12e      	bne.n	80101da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	e853 3f00 	ldrex	r3, [r3]
 801018e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	f023 0310 	bic.w	r3, r3, #16
 8010196:	65bb      	str	r3, [r7, #88]	; 0x58
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	461a      	mov	r2, r3
 801019e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101a0:	61bb      	str	r3, [r7, #24]
 80101a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a4:	6979      	ldr	r1, [r7, #20]
 80101a6:	69ba      	ldr	r2, [r7, #24]
 80101a8:	e841 2300 	strex	r3, r2, [r1]
 80101ac:	613b      	str	r3, [r7, #16]
   return(result);
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1e6      	bne.n	8010182 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	69db      	ldr	r3, [r3, #28]
 80101ba:	f003 0310 	and.w	r3, r3, #16
 80101be:	2b10      	cmp	r3, #16
 80101c0:	d103      	bne.n	80101ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2210      	movs	r2, #16
 80101c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7fe fd64 	bl	800eca0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101d8:	e00b      	b.n	80101f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7f0 fd66 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 80101e0:	e007      	b.n	80101f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	699a      	ldr	r2, [r3, #24]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f042 0208 	orr.w	r2, r2, #8
 80101f0:	619a      	str	r2, [r3, #24]
}
 80101f2:	bf00      	nop
 80101f4:	3770      	adds	r7, #112	; 0x70
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	58000c00 	.word	0x58000c00

08010200 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b0ac      	sub	sp, #176	; 0xb0
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801020e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	69db      	ldr	r3, [r3, #28]
 8010218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010236:	2b22      	cmp	r3, #34	; 0x22
 8010238:	f040 8180 	bne.w	801053c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010242:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010246:	e123      	b.n	8010490 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010252:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010256:	b2d9      	uxtb	r1, r3
 8010258:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801025c:	b2da      	uxtb	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010262:	400a      	ands	r2, r1
 8010264:	b2d2      	uxtb	r2, r2
 8010266:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801026c:	1c5a      	adds	r2, r3, #1
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010278:	b29b      	uxth	r3, r3
 801027a:	3b01      	subs	r3, #1
 801027c:	b29a      	uxth	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	69db      	ldr	r3, [r3, #28]
 801028a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801028e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010292:	f003 0307 	and.w	r3, r3, #7
 8010296:	2b00      	cmp	r3, #0
 8010298:	d053      	beq.n	8010342 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801029a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801029e:	f003 0301 	and.w	r3, r3, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d011      	beq.n	80102ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80102a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00b      	beq.n	80102ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2201      	movs	r2, #1
 80102b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102c0:	f043 0201 	orr.w	r2, r3, #1
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102ce:	f003 0302 	and.w	r3, r3, #2
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d011      	beq.n	80102fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80102d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102da:	f003 0301 	and.w	r3, r3, #1
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00b      	beq.n	80102fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2202      	movs	r2, #2
 80102e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f0:	f043 0204 	orr.w	r2, r3, #4
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102fe:	f003 0304 	and.w	r3, r3, #4
 8010302:	2b00      	cmp	r3, #0
 8010304:	d011      	beq.n	801032a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801030a:	f003 0301 	and.w	r3, r3, #1
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00b      	beq.n	801032a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2204      	movs	r2, #4
 8010318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010320:	f043 0202 	orr.w	r2, r3, #2
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7fe fca9 	bl	800ec8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010348:	b29b      	uxth	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	f040 80a0 	bne.w	8010490 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010358:	e853 3f00 	ldrex	r3, [r3]
 801035c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801035e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	461a      	mov	r2, r3
 801036e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010372:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010374:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010376:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010378:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801037a:	e841 2300 	strex	r3, r2, [r1]
 801037e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010382:	2b00      	cmp	r3, #0
 8010384:	d1e4      	bne.n	8010350 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	3308      	adds	r3, #8
 801038c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801038e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010390:	e853 3f00 	ldrex	r3, [r3]
 8010394:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010398:	4b6e      	ldr	r3, [pc, #440]	; (8010554 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801039a:	4013      	ands	r3, r2
 801039c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	3308      	adds	r3, #8
 80103a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103aa:	66ba      	str	r2, [r7, #104]	; 0x68
 80103ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80103b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103b2:	e841 2300 	strex	r3, r2, [r1]
 80103b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80103b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1e3      	bne.n	8010386 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2220      	movs	r2, #32
 80103c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4a60      	ldr	r2, [pc, #384]	; (8010558 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d021      	beq.n	8010420 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d01a      	beq.n	8010420 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103f2:	e853 3f00 	ldrex	r3, [r3]
 80103f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80103fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	461a      	mov	r2, r3
 8010408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801040c:	657b      	str	r3, [r7, #84]	; 0x54
 801040e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010410:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010412:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010414:	e841 2300 	strex	r3, r2, [r1]
 8010418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801041a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e4      	bne.n	80103ea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010424:	2b01      	cmp	r3, #1
 8010426:	d130      	bne.n	801048a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2200      	movs	r2, #0
 801042c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010436:	e853 3f00 	ldrex	r3, [r3]
 801043a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	f023 0310 	bic.w	r3, r3, #16
 8010442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010450:	643b      	str	r3, [r7, #64]	; 0x40
 8010452:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010458:	e841 2300 	strex	r3, r2, [r1]
 801045c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801045e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1e4      	bne.n	801042e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	69db      	ldr	r3, [r3, #28]
 801046a:	f003 0310 	and.w	r3, r3, #16
 801046e:	2b10      	cmp	r3, #16
 8010470:	d103      	bne.n	801047a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2210      	movs	r2, #16
 8010478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010480:	4619      	mov	r1, r3
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7fe fc0c 	bl	800eca0 <HAL_UARTEx_RxEventCallback>
 8010488:	e002      	b.n	8010490 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7f0 fc0e 	bl	8000cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010490:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010494:	2b00      	cmp	r3, #0
 8010496:	d006      	beq.n	80104a6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801049c:	f003 0320 	and.w	r3, r3, #32
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f47f aed1 	bne.w	8010248 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80104b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d049      	beq.n	801054c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d242      	bcs.n	801054c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80104dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	3308      	adds	r3, #8
 80104e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80104ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80104ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104f2:	e841 2300 	strex	r3, r2, [r1]
 80104f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d1e3      	bne.n	80104c6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a16      	ldr	r2, [pc, #88]	; (801055c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010502:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	e853 3f00 	ldrex	r3, [r3]
 8010510:	60bb      	str	r3, [r7, #8]
   return(result);
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	f043 0320 	orr.w	r3, r3, #32
 8010518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	461a      	mov	r2, r3
 8010522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010526:	61bb      	str	r3, [r7, #24]
 8010528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801052a:	6979      	ldr	r1, [r7, #20]
 801052c:	69ba      	ldr	r2, [r7, #24]
 801052e:	e841 2300 	strex	r3, r2, [r1]
 8010532:	613b      	str	r3, [r7, #16]
   return(result);
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1e4      	bne.n	8010504 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801053a:	e007      	b.n	801054c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	699a      	ldr	r2, [r3, #24]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f042 0208 	orr.w	r2, r2, #8
 801054a:	619a      	str	r2, [r3, #24]
}
 801054c:	bf00      	nop
 801054e:	37b0      	adds	r7, #176	; 0xb0
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	effffffe 	.word	0xeffffffe
 8010558:	58000c00 	.word	0x58000c00
 801055c:	0800fe91 	.word	0x0800fe91

08010560 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b0ae      	sub	sp, #184	; 0xb8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801056e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	69db      	ldr	r3, [r3, #28]
 8010578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010596:	2b22      	cmp	r3, #34	; 0x22
 8010598:	f040 8184 	bne.w	80108a4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105a6:	e127      	b.n	80107f8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80105ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80105be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80105c2:	4013      	ands	r3, r2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105d0:	1c9a      	adds	r2, r3, #2
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105dc:	b29b      	uxth	r3, r3
 80105de:	3b01      	subs	r3, #1
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	69db      	ldr	r3, [r3, #28]
 80105ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80105f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105f6:	f003 0307 	and.w	r3, r3, #7
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d053      	beq.n	80106a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010602:	f003 0301 	and.w	r3, r3, #1
 8010606:	2b00      	cmp	r3, #0
 8010608:	d011      	beq.n	801062e <UART_RxISR_16BIT_FIFOEN+0xce>
 801060a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00b      	beq.n	801062e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2201      	movs	r2, #1
 801061c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010624:	f043 0201 	orr.w	r2, r3, #1
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801062e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010632:	f003 0302 	and.w	r3, r3, #2
 8010636:	2b00      	cmp	r3, #0
 8010638:	d011      	beq.n	801065e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801063a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801063e:	f003 0301 	and.w	r3, r3, #1
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00b      	beq.n	801065e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2202      	movs	r2, #2
 801064c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010654:	f043 0204 	orr.w	r2, r3, #4
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801065e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010662:	f003 0304 	and.w	r3, r3, #4
 8010666:	2b00      	cmp	r3, #0
 8010668:	d011      	beq.n	801068e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801066a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801066e:	f003 0301 	and.w	r3, r3, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00b      	beq.n	801068e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2204      	movs	r2, #4
 801067c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010684:	f043 0202 	orr.w	r2, r3, #2
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010694:	2b00      	cmp	r3, #0
 8010696:	d006      	beq.n	80106a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7fe faf7 	bl	800ec8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f040 80a2 	bne.w	80107f8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106bc:	e853 3f00 	ldrex	r3, [r3]
 80106c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80106c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	461a      	mov	r2, r3
 80106d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80106d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80106de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80106e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e2      	bne.n	80106b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	3308      	adds	r3, #8
 80106f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106f8:	e853 3f00 	ldrex	r3, [r3]
 80106fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80106fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010700:	4b6e      	ldr	r3, [pc, #440]	; (80108bc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010702:	4013      	ands	r3, r2
 8010704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3308      	adds	r3, #8
 801070e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010712:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010714:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010716:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801071a:	e841 2300 	strex	r3, r2, [r1]
 801071e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010722:	2b00      	cmp	r3, #0
 8010724:	d1e3      	bne.n	80106ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2220      	movs	r2, #32
 801072a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	4a60      	ldr	r2, [pc, #384]	; (80108c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010740:	4293      	cmp	r3, r2
 8010742:	d021      	beq.n	8010788 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801074e:	2b00      	cmp	r3, #0
 8010750:	d01a      	beq.n	8010788 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801075a:	e853 3f00 	ldrex	r3, [r3]
 801075e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	461a      	mov	r2, r3
 8010770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010774:	65bb      	str	r3, [r7, #88]	; 0x58
 8010776:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801077a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801077c:	e841 2300 	strex	r3, r2, [r1]
 8010780:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1e4      	bne.n	8010752 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801078c:	2b01      	cmp	r3, #1
 801078e:	d130      	bne.n	80107f2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079e:	e853 3f00 	ldrex	r3, [r3]
 80107a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a6:	f023 0310 	bic.w	r3, r3, #16
 80107aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	461a      	mov	r2, r3
 80107b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107b8:	647b      	str	r3, [r7, #68]	; 0x44
 80107ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107c0:	e841 2300 	strex	r3, r2, [r1]
 80107c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80107c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1e4      	bne.n	8010796 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	f003 0310 	and.w	r3, r3, #16
 80107d6:	2b10      	cmp	r3, #16
 80107d8:	d103      	bne.n	80107e2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2210      	movs	r2, #16
 80107e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107e8:	4619      	mov	r1, r3
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7fe fa58 	bl	800eca0 <HAL_UARTEx_RxEventCallback>
 80107f0:	e002      	b.n	80107f8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f7f0 fa5a 	bl	8000cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80107f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d006      	beq.n	801080e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010800:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010804:	f003 0320 	and.w	r3, r3, #32
 8010808:	2b00      	cmp	r3, #0
 801080a:	f47f aecd 	bne.w	80105a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010814:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010818:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801081c:	2b00      	cmp	r3, #0
 801081e:	d049      	beq.n	80108b4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010826:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801082a:	429a      	cmp	r2, r3
 801082c:	d242      	bcs.n	80108b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	3308      	adds	r3, #8
 8010834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010838:	e853 3f00 	ldrex	r3, [r3]
 801083c:	623b      	str	r3, [r7, #32]
   return(result);
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3308      	adds	r3, #8
 801084e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010852:	633a      	str	r2, [r7, #48]	; 0x30
 8010854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801085a:	e841 2300 	strex	r3, r2, [r1]
 801085e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	2b00      	cmp	r3, #0
 8010864:	d1e3      	bne.n	801082e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4a16      	ldr	r2, [pc, #88]	; (80108c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801086a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	e853 3f00 	ldrex	r3, [r3]
 8010878:	60fb      	str	r3, [r7, #12]
   return(result);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f043 0320 	orr.w	r3, r3, #32
 8010880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	461a      	mov	r2, r3
 801088a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801088e:	61fb      	str	r3, [r7, #28]
 8010890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010892:	69b9      	ldr	r1, [r7, #24]
 8010894:	69fa      	ldr	r2, [r7, #28]
 8010896:	e841 2300 	strex	r3, r2, [r1]
 801089a:	617b      	str	r3, [r7, #20]
   return(result);
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1e4      	bne.n	801086c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108a2:	e007      	b.n	80108b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	699a      	ldr	r2, [r3, #24]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f042 0208 	orr.w	r2, r2, #8
 80108b2:	619a      	str	r2, [r3, #24]
}
 80108b4:	bf00      	nop
 80108b6:	37b8      	adds	r7, #184	; 0xb8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	effffffe 	.word	0xeffffffe
 80108c0:	58000c00 	.word	0x58000c00
 80108c4:	08010049 	.word	0x08010049

080108c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80108e4:	bf00      	nop
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr

080108f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80108f8:	bf00      	nop
 80108fa:	370c      	adds	r7, #12
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010912:	2b01      	cmp	r3, #1
 8010914:	d101      	bne.n	801091a <HAL_UARTEx_DisableFifoMode+0x16>
 8010916:	2302      	movs	r3, #2
 8010918:	e027      	b.n	801096a <HAL_UARTEx_DisableFifoMode+0x66>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2224      	movs	r2, #36	; 0x24
 8010926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f022 0201 	bic.w	r2, r2, #1
 8010940:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010948:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2200      	movs	r2, #0
 801094e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2220      	movs	r2, #32
 801095c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010968:	2300      	movs	r3, #0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3714      	adds	r7, #20
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b084      	sub	sp, #16
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010986:	2b01      	cmp	r3, #1
 8010988:	d101      	bne.n	801098e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801098a:	2302      	movs	r3, #2
 801098c:	e02d      	b.n	80109ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2201      	movs	r2, #1
 8010992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2224      	movs	r2, #36	; 0x24
 801099a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f022 0201 	bic.w	r2, r2, #1
 80109b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	683a      	ldr	r2, [r7, #0]
 80109c6:	430a      	orrs	r2, r1
 80109c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 f850 	bl	8010a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2220      	movs	r2, #32
 80109dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}

080109f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109f2:	b580      	push	{r7, lr}
 80109f4:	b084      	sub	sp, #16
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
 80109fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d101      	bne.n	8010a0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a06:	2302      	movs	r3, #2
 8010a08:	e02d      	b.n	8010a66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2224      	movs	r2, #36	; 0x24
 8010a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f022 0201 	bic.w	r2, r2, #1
 8010a30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	689b      	ldr	r3, [r3, #8]
 8010a38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	683a      	ldr	r2, [r7, #0]
 8010a42:	430a      	orrs	r2, r1
 8010a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f812 	bl	8010a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2220      	movs	r2, #32
 8010a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
	...

08010a70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d108      	bne.n	8010a92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a90:	e031      	b.n	8010af6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a92:	2310      	movs	r3, #16
 8010a94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a96:	2310      	movs	r3, #16
 8010a98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	0e5b      	lsrs	r3, r3, #25
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	f003 0307 	and.w	r3, r3, #7
 8010aa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	0f5b      	lsrs	r3, r3, #29
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	f003 0307 	and.w	r3, r3, #7
 8010ab8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010aba:	7bbb      	ldrb	r3, [r7, #14]
 8010abc:	7b3a      	ldrb	r2, [r7, #12]
 8010abe:	4911      	ldr	r1, [pc, #68]	; (8010b04 <UARTEx_SetNbDataToProcess+0x94>)
 8010ac0:	5c8a      	ldrb	r2, [r1, r2]
 8010ac2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010ac6:	7b3a      	ldrb	r2, [r7, #12]
 8010ac8:	490f      	ldr	r1, [pc, #60]	; (8010b08 <UARTEx_SetNbDataToProcess+0x98>)
 8010aca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ad8:	7bfb      	ldrb	r3, [r7, #15]
 8010ada:	7b7a      	ldrb	r2, [r7, #13]
 8010adc:	4909      	ldr	r1, [pc, #36]	; (8010b04 <UARTEx_SetNbDataToProcess+0x94>)
 8010ade:	5c8a      	ldrb	r2, [r1, r2]
 8010ae0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010ae4:	7b7a      	ldrb	r2, [r7, #13]
 8010ae6:	4908      	ldr	r1, [pc, #32]	; (8010b08 <UARTEx_SetNbDataToProcess+0x98>)
 8010ae8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010af6:	bf00      	nop
 8010af8:	3714      	adds	r7, #20
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	08010e20 	.word	0x08010e20
 8010b08:	08010e28 	.word	0x08010e28

08010b0c <malloc>:
 8010b0c:	4b02      	ldr	r3, [pc, #8]	; (8010b18 <malloc+0xc>)
 8010b0e:	4601      	mov	r1, r0
 8010b10:	6818      	ldr	r0, [r3, #0]
 8010b12:	f000 b82b 	b.w	8010b6c <_malloc_r>
 8010b16:	bf00      	nop
 8010b18:	240000e0 	.word	0x240000e0

08010b1c <free>:
 8010b1c:	4b02      	ldr	r3, [pc, #8]	; (8010b28 <free+0xc>)
 8010b1e:	4601      	mov	r1, r0
 8010b20:	6818      	ldr	r0, [r3, #0]
 8010b22:	f000 b901 	b.w	8010d28 <_free_r>
 8010b26:	bf00      	nop
 8010b28:	240000e0 	.word	0x240000e0

08010b2c <sbrk_aligned>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	4e0e      	ldr	r6, [pc, #56]	; (8010b68 <sbrk_aligned+0x3c>)
 8010b30:	460c      	mov	r4, r1
 8010b32:	6831      	ldr	r1, [r6, #0]
 8010b34:	4605      	mov	r5, r0
 8010b36:	b911      	cbnz	r1, 8010b3e <sbrk_aligned+0x12>
 8010b38:	f000 f8ac 	bl	8010c94 <_sbrk_r>
 8010b3c:	6030      	str	r0, [r6, #0]
 8010b3e:	4621      	mov	r1, r4
 8010b40:	4628      	mov	r0, r5
 8010b42:	f000 f8a7 	bl	8010c94 <_sbrk_r>
 8010b46:	1c43      	adds	r3, r0, #1
 8010b48:	d00a      	beq.n	8010b60 <sbrk_aligned+0x34>
 8010b4a:	1cc4      	adds	r4, r0, #3
 8010b4c:	f024 0403 	bic.w	r4, r4, #3
 8010b50:	42a0      	cmp	r0, r4
 8010b52:	d007      	beq.n	8010b64 <sbrk_aligned+0x38>
 8010b54:	1a21      	subs	r1, r4, r0
 8010b56:	4628      	mov	r0, r5
 8010b58:	f000 f89c 	bl	8010c94 <_sbrk_r>
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	d101      	bne.n	8010b64 <sbrk_aligned+0x38>
 8010b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010b64:	4620      	mov	r0, r4
 8010b66:	bd70      	pop	{r4, r5, r6, pc}
 8010b68:	240006ac 	.word	0x240006ac

08010b6c <_malloc_r>:
 8010b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b70:	1ccd      	adds	r5, r1, #3
 8010b72:	f025 0503 	bic.w	r5, r5, #3
 8010b76:	3508      	adds	r5, #8
 8010b78:	2d0c      	cmp	r5, #12
 8010b7a:	bf38      	it	cc
 8010b7c:	250c      	movcc	r5, #12
 8010b7e:	2d00      	cmp	r5, #0
 8010b80:	4607      	mov	r7, r0
 8010b82:	db01      	blt.n	8010b88 <_malloc_r+0x1c>
 8010b84:	42a9      	cmp	r1, r5
 8010b86:	d905      	bls.n	8010b94 <_malloc_r+0x28>
 8010b88:	230c      	movs	r3, #12
 8010b8a:	603b      	str	r3, [r7, #0]
 8010b8c:	2600      	movs	r6, #0
 8010b8e:	4630      	mov	r0, r6
 8010b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010c68 <_malloc_r+0xfc>
 8010b98:	f000 f868 	bl	8010c6c <__malloc_lock>
 8010b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba0:	461c      	mov	r4, r3
 8010ba2:	bb5c      	cbnz	r4, 8010bfc <_malloc_r+0x90>
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	4638      	mov	r0, r7
 8010ba8:	f7ff ffc0 	bl	8010b2c <sbrk_aligned>
 8010bac:	1c43      	adds	r3, r0, #1
 8010bae:	4604      	mov	r4, r0
 8010bb0:	d155      	bne.n	8010c5e <_malloc_r+0xf2>
 8010bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8010bb6:	4626      	mov	r6, r4
 8010bb8:	2e00      	cmp	r6, #0
 8010bba:	d145      	bne.n	8010c48 <_malloc_r+0xdc>
 8010bbc:	2c00      	cmp	r4, #0
 8010bbe:	d048      	beq.n	8010c52 <_malloc_r+0xe6>
 8010bc0:	6823      	ldr	r3, [r4, #0]
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	eb04 0903 	add.w	r9, r4, r3
 8010bca:	f000 f863 	bl	8010c94 <_sbrk_r>
 8010bce:	4581      	cmp	r9, r0
 8010bd0:	d13f      	bne.n	8010c52 <_malloc_r+0xe6>
 8010bd2:	6821      	ldr	r1, [r4, #0]
 8010bd4:	1a6d      	subs	r5, r5, r1
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	4638      	mov	r0, r7
 8010bda:	f7ff ffa7 	bl	8010b2c <sbrk_aligned>
 8010bde:	3001      	adds	r0, #1
 8010be0:	d037      	beq.n	8010c52 <_malloc_r+0xe6>
 8010be2:	6823      	ldr	r3, [r4, #0]
 8010be4:	442b      	add	r3, r5
 8010be6:	6023      	str	r3, [r4, #0]
 8010be8:	f8d8 3000 	ldr.w	r3, [r8]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d038      	beq.n	8010c62 <_malloc_r+0xf6>
 8010bf0:	685a      	ldr	r2, [r3, #4]
 8010bf2:	42a2      	cmp	r2, r4
 8010bf4:	d12b      	bne.n	8010c4e <_malloc_r+0xe2>
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	605a      	str	r2, [r3, #4]
 8010bfa:	e00f      	b.n	8010c1c <_malloc_r+0xb0>
 8010bfc:	6822      	ldr	r2, [r4, #0]
 8010bfe:	1b52      	subs	r2, r2, r5
 8010c00:	d41f      	bmi.n	8010c42 <_malloc_r+0xd6>
 8010c02:	2a0b      	cmp	r2, #11
 8010c04:	d917      	bls.n	8010c36 <_malloc_r+0xca>
 8010c06:	1961      	adds	r1, r4, r5
 8010c08:	42a3      	cmp	r3, r4
 8010c0a:	6025      	str	r5, [r4, #0]
 8010c0c:	bf18      	it	ne
 8010c0e:	6059      	strne	r1, [r3, #4]
 8010c10:	6863      	ldr	r3, [r4, #4]
 8010c12:	bf08      	it	eq
 8010c14:	f8c8 1000 	streq.w	r1, [r8]
 8010c18:	5162      	str	r2, [r4, r5]
 8010c1a:	604b      	str	r3, [r1, #4]
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	f104 060b 	add.w	r6, r4, #11
 8010c22:	f000 f829 	bl	8010c78 <__malloc_unlock>
 8010c26:	f026 0607 	bic.w	r6, r6, #7
 8010c2a:	1d23      	adds	r3, r4, #4
 8010c2c:	1af2      	subs	r2, r6, r3
 8010c2e:	d0ae      	beq.n	8010b8e <_malloc_r+0x22>
 8010c30:	1b9b      	subs	r3, r3, r6
 8010c32:	50a3      	str	r3, [r4, r2]
 8010c34:	e7ab      	b.n	8010b8e <_malloc_r+0x22>
 8010c36:	42a3      	cmp	r3, r4
 8010c38:	6862      	ldr	r2, [r4, #4]
 8010c3a:	d1dd      	bne.n	8010bf8 <_malloc_r+0x8c>
 8010c3c:	f8c8 2000 	str.w	r2, [r8]
 8010c40:	e7ec      	b.n	8010c1c <_malloc_r+0xb0>
 8010c42:	4623      	mov	r3, r4
 8010c44:	6864      	ldr	r4, [r4, #4]
 8010c46:	e7ac      	b.n	8010ba2 <_malloc_r+0x36>
 8010c48:	4634      	mov	r4, r6
 8010c4a:	6876      	ldr	r6, [r6, #4]
 8010c4c:	e7b4      	b.n	8010bb8 <_malloc_r+0x4c>
 8010c4e:	4613      	mov	r3, r2
 8010c50:	e7cc      	b.n	8010bec <_malloc_r+0x80>
 8010c52:	230c      	movs	r3, #12
 8010c54:	603b      	str	r3, [r7, #0]
 8010c56:	4638      	mov	r0, r7
 8010c58:	f000 f80e 	bl	8010c78 <__malloc_unlock>
 8010c5c:	e797      	b.n	8010b8e <_malloc_r+0x22>
 8010c5e:	6025      	str	r5, [r4, #0]
 8010c60:	e7dc      	b.n	8010c1c <_malloc_r+0xb0>
 8010c62:	605b      	str	r3, [r3, #4]
 8010c64:	deff      	udf	#255	; 0xff
 8010c66:	bf00      	nop
 8010c68:	240006a8 	.word	0x240006a8

08010c6c <__malloc_lock>:
 8010c6c:	4801      	ldr	r0, [pc, #4]	; (8010c74 <__malloc_lock+0x8>)
 8010c6e:	f000 b84b 	b.w	8010d08 <__retarget_lock_acquire_recursive>
 8010c72:	bf00      	nop
 8010c74:	240007e8 	.word	0x240007e8

08010c78 <__malloc_unlock>:
 8010c78:	4801      	ldr	r0, [pc, #4]	; (8010c80 <__malloc_unlock+0x8>)
 8010c7a:	f000 b846 	b.w	8010d0a <__retarget_lock_release_recursive>
 8010c7e:	bf00      	nop
 8010c80:	240007e8 	.word	0x240007e8

08010c84 <memset>:
 8010c84:	4402      	add	r2, r0
 8010c86:	4603      	mov	r3, r0
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d100      	bne.n	8010c8e <memset+0xa>
 8010c8c:	4770      	bx	lr
 8010c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8010c92:	e7f9      	b.n	8010c88 <memset+0x4>

08010c94 <_sbrk_r>:
 8010c94:	b538      	push	{r3, r4, r5, lr}
 8010c96:	4d06      	ldr	r5, [pc, #24]	; (8010cb0 <_sbrk_r+0x1c>)
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	4608      	mov	r0, r1
 8010c9e:	602b      	str	r3, [r5, #0]
 8010ca0:	f7f1 fc32 	bl	8002508 <_sbrk>
 8010ca4:	1c43      	adds	r3, r0, #1
 8010ca6:	d102      	bne.n	8010cae <_sbrk_r+0x1a>
 8010ca8:	682b      	ldr	r3, [r5, #0]
 8010caa:	b103      	cbz	r3, 8010cae <_sbrk_r+0x1a>
 8010cac:	6023      	str	r3, [r4, #0]
 8010cae:	bd38      	pop	{r3, r4, r5, pc}
 8010cb0:	240007ec 	.word	0x240007ec

08010cb4 <__errno>:
 8010cb4:	4b01      	ldr	r3, [pc, #4]	; (8010cbc <__errno+0x8>)
 8010cb6:	6818      	ldr	r0, [r3, #0]
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	240000e0 	.word	0x240000e0

08010cc0 <__libc_init_array>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	4d0d      	ldr	r5, [pc, #52]	; (8010cf8 <__libc_init_array+0x38>)
 8010cc4:	4c0d      	ldr	r4, [pc, #52]	; (8010cfc <__libc_init_array+0x3c>)
 8010cc6:	1b64      	subs	r4, r4, r5
 8010cc8:	10a4      	asrs	r4, r4, #2
 8010cca:	2600      	movs	r6, #0
 8010ccc:	42a6      	cmp	r6, r4
 8010cce:	d109      	bne.n	8010ce4 <__libc_init_array+0x24>
 8010cd0:	4d0b      	ldr	r5, [pc, #44]	; (8010d00 <__libc_init_array+0x40>)
 8010cd2:	4c0c      	ldr	r4, [pc, #48]	; (8010d04 <__libc_init_array+0x44>)
 8010cd4:	f000 f874 	bl	8010dc0 <_init>
 8010cd8:	1b64      	subs	r4, r4, r5
 8010cda:	10a4      	asrs	r4, r4, #2
 8010cdc:	2600      	movs	r6, #0
 8010cde:	42a6      	cmp	r6, r4
 8010ce0:	d105      	bne.n	8010cee <__libc_init_array+0x2e>
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}
 8010ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ce8:	4798      	blx	r3
 8010cea:	3601      	adds	r6, #1
 8010cec:	e7ee      	b.n	8010ccc <__libc_init_array+0xc>
 8010cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cf2:	4798      	blx	r3
 8010cf4:	3601      	adds	r6, #1
 8010cf6:	e7f2      	b.n	8010cde <__libc_init_array+0x1e>
 8010cf8:	08010e38 	.word	0x08010e38
 8010cfc:	08010e38 	.word	0x08010e38
 8010d00:	08010e38 	.word	0x08010e38
 8010d04:	08010e3c 	.word	0x08010e3c

08010d08 <__retarget_lock_acquire_recursive>:
 8010d08:	4770      	bx	lr

08010d0a <__retarget_lock_release_recursive>:
 8010d0a:	4770      	bx	lr

08010d0c <memcpy>:
 8010d0c:	440a      	add	r2, r1
 8010d0e:	4291      	cmp	r1, r2
 8010d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010d14:	d100      	bne.n	8010d18 <memcpy+0xc>
 8010d16:	4770      	bx	lr
 8010d18:	b510      	push	{r4, lr}
 8010d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d22:	4291      	cmp	r1, r2
 8010d24:	d1f9      	bne.n	8010d1a <memcpy+0xe>
 8010d26:	bd10      	pop	{r4, pc}

08010d28 <_free_r>:
 8010d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d2a:	2900      	cmp	r1, #0
 8010d2c:	d044      	beq.n	8010db8 <_free_r+0x90>
 8010d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d32:	9001      	str	r0, [sp, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f1a1 0404 	sub.w	r4, r1, #4
 8010d3a:	bfb8      	it	lt
 8010d3c:	18e4      	addlt	r4, r4, r3
 8010d3e:	f7ff ff95 	bl	8010c6c <__malloc_lock>
 8010d42:	4a1e      	ldr	r2, [pc, #120]	; (8010dbc <_free_r+0x94>)
 8010d44:	9801      	ldr	r0, [sp, #4]
 8010d46:	6813      	ldr	r3, [r2, #0]
 8010d48:	b933      	cbnz	r3, 8010d58 <_free_r+0x30>
 8010d4a:	6063      	str	r3, [r4, #4]
 8010d4c:	6014      	str	r4, [r2, #0]
 8010d4e:	b003      	add	sp, #12
 8010d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d54:	f7ff bf90 	b.w	8010c78 <__malloc_unlock>
 8010d58:	42a3      	cmp	r3, r4
 8010d5a:	d908      	bls.n	8010d6e <_free_r+0x46>
 8010d5c:	6825      	ldr	r5, [r4, #0]
 8010d5e:	1961      	adds	r1, r4, r5
 8010d60:	428b      	cmp	r3, r1
 8010d62:	bf01      	itttt	eq
 8010d64:	6819      	ldreq	r1, [r3, #0]
 8010d66:	685b      	ldreq	r3, [r3, #4]
 8010d68:	1949      	addeq	r1, r1, r5
 8010d6a:	6021      	streq	r1, [r4, #0]
 8010d6c:	e7ed      	b.n	8010d4a <_free_r+0x22>
 8010d6e:	461a      	mov	r2, r3
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	b10b      	cbz	r3, 8010d78 <_free_r+0x50>
 8010d74:	42a3      	cmp	r3, r4
 8010d76:	d9fa      	bls.n	8010d6e <_free_r+0x46>
 8010d78:	6811      	ldr	r1, [r2, #0]
 8010d7a:	1855      	adds	r5, r2, r1
 8010d7c:	42a5      	cmp	r5, r4
 8010d7e:	d10b      	bne.n	8010d98 <_free_r+0x70>
 8010d80:	6824      	ldr	r4, [r4, #0]
 8010d82:	4421      	add	r1, r4
 8010d84:	1854      	adds	r4, r2, r1
 8010d86:	42a3      	cmp	r3, r4
 8010d88:	6011      	str	r1, [r2, #0]
 8010d8a:	d1e0      	bne.n	8010d4e <_free_r+0x26>
 8010d8c:	681c      	ldr	r4, [r3, #0]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	6053      	str	r3, [r2, #4]
 8010d92:	440c      	add	r4, r1
 8010d94:	6014      	str	r4, [r2, #0]
 8010d96:	e7da      	b.n	8010d4e <_free_r+0x26>
 8010d98:	d902      	bls.n	8010da0 <_free_r+0x78>
 8010d9a:	230c      	movs	r3, #12
 8010d9c:	6003      	str	r3, [r0, #0]
 8010d9e:	e7d6      	b.n	8010d4e <_free_r+0x26>
 8010da0:	6825      	ldr	r5, [r4, #0]
 8010da2:	1961      	adds	r1, r4, r5
 8010da4:	428b      	cmp	r3, r1
 8010da6:	bf04      	itt	eq
 8010da8:	6819      	ldreq	r1, [r3, #0]
 8010daa:	685b      	ldreq	r3, [r3, #4]
 8010dac:	6063      	str	r3, [r4, #4]
 8010dae:	bf04      	itt	eq
 8010db0:	1949      	addeq	r1, r1, r5
 8010db2:	6021      	streq	r1, [r4, #0]
 8010db4:	6054      	str	r4, [r2, #4]
 8010db6:	e7ca      	b.n	8010d4e <_free_r+0x26>
 8010db8:	b003      	add	sp, #12
 8010dba:	bd30      	pop	{r4, r5, pc}
 8010dbc:	240006a8 	.word	0x240006a8

08010dc0 <_init>:
 8010dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dc2:	bf00      	nop
 8010dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc6:	bc08      	pop	{r3}
 8010dc8:	469e      	mov	lr, r3
 8010dca:	4770      	bx	lr

08010dcc <_fini>:
 8010dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dce:	bf00      	nop
 8010dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dd2:	bc08      	pop	{r3}
 8010dd4:	469e      	mov	lr, r3
 8010dd6:	4770      	bx	lr
