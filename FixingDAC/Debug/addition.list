
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a5c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010cf4  08010cf4  00020cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d4c  08010d4c  00020d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d54  08010d54  00020d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010d58  08010d58  00020d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  08010d5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f4  240000c0  08010e00  000300c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240007b4  08010e00  000307b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300d2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002344a  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003a76  00000000  00000000  0005355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c38  00000000  00000000  00056fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001620  00000000  00000000  00058c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b74f  00000000  00000000  0005a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000257b3  00000000  00000000  0009597f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180e26  00000000  00000000  000bb132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007e74  00000000  00000000  0023bf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00243dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010cdc 	.word	0x08010cdc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	08010cdc 	.word	0x08010cdc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_SystemReset+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <__NVIC_SystemReset+0x20>
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	05fa0004 	.word	0x05fa0004

08000600 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	b299      	uxth	r1, r3
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <poll_i2c_sensor+0x94>)
 8000620:	f007 f9cc 	bl	80079bc <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <poll_i2c_sensor+0x98>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e022      	b.n	8000688 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b299      	uxth	r1, r3
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <poll_i2c_sensor+0x94>)
 8000654:	f007 faca 	bl	8007bec <HAL_I2C_Master_Receive>
 8000658:	4603      	mov	r3, r0
 800065a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <poll_i2c_sensor+0x9c>)
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	c303      	stmia	r3!, {r0, r1}
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	3302      	adds	r3, #2
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 8000676:	7a3b      	ldrb	r3, [r7, #8]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 800067c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000680:	7a7a      	ldrb	r2, [r7, #9]
 8000682:	4313      	orrs	r3, r2
 8000684:	10db      	asrs	r3, r3, #3
 8000686:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000320 	.word	0x24000320
 8000698:	08010cf4 	.word	0x08010cf4
 800069c:	08010d00 	.word	0x08010d00

080006a0 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa9 	bl	8000600 <poll_i2c_sensor>
 80006ae:	4603      	mov	r3, r0
 80006b0:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006b2:	2394      	movs	r3, #148	; 0x94
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffa3 	bl	8000600 <poll_i2c_sensor>
 80006ba:	4603      	mov	r3, r0
 80006bc:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006be:	2392      	movs	r3, #146	; 0x92
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff9d 	bl	8000600 <poll_i2c_sensor>
 80006c6:	4603      	mov	r3, r0
 80006c8:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006ca:	2396      	movs	r3, #150	; 0x96
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff97 	bl	8000600 <poll_i2c_sensor>
 80006d2:	4603      	mov	r3, r0
 80006d4:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006d6:	2008      	movs	r0, #8
 80006d8:	f010 f9a6 	bl	8010a28 <malloc>
 80006dc:	4603      	mov	r3, r0
 80006de:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3304      	adds	r3, #4
 80006f2:	897a      	ldrh	r2, [r7, #10]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3306      	adds	r3, #6
 80006fa:	893a      	ldrh	r2, [r7, #8]
 80006fc:	801a      	strh	r2, [r3, #0]
	return results;
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000708:	b084      	sub	sp, #16
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	f107 0c18 	add.w	ip, r7, #24
 8000714:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	2301      	movs	r3, #1
 800071c:	2201      	movs	r2, #1
 800071e:	f107 0018 	add.w	r0, r7, #24
 8000722:	f00b fd15 	bl	800c150 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000738:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 800073a:	2002      	movs	r0, #2
 800073c:	f010 f974 	bl	8010a28 <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	7bba      	ldrb	r2, [r7, #14]
 8000748:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	701a      	strb	r2, [r3, #0]
	return results;
 8000752:	68bb      	ldr	r3, [r7, #8]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075e:	b004      	add	sp, #16
 8000760:	4770      	bx	lr
	...

08000764 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <erpa_adc+0x34>)
 800076c:	885b      	ldrh	r3, [r3, #2]
 800076e:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <erpa_adc+0x34>)
 8000772:	895b      	ldrh	r3, [r3, #10]
 8000774:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 8000776:	2004      	movs	r0, #4
 8000778:	f010 f956 	bl	8010a28 <malloc>
 800077c:	4603      	mov	r3, r0
 800077e:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3302      	adds	r3, #2
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	801a      	strh	r2, [r3, #0]

	return results;
 800078e:	683b      	ldr	r3, [r7, #0]

}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000620 	.word	0x24000620

0800079c <hk_adc1>:

uint16_t* hk_adc1() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <hk_adc1+0x98>)
 80007a4:	8a9b      	ldrh	r3, [r3, #20]
 80007a6:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <hk_adc1+0x98>)
 80007aa:	8a1b      	ldrh	r3, [r3, #16]
 80007ac:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <hk_adc1+0x98>)
 80007b0:	899b      	ldrh	r3, [r3, #12]
 80007b2:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <hk_adc1+0x98>)
 80007b6:	8a5b      	ldrh	r3, [r3, #18]
 80007b8:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <hk_adc1+0x98>)
 80007bc:	889b      	ldrh	r3, [r3, #4]
 80007be:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <hk_adc1+0x98>)
 80007c2:	88db      	ldrh	r3, [r3, #6]
 80007c4:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <hk_adc1+0x98>)
 80007c8:	89db      	ldrh	r3, [r3, #14]
 80007ca:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <hk_adc1+0x98>)
 80007ce:	891b      	ldrh	r3, [r3, #8]
 80007d0:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <hk_adc1+0x98>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 80007d8:	2012      	movs	r0, #18
 80007da:	f010 f925 	bl	8010a28 <malloc>
 80007de:	4603      	mov	r3, r0
 80007e0:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	8afa      	ldrh	r2, [r7, #22]
 80007e6:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	3302      	adds	r3, #2
 80007ec:	8aba      	ldrh	r2, [r7, #20]
 80007ee:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3304      	adds	r3, #4
 80007f4:	8a7a      	ldrh	r2, [r7, #18]
 80007f6:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3306      	adds	r3, #6
 80007fc:	8a3a      	ldrh	r2, [r7, #16]
 80007fe:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	3308      	adds	r3, #8
 8000804:	89fa      	ldrh	r2, [r7, #14]
 8000806:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	330a      	adds	r3, #10
 800080c:	89ba      	ldrh	r2, [r7, #12]
 800080e:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	330c      	adds	r3, #12
 8000814:	897a      	ldrh	r2, [r7, #10]
 8000816:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	330e      	adds	r3, #14
 800081c:	893a      	ldrh	r2, [r7, #8]
 800081e:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3310      	adds	r3, #16
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	801a      	strh	r2, [r3, #0]

	return results;
 8000828:	683b      	ldr	r3, [r7, #0]

}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	24000620 	.word	0x24000620

08000838 <hk_adc3>:

uint16_t* hk_adc3() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <hk_adc3+0x50>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <hk_adc3+0x50>)
 8000846:	885b      	ldrh	r3, [r3, #2]
 8000848:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <hk_adc3+0x50>)
 800084c:	889b      	ldrh	r3, [r3, #4]
 800084e:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <hk_adc3+0x50>)
 8000852:	88db      	ldrh	r3, [r3, #6]
 8000854:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 8000856:	2008      	movs	r0, #8
 8000858:	f010 f8e6 	bl	8010a28 <malloc>
 800085c:	4603      	mov	r3, r0
 800085e:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3302      	adds	r3, #2
 800086a:	89ba      	ldrh	r2, [r7, #12]
 800086c:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3304      	adds	r3, #4
 8000872:	897a      	ldrh	r2, [r7, #10]
 8000874:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3306      	adds	r3, #6
 800087a:	893a      	ldrh	r2, [r7, #8]
 800087c:	801a      	strh	r2, [r3, #0]

	return results;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000640 	.word	0x24000640

0800088c <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 8000896:	23aa      	movs	r3, #170	; 0xaa
 8000898:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 800089a:	23aa      	movs	r3, #170	; 0xaa
 800089c:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <send_erpa_packet+0x90>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <send_erpa_packet+0x90>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008b2:	2300      	movs	r3, #0
 80008b4:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008b6:	2300      	movs	r3, #0
 80008b8:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	3302      	adds	r3, #2
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	3302      	adds	r3, #2
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 80008e6:	2300      	movs	r3, #0
 80008e8:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 80008ea:	2300      	movs	r3, #0
 80008ec:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80008fa:	f107 0108 	add.w	r1, r7, #8
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	220e      	movs	r2, #14
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <send_erpa_packet+0x94>)
 8000904:	f00d fcb2 	bl	800e26c <HAL_UART_Transmit>
	erpa_seq++;
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <send_erpa_packet+0x90>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b29a      	uxth	r2, r3
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <send_erpa_packet+0x90>)
 8000912:	801a      	strh	r2, [r3, #0]

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000658 	.word	0x24000658
 8000920:	2400051c 	.word	0x2400051c

08000924 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 8000930:	23cc      	movs	r3, #204	; 0xcc
 8000932:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000934:	23cc      	movs	r3, #204	; 0xcc
 8000936:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000938:	4b7d      	ldr	r3, [pc, #500]	; (8000b30 <send_hk_packet+0x20c>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	b29b      	uxth	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000944:	4b7a      	ldr	r3, [pc, #488]	; (8000b30 <send_hk_packet+0x20c>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3302      	adds	r3, #2
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	b29b      	uxth	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3302      	adds	r3, #2
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097e:	121b      	asrs	r3, r3, #8
 8000980:	b2db      	uxtb	r3, r3
 8000982:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3302      	adds	r3, #2
 8000992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000996:	121b      	asrs	r3, r3, #8
 8000998:	b2db      	uxtb	r3, r3
 800099a:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3302      	adds	r3, #2
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3304      	adds	r3, #4
 80009ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b0:	121b      	asrs	r3, r3, #8
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3304      	adds	r3, #4
 80009ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3306      	adds	r3, #6
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	121b      	asrs	r3, r3, #8
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3306      	adds	r3, #6
 80009d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3302      	adds	r3, #2
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	3302      	adds	r3, #2
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3304      	adds	r3, #4
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3304      	adds	r3, #4
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3306      	adds	r3, #6
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3306      	adds	r3, #6
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	330c      	adds	r3, #12
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	330c      	adds	r3, #12
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3306      	adds	r3, #6
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3306      	adds	r3, #6
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3304      	adds	r3, #4
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	330e      	adds	r3, #14
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	330e      	adds	r3, #14
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3310      	adds	r3, #16
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3310      	adds	r3, #16
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	330a      	adds	r3, #10
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	0a1b      	lsrs	r3, r3, #8
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	330a      	adds	r3, #10
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b0c:	f107 0110 	add.w	r1, r7, #16
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2226      	movs	r2, #38	; 0x26
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <send_hk_packet+0x210>)
 8000b16:	f00d fba9 	bl	800e26c <HAL_UART_Transmit>
	hk_seq++;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <send_hk_packet+0x20c>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <send_hk_packet+0x20c>)
 8000b24:	801a      	strh	r2, [r3, #0]

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2400065c 	.word	0x2400065c
 8000b34:	2400051c 	.word	0x2400051c

08000b38 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b40:	23bb      	movs	r3, #187	; 0xbb
 8000b42:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b44:	23bb      	movs	r3, #187	; 0xbb
 8000b46:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <send_pmt_packet+0x54>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <send_pmt_packet+0x54>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000b68:	f107 0108 	add.w	r1, r7, #8
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2206      	movs	r2, #6
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <send_pmt_packet+0x58>)
 8000b72:	f00d fb7b 	bl	800e26c <HAL_UART_Transmit>
	pmt_seq++;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <send_pmt_packet+0x54>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <send_pmt_packet+0x54>)
 8000b80:	801a      	strh	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2400065a 	.word	0x2400065a
 8000b90:	2400051c 	.word	0x2400051c

08000b94 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b0a7      	sub	sp, #156	; 0x9c
 8000b98:	af1e      	add	r7, sp, #120	; 0x78
 8000b9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d147      	bne.n	8000c34 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		if (ERPA_ON) {
 8000ba4:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d027      	beq.n	8000bfc <HAL_TIM_OC_DelayElapsedCallback+0x68>
			SWP_FACTOR_COUNTER++;
 8000bac:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bb4:	6013      	str	r3, [r2, #0]

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000bb6:	bf00      	nop
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bbe:	f006 fe2f 	bl	8007820 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f7      	bne.n	8000bb8 <HAL_TIM_OC_DelayElapsedCallback+0x24>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bc8:	4c32      	ldr	r4, [pc, #200]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bca:	4668      	mov	r0, sp
 8000bcc:	f104 0310 	add.w	r3, r4, #16
 8000bd0:	2278      	movs	r2, #120	; 0x78
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f010 f828 	bl	8010c28 <memcpy>
 8000bd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bdc:	f7ff fd94 	bl	8000708 <spi>
 8000be0:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000be2:	f7ff fdbf 	bl	8000764 <erpa_adc>
 8000be6:	6178      	str	r0, [r7, #20]
//					set_erpa_sweep();
//				}
//				SWP_FACTOR_COUNTER = 0;
//			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000be8:	6979      	ldr	r1, [r7, #20]
 8000bea:	69b8      	ldr	r0, [r7, #24]
 8000bec:	f7ff fe4e 	bl	800088c <send_erpa_packet>

			free(spi2_results);
 8000bf0:	69b8      	ldr	r0, [r7, #24]
 8000bf2:	f00f ff21 	bl	8010a38 <free>
			free(erpa_adc_results);
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f00f ff1e 	bl	8010a38 <free>
		}
		if (HK_ON) {
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d03b      	beq.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			int16_t *i2c_values = i2c();
 8000c04:	f7ff fd4c 	bl	80006a0 <i2c>
 8000c08:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c0a:	f7ff fdc7 	bl	800079c <hk_adc1>
 8000c0e:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c10:	f7ff fe12 	bl	8000838 <hk_adc3>
 8000c14:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	68f9      	ldr	r1, [r7, #12]
 8000c1a:	6938      	ldr	r0, [r7, #16]
 8000c1c:	f7ff fe82 	bl	8000924 <send_hk_packet>

			free(i2c_values);
 8000c20:	6938      	ldr	r0, [r7, #16]
 8000c22:	f00f ff09 	bl	8010a38 <free>
			free(hk_adc1_results);
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f00f ff06 	bl	8010a38 <free>
			free(hk_adc3_results);
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f00f ff03 	bl	8010a38 <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c32:	e023      	b.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
	} else if (htim == &htim1) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d11f      	bne.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		if (PMT_ON) {
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c44:	bf00      	nop
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c4c:	f006 fde8 	bl	8007820 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f7      	bne.n	8000c46 <HAL_TIM_OC_DelayElapsedCallback+0xb2>
			uint8_t *spi1_results = spi(hspi1);
 8000c56:	4c14      	ldr	r4, [pc, #80]	; (8000ca8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c58:	4668      	mov	r0, sp
 8000c5a:	f104 0310 	add.w	r3, r4, #16
 8000c5e:	2278      	movs	r2, #120	; 0x78
 8000c60:	4619      	mov	r1, r3
 8000c62:	f00f ffe1 	bl	8010c28 <memcpy>
 8000c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c6a:	f7ff fd4d 	bl	8000708 <spi>
 8000c6e:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000c70:	69f8      	ldr	r0, [r7, #28]
 8000c72:	f7ff ff61 	bl	8000b38 <send_pmt_packet>
			free(spi1_results);
 8000c76:	69f8      	ldr	r0, [r7, #28]
 8000c78:	f00f fede 	bl	8010a38 <free>
}
 8000c7c:	bf00      	nop
 8000c7e:	3724      	adds	r7, #36	; 0x24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	240004d0 	.word	0x240004d0
 8000c88:	2400065f 	.word	0x2400065f
 8000c8c:	24000654 	.word	0x24000654
 8000c90:	58020400 	.word	0x58020400
 8000c94:	240003fc 	.word	0x240003fc
 8000c98:	24000660 	.word	0x24000660
 8000c9c:	24000484 	.word	0x24000484
 8000ca0:	2400065e 	.word	0x2400065e
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	24000374 	.word	0x24000374

08000cac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	49b6      	ldr	r1, [pc, #728]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000cb8:	48b6      	ldr	r0, [pc, #728]	; (8000f94 <HAL_UART_RxCpltCallback+0x2e8>)
 8000cba:	f00d fb65 	bl	800e388 <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cbe:	4bb4      	ldr	r3, [pc, #720]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b25      	cmp	r3, #37	; 0x25
 8000cc8:	f200 815d 	bhi.w	8000f86 <HAL_UART_RxCpltCallback+0x2da>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <HAL_UART_RxCpltCallback+0x28>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000e29 	.word	0x08000e29
 8000cd8:	08000e45 	.word	0x08000e45
 8000cdc:	08000e61 	.word	0x08000e61
 8000ce0:	08000e81 	.word	0x08000e81
 8000ce4:	08000ea1 	.word	0x08000ea1
 8000ce8:	08000ebd 	.word	0x08000ebd
 8000cec:	08000edd 	.word	0x08000edd
 8000cf0:	08000efd 	.word	0x08000efd
 8000cf4:	08000f87 	.word	0x08000f87
 8000cf8:	08000f87 	.word	0x08000f87
 8000cfc:	08000d7b 	.word	0x08000d7b
 8000d00:	08000d6d 	.word	0x08000d6d
 8000d04:	08000f19 	.word	0x08000f19
 8000d08:	08000f29 	.word	0x08000f29
 8000d0c:	08000f49 	.word	0x08000f49
 8000d10:	08000f69 	.word	0x08000f69
 8000d14:	08000f39 	.word	0x08000f39
 8000d18:	08000f59 	.word	0x08000f59
 8000d1c:	08000f71 	.word	0x08000f71
 8000d20:	08000e37 	.word	0x08000e37
 8000d24:	08000e53 	.word	0x08000e53
 8000d28:	08000e71 	.word	0x08000e71
 8000d2c:	08000e91 	.word	0x08000e91
 8000d30:	08000eaf 	.word	0x08000eaf
 8000d34:	08000ecd 	.word	0x08000ecd
 8000d38:	08000eed 	.word	0x08000eed
 8000d3c:	08000f0b 	.word	0x08000f0b
 8000d40:	08000d89 	.word	0x08000d89
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000db9 	.word	0x08000db9
 8000d4c:	08000f87 	.word	0x08000f87
 8000d50:	08000f87 	.word	0x08000f87
 8000d54:	08000f87 	.word	0x08000f87
 8000d58:	08000f87 	.word	0x08000f87
 8000d5c:	08000f87 	.word	0x08000f87
 8000d60:	08000f87 	.word	0x08000f87
 8000d64:	08000ddd 	.word	0x08000ddd
 8000d68:	08000dff 	.word	0x08000dff
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d6c:	4b8a      	ldr	r3, [pc, #552]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d6e:	2104      	movs	r1, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fd6c 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000d78:	e105      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d7a:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f006 fd65 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000d86:	e0fe      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x1B: {
		if (step < 9) {
 8000d88:	4b84      	ldr	r3, [pc, #528]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	f200 80f3 	bhi.w	8000f78 <HAL_UART_RxCpltCallback+0x2cc>
			step++;
 8000d92:	4b82      	ldr	r3, [pc, #520]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000d9c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d9e:	e0eb      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x2cc>
	}
	case 0x1C: {
		if (step > 0) {
 8000da0:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 80e9 	beq.w	8000f7c <HAL_UART_RxCpltCallback+0x2d0>
			step--;
 8000daa:	4b7c      	ldr	r3, [pc, #496]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b7a      	ldr	r3, [pc, #488]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000db4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000db6:	e0e1      	b.n	8000f7c <HAL_UART_RxCpltCallback+0x2d0>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000db8:	4b79      	ldr	r3, [pc, #484]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d106      	bne.n	8000dce <HAL_UART_RxCpltCallback+0x122>
			auto_sweep = 1;
 8000dc0:	4b77      	ldr	r3, [pc, #476]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
			step = 0;
 8000dc6:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
		} else {
			auto_sweep = 0;
			step = 0;
		}
		break;
 8000dcc:	e0db      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
			auto_sweep = 0;
 8000dce:	4b74      	ldr	r3, [pc, #464]	; (8000fa0 <HAL_UART_RxCpltCallback+0x2f4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
			step = 0;
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <HAL_UART_RxCpltCallback+0x2f0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		break;
 8000dda:	e0d4      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x24: {
		if (SAMPLING_FACTOR < 32) {
 8000ddc:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b1f      	cmp	r3, #31
 8000de2:	f300 80cd 	bgt.w	8000f80 <HAL_UART_RxCpltCallback+0x2d4>
			SAMPLING_FACTOR *= 2;
 8000de6:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4a6d      	ldr	r2, [pc, #436]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000dee:	6013      	str	r3, [r2, #0]
			FACTOR_COUNTER = 0;
 8000df0:	4b6d      	ldr	r3, [pc, #436]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000df6:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dfc:	e0c0      	b.n	8000f80 <HAL_UART_RxCpltCallback+0x2d4>
	}
	case 0x25: {
		if (SAMPLING_FACTOR > 1) {
 8000dfe:	4b69      	ldr	r3, [pc, #420]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	f340 80be 	ble.w	8000f84 <HAL_UART_RxCpltCallback+0x2d8>
			SAMPLING_FACTOR /= 2;
 8000e08:	4b66      	ldr	r3, [pc, #408]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da00      	bge.n	8000e12 <HAL_UART_RxCpltCallback+0x166>
 8000e10:	3301      	adds	r3, #1
 8000e12:	105b      	asrs	r3, r3, #1
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <HAL_UART_RxCpltCallback+0x2f8>)
 8000e18:	601a      	str	r2, [r3, #0]
			FACTOR_COUNTER = 0;
 8000e1a:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <HAL_UART_RxCpltCallback+0x2fc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000e20:	4b62      	ldr	r3, [pc, #392]	; (8000fac <HAL_UART_RxCpltCallback+0x300>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e26:	e0ad      	b.n	8000f84 <HAL_UART_RxCpltCallback+0x2d8>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e28:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e2a:	2120      	movs	r1, #32
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 fd0e 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e34:	e0a7      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e36:	4b58      	ldr	r3, [pc, #352]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e38:	2120      	movs	r1, #32
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fd07 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e42:	e0a0      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e44:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fd00 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e50:	e099      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e52:	4b51      	ldr	r3, [pc, #324]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	2200      	movs	r2, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 fcf9 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e5e:	e092      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e60:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	2201      	movs	r2, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fcf1 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e6e:	e08a      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e70:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	2200      	movs	r2, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fce9 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e7e:	e082      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	2201      	movs	r2, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fce1 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e8e:	e07a      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e90:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	2200      	movs	r2, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f006 fcd9 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000e9e:	e072      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 fcd2 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000eac:	e06b      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000eae:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 fccb 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000eba:	e064      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f006 fcc3 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000eca:	e05c      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fcbb 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000eda:	e054      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 fcb3 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000eea:	e04c      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000eec:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fcab 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000efa:	e044      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	2201      	movs	r2, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f006 fca4 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000f08:	e03d      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_UART_RxCpltCallback+0x304>)
 8000f0c:	2140      	movs	r1, #64	; 0x40
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fc9d 	bl	8007850 <HAL_GPIO_WritePin>
		break;
 8000f16:	e036      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f18:	f001 fc74 	bl	8002804 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f007 fa98 	bl	8008454 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f24:	f7ff fb56 	bl	80005d4 <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_UART_RxCpltCallback+0x308>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <HAL_UART_RxCpltCallback+0x30c>)
 8000f32:	f00b fd01 	bl	800c938 <HAL_TIM_OC_Start_IT>
		break;
 8000f36:	e026      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_UART_RxCpltCallback+0x308>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <HAL_UART_RxCpltCallback+0x30c>)
 8000f42:	f00b fe53 	bl	800cbec <HAL_TIM_OC_Stop_IT>

		break;
 8000f46:	e01e      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_UART_RxCpltCallback+0x310>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f4e:	210c      	movs	r1, #12
 8000f50:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <HAL_UART_RxCpltCallback+0x314>)
 8000f52:	f00b fcf1 	bl	800c938 <HAL_TIM_OC_Start_IT>
		break;
 8000f56:	e016      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_RxCpltCallback+0x310>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000f5e:	210c      	movs	r1, #12
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <HAL_UART_RxCpltCallback+0x314>)
 8000f62:	f00b fe43 	bl	800cbec <HAL_TIM_OC_Stop_IT>

		break;
 8000f66:	e00e      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x0F: {
		HK_ON = 1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
		break;
 8000f6e:	e00a      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
	}
	case 0x12: {
		HK_ON = 0;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_UART_RxCpltCallback+0x318>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
		break;
 8000f76:	e006      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f78:	bf00      	nop
 8000f7a:	e004      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f7c:	bf00      	nop
 8000f7e:	e002      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f80:	bf00      	nop
 8000f82:	e000      	b.n	8000f86 <HAL_UART_RxCpltCallback+0x2da>
		break;
 8000f84:	bf00      	nop
	}
	}
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	240005b0 	.word	0x240005b0
 8000f94:	2400051c 	.word	0x2400051c
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	24000648 	.word	0x24000648
 8000fa0:	2400064c 	.word	0x2400064c
 8000fa4:	24000040 	.word	0x24000040
 8000fa8:	24000650 	.word	0x24000650
 8000fac:	24000654 	.word	0x24000654
 8000fb0:	58020800 	.word	0x58020800
 8000fb4:	2400065e 	.word	0x2400065e
 8000fb8:	24000484 	.word	0x24000484
 8000fbc:	2400065f 	.word	0x2400065f
 8000fc0:	240004d0 	.word	0x240004d0
 8000fc4:	24000660 	.word	0x24000660

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f001 fb87 	bl	80026e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f883 	bl	80010dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fd6:	f000 f905 	bl	80011e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fd8b 	bl	8001af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f000 fd59 	bl	8001a94 <MX_DMA_Init>
  MX_DAC1_Init();
 8000fe2:	f000 fae3 	bl	80015ac <MX_DAC1_Init>
  MX_ADC1_Init();
 8000fe6:	f000 f92d 	bl	8001244 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000fea:	f000 fa4d 	bl	8001488 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000fee:	f000 fc8f 	bl	8001910 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ff2:	f000 fbfd 	bl	80017f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000ff6:	f000 fb0b 	bl	8001610 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ffa:	f000 fb49 	bl	8001690 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ffe:	f000 fb9f 	bl	8001740 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001002:	f000 fcfb 	bl	80019fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 8001006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001010:	210c      	movs	r1, #12
 8001012:	4829      	ldr	r0, [pc, #164]	; (80010b8 <main+0xf0>)
 8001014:	f00b ff26 	bl	800ce64 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2);
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0xf0>)
 800101a:	f00b fc1d 	bl	800c858 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 800101e:	2300      	movs	r3, #0
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2310      	movs	r3, #16
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <main+0xf4>)
 8001026:	2100      	movs	r1, #0
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <main+0xf8>)
 800102a:	f003 f963 	bl	80042f4 <HAL_DAC_Start_DMA>


  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800102e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <main+0xfc>)
 8001038:	f002 fee8 	bl	8003e0c <HAL_ADCEx_Calibration_Start>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <main+0x7e>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 8001042:	f000 fdd1 	bl	8001be8 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 8001046:	220b      	movs	r2, #11
 8001048:	491f      	ldr	r1, [pc, #124]	; (80010c8 <main+0x100>)
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <main+0xfc>)
 800104c:	f001 ffbc 	bl	8002fc8 <HAL_ADC_Start_DMA>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <main+0x92>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 8001056:	f000 fdc7 	bl	8001be8 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800105a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800105e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <main+0x104>)
 8001064:	f002 fed2 	bl	8003e0c <HAL_ADCEx_Calibration_Start>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <main+0xaa>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 800106e:	f000 fdbb 	bl	8001be8 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 8001072:	2204      	movs	r2, #4
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <main+0x108>)
 8001076:	4815      	ldr	r0, [pc, #84]	; (80010cc <main+0x104>)
 8001078:	f001 ffa6 	bl	8002fc8 <HAL_ADC_Start_DMA>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <main+0xbe>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 8001082:	f000 fdb1 	bl	8001be8 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8001086:	bf00      	nop
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <main+0x10c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d0f7      	beq.n	8001088 <main+0xc0>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 8001098:	bf00      	nop
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <main+0x10c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a8:	d1f7      	bne.n	800109a <main+0xd2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	490a      	ldr	r1, [pc, #40]	; (80010d8 <main+0x110>)
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <main+0x10c>)
 80010b0:	f00d f96a 	bl	800e388 <HAL_UART_Receive_IT>
 80010b4:	e7f9      	b.n	80010aa <main+0xe2>
 80010b6:	bf00      	nop
 80010b8:	240004d0 	.word	0x240004d0
 80010bc:	24000000 	.word	0x24000000
 80010c0:	24000294 	.word	0x24000294
 80010c4:	240000dc 	.word	0x240000dc
 80010c8:	24000620 	.word	0x24000620
 80010cc:	24000140 	.word	0x24000140
 80010d0:	24000640 	.word	0x24000640
 80010d4:	2400051c 	.word	0x2400051c
 80010d8:	240005b0 	.word	0x240005b0

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09c      	sub	sp, #112	; 0x70
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	224c      	movs	r2, #76	; 0x4c
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00f fd58 	bl	8010ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2220      	movs	r2, #32
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00f fd52 	bl	8010ba0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f007 f9e5 	bl	80084cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <SystemClock_Config+0xfc>)
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	4a33      	ldr	r2, [pc, #204]	; (80011d8 <SystemClock_Config+0xfc>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <SystemClock_Config+0xfc>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <SystemClock_Config+0x100>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001124:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <SystemClock_Config+0x100>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <SystemClock_Config+0x100>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001138:	bf00      	nop
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <SystemClock_Config+0x100>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001146:	d1f8      	bne.n	800113a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <SystemClock_Config+0x104>)
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <SystemClock_Config+0x104>)
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001158:	2301      	movs	r3, #1
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800116c:	230c      	movs	r3, #12
 800116e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001170:	2304      	movs	r3, #4
 8001172:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800117c:	230c      	movs	r3, #12
 800117e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001180:	2300      	movs	r3, #0
 8001182:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4618      	mov	r0, r3
 800118e:	f007 f9d7 	bl	8008540 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001198:	f000 fd26 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	233f      	movs	r3, #63	; 0x3f
 800119e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2303      	movs	r3, #3
 80011a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 fe17 	bl	8008df4 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80011cc:	f000 fd0c 	bl	8001be8 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3770      	adds	r7, #112	; 0x70
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58000400 	.word	0x58000400
 80011dc:	58024800 	.word	0x58024800
 80011e0:	58024400 	.word	0x58024400

080011e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b0      	sub	sp, #192	; 0xc0
 80011e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	22c0      	movs	r2, #192	; 0xc0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00f fcd5 	bl	8010ba0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001202:	2304      	movs	r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001206:	2309      	movs	r3, #9
 8001208:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800120a:	2304      	movs	r3, #4
 800120c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001216:	23c0      	movs	r3, #192	; 0xc0
 8001218:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800121a:	2320      	movs	r3, #32
 800121c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800121e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	4618      	mov	r0, r3
 800122e:	f008 f96d 	bl	800950c <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001238:	f000 fcd6 	bl	8001be8 <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	37c0      	adds	r7, #192	; 0xc0
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001268:	4b7a      	ldr	r3, [pc, #488]	; (8001454 <MX_ADC1_Init+0x210>)
 800126a:	4a7b      	ldr	r2, [pc, #492]	; (8001458 <MX_ADC1_Init+0x214>)
 800126c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800126e:	4b79      	ldr	r3, [pc, #484]	; (8001454 <MX_ADC1_Init+0x210>)
 8001270:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001276:	4b77      	ldr	r3, [pc, #476]	; (8001454 <MX_ADC1_Init+0x210>)
 8001278:	2208      	movs	r2, #8
 800127a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800127c:	4b75      	ldr	r3, [pc, #468]	; (8001454 <MX_ADC1_Init+0x210>)
 800127e:	2201      	movs	r2, #1
 8001280:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001282:	4b74      	ldr	r3, [pc, #464]	; (8001454 <MX_ADC1_Init+0x210>)
 8001284:	2204      	movs	r2, #4
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001288:	4b72      	ldr	r3, [pc, #456]	; (8001454 <MX_ADC1_Init+0x210>)
 800128a:	2200      	movs	r2, #0
 800128c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800128e:	4b71      	ldr	r3, [pc, #452]	; (8001454 <MX_ADC1_Init+0x210>)
 8001290:	2201      	movs	r2, #1
 8001292:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001294:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <MX_ADC1_Init+0x210>)
 8001296:	220b      	movs	r2, #11
 8001298:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <MX_ADC1_Init+0x210>)
 800129c:	2200      	movs	r2, #0
 800129e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a0:	4b6c      	ldr	r3, [pc, #432]	; (8001454 <MX_ADC1_Init+0x210>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <MX_ADC1_Init+0x210>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012ac:	4b69      	ldr	r3, [pc, #420]	; (8001454 <MX_ADC1_Init+0x210>)
 80012ae:	2203      	movs	r2, #3
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012b2:	4b68      	ldr	r3, [pc, #416]	; (8001454 <MX_ADC1_Init+0x210>)
 80012b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ba:	4b66      	ldr	r3, [pc, #408]	; (8001454 <MX_ADC1_Init+0x210>)
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c0:	4b64      	ldr	r3, [pc, #400]	; (8001454 <MX_ADC1_Init+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c8:	4862      	ldr	r0, [pc, #392]	; (8001454 <MX_ADC1_Init+0x210>)
 80012ca:	f001 fcdb 	bl	8002c84 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012d4:	f000 fc88 	bl	8001be8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	485c      	ldr	r0, [pc, #368]	; (8001454 <MX_ADC1_Init+0x210>)
 80012e4:	f002 fdf6 	bl	8003ed4 <HAL_ADCEx_MultiModeConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012ee:	f000 fc7b 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012f2:	4b5a      	ldr	r3, [pc, #360]	; (800145c <MX_ADC1_Init+0x218>)
 80012f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f6:	2306      	movs	r3, #6
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80012fa:	2307      	movs	r3, #7
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001302:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001304:	2304      	movs	r3, #4
 8001306:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	484f      	ldr	r0, [pc, #316]	; (8001454 <MX_ADC1_Init+0x210>)
 8001316:	f001 ff39 	bl	800318c <HAL_ADC_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001320:	f000 fc62 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001324:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <MX_ADC1_Init+0x21c>)
 8001326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001328:	230c      	movs	r3, #12
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4848      	ldr	r0, [pc, #288]	; (8001454 <MX_ADC1_Init+0x210>)
 8001332:	f001 ff2b 	bl	800318c <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800133c:	f000 fc54 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <MX_ADC1_Init+0x220>)
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001344:	2312      	movs	r3, #18
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4841      	ldr	r0, [pc, #260]	; (8001454 <MX_ADC1_Init+0x210>)
 800134e:	f001 ff1d 	bl	800318c <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001358:	f000 fc46 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <MX_ADC1_Init+0x224>)
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001360:	2318      	movs	r3, #24
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <MX_ADC1_Init+0x210>)
 800136a:	f001 ff0f 	bl	800318c <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001374:	f000 fc38 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001378:	4b3c      	ldr	r3, [pc, #240]	; (800146c <MX_ADC1_Init+0x228>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800137c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4833      	ldr	r0, [pc, #204]	; (8001454 <MX_ADC1_Init+0x210>)
 8001388:	f001 ff00 	bl	800318c <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001392:	f000 fc29 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <MX_ADC1_Init+0x22c>)
 8001398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800139a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800139e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	482b      	ldr	r0, [pc, #172]	; (8001454 <MX_ADC1_Init+0x210>)
 80013a6:	f001 fef1 	bl	800318c <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013b0:	f000 fc1a 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_ADC1_Init+0x230>)
 80013b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013b8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4824      	ldr	r0, [pc, #144]	; (8001454 <MX_ADC1_Init+0x210>)
 80013c4:	f001 fee2 	bl	800318c <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013ce:	f000 fc0b 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_ADC1_Init+0x234>)
 80013d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013d6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <MX_ADC1_Init+0x210>)
 80013e2:	f001 fed3 	bl	800318c <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013ec:	f000 fbfc 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_ADC1_Init+0x238>)
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013f4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4619      	mov	r1, r3
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_ADC1_Init+0x210>)
 8001400:	f001 fec4 	bl	800318c <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800140a:	f000 fbed 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_ADC1_Init+0x23c>)
 8001410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_ADC1_Init+0x210>)
 800141e:	f001 feb5 	bl	800318c <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001428:	f000 fbde 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_ADC1_Init+0x240>)
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001430:	f240 2306 	movw	r3, #518	; 0x206
 8001434:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC1_Init+0x210>)
 800143c:	f001 fea6 	bl	800318c <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001446:	f000 fbcf 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	240000dc 	.word	0x240000dc
 8001458:	40022000 	.word	0x40022000
 800145c:	0c900008 	.word	0x0c900008
 8001460:	10c00010 	.word	0x10c00010
 8001464:	14f00020 	.word	0x14f00020
 8001468:	1d500080 	.word	0x1d500080
 800146c:	21800100 	.word	0x21800100
 8001470:	25b00200 	.word	0x25b00200
 8001474:	2a000400 	.word	0x2a000400
 8001478:	2e300800 	.word	0x2e300800
 800147c:	3ac04000 	.word	0x3ac04000
 8001480:	3ef08000 	.word	0x3ef08000
 8001484:	47520000 	.word	0x47520000

08001488 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <MX_ADC3_Init+0x110>)
 80014a2:	4a3e      	ldr	r2, [pc, #248]	; (800159c <MX_ADC3_Init+0x114>)
 80014a4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_ADC3_Init+0x110>)
 80014a8:	2208      	movs	r2, #8
 80014aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <MX_ADC3_Init+0x110>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b2:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_ADC3_Init+0x110>)
 80014b4:	2204      	movs	r2, #4
 80014b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <MX_ADC3_Init+0x110>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_ADC3_Init+0x110>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <MX_ADC3_Init+0x110>)
 80014c6:	2204      	movs	r2, #4
 80014c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <MX_ADC3_Init+0x110>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <MX_ADC3_Init+0x110>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_ADC3_Init+0x110>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <MX_ADC3_Init+0x110>)
 80014de:	2203      	movs	r2, #3
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_ADC3_Init+0x110>)
 80014e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <MX_ADC3_Init+0x110>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <MX_ADC3_Init+0x110>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014f8:	4827      	ldr	r0, [pc, #156]	; (8001598 <MX_ADC3_Init+0x110>)
 80014fa:	f001 fbc3 	bl	8002c84 <HAL_ADC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001504:	f000 fb70 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_ADC3_Init+0x118>)
 800150a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150c:	2306      	movs	r3, #6
 800150e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001510:	2307      	movs	r3, #7
 8001512:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001514:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001518:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800151a:	2304      	movs	r3, #4
 800151c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	481b      	ldr	r0, [pc, #108]	; (8001598 <MX_ADC3_Init+0x110>)
 800152c:	f001 fe2e 	bl	800318c <HAL_ADC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001536:	f000 fb57 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_ADC3_Init+0x11c>)
 800153c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800153e:	230c      	movs	r3, #12
 8001540:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_ADC3_Init+0x110>)
 8001548:	f001 fe20 	bl	800318c <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001552:	f000 fb49 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001556:	2301      	movs	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800155a:	2312      	movs	r3, #18
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_ADC3_Init+0x110>)
 8001564:	f001 fe12 	bl	800318c <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800156e:	f000 fb3b 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MX_ADC3_Init+0x120>)
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001576:	2318      	movs	r3, #24
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_ADC3_Init+0x110>)
 8001580:	f001 fe04 	bl	800318c <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800158a:	f000 fb2d 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	24000140 	.word	0x24000140
 800159c:	58026000 	.word	0x58026000
 80015a0:	cb840000 	.word	0xcb840000
 80015a4:	cfb80000 	.word	0xcfb80000
 80015a8:	04300002 	.word	0x04300002

080015ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2224      	movs	r2, #36	; 0x24
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00f faf1 	bl	8010ba0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_DAC1_Init+0x5c>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_DAC1_Init+0x60>)
 80015c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <MX_DAC1_Init+0x5c>)
 80015c6:	f002 fe72 	bl	80042ae <HAL_DAC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015d0:	f000 fb0a 	bl	8001be8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015d8:	230a      	movs	r3, #10
 80015da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_DAC1_Init+0x5c>)
 80015f0:	f002 ff5e 	bl	80044b0 <HAL_DAC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 faf5 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000294 	.word	0x24000294
 800160c:	40007400 	.word	0x40007400

08001610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_I2C1_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <MX_I2C1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_I2C1_Init+0x74>)
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <MX_I2C1_Init+0x7c>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_I2C1_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_I2C1_Init+0x74>)
 800164c:	f006 f91a 	bl	8007884 <HAL_I2C_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001656:	f000 fac7 	bl	8001be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <MX_I2C1_Init+0x74>)
 800165e:	f006 fe61 	bl	8008324 <HAL_I2CEx_ConfigAnalogFilter>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001668:	f000 fabe 	bl	8001be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_I2C1_Init+0x74>)
 8001670:	f006 fea3 	bl	80083ba <HAL_I2CEx_ConfigDigitalFilter>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 fab5 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000320 	.word	0x24000320
 8001688:	40005400 	.word	0x40005400
 800168c:	20303e5d 	.word	0x20303e5d

08001690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_SPI1_Init+0xa8>)
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <MX_SPI1_Init+0xac>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_SPI1_Init+0xa8>)
 800169c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016ac:	220f      	movs	r2, #15
 80016ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016c6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI1_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI1_Init+0xa8>)
 8001724:	f00a fbf0 	bl	800bf08 <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800172e:	f000 fa5b 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000374 	.word	0x24000374
 800173c:	40013000 	.word	0x40013000

08001740 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001746:	4a29      	ldr	r2, [pc, #164]	; (80017ec <MX_SPI2_Init+0xac>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <MX_SPI2_Init+0xa8>)
 800174c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001750:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001754:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001758:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_SPI2_Init+0xa8>)
 800175c:	220f      	movs	r2, #15
 800175e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_SPI2_Init+0xa8>)
 800176e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001772:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001776:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800177a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_SPI2_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_SPI2_Init+0xa8>)
 8001796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_SPI2_Init+0xa8>)
 80017d4:	f00a fb98 	bl	800bf08 <HAL_SPI_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017de:	f000 fa03 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	240003fc 	.word	0x240003fc
 80017ec:	40003800 	.word	0x40003800

080017f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b096      	sub	sp, #88	; 0x58
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	222c      	movs	r2, #44	; 0x2c
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f00f f9bf 	bl	8010ba0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <MX_TIM1_Init+0x118>)
 8001824:	4a39      	ldr	r2, [pc, #228]	; (800190c <MX_TIM1_Init+0x11c>)
 8001826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001828:	4b37      	ldr	r3, [pc, #220]	; (8001908 <MX_TIM1_Init+0x118>)
 800182a:	2263      	movs	r2, #99	; 0x63
 800182c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <MX_TIM1_Init+0x118>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <MX_TIM1_Init+0x118>)
 8001836:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800183a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <MX_TIM1_Init+0x118>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <MX_TIM1_Init+0x118>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <MX_TIM1_Init+0x118>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800184e:	482e      	ldr	r0, [pc, #184]	; (8001908 <MX_TIM1_Init+0x118>)
 8001850:	f00b fab0 	bl	800cdb4 <HAL_TIM_PWM_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800185a:	f000 f9c5 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800186e:	4619      	mov	r1, r3
 8001870:	4825      	ldr	r0, [pc, #148]	; (8001908 <MX_TIM1_Init+0x118>)
 8001872:	f00c fb81 	bl	800df78 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800187c:	f000 f9b4 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001884:	f240 13df 	movw	r3, #479	; 0x1df
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800188e:	2300      	movs	r3, #0
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4818      	ldr	r0, [pc, #96]	; (8001908 <MX_TIM1_Init+0x118>)
 80018a8:	f00b fcf2 	bl	800d290 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018b2:	f000 f999 	bl	8001be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM1_Init+0x118>)
 80018ec:	f00c fbd2 	bl	800e094 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80018f6:	f000 f977 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM1_Init+0x118>)
 80018fc:	f000 fcae 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3758      	adds	r7, #88	; 0x58
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	24000484 	.word	0x24000484
 800190c:	40010000 	.word	0x40010000

08001910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001948:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <MX_TIM2_Init+0xe8>)
 800194c:	222f      	movs	r2, #47	; 0x2f
 800194e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001958:	f640 4234 	movw	r2, #3124	; 0xc34
 800195c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <MX_TIM2_Init+0xe8>)
 800196c:	f00a ff1d 	bl	800c7aa <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001976:	f000 f937 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001984:	4619      	mov	r1, r3
 8001986:	481c      	ldr	r0, [pc, #112]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001988:	f00b fd96 	bl	800d4b8 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001992:	f000 f929 	bl	8001be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001996:	4818      	ldr	r0, [pc, #96]	; (80019f8 <MX_TIM2_Init+0xe8>)
 8001998:	f00b fa0c 	bl	800cdb4 <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019a2:	f000 f921 	bl	8001be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a6:	2320      	movs	r3, #32
 80019a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4810      	ldr	r0, [pc, #64]	; (80019f8 <MX_TIM2_Init+0xe8>)
 80019b6:	f00c fadf 	bl	800df78 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c0:	f000 f912 	bl	8001be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	220c      	movs	r2, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_TIM2_Init+0xe8>)
 80019dc:	f00b fc58 	bl	800d290 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019e6:	f000 f8ff 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <MX_TIM2_Init+0xe8>)
 80019ec:	f000 fc36 	bl	800225c <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	240004d0 	.word	0x240004d0

080019fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <MX_USART1_UART_Init+0x94>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a08:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a46:	f00c fbc1 	bl	800e1cc <HAL_UART_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a50:	f000 f8ca 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a58:	f00e ff1b 	bl	8010892 <HAL_UARTEx_SetTxFifoThreshold>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a62:	f000 f8c1 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a66:	2100      	movs	r1, #0
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a6a:	f00e ff50 	bl	801090e <HAL_UARTEx_SetRxFifoThreshold>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a74:	f000 f8b8 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_USART1_UART_Init+0x90>)
 8001a7a:	f00e fed1 	bl	8010820 <HAL_UARTEx_DisableFifoMode>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a84:	f000 f8b0 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2400051c 	.word	0x2400051c
 8001a90:	40011000 	.word	0x40011000

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_DMA_Init+0x5c>)
 8001a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aa0:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_DMA_Init+0x5c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_DMA_Init+0x5c>)
 8001aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	200b      	movs	r0, #11
 8001abe:	f002 fbc2 	bl	8004246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ac2:	200b      	movs	r0, #11
 8001ac4:	f002 fbd9 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	200c      	movs	r0, #12
 8001ace:	f002 fbba 	bl	8004246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ad2:	200c      	movs	r0, #12
 8001ad4:	f002 fbd1 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2010      	movs	r0, #16
 8001ade:	f002 fbb2 	bl	8004246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ae2:	2010      	movs	r0, #16
 8001ae4:	f002 fbc9 	bl	800427a <HAL_NVIC_EnableIRQ>

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400

08001af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b34      	ldr	r3, [pc, #208]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_GPIO_Init+0xe8>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001b88:	4815      	ldr	r0, [pc, #84]	; (8001be0 <MX_GPIO_Init+0xec>)
 8001b8a:	f005 fe61 	bl	8007850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2164      	movs	r1, #100	; 0x64
 8001b92:	4814      	ldr	r0, [pc, #80]	; (8001be4 <MX_GPIO_Init+0xf0>)
 8001b94:	f005 fe5c 	bl	8007850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b98:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001b9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <MX_GPIO_Init+0xec>)
 8001bb2:	f005 fc85 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bb6:	2364      	movs	r3, #100	; 0x64
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_GPIO_Init+0xf0>)
 8001bce:	f005 fc77 	bl	80074c0 <HAL_GPIO_Init>

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58020800 	.word	0x58020800
 8001be4:	58020400 	.word	0x58020400

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <Error_Handler+0x8>
	...

08001bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_MspInit+0x30>)
 8001bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c00:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_MspInit+0x30>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_MspInit+0x30>)
 8001c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	58024400 	.word	0x58024400

08001c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a7b      	ldr	r2, [pc, #492]	; (8001e34 <HAL_ADC_MspInit+0x20c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	f040 8091 	bne.w	8001d6e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c52:	4a79      	ldr	r2, [pc, #484]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c5c:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	4a62      	ldr	r2, [pc, #392]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb6:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cc4:	2333      	movs	r3, #51	; 0x33
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4859      	ldr	r0, [pc, #356]	; (8001e3c <HAL_ADC_MspInit+0x214>)
 8001cd8:	f005 fbf2 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001cdc:	23ce      	movs	r3, #206	; 0xce
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	4854      	ldr	r0, [pc, #336]	; (8001e40 <HAL_ADC_MspInit+0x218>)
 8001cf0:	f005 fbe6 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	484f      	ldr	r0, [pc, #316]	; (8001e44 <HAL_ADC_MspInit+0x21c>)
 8001d08:	f005 fbda 	bl	80074c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d0c:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d0e:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_ADC_MspInit+0x224>)
 8001d10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d12:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d14:	2209      	movs	r2, #9
 8001d16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d24:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d34:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d50:	483d      	ldr	r0, [pc, #244]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d52:	f002 fd79 	bl	8004848 <HAL_DMA_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d5c:	f7ff ff44 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d64:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d66:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <HAL_ADC_MspInit+0x220>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d6c:	e05e      	b.n	8001e2c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <HAL_ADC_MspInit+0x228>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d159      	bne.n	8001e2c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d78:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_ADC_MspInit+0x210>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001db4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001db8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001dbc:	f000 fd3e 	bl	800283c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001dc0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001dc4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001dc8:	f000 fd38 	bl	800283c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001dce:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_ADC_MspInit+0x230>)
 8001dd0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001dd4:	2273      	movs	r2, #115	; 0x73
 8001dd6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dea:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001dee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e02:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e10:	4810      	ldr	r0, [pc, #64]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001e12:	f002 fd19 	bl	8004848 <HAL_DMA_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e1c:	f7ff fee4 	bl	8001be8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001e24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <HAL_ADC_MspInit+0x22c>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	; 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40022000 	.word	0x40022000
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58020800 	.word	0x58020800
 8001e40:	58020000 	.word	0x58020000
 8001e44:	58020400 	.word	0x58020400
 8001e48:	240001a4 	.word	0x240001a4
 8001e4c:	40020010 	.word	0x40020010
 8001e50:	58026000 	.word	0x58026000
 8001e54:	2400021c 	.word	0x2400021c
 8001e58:	40020028 	.word	0x40020028

08001e5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a30      	ldr	r2, [pc, #192]	; (8001f3c <HAL_DAC_MspInit+0xe0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d159      	bne.n	8001f32 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e7e:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e84:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001e86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eba:	2310      	movs	r3, #16
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481d      	ldr	r0, [pc, #116]	; (8001f44 <HAL_DAC_MspInit+0xe8>)
 8001ece:	f005 faf7 	bl	80074c0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_DAC_MspInit+0xf0>)
 8001ed6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001eda:	2243      	movs	r2, #67	; 0x43
 8001edc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f00:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f08:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001f18:	f002 fc96 	bl	8004848 <HAL_DMA_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f22:	f7ff fe61 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_DAC_MspInit+0xec>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40007400 	.word	0x40007400
 8001f40:	58024400 	.word	0x58024400
 8001f44:	58020000 	.word	0x58020000
 8001f48:	240002a8 	.word	0x240002a8
 8001f4c:	40020088 	.word	0x40020088

08001f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0ba      	sub	sp, #232	; 0xe8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	22c0      	movs	r2, #192	; 0xc0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00e fe15 	bl	8010ba0 <memset>
  if(hi2c->Instance==I2C1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a27      	ldr	r2, [pc, #156]	; (8002018 <HAL_I2C_MspInit+0xc8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d146      	bne.n	800200e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f80:	f04f 0208 	mov.w	r2, #8
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4618      	mov	r0, r3
 8001f98:	f007 fab8 	bl	800950c <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fa2:	f7ff fe21 	bl	8001be8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_I2C_MspInit+0xcc>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_I2C_MspInit+0xcc>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_I2C_MspInit+0xcc>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fcc:	2312      	movs	r3, #18
 8001fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <HAL_I2C_MspInit+0xd0>)
 8001fec:	f005 fa68 	bl	80074c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_I2C_MspInit+0xcc>)
 8001ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_I2C_MspInit+0xcc>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_I2C_MspInit+0xcc>)
 8002002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	37e8      	adds	r7, #232	; 0xe8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40005400 	.word	0x40005400
 800201c:	58024400 	.word	0x58024400
 8002020:	58020400 	.word	0x58020400

08002024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0bc      	sub	sp, #240	; 0xf0
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	22c0      	movs	r2, #192	; 0xc0
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f00e fdab 	bl	8010ba0 <memset>
  if(hspi->Instance==SPI1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_SPI_MspInit+0x15c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d145      	bne.n	80020e0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002060:	2300      	movs	r3, #0
 8002062:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002064:	f107 0318 	add.w	r3, r7, #24
 8002068:	4618      	mov	r0, r3
 800206a:	f007 fa4f 	bl	800950c <HAL_RCCEx_PeriphCLKConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002074:	f7ff fdb8 	bl	8001be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_SPI_MspInit+0x160>)
 800207a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_SPI_MspInit+0x160>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002084:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002088:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_SPI_MspInit+0x160>)
 800208a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800208e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_SPI_MspInit+0x160>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209c:	4a39      	ldr	r2, [pc, #228]	; (8002184 <HAL_SPI_MspInit+0x160>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_SPI_MspInit+0x160>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020b4:	2318      	movs	r3, #24
 80020b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020cc:	2305      	movs	r3, #5
 80020ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020d6:	4619      	mov	r1, r3
 80020d8:	482b      	ldr	r0, [pc, #172]	; (8002188 <HAL_SPI_MspInit+0x164>)
 80020da:	f005 f9f1 	bl	80074c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020de:	e04a      	b.n	8002176 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a29      	ldr	r2, [pc, #164]	; (800218c <HAL_SPI_MspInit+0x168>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d145      	bne.n	8002176 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fa:	f107 0318 	add.w	r3, r7, #24
 80020fe:	4618      	mov	r0, r3
 8002100:	f007 fa04 	bl	800950c <HAL_RCCEx_PeriphCLKConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800210a:	f7ff fd6d 	bl	8001be8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_SPI_MspInit+0x160>)
 8002110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_SPI_MspInit+0x160>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_SPI_MspInit+0x160>)
 8002120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_SPI_MspInit+0x160>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_SPI_MspInit+0x160>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_SPI_MspInit+0x160>)
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800214a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800214e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002164:	2305      	movs	r3, #5
 8002166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_SPI_MspInit+0x164>)
 8002172:	f005 f9a5 	bl	80074c0 <HAL_GPIO_Init>
}
 8002176:	bf00      	nop
 8002178:	37f0      	adds	r7, #240	; 0xf0
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40013000 	.word	0x40013000
 8002184:	58024400 	.word	0x58024400
 8002188:	58020400 	.word	0x58020400
 800218c:	40003800 	.word	0x40003800

08002190 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_TIM_PWM_MspInit+0x78>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d12e      	bne.n	8002200 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_TIM_PWM_MspInit+0x7c>)
 80021a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_TIM_PWM_MspInit+0x7c>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_TIM_PWM_MspInit+0x7c>)
 80021b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	2018      	movs	r0, #24
 80021c6:	f002 f83e 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021ca:	2018      	movs	r0, #24
 80021cc:	f002 f855 	bl	800427a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2019      	movs	r0, #25
 80021d6:	f002 f836 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021da:	2019      	movs	r0, #25
 80021dc:	f002 f84d 	bl	800427a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	201a      	movs	r0, #26
 80021e6:	f002 f82e 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021ea:	201a      	movs	r0, #26
 80021ec:	f002 f845 	bl	800427a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	201b      	movs	r0, #27
 80021f6:	f002 f826 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80021fa:	201b      	movs	r0, #27
 80021fc:	f002 f83d 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010000 	.word	0x40010000
 800220c:	58024400 	.word	0x58024400

08002210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d116      	bne.n	8002250 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_TIM_Base_MspInit+0x48>)
 8002224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_TIM_Base_MspInit+0x48>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_TIM_Base_MspInit+0x48>)
 8002234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	201c      	movs	r0, #28
 8002246:	f001 fffe 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800224a:	201c      	movs	r0, #28
 800224c:	f002 f815 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	58024400 	.word	0x58024400

0800225c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d120      	bne.n	80022c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800229c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4818      	ldr	r0, [pc, #96]	; (800231c <HAL_TIM_MspPostInit+0xc0>)
 80022ba:	f005 f901 	bl	80074c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022be:	e024      	b.n	800230a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d11f      	bne.n	800230a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fa:	2301      	movs	r3, #1
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4806      	ldr	r0, [pc, #24]	; (8002320 <HAL_TIM_MspPostInit+0xc4>)
 8002306:	f005 f8db 	bl	80074c0 <HAL_GPIO_Init>
}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	58024400 	.word	0x58024400
 800231c:	58020000 	.word	0x58020000
 8002320:	58020400 	.word	0x58020400

08002324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0ba      	sub	sp, #232	; 0xe8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	22c0      	movs	r2, #192	; 0xc0
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f00e fc2b 	bl	8010ba0 <memset>
  if(huart->Instance==USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <HAL_UART_MspInit+0xd8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d14e      	bne.n	80023f2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002354:	f04f 0201 	mov.w	r2, #1
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f007 f8ce 	bl	800950c <HAL_RCCEx_PeriphCLKConfig>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002376:	f7ff fc37 	bl	8001be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_UART_MspInit+0xdc>)
 800237c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_UART_MspInit+0xdc>)
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_UART_MspInit+0xdc>)
 800238c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_UART_MspInit+0xdc>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_UART_MspInit+0xdc>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0xdc>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d0:	2307      	movs	r3, #7
 80023d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023da:	4619      	mov	r1, r3
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <HAL_UART_MspInit+0xe0>)
 80023de:	f005 f86f 	bl	80074c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2025      	movs	r0, #37	; 0x25
 80023e8:	f001 ff2d 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ec:	2025      	movs	r0, #37	; 0x25
 80023ee:	f001 ff44 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023f2:	bf00      	nop
 80023f4:	37e8      	adds	r7, #232	; 0xe8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40011000 	.word	0x40011000
 8002400:	58024400 	.word	0x58024400
 8002404:	58020000 	.word	0x58020000

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002454:	f000 f9b6 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <DMA1_Stream0_IRQHandler+0x10>)
 8002462:	f003 fd1b 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	240001a4 	.word	0x240001a4

08002470 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA1_Stream1_IRQHandler+0x10>)
 8002476:	f003 fd11 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2400021c 	.word	0x2400021c

08002484 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA1_Stream5_IRQHandler+0x10>)
 800248a:	f003 fd07 	bl	8005e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	240002a8 	.word	0x240002a8

08002498 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <TIM1_BRK_IRQHandler+0x10>)
 800249e:	f00a fdef 	bl	800d080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	24000484 	.word	0x24000484

080024ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <TIM1_UP_IRQHandler+0x10>)
 80024b2:	f00a fde5 	bl	800d080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	24000484 	.word	0x24000484

080024c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80024c6:	f00a fddb 	bl	800d080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	24000484 	.word	0x24000484

080024d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <TIM1_CC_IRQHandler+0x10>)
 80024da:	f00a fdd1 	bl	800d080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	24000484 	.word	0x24000484

080024e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <TIM2_IRQHandler+0x10>)
 80024ee:	f00a fdc7 	bl	800d080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	240004d0 	.word	0x240004d0

080024fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <USART1_IRQHandler+0x10>)
 8002502:	f00b ff8d 	bl	800e420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2400051c 	.word	0x2400051c

08002510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <_sbrk+0x5c>)
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <_sbrk+0x60>)
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <_sbrk+0x64>)
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <_sbrk+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002540:	f00e fb46 	bl	8010bd0 <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	220c      	movs	r2, #12
 8002548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254e:	e009      	b.n	8002564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <_sbrk+0x64>)
 8002560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	24080000 	.word	0x24080000
 8002570:	00000400 	.word	0x00000400
 8002574:	24000664 	.word	0x24000664
 8002578:	240007b8 	.word	0x240007b8

0800257c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <SystemInit+0xe4>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	4a36      	ldr	r2, [pc, #216]	; (8002660 <SystemInit+0xe4>)
 8002588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800258c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <SystemInit+0xe8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	2b06      	cmp	r3, #6
 800259a:	d807      	bhi.n	80025ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <SystemInit+0xe8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 030f 	bic.w	r3, r3, #15
 80025a4:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <SystemInit+0xe8>)
 80025a6:	f043 0307 	orr.w	r3, r3, #7
 80025aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <SystemInit+0xec>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <SystemInit+0xec>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <SystemInit+0xec>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <SystemInit+0xec>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4929      	ldr	r1, [pc, #164]	; (8002668 <SystemInit+0xec>)
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <SystemInit+0xf0>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <SystemInit+0xe8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <SystemInit+0xe8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 030f 	bic.w	r3, r3, #15
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <SystemInit+0xe8>)
 80025e0:	f043 0307 	orr.w	r3, r3, #7
 80025e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <SystemInit+0xec>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <SystemInit+0xec>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <SystemInit+0xec>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <SystemInit+0xec>)
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <SystemInit+0xf4>)
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <SystemInit+0xec>)
 8002600:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <SystemInit+0xf8>)
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <SystemInit+0xec>)
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <SystemInit+0xfc>)
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <SystemInit+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <SystemInit+0xec>)
 8002612:	4a19      	ldr	r2, [pc, #100]	; (8002678 <SystemInit+0xfc>)
 8002614:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <SystemInit+0xec>)
 8002618:	2200      	movs	r2, #0
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <SystemInit+0xec>)
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <SystemInit+0xfc>)
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <SystemInit+0xec>)
 8002624:	2200      	movs	r2, #0
 8002626:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <SystemInit+0xec>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <SystemInit+0xec>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <SystemInit+0xec>)
 8002636:	2200      	movs	r2, #0
 8002638:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <SystemInit+0x100>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <SystemInit+0x104>)
 8002640:	4013      	ands	r3, r2
 8002642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002646:	d202      	bcs.n	800264e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <SystemInit+0x108>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <SystemInit+0x10c>)
 8002650:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002654:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	52002000 	.word	0x52002000
 8002668:	58024400 	.word	0x58024400
 800266c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002670:	02020200 	.word	0x02020200
 8002674:	01ff0000 	.word	0x01ff0000
 8002678:	01010280 	.word	0x01010280
 800267c:	5c001000 	.word	0x5c001000
 8002680:	ffff0000 	.word	0xffff0000
 8002684:	51008108 	.word	0x51008108
 8002688:	52004000 	.word	0x52004000

0800268c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800268c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002690:	f7ff ff74 	bl	800257c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	; (80026cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ba:	f00e fa8f 	bl	8010bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026be:	f7fe fc83 	bl	8000fc8 <main>
  bx  lr
 80026c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026cc:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 80026d0:	08010d5c 	.word	0x08010d5c
  ldr r2, =_sbss
 80026d4:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 80026d8:	240007b4 	.word	0x240007b4

080026dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC3_IRQHandler>
	...

080026e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e6:	2003      	movs	r0, #3
 80026e8:	f001 fda2 	bl	8004230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026ec:	f006 fd38 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_Init+0x68>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4913      	ldr	r1, [pc, #76]	; (800274c <HAL_Init+0x6c>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_Init+0x68>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_Init+0x6c>)
 8002714:	5cd3      	ldrb	r3, [r2, r3]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_Init+0x70>)
 8002722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_Init+0x74>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272a:	200f      	movs	r0, #15
 800272c:	f000 f814 	bl	8002758 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e002      	b.n	8002740 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800273a:	f7ff fa5b 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	58024400 	.word	0x58024400
 800274c:	08010d0c 	.word	0x08010d0c
 8002750:	24000048 	.word	0x24000048
 8002754:	24000044 	.word	0x24000044

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_InitTick+0x60>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e021      	b.n	80027b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_InitTick+0x64>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_InitTick+0x60>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f001 fd87 	bl	8004296 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a0:	f001 fd51 	bl	8004246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x68>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	24000050 	.word	0x24000050
 80027bc:	24000044 	.word	0x24000044
 80027c0:	2400004c 	.word	0x2400004c

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	24000050 	.word	0x24000050
 80027e8:	24000668 	.word	0x24000668

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	24000668 	.word	0x24000668

08002804 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_SuspendTick+0x1c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_SuspendTick+0x1c>)
 800280e:	f023 0302 	bic.w	r3, r3, #2
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_GetREVID+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0c1b      	lsrs	r3, r3, #16
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	5c001000 	.word	0x5c001000

0800283c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	58000400 	.word	0x58000400

08002868 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	609a      	str	r2, [r3, #8]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	611a      	str	r2, [r3, #16]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002942:	b480      	push	{r7}
 8002944:	b087      	sub	sp, #28
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	431a      	orrs	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	601a      	str	r2, [r3, #0]
  }
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800299e:	b480      	push	{r7}
 80029a0:	b087      	sub	sp, #28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3330      	adds	r3, #48	; 0x30
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	4413      	add	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	211f      	movs	r1, #31
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	f003 011f 	and.w	r1, r3, #31
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f023 0203 	bic.w	r2, r3, #3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0e5b      	lsrs	r3, r3, #25
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0d1b      	lsrs	r3, r3, #20
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2107      	movs	r1, #7
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	401a      	ands	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0d1b      	lsrs	r3, r3, #20
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0318 	and.w	r3, r3, #24
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a98:	40d9      	lsrs	r1, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	000fffff 	.word	0x000fffff

08002abc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6093      	str	r3, [r2, #8]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	5fffffc0 	.word	0x5fffffc0

08002afc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b10:	d101      	bne.n	8002b16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	6fffffc0 	.word	0x6fffffc0

08002b4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b60:	d101      	bne.n	8002b66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <LL_ADC_Enable+0x24>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	7fffffc0 	.word	0x7fffffc0

08002b9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <LL_ADC_Disable+0x24>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	f043 0202 	orr.w	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	7fffffc0 	.word	0x7fffffc0

08002bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_IsEnabled+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_IsEnabled+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_IsDisableOngoing+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_IsDisableOngoing+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <LL_ADC_REG_StartConversion+0x24>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	7fffffc0 	.word	0x7fffffc0

08002c38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d101      	bne.n	8002c50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e18f      	b.n	8002fbe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fe ffbb 	bl	8001c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff19 	bl	8002afc <LL_ADC_IsDeepPowerDownEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff feff 	bl	8002ad8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff34 	bl	8002b4c <LL_ADC_IsInternalRegulatorEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff18 	bl	8002b24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf4:	4b87      	ldr	r3, [pc, #540]	; (8002f14 <HAL_ADC_Init+0x290>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	4a87      	ldr	r2, [pc, #540]	; (8002f18 <HAL_ADC_Init+0x294>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	3301      	adds	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff17 	bl	8002b4c <LL_ADC_IsInternalRegulatorEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0210 	orr.w	r2, r3, #16
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff77 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8002d4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8129 	bne.w	8002fac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8125 	bne.w	8002fac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff24 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d136      	bne.n	8002df0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a65      	ldr	r2, [pc, #404]	; (8002f1c <HAL_ADC_Init+0x298>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x112>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_ADC_Init+0x29c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10e      	bne.n	8002db4 <HAL_ADC_Init+0x130>
 8002d96:	4861      	ldr	r0, [pc, #388]	; (8002f1c <HAL_ADC_Init+0x298>)
 8002d98:	f7ff ff14 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4860      	ldr	r0, [pc, #384]	; (8002f20 <HAL_ADC_Init+0x29c>)
 8002da0:	f7ff ff10 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e008      	b.n	8002dc6 <HAL_ADC_Init+0x142>
 8002db4:	485b      	ldr	r0, [pc, #364]	; (8002f24 <HAL_ADC_Init+0x2a0>)
 8002db6:	f7ff ff05 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a53      	ldr	r2, [pc, #332]	; (8002f1c <HAL_ADC_Init+0x298>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Init+0x15a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_ADC_Init+0x29c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Init+0x15e>
 8002dde:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_ADC_Init+0x2a4>)
 8002de0:	e000      	b.n	8002de4 <HAL_ADC_Init+0x160>
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_ADC_Init+0x2a8>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f7ff fd3c 	bl	8002868 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002df0:	f7ff fd18 	bl	8002824 <HAL_GetREVID>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d914      	bls.n	8002e28 <HAL_ADC_Init+0x1a4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d110      	bne.n	8002e28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7d5b      	ldrb	r3, [r3, #21]
 8002e0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7f1b      	ldrb	r3, [r3, #28]
 8002e1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e20:	f043 030c 	orr.w	r3, r3, #12
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e00d      	b.n	8002e44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7d5b      	ldrb	r3, [r3, #21]
 8002e2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f1b      	ldrb	r3, [r3, #28]
 8002e3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7f1b      	ldrb	r3, [r3, #28]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	045b      	lsls	r3, r3, #17
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_ADC_Init+0x2ac>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fed2 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fedf 	bl	8002c5e <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d15f      	bne.n	8002f68 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15c      	bne.n	8002f68 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7d1b      	ldrb	r3, [r3, #20]
 8002eb2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_ADC_Init+0x2b0>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d130      	bne.n	8002f3c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_ADC_Init+0x2b4>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0411      	lsls	r1, r2, #16
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef6:	4311      	orrs	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f02:	430a      	orrs	r2, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	611a      	str	r2, [r3, #16]
 8002f10:	e01c      	b.n	8002f4c <HAL_ADC_Init+0x2c8>
 8002f12:	bf00      	nop
 8002f14:	24000044 	.word	0x24000044
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40022100 	.word	0x40022100
 8002f24:	58026000 	.word	0x58026000
 8002f28:	40022300 	.word	0x40022300
 8002f2c:	58026300 	.word	0x58026300
 8002f30:	fff0c003 	.word	0xfff0c003
 8002f34:	ffffbffc 	.word	0xffffbffc
 8002f38:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fdec 	bl	8003b40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f023 010f 	bic.w	r1, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	e007      	b.n	8002f9a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020f 	bic.w	r2, r2, #15
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
 8002faa:	e007      	b.n	8002fbc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0210 	orr.w	r2, r3, #16
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd90      	pop	{r4, r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <HAL_ADC_Start_DMA+0x168>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x20>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_ADC_Start_DMA+0x16c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_Start_DMA+0x24>
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_ADC_Start_DMA+0x170>)
 8002fea:	e000      	b.n	8002fee <HAL_ADC_Start_DMA+0x26>
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_ADC_Start_DMA+0x174>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fd64 	bl	8002abc <LL_ADC_GetMultimode>
 8002ff4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe1c 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 808c 	bne.w	8003120 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Start_DMA+0x4e>
 8003012:	2302      	movs	r3, #2
 8003014:	e087      	b.n	8003126 <HAL_ADC_Start_DMA+0x15e>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d002      	beq.n	8003030 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b09      	cmp	r3, #9
 800302e:	d170      	bne.n	8003112 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fc07 	bl	8003844 <ADC_Enable>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d163      	bne.n	8003108 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_ADC_Start_DMA+0x178>)
 8003046:	4013      	ands	r3, r2
 8003048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a37      	ldr	r2, [pc, #220]	; (8003134 <HAL_ADC_Start_DMA+0x16c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d002      	beq.n	8003060 <HAL_ADC_Start_DMA+0x98>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e000      	b.n	8003062 <HAL_ADC_Start_DMA+0x9a>
 8003060:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_ADC_Start_DMA+0x168>)
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	4293      	cmp	r3, r2
 8003068:	d002      	beq.n	8003070 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f023 0206 	bic.w	r2, r3, #6
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	659a      	str	r2, [r3, #88]	; 0x58
 8003094:	e002      	b.n	800309c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_ADC_Start_DMA+0x17c>)
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_ADC_Start_DMA+0x180>)
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <HAL_ADC_Start_DMA+0x184>)
 80030b2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	221c      	movs	r2, #28
 80030ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0210 	orr.w	r2, r2, #16
 80030d2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7ff fc89 	bl	80029f6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3340      	adds	r3, #64	; 0x40
 80030ee:	4619      	mov	r1, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f001 ff04 	bl	8004f00 <HAL_DMA_Start_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fd85 	bl	8002c10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003106:	e00d      	b.n	8003124 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003110:	e008      	b.n	8003124 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800311e:	e001      	b.n	8003124 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000
 8003134:	40022100 	.word	0x40022100
 8003138:	40022300 	.word	0x40022300
 800313c:	58026300 	.word	0x58026300
 8003140:	fffff0fe 	.word	0xfffff0fe
 8003144:	08003a17 	.word	0x08003a17
 8003148:	08003aef 	.word	0x08003aef
 800314c:	08003b0b 	.word	0x08003b0b

08003150 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b0a1      	sub	sp, #132	; 0x84
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_ADC_ConfigChannel+0x1b0>)
 80031a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x2a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e32e      	b.n	8003814 <HAL_ADC_ConfigChannel+0x688>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fd38 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8313 	bne.w	80037f6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db2c      	blt.n	8003232 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x6a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2201      	movs	r2, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	e016      	b.n	8003224 <HAL_ADC_ConfigChannel+0x98>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003206:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	69d1      	ldr	r1, [r2, #28]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	430b      	orrs	r3, r1
 8003230:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	f7ff fbad 	bl	800299e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fcf5 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 800324e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd02 	bl	8002c5e <LL_ADC_INJ_IsConversionOngoing>
 800325a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800325c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80b8 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 80b4 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	461a      	mov	r2, r3
 800327a:	f7ff fbcf 	bl	8002a1c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_ADC_ConfigChannel+0x1b4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328a:	d10b      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x118>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	e01d      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x154>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x13e>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	e00a      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x154>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d02c      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f8:	f7ff faea 	bl	80028d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	7e5b      	ldrb	r3, [r3, #25]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x186>
 800330c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003310:	e000      	b.n	8003314 <HAL_ADC_ConfigChannel+0x188>
 8003312:	2300      	movs	r3, #0
 8003314:	461a      	mov	r2, r3
 8003316:	f7ff fb14 	bl	8002942 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	7e1b      	ldrb	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1a4>
 800332a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332e:	e000      	b.n	8003332 <HAL_ADC_ConfigChannel+0x1a6>
 8003330:	2300      	movs	r3, #0
 8003332:	461a      	mov	r2, r3
 8003334:	f7ff faec 	bl	8002910 <LL_ADC_SetDataRightShift>
 8003338:	e04c      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x248>
 800333a:	bf00      	nop
 800333c:	47ff0000 	.word	0x47ff0000
 8003340:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	069b      	lsls	r3, r3, #26
 8003354:	429a      	cmp	r2, r3
 8003356:	d107      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	069b      	lsls	r3, r3, #26
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800338a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	069b      	lsls	r3, r3, #26
 800339c:	429a      	cmp	r2, r3
 800339e:	d107      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fbf3 	bl	8002bc4 <LL_ADC_IsEnabled>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8211 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff fb3e 	bl	8002a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4aa1      	ldr	r2, [pc, #644]	; (8003684 <HAL_ADC_ConfigChannel+0x4f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 812e 	bne.w	8003660 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2a0>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b09      	cmp	r3, #9
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e019      	b.n	8003460 <HAL_ADC_ConfigChannel+0x2d4>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800343e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b09      	cmp	r3, #9
 8003458:	bf94      	ite	ls
 800345a:	2301      	movls	r3, #1
 800345c:	2300      	movhi	r3, #0
 800345e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003460:	2b00      	cmp	r3, #0
 8003462:	d079      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x2f4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	e015      	b.n	80034ac <HAL_ADC_ConfigChannel+0x320>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003490:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800349c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x340>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	e017      	b.n	80034fc <HAL_ADC_ConfigChannel+0x370>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x396>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	051b      	lsls	r3, r3, #20
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x3c8>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003554:	430b      	orrs	r3, r1
 8003556:	e07e      	b.n	8003656 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x3e8>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	3301      	adds	r3, #1
 800356c:	069b      	lsls	r3, r3, #26
 800356e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003572:	e015      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x414>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	069b      	lsls	r3, r3, #26
 800359c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x434>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	e017      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x464>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	61bb      	str	r3, [r7, #24]
  return result;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	ea42 0103 	orr.w	r1, r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_ConfigChannel+0x490>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	3301      	adds	r3, #1
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	3b1e      	subs	r3, #30
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361a:	e01b      	b.n	8003654 <HAL_ADC_ConfigChannel+0x4c8>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	60fb      	str	r3, [r7, #12]
  return result;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f003 021f 	and.w	r2, r3, #31
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	3b1e      	subs	r3, #30
 800364e:	051b      	lsls	r3, r3, #20
 8003650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003654:	430b      	orrs	r3, r1
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	4619      	mov	r1, r3
 800365c:	f7ff f9de 	bl	8002a1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f280 80cf 	bge.w	8003808 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_ADC_ConfigChannel+0x4fc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_ADC_ConfigChannel+0x4f2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_ADC_ConfigChannel+0x500>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10a      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x508>
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_ADC_ConfigChannel+0x504>)
 8003680:	e009      	b.n	8003696 <HAL_ADC_ConfigChannel+0x50a>
 8003682:	bf00      	nop
 8003684:	47ff0000 	.word	0x47ff0000
 8003688:	40022000 	.word	0x40022000
 800368c:	40022100 	.word	0x40022100
 8003690:	40022300 	.word	0x40022300
 8003694:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f90c 	bl	80028b4 <LL_ADC_GetCommonPathInternalCh>
 800369c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5f      	ldr	r2, [pc, #380]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x526>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10e      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x544>
 80036b2:	485b      	ldr	r0, [pc, #364]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 80036b4:	f7ff fa86 	bl	8002bc4 <LL_ADC_IsEnabled>
 80036b8:	4604      	mov	r4, r0
 80036ba:	485a      	ldr	r0, [pc, #360]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 80036bc:	f7ff fa82 	bl	8002bc4 <LL_ADC_IsEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4323      	orrs	r3, r4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x556>
 80036d0:	4855      	ldr	r0, [pc, #340]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 80036d2:	f7ff fa77 	bl	8002bc4 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d07d      	beq.n	80037e2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a50      	ldr	r2, [pc, #320]	; (800382c <HAL_ADC_ConfigChannel+0x6a0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d130      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x5c6>
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d12b      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	f040 8081 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a45      	ldr	r2, [pc, #276]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_ADC_ConfigChannel+0x58e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a43      	ldr	r2, [pc, #268]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x592>
 800371a:	4a45      	ldr	r2, [pc, #276]	; (8003830 <HAL_ADC_ConfigChannel+0x6a4>)
 800371c:	e000      	b.n	8003720 <HAL_ADC_ConfigChannel+0x594>
 800371e:	4a3f      	ldr	r2, [pc, #252]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7ff f8b0 	bl	800288e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_ADC_ConfigChannel+0x6a8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	4a40      	ldr	r2, [pc, #256]	; (8003838 <HAL_ADC_ConfigChannel+0x6ac>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	3301      	adds	r3, #1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003742:	e002      	b.n	800374a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f9      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003750:	e05a      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_ADC_ConfigChannel+0x6b0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d11e      	bne.n	800379a <HAL_ADC_ConfigChannel+0x60e>
 800375c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d14b      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x5f8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x5fc>
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_ADC_ConfigChannel+0x6a4>)
 8003786:	e000      	b.n	800378a <HAL_ADC_ConfigChannel+0x5fe>
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 800378a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7ff f87b 	bl	800288e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003798:	e036      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <HAL_ADC_ConfigChannel+0x6b4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d131      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d12c      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d127      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_ConfigChannel+0x640>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x644>
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_ADC_ConfigChannel+0x6a4>)
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x646>
 80037d0:	4a12      	ldr	r2, [pc, #72]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 80037d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f7ff f857 	bl	800288e <LL_ADC_SetCommonPathInternalCh>
 80037e0:	e012      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037f4:	e008      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003810:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003814:	4618      	mov	r0, r3
 8003816:	3784      	adds	r7, #132	; 0x84
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}
 800381c:	58026300 	.word	0x58026300
 8003820:	40022000 	.word	0x40022000
 8003824:	40022100 	.word	0x40022100
 8003828:	58026000 	.word	0x58026000
 800382c:	cb840000 	.word	0xcb840000
 8003830:	40022300 	.word	0x40022300
 8003834:	24000044 	.word	0x24000044
 8003838:	053e2d63 	.word	0x053e2d63
 800383c:	c7520000 	.word	0xc7520000
 8003840:	cfb80000 	.word	0xcfb80000

08003844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f9b7 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d16e      	bne.n	800393a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <ADC_Enable+0x100>)
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e05a      	b.n	800393c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f972 	bl	8002b74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003890:	f7fe ffac 	bl	80027ec <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <ADC_Enable+0x104>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <ADC_Enable+0x66>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <ADC_Enable+0x108>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <ADC_Enable+0x6a>
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <ADC_Enable+0x10c>)
 80038ac:	e000      	b.n	80038b0 <ADC_Enable+0x6c>
 80038ae:	4b29      	ldr	r3, [pc, #164]	; (8003954 <ADC_Enable+0x110>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f903 	bl	8002abc <LL_ADC_GetMultimode>
 80038b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <ADC_Enable+0x108>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d002      	beq.n	80038c8 <ADC_Enable+0x84>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e000      	b.n	80038ca <ADC_Enable+0x86>
 80038c8:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <ADC_Enable+0x104>)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02c      	beq.n	800392c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d130      	bne.n	800393a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d8:	e028      	b.n	800392c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f970 	bl	8002bc4 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff f940 	bl	8002b74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f4:	f7fe ff7a 	bl	80027ec <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d914      	bls.n	800392c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d00d      	beq.n	800392c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d1cf      	bne.n	80038da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	8000003f 	.word	0x8000003f
 8003948:	40022000 	.word	0x40022000
 800394c:	40022100 	.word	0x40022100
 8003950:	40022300 	.word	0x40022300
 8003954:	58026300 	.word	0x58026300

08003958 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f940 	bl	8002bea <LL_ADC_IsDisableOngoing>
 800396a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f927 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d047      	beq.n	8003a0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d144      	bne.n	8003a0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030d 	and.w	r3, r3, #13
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10c      	bne.n	80039aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f901 	bl	8002b9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2203      	movs	r2, #3
 80039a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039a2:	f7fe ff23 	bl	80027ec <HAL_GetTick>
 80039a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a8:	e029      	b.n	80039fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f043 0210 	orr.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e023      	b.n	8003a0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039c6:	f7fe ff11 	bl	80027ec <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d914      	bls.n	80039fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e007      	b.n	8003a0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1dc      	bne.n	80039c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d14b      	bne.n	8003ac8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe ff92 	bl	8002978 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d032      	beq.n	8003ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d12b      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11f      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
 8003a8c:	e018      	b.n	8003ac0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fb45 	bl	8003150 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ac6:	e00e      	b.n	8003ae6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fb4f 	bl	8003178 <HAL_ADC_ErrorCallback>
}
 8003ada:	e004      	b.n	8003ae6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fb31 	bl	8003164 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	f043 0204 	orr.w	r2, r3, #4
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff fb21 	bl	8003178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <ADC_ConfigureBoostMode+0x1f8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <ADC_ConfigureBoostMode+0x1c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <ADC_ConfigureBoostMode+0x1fc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d109      	bne.n	8003b70 <ADC_ConfigureBoostMode+0x30>
 8003b5c:	4b78      	ldr	r3, [pc, #480]	; (8003d40 <ADC_ConfigureBoostMode+0x200>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e008      	b.n	8003b82 <ADC_ConfigureBoostMode+0x42>
 8003b70:	4b74      	ldr	r3, [pc, #464]	; (8003d44 <ADC_ConfigureBoostMode+0x204>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01c      	beq.n	8003bc0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b86:	f005 fc65 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 8003b8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b94:	d010      	beq.n	8003bb8 <ADC_ConfigureBoostMode+0x78>
 8003b96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b9a:	d873      	bhi.n	8003c84 <ADC_ConfigureBoostMode+0x144>
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d002      	beq.n	8003ba8 <ADC_ConfigureBoostMode+0x68>
 8003ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba6:	d16d      	bne.n	8003c84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
        break;
 8003bb6:	e068      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	60fb      	str	r3, [r7, #12]
        break;
 8003bbe:	e064      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	f006 feaa 	bl	800a920 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bcc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bd6:	d051      	beq.n	8003c7c <ADC_ConfigureBoostMode+0x13c>
 8003bd8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003bdc:	d854      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003bde:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003be2:	d047      	beq.n	8003c74 <ADC_ConfigureBoostMode+0x134>
 8003be4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003be8:	d84e      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003bea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003bee:	d03d      	beq.n	8003c6c <ADC_ConfigureBoostMode+0x12c>
 8003bf0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003bf4:	d848      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfa:	d033      	beq.n	8003c64 <ADC_ConfigureBoostMode+0x124>
 8003bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c00:	d842      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003c02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c06:	d029      	beq.n	8003c5c <ADC_ConfigureBoostMode+0x11c>
 8003c08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c0c:	d83c      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003c0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c12:	d01a      	beq.n	8003c4a <ADC_ConfigureBoostMode+0x10a>
 8003c14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c18:	d836      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003c1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c1e:	d014      	beq.n	8003c4a <ADC_ConfigureBoostMode+0x10a>
 8003c20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c24:	d830      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d00e      	beq.n	8003c4a <ADC_ConfigureBoostMode+0x10a>
 8003c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c30:	d82a      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003c32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c36:	d008      	beq.n	8003c4a <ADC_ConfigureBoostMode+0x10a>
 8003c38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c3c:	d824      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x148>
 8003c3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c42:	d002      	beq.n	8003c4a <ADC_ConfigureBoostMode+0x10a>
 8003c44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c48:	d11e      	bne.n	8003c88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	0c9b      	lsrs	r3, r3, #18
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	60fb      	str	r3, [r7, #12]
        break;
 8003c5a:	e016      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
        break;
 8003c62:	e012      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	60fb      	str	r3, [r7, #12]
        break;
 8003c6a:	e00e      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	60fb      	str	r3, [r7, #12]
        break;
 8003c72:	e00a      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	09db      	lsrs	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
        break;
 8003c7a:	e006      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	60fb      	str	r3, [r7, #12]
        break;
 8003c82:	e002      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c88:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c8a:	f7fe fdcb 	bl	8002824 <HAL_GetREVID>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d815      	bhi.n	8003cc4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <ADC_ConfigureBoostMode+0x208>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d908      	bls.n	8003cb2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003cb0:	e03e      	b.n	8003d30 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc0:	609a      	str	r2, [r3, #8]
}
 8003cc2:	e035      	b.n	8003d30 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <ADC_ConfigureBoostMode+0x20c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d808      	bhi.n	8003ce4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	e025      	b.n	8003d30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <ADC_ConfigureBoostMode+0x210>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d80a      	bhi.n	8003d02 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	e016      	b.n	8003d30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <ADC_ConfigureBoostMode+0x214>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d80a      	bhi.n	8003d20 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1c:	609a      	str	r2, [r3, #8]
}
 8003d1e:	e007      	b.n	8003d30 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40022100 	.word	0x40022100
 8003d40:	40022300 	.word	0x40022300
 8003d44:	58026300 	.word	0x58026300
 8003d48:	01312d00 	.word	0x01312d00
 8003d4c:	005f5e10 	.word	0x005f5e10
 8003d50:	00bebc20 	.word	0x00bebc20
 8003d54:	017d7840 	.word	0x017d7840

08003d58 <LL_ADC_IsEnabled>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <LL_ADC_IsEnabled+0x18>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <LL_ADC_IsEnabled+0x1a>
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <LL_ADC_StartCalibration>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <LL_ADC_StartCalibration+0x38>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003da0:	430a      	orrs	r2, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	3ffeffc0 	.word	0x3ffeffc0

08003dbc <LL_ADC_IsCalibrationOnGoing>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd0:	d101      	bne.n	8003dd6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d101      	bne.n	8003dfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_ADCEx_Calibration_Start+0x1e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e04c      	b.n	8003ec4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fd90 	bl	8003958 <ADC_Disable>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d135      	bne.n	8003eae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e46:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff90 	bl	8003d80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e60:	e014      	b.n	8003e8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3301      	adds	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d30d      	bcc.n	8003e8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f023 0312 	bic.w	r3, r3, #18
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e01b      	b.n	8003ec4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff93 	bl	8003dbc <LL_ADC_IsCalibrationOnGoing>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e2      	bne.n	8003e62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f023 0303 	bic.w	r3, r3, #3
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
 8003eac:	e005      	b.n	8003eba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f043 0210 	orr.w	r2, r3, #16
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	ffffeefd 	.word	0xffffeefd
 8003ed0:	25c3f800 	.word	0x25c3f800

08003ed4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b09f      	sub	sp, #124	; 0x7c
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e0be      	b.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5c      	ldr	r2, [pc, #368]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f0c:	4b5b      	ldr	r3, [pc, #364]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	e001      	b.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e09d      	b.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff54 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 8003f3c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff4e 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d17f      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d17c      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a47      	ldr	r2, [pc, #284]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a46      	ldr	r2, [pc, #280]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f68:	4b45      	ldr	r3, [pc, #276]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f6a:	e000      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f6c:	4b45      	ldr	r3, [pc, #276]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d039      	beq.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3a      	ldr	r2, [pc, #232]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a38      	ldr	r2, [pc, #224]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10e      	bne.n	8003fbc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f9e:	4836      	ldr	r0, [pc, #216]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fa0:	f7ff feda 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4835      	ldr	r0, [pc, #212]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fa8:	f7ff fed6 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4323      	orrs	r3, r4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e008      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003fbc:	4832      	ldr	r0, [pc, #200]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003fbe:	f7ff fecb 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d047      	beq.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	; (800408c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	6811      	ldr	r1, [r2, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	6892      	ldr	r2, [r2, #8]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fea:	e03a      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10e      	bne.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800400c:	481a      	ldr	r0, [pc, #104]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800400e:	f7ff fea3 	bl	8003d58 <LL_ADC_IsEnabled>
 8004012:	4604      	mov	r4, r0
 8004014:	4819      	ldr	r0, [pc, #100]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004016:	f7ff fe9f 	bl	8003d58 <LL_ADC_IsEnabled>
 800401a:	4603      	mov	r3, r0
 800401c:	4323      	orrs	r3, r4
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e008      	b.n	800403c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800402a:	4817      	ldr	r0, [pc, #92]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800402c:	f7ff fe94 	bl	8003d58 <LL_ADC_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d010      	beq.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004046:	4013      	ands	r3, r2
 8004048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800404c:	e009      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004060:	e000      	b.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004062:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800406c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004070:	4618      	mov	r0, r3
 8004072:	377c      	adds	r7, #124	; 0x7c
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}
 8004078:	40022000 	.word	0x40022000
 800407c:	40022100 	.word	0x40022100
 8004080:	40022300 	.word	0x40022300
 8004084:	58026300 	.word	0x58026300
 8004088:	58026000 	.word	0x58026000
 800408c:	fffff0e0 	.word	0xfffff0e0

08004090 <__NVIC_SetPriorityGrouping>:
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <__NVIC_SetPriorityGrouping+0x40>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__NVIC_SetPriorityGrouping+0x40>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	05fa0000 	.word	0x05fa0000

080040d8 <__NVIC_GetPriorityGrouping>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4907      	ldr	r1, [pc, #28]	; (800412c <__NVIC_EnableIRQ+0x38>)
 800410e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100

08004130 <__NVIC_SetPriority>:
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800413c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db0a      	blt.n	800415a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	; (800417c <__NVIC_SetPriority+0x4c>)
 800414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004158:	e00a      	b.n	8004170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4908      	ldr	r1, [pc, #32]	; (8004180 <__NVIC_SetPriority+0x50>)
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3b04      	subs	r3, #4
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	440b      	add	r3, r1
 800416e:	761a      	strb	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <NVIC_EncodePriority>:
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fc:	d301      	bcc.n	8004202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041fe:	2301      	movs	r3, #1
 8004200:	e00f      	b.n	8004222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <SysTick_Config+0x40>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800420a:	210f      	movs	r1, #15
 800420c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004210:	f7ff ff8e 	bl	8004130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <SysTick_Config+0x40>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <SysTick_Config+0x40>)
 800421c:	2207      	movs	r2, #7
 800421e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000e010 	.word	0xe000e010

08004230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff29 	bl	8004090 <__NVIC_SetPriorityGrouping>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004254:	f7ff ff40 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 8004258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	6978      	ldr	r0, [r7, #20]
 8004260:	f7ff ff90 	bl	8004184 <NVIC_EncodePriority>
 8004264:	4602      	mov	r2, r0
 8004266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff5f 	bl	8004130 <__NVIC_SetPriority>
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff33 	bl	80040f4 <__NVIC_EnableIRQ>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ffa4 	bl	80041ec <SysTick_Config>
 80042a4:	4603      	mov	r3, r0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e014      	b.n	80042ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7fd fdc3 	bl	8001e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0a2      	b.n	8004452 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	795b      	ldrb	r3, [r3, #5]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_DAC_Start_DMA+0x24>
 8004314:	2302      	movs	r3, #2
 8004316:	e09c      	b.n	8004452 <HAL_DAC_Start_DMA+0x15e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2202      	movs	r2, #2
 8004322:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d129      	bne.n	800437e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	4a4b      	ldr	r2, [pc, #300]	; (800445c <HAL_DAC_Start_DMA+0x168>)
 8004330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4a4a      	ldr	r2, [pc, #296]	; (8004460 <HAL_DAC_Start_DMA+0x16c>)
 8004338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4a49      	ldr	r2, [pc, #292]	; (8004464 <HAL_DAC_Start_DMA+0x170>)
 8004340:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004350:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DAC_Start_DMA+0x6c>
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d005      	beq.n	800436a <HAL_DAC_Start_DMA+0x76>
 800435e:	e009      	b.n	8004374 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	613b      	str	r3, [r7, #16]
        break;
 8004368:	e033      	b.n	80043d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	613b      	str	r3, [r7, #16]
        break;
 8004372:	e02e      	b.n	80043d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3310      	adds	r3, #16
 800437a:	613b      	str	r3, [r7, #16]
        break;
 800437c:	e029      	b.n	80043d2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a39      	ldr	r2, [pc, #228]	; (8004468 <HAL_DAC_Start_DMA+0x174>)
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4a38      	ldr	r2, [pc, #224]	; (800446c <HAL_DAC_Start_DMA+0x178>)
 800438c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a37      	ldr	r2, [pc, #220]	; (8004470 <HAL_DAC_Start_DMA+0x17c>)
 8004394:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_DAC_Start_DMA+0xc0>
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d005      	beq.n	80043be <HAL_DAC_Start_DMA+0xca>
 80043b2:	e009      	b.n	80043c8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	613b      	str	r3, [r7, #16]
        break;
 80043bc:	e009      	b.n	80043d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3318      	adds	r3, #24
 80043c4:	613b      	str	r3, [r7, #16]
        break;
 80043c6:	e004      	b.n	80043d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	331c      	adds	r3, #28
 80043ce:	613b      	str	r3, [r7, #16]
        break;
 80043d0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d111      	bne.n	80043fc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	f000 fd85 	bl	8004f00 <HAL_DMA_Start_IT>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]
 80043fa:	e010      	b.n	800441e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800440a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68d8      	ldr	r0, [r3, #12]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	f000 fd73 	bl	8004f00 <HAL_DMA_Start_IT>
 800441a:	4603      	mov	r3, r0
 800441c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10c      	bne.n	8004444 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e005      	b.n	8004450 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f043 0204 	orr.w	r2, r3, #4
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	08004735 	.word	0x08004735
 8004460:	08004757 	.word	0x08004757
 8004464:	08004773 	.word	0x08004773
 8004468:	080047dd 	.word	0x080047dd
 800446c:	080047ff 	.word	0x080047ff
 8004470:	0800481b 	.word	0x0800481b

08004474 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_DAC_ConfigChannel+0x1e>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e12a      	b.n	8004728 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	795b      	ldrb	r3, [r3, #5]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_DAC_ConfigChannel+0x2e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e124      	b.n	8004728 <HAL_DAC_ConfigChannel+0x278>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2202      	movs	r2, #2
 80044e8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d17a      	bne.n	80045e8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044f2:	f7fe f97b 	bl	80027ec <HAL_GetTick>
 80044f6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d13d      	bne.n	800457a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044fe:	e018      	b.n	8004532 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004500:	f7fe f974 	bl	80027ec <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d911      	bls.n	8004532 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004514:	4b86      	ldr	r3, [pc, #536]	; (8004730 <HAL_DAC_ConfigChannel+0x280>)
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f043 0208 	orr.w	r2, r3, #8
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2203      	movs	r2, #3
 800452c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0fa      	b.n	8004728 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_DAC_ConfigChannel+0x280>)
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1df      	bne.n	8004500 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	6992      	ldr	r2, [r2, #24]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
 800454a:	e020      	b.n	800458e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800454c:	f7fe f94e 	bl	80027ec <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d90f      	bls.n	800457a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004560:	2b00      	cmp	r3, #0
 8004562:	da0a      	bge.n	800457a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f043 0208 	orr.w	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2203      	movs	r2, #3
 8004574:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0d6      	b.n	8004728 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	dbe3      	blt.n	800454c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	6992      	ldr	r2, [r2, #24]
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	ea02 0103 	and.w	r1, r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	409a      	lsls	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	21ff      	movs	r1, #255	; 0xff
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	ea02 0103 	and.w	r1, r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	409a      	lsls	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d11d      	bne.n	800462c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	221f      	movs	r2, #31
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2207      	movs	r2, #7
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004650:	2300      	movs	r3, #0
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	e00f      	b.n	8004676 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d102      	bne.n	8004664 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800465e:	2301      	movs	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
 8004662:	e008      	b.n	8004676 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800466c:	2301      	movs	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e001      	b.n	8004676 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43da      	mvns	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	400a      	ands	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	22c0      	movs	r2, #192	; 0xc0
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	400a      	ands	r2, r1
 8004716:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20008000 	.word	0x20008000

08004734 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fe96 	bl	8004474 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	711a      	strb	r2, [r3, #4]
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fe8f 	bl	8004488 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fe85 	bl	800449c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	711a      	strb	r2, [r3, #4]
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ffd8 	bl	80047a0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	711a      	strb	r2, [r3, #4]
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ffd1 	bl	80047b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f043 0204 	orr.w	r2, r3, #4
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff ffc7 	bl	80047c8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	711a      	strb	r2, [r3, #4]
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004850:	f7fd ffcc 	bl	80027ec <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e316      	b.n	8004e8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a66      	ldr	r2, [pc, #408]	; (8004a00 <HAL_DMA_Init+0x1b8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d04a      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <HAL_DMA_Init+0x1bc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d045      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a63      	ldr	r2, [pc, #396]	; (8004a08 <HAL_DMA_Init+0x1c0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d040      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a62      	ldr	r2, [pc, #392]	; (8004a0c <HAL_DMA_Init+0x1c4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d03b      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a60      	ldr	r2, [pc, #384]	; (8004a10 <HAL_DMA_Init+0x1c8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d036      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5f      	ldr	r2, [pc, #380]	; (8004a14 <HAL_DMA_Init+0x1cc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d031      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_DMA_Init+0x1d0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02c      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5c      	ldr	r2, [pc, #368]	; (8004a1c <HAL_DMA_Init+0x1d4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d027      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5a      	ldr	r2, [pc, #360]	; (8004a20 <HAL_DMA_Init+0x1d8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a59      	ldr	r2, [pc, #356]	; (8004a24 <HAL_DMA_Init+0x1dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d01d      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <HAL_DMA_Init+0x1e0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a56      	ldr	r2, [pc, #344]	; (8004a2c <HAL_DMA_Init+0x1e4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d013      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a54      	ldr	r2, [pc, #336]	; (8004a30 <HAL_DMA_Init+0x1e8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a53      	ldr	r2, [pc, #332]	; (8004a34 <HAL_DMA_Init+0x1ec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a51      	ldr	r2, [pc, #324]	; (8004a38 <HAL_DMA_Init+0x1f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_DMA_Init+0xb8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a50      	ldr	r2, [pc, #320]	; (8004a3c <HAL_DMA_Init+0x1f4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_DMA_Init+0xbc>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_DMA_Init+0xbe>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 813b 	beq.w	8004b82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a37      	ldr	r2, [pc, #220]	; (8004a00 <HAL_DMA_Init+0x1b8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a36      	ldr	r2, [pc, #216]	; (8004a04 <HAL_DMA_Init+0x1bc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a34      	ldr	r2, [pc, #208]	; (8004a08 <HAL_DMA_Init+0x1c0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_Init+0x174>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a33      	ldr	r2, [pc, #204]	; (8004a0c <HAL_DMA_Init+0x1c4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a31      	ldr	r2, [pc, #196]	; (8004a10 <HAL_DMA_Init+0x1c8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_Init+0x174>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a30      	ldr	r2, [pc, #192]	; (8004a14 <HAL_DMA_Init+0x1cc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2e      	ldr	r2, [pc, #184]	; (8004a18 <HAL_DMA_Init+0x1d0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_DMA_Init+0x1d4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_Init+0x174>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2b      	ldr	r2, [pc, #172]	; (8004a20 <HAL_DMA_Init+0x1d8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <HAL_DMA_Init+0x1dc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a28      	ldr	r2, [pc, #160]	; (8004a28 <HAL_DMA_Init+0x1e0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_Init+0x174>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a27      	ldr	r2, [pc, #156]	; (8004a2c <HAL_DMA_Init+0x1e4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_Init+0x174>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <HAL_DMA_Init+0x1e8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_Init+0x174>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <HAL_DMA_Init+0x1ec>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_Init+0x174>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_DMA_Init+0x1f0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_Init+0x174>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <HAL_DMA_Init+0x1f4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <HAL_DMA_Init+0x186>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e007      	b.n	80049de <HAL_DMA_Init+0x196>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049de:	e02f      	b.n	8004a40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e0:	f7fd ff04 	bl	80027ec <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d928      	bls.n	8004a40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2203      	movs	r2, #3
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e246      	b.n	8004e8e <HAL_DMA_Init+0x646>
 8004a00:	40020010 	.word	0x40020010
 8004a04:	40020028 	.word	0x40020028
 8004a08:	40020040 	.word	0x40020040
 8004a0c:	40020058 	.word	0x40020058
 8004a10:	40020070 	.word	0x40020070
 8004a14:	40020088 	.word	0x40020088
 8004a18:	400200a0 	.word	0x400200a0
 8004a1c:	400200b8 	.word	0x400200b8
 8004a20:	40020410 	.word	0x40020410
 8004a24:	40020428 	.word	0x40020428
 8004a28:	40020440 	.word	0x40020440
 8004a2c:	40020458 	.word	0x40020458
 8004a30:	40020470 	.word	0x40020470
 8004a34:	40020488 	.word	0x40020488
 8004a38:	400204a0 	.word	0x400204a0
 8004a3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1c8      	bne.n	80049e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4b83      	ldr	r3, [pc, #524]	; (8004c68 <HAL_DMA_Init+0x420>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d107      	bne.n	8004aa4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004aa4:	4b71      	ldr	r3, [pc, #452]	; (8004c6c <HAL_DMA_Init+0x424>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b71      	ldr	r3, [pc, #452]	; (8004c70 <HAL_DMA_Init+0x428>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab0:	d328      	bcc.n	8004b04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b28      	cmp	r3, #40	; 0x28
 8004ab8:	d903      	bls.n	8004ac2 <HAL_DMA_Init+0x27a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac0:	d917      	bls.n	8004af2 <HAL_DMA_Init+0x2aa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ac8:	d903      	bls.n	8004ad2 <HAL_DMA_Init+0x28a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b42      	cmp	r3, #66	; 0x42
 8004ad0:	d90f      	bls.n	8004af2 <HAL_DMA_Init+0x2aa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b46      	cmp	r3, #70	; 0x46
 8004ad8:	d903      	bls.n	8004ae2 <HAL_DMA_Init+0x29a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b48      	cmp	r3, #72	; 0x48
 8004ae0:	d907      	bls.n	8004af2 <HAL_DMA_Init+0x2aa>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b4e      	cmp	r3, #78	; 0x4e
 8004ae8:	d905      	bls.n	8004af6 <HAL_DMA_Init+0x2ae>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b52      	cmp	r3, #82	; 0x52
 8004af0:	d801      	bhi.n	8004af6 <HAL_DMA_Init+0x2ae>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_DMA_Init+0x2b0>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d117      	bne.n	8004b5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00e      	beq.n	8004b5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f002 fb33 	bl	80071ac <DMA_CheckFifoParam>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2240      	movs	r2, #64	; 0x40
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e197      	b.n	8004e8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f002 fa6e 	bl	8007048 <DMA_CalcBaseAndBitshift>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	223f      	movs	r2, #63	; 0x3f
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	e0cd      	b.n	8004d1e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <HAL_DMA_Init+0x42c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a39      	ldr	r2, [pc, #228]	; (8004c78 <HAL_DMA_Init+0x430>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <HAL_DMA_Init+0x434>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <HAL_DMA_Init+0x438>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a35      	ldr	r2, [pc, #212]	; (8004c84 <HAL_DMA_Init+0x43c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	; (8004c88 <HAL_DMA_Init+0x440>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	; (8004c8c <HAL_DMA_Init+0x444>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_Init+0x38a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a30      	ldr	r2, [pc, #192]	; (8004c90 <HAL_DMA_Init+0x448>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <HAL_DMA_Init+0x38e>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_DMA_Init+0x390>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8097 	beq.w	8004d0c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a24      	ldr	r2, [pc, #144]	; (8004c74 <HAL_DMA_Init+0x42c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d021      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <HAL_DMA_Init+0x430>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01c      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <HAL_DMA_Init+0x434>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d017      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <HAL_DMA_Init+0x438>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d012      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <HAL_DMA_Init+0x43c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00d      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <HAL_DMA_Init+0x440>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d008      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <HAL_DMA_Init+0x444>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <HAL_DMA_Init+0x3e4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <HAL_DMA_Init+0x448>)
 8004c2a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_DMA_Init+0x44c>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d021      	beq.n	8004c98 <HAL_DMA_Init+0x450>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d102      	bne.n	8004c62 <HAL_DMA_Init+0x41a>
 8004c5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c60:	e01b      	b.n	8004c9a <HAL_DMA_Init+0x452>
 8004c62:	2300      	movs	r3, #0
 8004c64:	e019      	b.n	8004c9a <HAL_DMA_Init+0x452>
 8004c66:	bf00      	nop
 8004c68:	fe10803f 	.word	0xfe10803f
 8004c6c:	5c001000 	.word	0x5c001000
 8004c70:	ffff0000 	.word	0xffff0000
 8004c74:	58025408 	.word	0x58025408
 8004c78:	5802541c 	.word	0x5802541c
 8004c7c:	58025430 	.word	0x58025430
 8004c80:	58025444 	.word	0x58025444
 8004c84:	58025458 	.word	0x58025458
 8004c88:	5802546c 	.word	0x5802546c
 8004c8c:	58025480 	.word	0x58025480
 8004c90:	58025494 	.word	0x58025494
 8004c94:	fffe000f 	.word	0xfffe000f
 8004c98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68d2      	ldr	r2, [r2, #12]
 8004c9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4b6e      	ldr	r3, [pc, #440]	; (8004e98 <HAL_DMA_Init+0x650>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <HAL_DMA_Init+0x654>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	009a      	lsls	r2, r3, #2
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f002 f9a9 	bl	8007048 <DMA_CalcBaseAndBitshift>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2201      	movs	r2, #1
 8004d04:	409a      	lsls	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	e008      	b.n	8004d1e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2240      	movs	r2, #64	; 0x40
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0b7      	b.n	8004e8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5f      	ldr	r2, [pc, #380]	; (8004ea0 <HAL_DMA_Init+0x658>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d072      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <HAL_DMA_Init+0x65c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d06d      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5c      	ldr	r2, [pc, #368]	; (8004ea8 <HAL_DMA_Init+0x660>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d068      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a5a      	ldr	r2, [pc, #360]	; (8004eac <HAL_DMA_Init+0x664>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d063      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a59      	ldr	r2, [pc, #356]	; (8004eb0 <HAL_DMA_Init+0x668>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d05e      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a57      	ldr	r2, [pc, #348]	; (8004eb4 <HAL_DMA_Init+0x66c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d059      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a56      	ldr	r2, [pc, #344]	; (8004eb8 <HAL_DMA_Init+0x670>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d054      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a54      	ldr	r2, [pc, #336]	; (8004ebc <HAL_DMA_Init+0x674>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d04f      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a53      	ldr	r2, [pc, #332]	; (8004ec0 <HAL_DMA_Init+0x678>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04a      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a51      	ldr	r2, [pc, #324]	; (8004ec4 <HAL_DMA_Init+0x67c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d045      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a50      	ldr	r2, [pc, #320]	; (8004ec8 <HAL_DMA_Init+0x680>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a4e      	ldr	r2, [pc, #312]	; (8004ecc <HAL_DMA_Init+0x684>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a4d      	ldr	r2, [pc, #308]	; (8004ed0 <HAL_DMA_Init+0x688>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a4b      	ldr	r2, [pc, #300]	; (8004ed4 <HAL_DMA_Init+0x68c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <HAL_DMA_Init+0x690>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a48      	ldr	r2, [pc, #288]	; (8004edc <HAL_DMA_Init+0x694>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a47      	ldr	r2, [pc, #284]	; (8004ee0 <HAL_DMA_Init+0x698>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a45      	ldr	r2, [pc, #276]	; (8004ee4 <HAL_DMA_Init+0x69c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a44      	ldr	r2, [pc, #272]	; (8004ee8 <HAL_DMA_Init+0x6a0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a42      	ldr	r2, [pc, #264]	; (8004eec <HAL_DMA_Init+0x6a4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <HAL_DMA_Init+0x6a8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a3f      	ldr	r2, [pc, #252]	; (8004ef4 <HAL_DMA_Init+0x6ac>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3e      	ldr	r2, [pc, #248]	; (8004ef8 <HAL_DMA_Init+0x6b0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_DMA_Init+0x5c6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <HAL_DMA_Init+0x6b4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_DMA_Init+0x5ca>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_DMA_Init+0x5cc>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d032      	beq.n	8004e7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f002 fa43 	bl	80072a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d102      	bne.n	8004e2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_DMA_Init+0x624>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d80c      	bhi.n	8004e6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f002 fac0 	bl	80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	e008      	b.n	8004e7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	a7fdabf8 	.word	0xa7fdabf8
 8004e9c:	cccccccd 	.word	0xcccccccd
 8004ea0:	40020010 	.word	0x40020010
 8004ea4:	40020028 	.word	0x40020028
 8004ea8:	40020040 	.word	0x40020040
 8004eac:	40020058 	.word	0x40020058
 8004eb0:	40020070 	.word	0x40020070
 8004eb4:	40020088 	.word	0x40020088
 8004eb8:	400200a0 	.word	0x400200a0
 8004ebc:	400200b8 	.word	0x400200b8
 8004ec0:	40020410 	.word	0x40020410
 8004ec4:	40020428 	.word	0x40020428
 8004ec8:	40020440 	.word	0x40020440
 8004ecc:	40020458 	.word	0x40020458
 8004ed0:	40020470 	.word	0x40020470
 8004ed4:	40020488 	.word	0x40020488
 8004ed8:	400204a0 	.word	0x400204a0
 8004edc:	400204b8 	.word	0x400204b8
 8004ee0:	58025408 	.word	0x58025408
 8004ee4:	5802541c 	.word	0x5802541c
 8004ee8:	58025430 	.word	0x58025430
 8004eec:	58025444 	.word	0x58025444
 8004ef0:	58025458 	.word	0x58025458
 8004ef4:	5802546c 	.word	0x5802546c
 8004ef8:	58025480 	.word	0x58025480
 8004efc:	58025494 	.word	0x58025494

08004f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e226      	b.n	800536a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_DMA_Start_IT+0x2a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e21f      	b.n	800536a <HAL_DMA_Start_IT+0x46a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	f040 820a 	bne.w	8005354 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a68      	ldr	r2, [pc, #416]	; (80050f4 <HAL_DMA_Start_IT+0x1f4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d04a      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a66      	ldr	r2, [pc, #408]	; (80050f8 <HAL_DMA_Start_IT+0x1f8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d045      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a65      	ldr	r2, [pc, #404]	; (80050fc <HAL_DMA_Start_IT+0x1fc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d040      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a63      	ldr	r2, [pc, #396]	; (8005100 <HAL_DMA_Start_IT+0x200>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d03b      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a62      	ldr	r2, [pc, #392]	; (8005104 <HAL_DMA_Start_IT+0x204>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d036      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a60      	ldr	r2, [pc, #384]	; (8005108 <HAL_DMA_Start_IT+0x208>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d031      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a5f      	ldr	r2, [pc, #380]	; (800510c <HAL_DMA_Start_IT+0x20c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d02c      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a5d      	ldr	r2, [pc, #372]	; (8005110 <HAL_DMA_Start_IT+0x210>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d027      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a5c      	ldr	r2, [pc, #368]	; (8005114 <HAL_DMA_Start_IT+0x214>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a5a      	ldr	r2, [pc, #360]	; (8005118 <HAL_DMA_Start_IT+0x218>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a59      	ldr	r2, [pc, #356]	; (800511c <HAL_DMA_Start_IT+0x21c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a57      	ldr	r2, [pc, #348]	; (8005120 <HAL_DMA_Start_IT+0x220>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a56      	ldr	r2, [pc, #344]	; (8005124 <HAL_DMA_Start_IT+0x224>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a54      	ldr	r2, [pc, #336]	; (8005128 <HAL_DMA_Start_IT+0x228>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a53      	ldr	r2, [pc, #332]	; (800512c <HAL_DMA_Start_IT+0x22c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a51      	ldr	r2, [pc, #324]	; (8005130 <HAL_DMA_Start_IT+0x230>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <HAL_DMA_Start_IT+0x100>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e007      	b.n	8005010 <HAL_DMA_Start_IT+0x110>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f001 fe6a 	bl	8006cf0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <HAL_DMA_Start_IT+0x1f4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d04a      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a33      	ldr	r2, [pc, #204]	; (80050f8 <HAL_DMA_Start_IT+0x1f8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d045      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a31      	ldr	r2, [pc, #196]	; (80050fc <HAL_DMA_Start_IT+0x1fc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d040      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a30      	ldr	r2, [pc, #192]	; (8005100 <HAL_DMA_Start_IT+0x200>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d03b      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2e      	ldr	r2, [pc, #184]	; (8005104 <HAL_DMA_Start_IT+0x204>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d036      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <HAL_DMA_Start_IT+0x208>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d031      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a2b      	ldr	r2, [pc, #172]	; (800510c <HAL_DMA_Start_IT+0x20c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02c      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <HAL_DMA_Start_IT+0x210>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d027      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a28      	ldr	r2, [pc, #160]	; (8005114 <HAL_DMA_Start_IT+0x214>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a27      	ldr	r2, [pc, #156]	; (8005118 <HAL_DMA_Start_IT+0x218>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a25      	ldr	r2, [pc, #148]	; (800511c <HAL_DMA_Start_IT+0x21c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a24      	ldr	r2, [pc, #144]	; (8005120 <HAL_DMA_Start_IT+0x220>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <HAL_DMA_Start_IT+0x224>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_DMA_Start_IT+0x228>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_DMA_Start_IT+0x22c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_DMA_Start_IT+0x1bc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_DMA_Start_IT+0x230>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_DMA_Start_IT+0x1c0>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_DMA_Start_IT+0x1c2>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d036      	beq.n	8005134 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 021e 	bic.w	r2, r3, #30
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0216 	orr.w	r2, r2, #22
 80050d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d03e      	beq.n	8005160 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0208 	orr.w	r2, r2, #8
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e035      	b.n	8005160 <HAL_DMA_Start_IT+0x260>
 80050f4:	40020010 	.word	0x40020010
 80050f8:	40020028 	.word	0x40020028
 80050fc:	40020040 	.word	0x40020040
 8005100:	40020058 	.word	0x40020058
 8005104:	40020070 	.word	0x40020070
 8005108:	40020088 	.word	0x40020088
 800510c:	400200a0 	.word	0x400200a0
 8005110:	400200b8 	.word	0x400200b8
 8005114:	40020410 	.word	0x40020410
 8005118:	40020428 	.word	0x40020428
 800511c:	40020440 	.word	0x40020440
 8005120:	40020458 	.word	0x40020458
 8005124:	40020470 	.word	0x40020470
 8005128:	40020488 	.word	0x40020488
 800512c:	400204a0 	.word	0x400204a0
 8005130:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 020e 	bic.w	r2, r3, #14
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 020a 	orr.w	r2, r2, #10
 8005146:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0204 	orr.w	r2, r2, #4
 800515e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a83      	ldr	r2, [pc, #524]	; (8005374 <HAL_DMA_Start_IT+0x474>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d072      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a82      	ldr	r2, [pc, #520]	; (8005378 <HAL_DMA_Start_IT+0x478>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d06d      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a80      	ldr	r2, [pc, #512]	; (800537c <HAL_DMA_Start_IT+0x47c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d068      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7f      	ldr	r2, [pc, #508]	; (8005380 <HAL_DMA_Start_IT+0x480>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d063      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a7d      	ldr	r2, [pc, #500]	; (8005384 <HAL_DMA_Start_IT+0x484>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d05e      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a7c      	ldr	r2, [pc, #496]	; (8005388 <HAL_DMA_Start_IT+0x488>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d059      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a7a      	ldr	r2, [pc, #488]	; (800538c <HAL_DMA_Start_IT+0x48c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d054      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a79      	ldr	r2, [pc, #484]	; (8005390 <HAL_DMA_Start_IT+0x490>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d04f      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a77      	ldr	r2, [pc, #476]	; (8005394 <HAL_DMA_Start_IT+0x494>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d04a      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a76      	ldr	r2, [pc, #472]	; (8005398 <HAL_DMA_Start_IT+0x498>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d045      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a74      	ldr	r2, [pc, #464]	; (800539c <HAL_DMA_Start_IT+0x49c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d040      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a73      	ldr	r2, [pc, #460]	; (80053a0 <HAL_DMA_Start_IT+0x4a0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d03b      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a71      	ldr	r2, [pc, #452]	; (80053a4 <HAL_DMA_Start_IT+0x4a4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d036      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a70      	ldr	r2, [pc, #448]	; (80053a8 <HAL_DMA_Start_IT+0x4a8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d031      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6e      	ldr	r2, [pc, #440]	; (80053ac <HAL_DMA_Start_IT+0x4ac>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d02c      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6d      	ldr	r2, [pc, #436]	; (80053b0 <HAL_DMA_Start_IT+0x4b0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d027      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a6b      	ldr	r2, [pc, #428]	; (80053b4 <HAL_DMA_Start_IT+0x4b4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6a      	ldr	r2, [pc, #424]	; (80053b8 <HAL_DMA_Start_IT+0x4b8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01d      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a68      	ldr	r2, [pc, #416]	; (80053bc <HAL_DMA_Start_IT+0x4bc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a67      	ldr	r2, [pc, #412]	; (80053c0 <HAL_DMA_Start_IT+0x4c0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a65      	ldr	r2, [pc, #404]	; (80053c4 <HAL_DMA_Start_IT+0x4c4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a64      	ldr	r2, [pc, #400]	; (80053c8 <HAL_DMA_Start_IT+0x4c8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a62      	ldr	r2, [pc, #392]	; (80053cc <HAL_DMA_Start_IT+0x4cc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_DMA_Start_IT+0x350>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a61      	ldr	r2, [pc, #388]	; (80053d0 <HAL_DMA_Start_IT+0x4d0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <HAL_DMA_Start_IT+0x354>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_DMA_Start_IT+0x356>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01a      	beq.n	8005290 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005276:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a37      	ldr	r2, [pc, #220]	; (8005374 <HAL_DMA_Start_IT+0x474>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d04a      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_DMA_Start_IT+0x478>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d045      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a34      	ldr	r2, [pc, #208]	; (800537c <HAL_DMA_Start_IT+0x47c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d040      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a33      	ldr	r2, [pc, #204]	; (8005380 <HAL_DMA_Start_IT+0x480>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d03b      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a31      	ldr	r2, [pc, #196]	; (8005384 <HAL_DMA_Start_IT+0x484>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d036      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a30      	ldr	r2, [pc, #192]	; (8005388 <HAL_DMA_Start_IT+0x488>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d031      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2e      	ldr	r2, [pc, #184]	; (800538c <HAL_DMA_Start_IT+0x48c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02c      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2d      	ldr	r2, [pc, #180]	; (8005390 <HAL_DMA_Start_IT+0x490>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d027      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2b      	ldr	r2, [pc, #172]	; (8005394 <HAL_DMA_Start_IT+0x494>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d022      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <HAL_DMA_Start_IT+0x498>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d01d      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a28      	ldr	r2, [pc, #160]	; (800539c <HAL_DMA_Start_IT+0x49c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d018      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <HAL_DMA_Start_IT+0x4a0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <HAL_DMA_Start_IT+0x4a4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00e      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <HAL_DMA_Start_IT+0x4a8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_DMA_Start_IT+0x4ac>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_DMA_Start_IT+0x430>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <HAL_DMA_Start_IT+0x4b0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <HAL_DMA_Start_IT+0x442>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e012      	b.n	8005368 <HAL_DMA_Start_IT+0x468>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e009      	b.n	8005368 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40020010 	.word	0x40020010
 8005378:	40020028 	.word	0x40020028
 800537c:	40020040 	.word	0x40020040
 8005380:	40020058 	.word	0x40020058
 8005384:	40020070 	.word	0x40020070
 8005388:	40020088 	.word	0x40020088
 800538c:	400200a0 	.word	0x400200a0
 8005390:	400200b8 	.word	0x400200b8
 8005394:	40020410 	.word	0x40020410
 8005398:	40020428 	.word	0x40020428
 800539c:	40020440 	.word	0x40020440
 80053a0:	40020458 	.word	0x40020458
 80053a4:	40020470 	.word	0x40020470
 80053a8:	40020488 	.word	0x40020488
 80053ac:	400204a0 	.word	0x400204a0
 80053b0:	400204b8 	.word	0x400204b8
 80053b4:	58025408 	.word	0x58025408
 80053b8:	5802541c 	.word	0x5802541c
 80053bc:	58025430 	.word	0x58025430
 80053c0:	58025444 	.word	0x58025444
 80053c4:	58025458 	.word	0x58025458
 80053c8:	5802546c 	.word	0x5802546c
 80053cc:	58025480 	.word	0x58025480
 80053d0:	58025494 	.word	0x58025494

080053d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7fd fa06 	bl	80027ec <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e2dc      	b.n	80059a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d008      	beq.n	800540a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e2cd      	b.n	80059a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a76      	ldr	r2, [pc, #472]	; (80055e8 <HAL_DMA_Abort+0x214>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d04a      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a74      	ldr	r2, [pc, #464]	; (80055ec <HAL_DMA_Abort+0x218>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d045      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a73      	ldr	r2, [pc, #460]	; (80055f0 <HAL_DMA_Abort+0x21c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d040      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a71      	ldr	r2, [pc, #452]	; (80055f4 <HAL_DMA_Abort+0x220>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d03b      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a70      	ldr	r2, [pc, #448]	; (80055f8 <HAL_DMA_Abort+0x224>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d036      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a6e      	ldr	r2, [pc, #440]	; (80055fc <HAL_DMA_Abort+0x228>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d031      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6d      	ldr	r2, [pc, #436]	; (8005600 <HAL_DMA_Abort+0x22c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d02c      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a6b      	ldr	r2, [pc, #428]	; (8005604 <HAL_DMA_Abort+0x230>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d027      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a6a      	ldr	r2, [pc, #424]	; (8005608 <HAL_DMA_Abort+0x234>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a68      	ldr	r2, [pc, #416]	; (800560c <HAL_DMA_Abort+0x238>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01d      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a67      	ldr	r2, [pc, #412]	; (8005610 <HAL_DMA_Abort+0x23c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a65      	ldr	r2, [pc, #404]	; (8005614 <HAL_DMA_Abort+0x240>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a64      	ldr	r2, [pc, #400]	; (8005618 <HAL_DMA_Abort+0x244>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a62      	ldr	r2, [pc, #392]	; (800561c <HAL_DMA_Abort+0x248>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a61      	ldr	r2, [pc, #388]	; (8005620 <HAL_DMA_Abort+0x24c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_DMA_Abort+0xd6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5f      	ldr	r2, [pc, #380]	; (8005624 <HAL_DMA_Abort+0x250>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d101      	bne.n	80054ae <HAL_DMA_Abort+0xda>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <HAL_DMA_Abort+0xdc>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 021e 	bic.w	r2, r2, #30
 80054c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e00a      	b.n	80054f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 020e 	bic.w	r2, r2, #14
 80054ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3c      	ldr	r2, [pc, #240]	; (80055e8 <HAL_DMA_Abort+0x214>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d072      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3a      	ldr	r2, [pc, #232]	; (80055ec <HAL_DMA_Abort+0x218>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d06d      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a39      	ldr	r2, [pc, #228]	; (80055f0 <HAL_DMA_Abort+0x21c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d068      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a37      	ldr	r2, [pc, #220]	; (80055f4 <HAL_DMA_Abort+0x220>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d063      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a36      	ldr	r2, [pc, #216]	; (80055f8 <HAL_DMA_Abort+0x224>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d05e      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a34      	ldr	r2, [pc, #208]	; (80055fc <HAL_DMA_Abort+0x228>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d059      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a33      	ldr	r2, [pc, #204]	; (8005600 <HAL_DMA_Abort+0x22c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d054      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a31      	ldr	r2, [pc, #196]	; (8005604 <HAL_DMA_Abort+0x230>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d04f      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a30      	ldr	r2, [pc, #192]	; (8005608 <HAL_DMA_Abort+0x234>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2e      	ldr	r2, [pc, #184]	; (800560c <HAL_DMA_Abort+0x238>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2d      	ldr	r2, [pc, #180]	; (8005610 <HAL_DMA_Abort+0x23c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <HAL_DMA_Abort+0x240>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2a      	ldr	r2, [pc, #168]	; (8005618 <HAL_DMA_Abort+0x244>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a28      	ldr	r2, [pc, #160]	; (800561c <HAL_DMA_Abort+0x248>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a27      	ldr	r2, [pc, #156]	; (8005620 <HAL_DMA_Abort+0x24c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a25      	ldr	r2, [pc, #148]	; (8005624 <HAL_DMA_Abort+0x250>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a24      	ldr	r2, [pc, #144]	; (8005628 <HAL_DMA_Abort+0x254>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_DMA_Abort+0x258>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a21      	ldr	r2, [pc, #132]	; (8005630 <HAL_DMA_Abort+0x25c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_DMA_Abort+0x260>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <HAL_DMA_Abort+0x264>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_DMA_Abort+0x268>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <HAL_DMA_Abort+0x26c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Abort+0x20e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <HAL_DMA_Abort+0x270>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d132      	bne.n	8005648 <HAL_DMA_Abort+0x274>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e031      	b.n	800564a <HAL_DMA_Abort+0x276>
 80055e6:	bf00      	nop
 80055e8:	40020010 	.word	0x40020010
 80055ec:	40020028 	.word	0x40020028
 80055f0:	40020040 	.word	0x40020040
 80055f4:	40020058 	.word	0x40020058
 80055f8:	40020070 	.word	0x40020070
 80055fc:	40020088 	.word	0x40020088
 8005600:	400200a0 	.word	0x400200a0
 8005604:	400200b8 	.word	0x400200b8
 8005608:	40020410 	.word	0x40020410
 800560c:	40020428 	.word	0x40020428
 8005610:	40020440 	.word	0x40020440
 8005614:	40020458 	.word	0x40020458
 8005618:	40020470 	.word	0x40020470
 800561c:	40020488 	.word	0x40020488
 8005620:	400204a0 	.word	0x400204a0
 8005624:	400204b8 	.word	0x400204b8
 8005628:	58025408 	.word	0x58025408
 800562c:	5802541c 	.word	0x5802541c
 8005630:	58025430 	.word	0x58025430
 8005634:	58025444 	.word	0x58025444
 8005638:	58025458 	.word	0x58025458
 800563c:	5802546c 	.word	0x5802546c
 8005640:	58025480 	.word	0x58025480
 8005644:	58025494 	.word	0x58025494
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800565c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6d      	ldr	r2, [pc, #436]	; (8005818 <HAL_DMA_Abort+0x444>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d04a      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6b      	ldr	r2, [pc, #428]	; (800581c <HAL_DMA_Abort+0x448>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d045      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6a      	ldr	r2, [pc, #424]	; (8005820 <HAL_DMA_Abort+0x44c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d040      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a68      	ldr	r2, [pc, #416]	; (8005824 <HAL_DMA_Abort+0x450>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d03b      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a67      	ldr	r2, [pc, #412]	; (8005828 <HAL_DMA_Abort+0x454>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d036      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_DMA_Abort+0x458>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d031      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a64      	ldr	r2, [pc, #400]	; (8005830 <HAL_DMA_Abort+0x45c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d02c      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a62      	ldr	r2, [pc, #392]	; (8005834 <HAL_DMA_Abort+0x460>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d027      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a61      	ldr	r2, [pc, #388]	; (8005838 <HAL_DMA_Abort+0x464>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d022      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a5f      	ldr	r2, [pc, #380]	; (800583c <HAL_DMA_Abort+0x468>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01d      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a5e      	ldr	r2, [pc, #376]	; (8005840 <HAL_DMA_Abort+0x46c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d018      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5c      	ldr	r2, [pc, #368]	; (8005844 <HAL_DMA_Abort+0x470>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <HAL_DMA_Abort+0x474>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a59      	ldr	r2, [pc, #356]	; (800584c <HAL_DMA_Abort+0x478>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a58      	ldr	r2, [pc, #352]	; (8005850 <HAL_DMA_Abort+0x47c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_DMA_Abort+0x32a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a56      	ldr	r2, [pc, #344]	; (8005854 <HAL_DMA_Abort+0x480>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <HAL_DMA_Abort+0x33c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e007      	b.n	8005720 <HAL_DMA_Abort+0x34c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005720:	e013      	b.n	800574a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005722:	f7fd f863 	bl	80027ec <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b05      	cmp	r3, #5
 800572e:	d90c      	bls.n	800574a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2203      	movs	r2, #3
 800573a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e12d      	b.n	80059a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_DMA_Abort+0x444>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d04a      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2d      	ldr	r2, [pc, #180]	; (800581c <HAL_DMA_Abort+0x448>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d045      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <HAL_DMA_Abort+0x44c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d040      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2a      	ldr	r2, [pc, #168]	; (8005824 <HAL_DMA_Abort+0x450>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d03b      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a29      	ldr	r2, [pc, #164]	; (8005828 <HAL_DMA_Abort+0x454>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d036      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_DMA_Abort+0x458>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d031      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a26      	ldr	r2, [pc, #152]	; (8005830 <HAL_DMA_Abort+0x45c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d02c      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_DMA_Abort+0x460>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d027      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a23      	ldr	r2, [pc, #140]	; (8005838 <HAL_DMA_Abort+0x464>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d022      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_DMA_Abort+0x468>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d01d      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a20      	ldr	r2, [pc, #128]	; (8005840 <HAL_DMA_Abort+0x46c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d018      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <HAL_DMA_Abort+0x470>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_DMA_Abort+0x474>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00e      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_DMA_Abort+0x478>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_DMA_Abort+0x47c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_DMA_Abort+0x422>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_DMA_Abort+0x480>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_DMA_Abort+0x426>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <HAL_DMA_Abort+0x428>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d02b      	beq.n	8005858 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	223f      	movs	r2, #63	; 0x3f
 8005810:	409a      	lsls	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	e02a      	b.n	800586e <HAL_DMA_Abort+0x49a>
 8005818:	40020010 	.word	0x40020010
 800581c:	40020028 	.word	0x40020028
 8005820:	40020040 	.word	0x40020040
 8005824:	40020058 	.word	0x40020058
 8005828:	40020070 	.word	0x40020070
 800582c:	40020088 	.word	0x40020088
 8005830:	400200a0 	.word	0x400200a0
 8005834:	400200b8 	.word	0x400200b8
 8005838:	40020410 	.word	0x40020410
 800583c:	40020428 	.word	0x40020428
 8005840:	40020440 	.word	0x40020440
 8005844:	40020458 	.word	0x40020458
 8005848:	40020470 	.word	0x40020470
 800584c:	40020488 	.word	0x40020488
 8005850:	400204a0 	.word	0x400204a0
 8005854:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2201      	movs	r2, #1
 8005868:	409a      	lsls	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a4f      	ldr	r2, [pc, #316]	; (80059b0 <HAL_DMA_Abort+0x5dc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d072      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a4d      	ldr	r2, [pc, #308]	; (80059b4 <HAL_DMA_Abort+0x5e0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d06d      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a4c      	ldr	r2, [pc, #304]	; (80059b8 <HAL_DMA_Abort+0x5e4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d068      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <HAL_DMA_Abort+0x5e8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d063      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a49      	ldr	r2, [pc, #292]	; (80059c0 <HAL_DMA_Abort+0x5ec>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d05e      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a47      	ldr	r2, [pc, #284]	; (80059c4 <HAL_DMA_Abort+0x5f0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d059      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a46      	ldr	r2, [pc, #280]	; (80059c8 <HAL_DMA_Abort+0x5f4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d054      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a44      	ldr	r2, [pc, #272]	; (80059cc <HAL_DMA_Abort+0x5f8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d04f      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a43      	ldr	r2, [pc, #268]	; (80059d0 <HAL_DMA_Abort+0x5fc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d04a      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a41      	ldr	r2, [pc, #260]	; (80059d4 <HAL_DMA_Abort+0x600>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d045      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a40      	ldr	r2, [pc, #256]	; (80059d8 <HAL_DMA_Abort+0x604>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d040      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3e      	ldr	r2, [pc, #248]	; (80059dc <HAL_DMA_Abort+0x608>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d03b      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3d      	ldr	r2, [pc, #244]	; (80059e0 <HAL_DMA_Abort+0x60c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d036      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3b      	ldr	r2, [pc, #236]	; (80059e4 <HAL_DMA_Abort+0x610>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d031      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a3a      	ldr	r2, [pc, #232]	; (80059e8 <HAL_DMA_Abort+0x614>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d02c      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a38      	ldr	r2, [pc, #224]	; (80059ec <HAL_DMA_Abort+0x618>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d027      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a37      	ldr	r2, [pc, #220]	; (80059f0 <HAL_DMA_Abort+0x61c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d022      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a35      	ldr	r2, [pc, #212]	; (80059f4 <HAL_DMA_Abort+0x620>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01d      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a34      	ldr	r2, [pc, #208]	; (80059f8 <HAL_DMA_Abort+0x624>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d018      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a32      	ldr	r2, [pc, #200]	; (80059fc <HAL_DMA_Abort+0x628>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a31      	ldr	r2, [pc, #196]	; (8005a00 <HAL_DMA_Abort+0x62c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a2f      	ldr	r2, [pc, #188]	; (8005a04 <HAL_DMA_Abort+0x630>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <HAL_DMA_Abort+0x634>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_DMA_Abort+0x58a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <HAL_DMA_Abort+0x638>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_DMA_Abort+0x58e>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_DMA_Abort+0x590>
 8005962:	2300      	movs	r3, #0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005970:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005988:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005992:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40020010 	.word	0x40020010
 80059b4:	40020028 	.word	0x40020028
 80059b8:	40020040 	.word	0x40020040
 80059bc:	40020058 	.word	0x40020058
 80059c0:	40020070 	.word	0x40020070
 80059c4:	40020088 	.word	0x40020088
 80059c8:	400200a0 	.word	0x400200a0
 80059cc:	400200b8 	.word	0x400200b8
 80059d0:	40020410 	.word	0x40020410
 80059d4:	40020428 	.word	0x40020428
 80059d8:	40020440 	.word	0x40020440
 80059dc:	40020458 	.word	0x40020458
 80059e0:	40020470 	.word	0x40020470
 80059e4:	40020488 	.word	0x40020488
 80059e8:	400204a0 	.word	0x400204a0
 80059ec:	400204b8 	.word	0x400204b8
 80059f0:	58025408 	.word	0x58025408
 80059f4:	5802541c 	.word	0x5802541c
 80059f8:	58025430 	.word	0x58025430
 80059fc:	58025444 	.word	0x58025444
 8005a00:	58025458 	.word	0x58025458
 8005a04:	5802546c 	.word	0x5802546c
 8005a08:	58025480 	.word	0x58025480
 8005a0c:	58025494 	.word	0x58025494

08005a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e237      	b.n	8005e92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d004      	beq.n	8005a38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e22c      	b.n	8005e92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a5c      	ldr	r2, [pc, #368]	; (8005bb0 <HAL_DMA_Abort_IT+0x1a0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d04a      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a5b      	ldr	r2, [pc, #364]	; (8005bb4 <HAL_DMA_Abort_IT+0x1a4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d045      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a59      	ldr	r2, [pc, #356]	; (8005bb8 <HAL_DMA_Abort_IT+0x1a8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d040      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <HAL_DMA_Abort_IT+0x1ac>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d03b      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a56      	ldr	r2, [pc, #344]	; (8005bc0 <HAL_DMA_Abort_IT+0x1b0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d036      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a55      	ldr	r2, [pc, #340]	; (8005bc4 <HAL_DMA_Abort_IT+0x1b4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d031      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a53      	ldr	r2, [pc, #332]	; (8005bc8 <HAL_DMA_Abort_IT+0x1b8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02c      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_DMA_Abort_IT+0x1bc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d027      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a50      	ldr	r2, [pc, #320]	; (8005bd0 <HAL_DMA_Abort_IT+0x1c0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a4f      	ldr	r2, [pc, #316]	; (8005bd4 <HAL_DMA_Abort_IT+0x1c4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a4d      	ldr	r2, [pc, #308]	; (8005bd8 <HAL_DMA_Abort_IT+0x1c8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a4c      	ldr	r2, [pc, #304]	; (8005bdc <HAL_DMA_Abort_IT+0x1cc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a4a      	ldr	r2, [pc, #296]	; (8005be0 <HAL_DMA_Abort_IT+0x1d0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a49      	ldr	r2, [pc, #292]	; (8005be4 <HAL_DMA_Abort_IT+0x1d4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a47      	ldr	r2, [pc, #284]	; (8005be8 <HAL_DMA_Abort_IT+0x1d8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a46      	ldr	r2, [pc, #280]	; (8005bec <HAL_DMA_Abort_IT+0x1dc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <HAL_DMA_Abort_IT+0xcc>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <HAL_DMA_Abort_IT+0xce>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8086 	beq.w	8005bf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2f      	ldr	r2, [pc, #188]	; (8005bb0 <HAL_DMA_Abort_IT+0x1a0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d04a      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <HAL_DMA_Abort_IT+0x1a4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d045      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <HAL_DMA_Abort_IT+0x1a8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d040      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <HAL_DMA_Abort_IT+0x1ac>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d03b      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <HAL_DMA_Abort_IT+0x1b0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d036      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <HAL_DMA_Abort_IT+0x1b4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d031      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a26      	ldr	r2, [pc, #152]	; (8005bc8 <HAL_DMA_Abort_IT+0x1b8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02c      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_DMA_Abort_IT+0x1bc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d027      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <HAL_DMA_Abort_IT+0x1c0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d022      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_DMA_Abort_IT+0x1c4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d01d      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <HAL_DMA_Abort_IT+0x1c8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <HAL_DMA_Abort_IT+0x1cc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <HAL_DMA_Abort_IT+0x1d0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_DMA_Abort_IT+0x1d4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1a      	ldr	r2, [pc, #104]	; (8005be8 <HAL_DMA_Abort_IT+0x1d8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x17c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a19      	ldr	r2, [pc, #100]	; (8005bec <HAL_DMA_Abort_IT+0x1dc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <HAL_DMA_Abort_IT+0x18e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e178      	b.n	8005e90 <HAL_DMA_Abort_IT+0x480>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e16f      	b.n	8005e90 <HAL_DMA_Abort_IT+0x480>
 8005bb0:	40020010 	.word	0x40020010
 8005bb4:	40020028 	.word	0x40020028
 8005bb8:	40020040 	.word	0x40020040
 8005bbc:	40020058 	.word	0x40020058
 8005bc0:	40020070 	.word	0x40020070
 8005bc4:	40020088 	.word	0x40020088
 8005bc8:	400200a0 	.word	0x400200a0
 8005bcc:	400200b8 	.word	0x400200b8
 8005bd0:	40020410 	.word	0x40020410
 8005bd4:	40020428 	.word	0x40020428
 8005bd8:	40020440 	.word	0x40020440
 8005bdc:	40020458 	.word	0x40020458
 8005be0:	40020470 	.word	0x40020470
 8005be4:	40020488 	.word	0x40020488
 8005be8:	400204a0 	.word	0x400204a0
 8005bec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 020e 	bic.w	r2, r2, #14
 8005bfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6c      	ldr	r2, [pc, #432]	; (8005db8 <HAL_DMA_Abort_IT+0x3a8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d04a      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a6b      	ldr	r2, [pc, #428]	; (8005dbc <HAL_DMA_Abort_IT+0x3ac>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d045      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a69      	ldr	r2, [pc, #420]	; (8005dc0 <HAL_DMA_Abort_IT+0x3b0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d040      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a68      	ldr	r2, [pc, #416]	; (8005dc4 <HAL_DMA_Abort_IT+0x3b4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d03b      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a66      	ldr	r2, [pc, #408]	; (8005dc8 <HAL_DMA_Abort_IT+0x3b8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d036      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a65      	ldr	r2, [pc, #404]	; (8005dcc <HAL_DMA_Abort_IT+0x3bc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d031      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_DMA_Abort_IT+0x3c0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d02c      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a62      	ldr	r2, [pc, #392]	; (8005dd4 <HAL_DMA_Abort_IT+0x3c4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d027      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a60      	ldr	r2, [pc, #384]	; (8005dd8 <HAL_DMA_Abort_IT+0x3c8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d022      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5f      	ldr	r2, [pc, #380]	; (8005ddc <HAL_DMA_Abort_IT+0x3cc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d01d      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5d      	ldr	r2, [pc, #372]	; (8005de0 <HAL_DMA_Abort_IT+0x3d0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d018      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5c      	ldr	r2, [pc, #368]	; (8005de4 <HAL_DMA_Abort_IT+0x3d4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5a      	ldr	r2, [pc, #360]	; (8005de8 <HAL_DMA_Abort_IT+0x3d8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00e      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a59      	ldr	r2, [pc, #356]	; (8005dec <HAL_DMA_Abort_IT+0x3dc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d009      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a57      	ldr	r2, [pc, #348]	; (8005df0 <HAL_DMA_Abort_IT+0x3e0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <HAL_DMA_Abort_IT+0x290>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a56      	ldr	r2, [pc, #344]	; (8005df4 <HAL_DMA_Abort_IT+0x3e4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <HAL_DMA_Abort_IT+0x2a2>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e007      	b.n	8005cc2 <HAL_DMA_Abort_IT+0x2b2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a3c      	ldr	r2, [pc, #240]	; (8005db8 <HAL_DMA_Abort_IT+0x3a8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d072      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <HAL_DMA_Abort_IT+0x3ac>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d06d      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a39      	ldr	r2, [pc, #228]	; (8005dc0 <HAL_DMA_Abort_IT+0x3b0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d068      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a37      	ldr	r2, [pc, #220]	; (8005dc4 <HAL_DMA_Abort_IT+0x3b4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d063      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a36      	ldr	r2, [pc, #216]	; (8005dc8 <HAL_DMA_Abort_IT+0x3b8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d05e      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <HAL_DMA_Abort_IT+0x3bc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d059      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <HAL_DMA_Abort_IT+0x3c0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d054      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a31      	ldr	r2, [pc, #196]	; (8005dd4 <HAL_DMA_Abort_IT+0x3c4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d04f      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <HAL_DMA_Abort_IT+0x3c8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2e      	ldr	r2, [pc, #184]	; (8005ddc <HAL_DMA_Abort_IT+0x3cc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <HAL_DMA_Abort_IT+0x3d0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <HAL_DMA_Abort_IT+0x3d4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	; (8005de8 <HAL_DMA_Abort_IT+0x3d8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a28      	ldr	r2, [pc, #160]	; (8005dec <HAL_DMA_Abort_IT+0x3dc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a27      	ldr	r2, [pc, #156]	; (8005df0 <HAL_DMA_Abort_IT+0x3e0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <HAL_DMA_Abort_IT+0x3e4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <HAL_DMA_Abort_IT+0x3e8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <HAL_DMA_Abort_IT+0x3ec>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <HAL_DMA_Abort_IT+0x3f0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <HAL_DMA_Abort_IT+0x3f4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <HAL_DMA_Abort_IT+0x3f8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <HAL_DMA_Abort_IT+0x3fc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <HAL_DMA_Abort_IT+0x400>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x3a2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_DMA_Abort_IT+0x404>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d132      	bne.n	8005e18 <HAL_DMA_Abort_IT+0x408>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e031      	b.n	8005e1a <HAL_DMA_Abort_IT+0x40a>
 8005db6:	bf00      	nop
 8005db8:	40020010 	.word	0x40020010
 8005dbc:	40020028 	.word	0x40020028
 8005dc0:	40020040 	.word	0x40020040
 8005dc4:	40020058 	.word	0x40020058
 8005dc8:	40020070 	.word	0x40020070
 8005dcc:	40020088 	.word	0x40020088
 8005dd0:	400200a0 	.word	0x400200a0
 8005dd4:	400200b8 	.word	0x400200b8
 8005dd8:	40020410 	.word	0x40020410
 8005ddc:	40020428 	.word	0x40020428
 8005de0:	40020440 	.word	0x40020440
 8005de4:	40020458 	.word	0x40020458
 8005de8:	40020470 	.word	0x40020470
 8005dec:	40020488 	.word	0x40020488
 8005df0:	400204a0 	.word	0x400204a0
 8005df4:	400204b8 	.word	0x400204b8
 8005df8:	58025408 	.word	0x58025408
 8005dfc:	5802541c 	.word	0x5802541c
 8005e00:	58025430 	.word	0x58025430
 8005e04:	58025444 	.word	0x58025444
 8005e08:	58025458 	.word	0x58025458
 8005e0c:	5802546c 	.word	0x5802546c
 8005e10:	58025480 	.word	0x58025480
 8005e14:	58025494 	.word	0x58025494
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d028      	beq.n	8005e70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ea8:	4b67      	ldr	r3, [pc, #412]	; (8006048 <HAL_DMA_IRQHandler+0x1ac>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a67      	ldr	r2, [pc, #412]	; (800604c <HAL_DMA_IRQHandler+0x1b0>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0a9b      	lsrs	r3, r3, #10
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a5f      	ldr	r2, [pc, #380]	; (8006050 <HAL_DMA_IRQHandler+0x1b4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d04a      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a5d      	ldr	r2, [pc, #372]	; (8006054 <HAL_DMA_IRQHandler+0x1b8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d045      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5c      	ldr	r2, [pc, #368]	; (8006058 <HAL_DMA_IRQHandler+0x1bc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d040      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a5a      	ldr	r2, [pc, #360]	; (800605c <HAL_DMA_IRQHandler+0x1c0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d03b      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a59      	ldr	r2, [pc, #356]	; (8006060 <HAL_DMA_IRQHandler+0x1c4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d036      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a57      	ldr	r2, [pc, #348]	; (8006064 <HAL_DMA_IRQHandler+0x1c8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d031      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a56      	ldr	r2, [pc, #344]	; (8006068 <HAL_DMA_IRQHandler+0x1cc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d02c      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a54      	ldr	r2, [pc, #336]	; (800606c <HAL_DMA_IRQHandler+0x1d0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d027      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a53      	ldr	r2, [pc, #332]	; (8006070 <HAL_DMA_IRQHandler+0x1d4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a51      	ldr	r2, [pc, #324]	; (8006074 <HAL_DMA_IRQHandler+0x1d8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a50      	ldr	r2, [pc, #320]	; (8006078 <HAL_DMA_IRQHandler+0x1dc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a4e      	ldr	r2, [pc, #312]	; (800607c <HAL_DMA_IRQHandler+0x1e0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <HAL_DMA_IRQHandler+0x1e4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_DMA_IRQHandler+0x1e8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <HAL_DMA_IRQHandler+0x1ec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_DMA_IRQHandler+0xd2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a48      	ldr	r2, [pc, #288]	; (800608c <HAL_DMA_IRQHandler+0x1f0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_DMA_IRQHandler+0xd6>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <HAL_DMA_IRQHandler+0xd8>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 842b 	beq.w	80067d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	2208      	movs	r2, #8
 8005f84:	409a      	lsls	r2, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a2 	beq.w	80060d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2e      	ldr	r2, [pc, #184]	; (8006050 <HAL_DMA_IRQHandler+0x1b4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d04a      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2d      	ldr	r2, [pc, #180]	; (8006054 <HAL_DMA_IRQHandler+0x1b8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d045      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <HAL_DMA_IRQHandler+0x1bc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d040      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <HAL_DMA_IRQHandler+0x1c0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d03b      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <HAL_DMA_IRQHandler+0x1c4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d036      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a27      	ldr	r2, [pc, #156]	; (8006064 <HAL_DMA_IRQHandler+0x1c8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d031      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a25      	ldr	r2, [pc, #148]	; (8006068 <HAL_DMA_IRQHandler+0x1cc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02c      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <HAL_DMA_IRQHandler+0x1d0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d027      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_DMA_IRQHandler+0x1d4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_DMA_IRQHandler+0x1d8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01d      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_DMA_IRQHandler+0x1dc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_DMA_IRQHandler+0x1e0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_DMA_IRQHandler+0x1e4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_DMA_IRQHandler+0x1e8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_DMA_IRQHandler+0x1ec>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_IRQHandler+0x194>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_DMA_IRQHandler+0x1f0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d12f      	bne.n	8006090 <HAL_DMA_IRQHandler+0x1f4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	bf14      	ite	ne
 800603e:	2301      	movne	r3, #1
 8006040:	2300      	moveq	r3, #0
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e02e      	b.n	80060a4 <HAL_DMA_IRQHandler+0x208>
 8006046:	bf00      	nop
 8006048:	24000044 	.word	0x24000044
 800604c:	1b4e81b5 	.word	0x1b4e81b5
 8006050:	40020010 	.word	0x40020010
 8006054:	40020028 	.word	0x40020028
 8006058:	40020040 	.word	0x40020040
 800605c:	40020058 	.word	0x40020058
 8006060:	40020070 	.word	0x40020070
 8006064:	40020088 	.word	0x40020088
 8006068:	400200a0 	.word	0x400200a0
 800606c:	400200b8 	.word	0x400200b8
 8006070:	40020410 	.word	0x40020410
 8006074:	40020428 	.word	0x40020428
 8006078:	40020440 	.word	0x40020440
 800607c:	40020458 	.word	0x40020458
 8006080:	40020470 	.word	0x40020470
 8006084:	40020488 	.word	0x40020488
 8006088:	400204a0 	.word	0x400204a0
 800608c:	400204b8 	.word	0x400204b8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d015      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0204 	bic.w	r2, r2, #4
 80060b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2208      	movs	r2, #8
 80060c2:	409a      	lsls	r2, r3
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0201 	orr.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d06e      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a69      	ldr	r2, [pc, #420]	; (8006294 <HAL_DMA_IRQHandler+0x3f8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d04a      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a67      	ldr	r2, [pc, #412]	; (8006298 <HAL_DMA_IRQHandler+0x3fc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d045      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a66      	ldr	r2, [pc, #408]	; (800629c <HAL_DMA_IRQHandler+0x400>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d040      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a64      	ldr	r2, [pc, #400]	; (80062a0 <HAL_DMA_IRQHandler+0x404>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d03b      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a63      	ldr	r2, [pc, #396]	; (80062a4 <HAL_DMA_IRQHandler+0x408>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d036      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a61      	ldr	r2, [pc, #388]	; (80062a8 <HAL_DMA_IRQHandler+0x40c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a60      	ldr	r2, [pc, #384]	; (80062ac <HAL_DMA_IRQHandler+0x410>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d02c      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a5e      	ldr	r2, [pc, #376]	; (80062b0 <HAL_DMA_IRQHandler+0x414>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d027      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a5d      	ldr	r2, [pc, #372]	; (80062b4 <HAL_DMA_IRQHandler+0x418>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5b      	ldr	r2, [pc, #364]	; (80062b8 <HAL_DMA_IRQHandler+0x41c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01d      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <HAL_DMA_IRQHandler+0x420>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a58      	ldr	r2, [pc, #352]	; (80062c0 <HAL_DMA_IRQHandler+0x424>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a57      	ldr	r2, [pc, #348]	; (80062c4 <HAL_DMA_IRQHandler+0x428>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a55      	ldr	r2, [pc, #340]	; (80062c8 <HAL_DMA_IRQHandler+0x42c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a54      	ldr	r2, [pc, #336]	; (80062cc <HAL_DMA_IRQHandler+0x430>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_DMA_IRQHandler+0x2ee>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a52      	ldr	r2, [pc, #328]	; (80062d0 <HAL_DMA_IRQHandler+0x434>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10a      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x304>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e003      	b.n	80061a8 <HAL_DMA_IRQHandler+0x30c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00d      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2201      	movs	r2, #1
 80061b6:	409a      	lsls	r2, r3
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f043 0202 	orr.w	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2204      	movs	r2, #4
 80061d2:	409a      	lsls	r2, r3
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 808f 	beq.w	80062fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2c      	ldr	r2, [pc, #176]	; (8006294 <HAL_DMA_IRQHandler+0x3f8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <HAL_DMA_IRQHandler+0x3fc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a29      	ldr	r2, [pc, #164]	; (800629c <HAL_DMA_IRQHandler+0x400>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <HAL_DMA_IRQHandler+0x404>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a26      	ldr	r2, [pc, #152]	; (80062a4 <HAL_DMA_IRQHandler+0x408>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <HAL_DMA_IRQHandler+0x40c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a23      	ldr	r2, [pc, #140]	; (80062ac <HAL_DMA_IRQHandler+0x410>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <HAL_DMA_IRQHandler+0x414>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <HAL_DMA_IRQHandler+0x418>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_DMA_IRQHandler+0x41c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_DMA_IRQHandler+0x420>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_DMA_IRQHandler+0x424>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_DMA_IRQHandler+0x428>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_DMA_IRQHandler+0x42c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_DMA_IRQHandler+0x430>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_IRQHandler+0x3e2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_DMA_IRQHandler+0x434>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d12a      	bne.n	80062d4 <HAL_DMA_IRQHandler+0x438>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e023      	b.n	80062dc <HAL_DMA_IRQHandler+0x440>
 8006294:	40020010 	.word	0x40020010
 8006298:	40020028 	.word	0x40020028
 800629c:	40020040 	.word	0x40020040
 80062a0:	40020058 	.word	0x40020058
 80062a4:	40020070 	.word	0x40020070
 80062a8:	40020088 	.word	0x40020088
 80062ac:	400200a0 	.word	0x400200a0
 80062b0:	400200b8 	.word	0x400200b8
 80062b4:	40020410 	.word	0x40020410
 80062b8:	40020428 	.word	0x40020428
 80062bc:	40020440 	.word	0x40020440
 80062c0:	40020458 	.word	0x40020458
 80062c4:	40020470 	.word	0x40020470
 80062c8:	40020488 	.word	0x40020488
 80062cc:	400204a0 	.word	0x400204a0
 80062d0:	400204b8 	.word	0x400204b8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2204      	movs	r2, #4
 80062ea:	409a      	lsls	r2, r3
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f4:	f043 0204 	orr.w	r2, r3, #4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2210      	movs	r2, #16
 8006306:	409a      	lsls	r2, r3
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a6 	beq.w	800645e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a85      	ldr	r2, [pc, #532]	; (800652c <HAL_DMA_IRQHandler+0x690>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d04a      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a83      	ldr	r2, [pc, #524]	; (8006530 <HAL_DMA_IRQHandler+0x694>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d045      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a82      	ldr	r2, [pc, #520]	; (8006534 <HAL_DMA_IRQHandler+0x698>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d040      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a80      	ldr	r2, [pc, #512]	; (8006538 <HAL_DMA_IRQHandler+0x69c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d03b      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7f      	ldr	r2, [pc, #508]	; (800653c <HAL_DMA_IRQHandler+0x6a0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d036      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7d      	ldr	r2, [pc, #500]	; (8006540 <HAL_DMA_IRQHandler+0x6a4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d031      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a7c      	ldr	r2, [pc, #496]	; (8006544 <HAL_DMA_IRQHandler+0x6a8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d02c      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a7a      	ldr	r2, [pc, #488]	; (8006548 <HAL_DMA_IRQHandler+0x6ac>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d027      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a79      	ldr	r2, [pc, #484]	; (800654c <HAL_DMA_IRQHandler+0x6b0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a77      	ldr	r2, [pc, #476]	; (8006550 <HAL_DMA_IRQHandler+0x6b4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01d      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a76      	ldr	r2, [pc, #472]	; (8006554 <HAL_DMA_IRQHandler+0x6b8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a74      	ldr	r2, [pc, #464]	; (8006558 <HAL_DMA_IRQHandler+0x6bc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a73      	ldr	r2, [pc, #460]	; (800655c <HAL_DMA_IRQHandler+0x6c0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a71      	ldr	r2, [pc, #452]	; (8006560 <HAL_DMA_IRQHandler+0x6c4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a70      	ldr	r2, [pc, #448]	; (8006564 <HAL_DMA_IRQHandler+0x6c8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x516>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6e      	ldr	r2, [pc, #440]	; (8006568 <HAL_DMA_IRQHandler+0x6cc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10a      	bne.n	80063c8 <HAL_DMA_IRQHandler+0x52c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e009      	b.n	80063dc <HAL_DMA_IRQHandler+0x540>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bf14      	ite	ne
 80063d6:	2301      	movne	r3, #1
 80063d8:	2300      	moveq	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d03e      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2210      	movs	r2, #16
 80063ea:	409a      	lsls	r2, r3
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d108      	bne.n	800641e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d024      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
 800641c:	e01f      	b.n	800645e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01b      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
 800642e:	e016      	b.n	800645e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0208 	bic.w	r2, r2, #8
 800644c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2220      	movs	r2, #32
 8006468:	409a      	lsls	r2, r3
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8110 	beq.w	8006694 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2c      	ldr	r2, [pc, #176]	; (800652c <HAL_DMA_IRQHandler+0x690>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d04a      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <HAL_DMA_IRQHandler+0x694>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d045      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a29      	ldr	r2, [pc, #164]	; (8006534 <HAL_DMA_IRQHandler+0x698>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d040      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a28      	ldr	r2, [pc, #160]	; (8006538 <HAL_DMA_IRQHandler+0x69c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d03b      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a26      	ldr	r2, [pc, #152]	; (800653c <HAL_DMA_IRQHandler+0x6a0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d036      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a25      	ldr	r2, [pc, #148]	; (8006540 <HAL_DMA_IRQHandler+0x6a4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d031      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a23      	ldr	r2, [pc, #140]	; (8006544 <HAL_DMA_IRQHandler+0x6a8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d02c      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a22      	ldr	r2, [pc, #136]	; (8006548 <HAL_DMA_IRQHandler+0x6ac>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d027      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <HAL_DMA_IRQHandler+0x6b0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d022      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <HAL_DMA_IRQHandler+0x6b4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d01d      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <HAL_DMA_IRQHandler+0x6b8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d018      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <HAL_DMA_IRQHandler+0x6bc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1a      	ldr	r2, [pc, #104]	; (800655c <HAL_DMA_IRQHandler+0x6c0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_DMA_IRQHandler+0x6c4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_DMA_IRQHandler+0x6c8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_DMA_IRQHandler+0x678>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a16      	ldr	r2, [pc, #88]	; (8006568 <HAL_DMA_IRQHandler+0x6cc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d12b      	bne.n	800656c <HAL_DMA_IRQHandler+0x6d0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf14      	ite	ne
 8006522:	2301      	movne	r3, #1
 8006524:	2300      	moveq	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	e02a      	b.n	8006580 <HAL_DMA_IRQHandler+0x6e4>
 800652a:	bf00      	nop
 800652c:	40020010 	.word	0x40020010
 8006530:	40020028 	.word	0x40020028
 8006534:	40020040 	.word	0x40020040
 8006538:	40020058 	.word	0x40020058
 800653c:	40020070 	.word	0x40020070
 8006540:	40020088 	.word	0x40020088
 8006544:	400200a0 	.word	0x400200a0
 8006548:	400200b8 	.word	0x400200b8
 800654c:	40020410 	.word	0x40020410
 8006550:	40020428 	.word	0x40020428
 8006554:	40020440 	.word	0x40020440
 8006558:	40020458 	.word	0x40020458
 800655c:	40020470 	.word	0x40020470
 8006560:	40020488 	.word	0x40020488
 8006564:	400204a0 	.word	0x400204a0
 8006568:	400204b8 	.word	0x400204b8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	bf14      	ite	ne
 800657a:	2301      	movne	r3, #1
 800657c:	2300      	moveq	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8087 	beq.w	8006694 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2220      	movs	r2, #32
 8006590:	409a      	lsls	r2, r3
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d139      	bne.n	8006616 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0216 	bic.w	r2, r2, #22
 80065b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <HAL_DMA_IRQHandler+0x736>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0208 	bic.w	r2, r2, #8
 80065e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	223f      	movs	r2, #63	; 0x3f
 80065ec:	409a      	lsls	r2, r3
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 834a 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
          }
          return;
 8006614:	e344      	b.n	8006ca0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d018      	beq.n	8006656 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d108      	bne.n	8006644 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02c      	beq.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
 8006642:	e027      	b.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d023      	beq.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	e01e      	b.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0210 	bic.w	r2, r2, #16
 8006672:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8306 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8088 	beq.w	80067bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a7a      	ldr	r2, [pc, #488]	; (80068a4 <HAL_DMA_IRQHandler+0xa08>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d04a      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a79      	ldr	r2, [pc, #484]	; (80068a8 <HAL_DMA_IRQHandler+0xa0c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d045      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a77      	ldr	r2, [pc, #476]	; (80068ac <HAL_DMA_IRQHandler+0xa10>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d040      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a76      	ldr	r2, [pc, #472]	; (80068b0 <HAL_DMA_IRQHandler+0xa14>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d03b      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a74      	ldr	r2, [pc, #464]	; (80068b4 <HAL_DMA_IRQHandler+0xa18>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d036      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a73      	ldr	r2, [pc, #460]	; (80068b8 <HAL_DMA_IRQHandler+0xa1c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d031      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a71      	ldr	r2, [pc, #452]	; (80068bc <HAL_DMA_IRQHandler+0xa20>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02c      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a70      	ldr	r2, [pc, #448]	; (80068c0 <HAL_DMA_IRQHandler+0xa24>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d027      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a6e      	ldr	r2, [pc, #440]	; (80068c4 <HAL_DMA_IRQHandler+0xa28>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a6d      	ldr	r2, [pc, #436]	; (80068c8 <HAL_DMA_IRQHandler+0xa2c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d01d      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a6b      	ldr	r2, [pc, #428]	; (80068cc <HAL_DMA_IRQHandler+0xa30>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6a      	ldr	r2, [pc, #424]	; (80068d0 <HAL_DMA_IRQHandler+0xa34>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a68      	ldr	r2, [pc, #416]	; (80068d4 <HAL_DMA_IRQHandler+0xa38>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a67      	ldr	r2, [pc, #412]	; (80068d8 <HAL_DMA_IRQHandler+0xa3c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a65      	ldr	r2, [pc, #404]	; (80068dc <HAL_DMA_IRQHandler+0xa40>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_DMA_IRQHandler+0x8b8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a64      	ldr	r2, [pc, #400]	; (80068e0 <HAL_DMA_IRQHandler+0xa44>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d108      	bne.n	8006766 <HAL_DMA_IRQHandler+0x8ca>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e007      	b.n	8006776 <HAL_DMA_IRQHandler+0x8da>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677e:	429a      	cmp	r2, r3
 8006780:	d307      	bcc.n	8006792 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f2      	bne.n	8006776 <HAL_DMA_IRQHandler+0x8da>
 8006790:	e000      	b.n	8006794 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006792:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d004      	beq.n	80067ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067aa:	e003      	b.n	80067b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8272 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	e26c      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a43      	ldr	r2, [pc, #268]	; (80068e4 <HAL_DMA_IRQHandler+0xa48>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d022      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a42      	ldr	r2, [pc, #264]	; (80068e8 <HAL_DMA_IRQHandler+0xa4c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01d      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a40      	ldr	r2, [pc, #256]	; (80068ec <HAL_DMA_IRQHandler+0xa50>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d018      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a3f      	ldr	r2, [pc, #252]	; (80068f0 <HAL_DMA_IRQHandler+0xa54>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3d      	ldr	r2, [pc, #244]	; (80068f4 <HAL_DMA_IRQHandler+0xa58>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a3c      	ldr	r2, [pc, #240]	; (80068f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d009      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a3a      	ldr	r2, [pc, #232]	; (80068fc <HAL_DMA_IRQHandler+0xa60>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_DMA_IRQHandler+0x984>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a39      	ldr	r2, [pc, #228]	; (8006900 <HAL_DMA_IRQHandler+0xa64>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d101      	bne.n	8006824 <HAL_DMA_IRQHandler+0x988>
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_DMA_IRQHandler+0x98a>
 8006824:	2300      	movs	r3, #0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 823f 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	2204      	movs	r2, #4
 800683e:	409a      	lsls	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80cd 	beq.w	80069e4 <HAL_DMA_IRQHandler+0xb48>
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80c7 	beq.w	80069e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2204      	movs	r2, #4
 8006860:	409a      	lsls	r2, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d049      	beq.n	8006904 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8210 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800688c:	e20a      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8206 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a0:	e200      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe08>
 80068a2:	bf00      	nop
 80068a4:	40020010 	.word	0x40020010
 80068a8:	40020028 	.word	0x40020028
 80068ac:	40020040 	.word	0x40020040
 80068b0:	40020058 	.word	0x40020058
 80068b4:	40020070 	.word	0x40020070
 80068b8:	40020088 	.word	0x40020088
 80068bc:	400200a0 	.word	0x400200a0
 80068c0:	400200b8 	.word	0x400200b8
 80068c4:	40020410 	.word	0x40020410
 80068c8:	40020428 	.word	0x40020428
 80068cc:	40020440 	.word	0x40020440
 80068d0:	40020458 	.word	0x40020458
 80068d4:	40020470 	.word	0x40020470
 80068d8:	40020488 	.word	0x40020488
 80068dc:	400204a0 	.word	0x400204a0
 80068e0:	400204b8 	.word	0x400204b8
 80068e4:	58025408 	.word	0x58025408
 80068e8:	5802541c 	.word	0x5802541c
 80068ec:	58025430 	.word	0x58025430
 80068f0:	58025444 	.word	0x58025444
 80068f4:	58025458 	.word	0x58025458
 80068f8:	5802546c 	.word	0x5802546c
 80068fc:	58025480 	.word	0x58025480
 8006900:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d160      	bne.n	80069d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7f      	ldr	r2, [pc, #508]	; (8006b10 <HAL_DMA_IRQHandler+0xc74>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d04a      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a7d      	ldr	r2, [pc, #500]	; (8006b14 <HAL_DMA_IRQHandler+0xc78>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d045      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a7c      	ldr	r2, [pc, #496]	; (8006b18 <HAL_DMA_IRQHandler+0xc7c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d040      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7a      	ldr	r2, [pc, #488]	; (8006b1c <HAL_DMA_IRQHandler+0xc80>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d03b      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a79      	ldr	r2, [pc, #484]	; (8006b20 <HAL_DMA_IRQHandler+0xc84>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d036      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a77      	ldr	r2, [pc, #476]	; (8006b24 <HAL_DMA_IRQHandler+0xc88>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d031      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a76      	ldr	r2, [pc, #472]	; (8006b28 <HAL_DMA_IRQHandler+0xc8c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d02c      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a74      	ldr	r2, [pc, #464]	; (8006b2c <HAL_DMA_IRQHandler+0xc90>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d027      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a73      	ldr	r2, [pc, #460]	; (8006b30 <HAL_DMA_IRQHandler+0xc94>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a71      	ldr	r2, [pc, #452]	; (8006b34 <HAL_DMA_IRQHandler+0xc98>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01d      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a70      	ldr	r2, [pc, #448]	; (8006b38 <HAL_DMA_IRQHandler+0xc9c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a6e      	ldr	r2, [pc, #440]	; (8006b3c <HAL_DMA_IRQHandler+0xca0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a6d      	ldr	r2, [pc, #436]	; (8006b40 <HAL_DMA_IRQHandler+0xca4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a6b      	ldr	r2, [pc, #428]	; (8006b44 <HAL_DMA_IRQHandler+0xca8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a6a      	ldr	r2, [pc, #424]	; (8006b48 <HAL_DMA_IRQHandler+0xcac>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_DMA_IRQHandler+0xb12>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a68      	ldr	r2, [pc, #416]	; (8006b4c <HAL_DMA_IRQHandler+0xcb0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d108      	bne.n	80069c0 <HAL_DMA_IRQHandler+0xb24>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0208 	bic.w	r2, r2, #8
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e007      	b.n	80069d0 <HAL_DMA_IRQHandler+0xb34>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0204 	bic.w	r2, r2, #4
 80069ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8165 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069e2:	e15f      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2202      	movs	r2, #2
 80069ee:	409a      	lsls	r2, r3
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80c5 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xce8>
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80bf 	beq.w	8006b84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2202      	movs	r2, #2
 8006a10:	409a      	lsls	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d018      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 813a 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a3c:	e134      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8130 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a50:	e12a      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 8089 	bne.w	8006b70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a2b      	ldr	r2, [pc, #172]	; (8006b10 <HAL_DMA_IRQHandler+0xc74>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d04a      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <HAL_DMA_IRQHandler+0xc78>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d045      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a28      	ldr	r2, [pc, #160]	; (8006b18 <HAL_DMA_IRQHandler+0xc7c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d040      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a26      	ldr	r2, [pc, #152]	; (8006b1c <HAL_DMA_IRQHandler+0xc80>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d03b      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a25      	ldr	r2, [pc, #148]	; (8006b20 <HAL_DMA_IRQHandler+0xc84>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d036      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a23      	ldr	r2, [pc, #140]	; (8006b24 <HAL_DMA_IRQHandler+0xc88>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d031      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a22      	ldr	r2, [pc, #136]	; (8006b28 <HAL_DMA_IRQHandler+0xc8c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d02c      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <HAL_DMA_IRQHandler+0xc90>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d027      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <HAL_DMA_IRQHandler+0xc94>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d022      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <HAL_DMA_IRQHandler+0xc98>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01d      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <HAL_DMA_IRQHandler+0xc9c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <HAL_DMA_IRQHandler+0xca0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <HAL_DMA_IRQHandler+0xca4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <HAL_DMA_IRQHandler+0xca8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <HAL_DMA_IRQHandler+0xcac>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_DMA_IRQHandler+0xc62>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <HAL_DMA_IRQHandler+0xcb0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d128      	bne.n	8006b50 <HAL_DMA_IRQHandler+0xcb4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0214 	bic.w	r2, r2, #20
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e027      	b.n	8006b60 <HAL_DMA_IRQHandler+0xcc4>
 8006b10:	40020010 	.word	0x40020010
 8006b14:	40020028 	.word	0x40020028
 8006b18:	40020040 	.word	0x40020040
 8006b1c:	40020058 	.word	0x40020058
 8006b20:	40020070 	.word	0x40020070
 8006b24:	40020088 	.word	0x40020088
 8006b28:	400200a0 	.word	0x400200a0
 8006b2c:	400200b8 	.word	0x400200b8
 8006b30:	40020410 	.word	0x40020410
 8006b34:	40020428 	.word	0x40020428
 8006b38:	40020440 	.word	0x40020440
 8006b3c:	40020458 	.word	0x40020458
 8006b40:	40020470 	.word	0x40020470
 8006b44:	40020488 	.word	0x40020488
 8006b48:	400204a0 	.word	0x400204a0
 8006b4c:	400204b8 	.word	0x400204b8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 020a 	bic.w	r2, r2, #10
 8006b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8097 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b82:	e091      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8088 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8082 	beq.w	8006caa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a41      	ldr	r2, [pc, #260]	; (8006cb0 <HAL_DMA_IRQHandler+0xe14>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d04a      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a3f      	ldr	r2, [pc, #252]	; (8006cb4 <HAL_DMA_IRQHandler+0xe18>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d045      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a3e      	ldr	r2, [pc, #248]	; (8006cb8 <HAL_DMA_IRQHandler+0xe1c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d040      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a3c      	ldr	r2, [pc, #240]	; (8006cbc <HAL_DMA_IRQHandler+0xe20>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d03b      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a3b      	ldr	r2, [pc, #236]	; (8006cc0 <HAL_DMA_IRQHandler+0xe24>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d036      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a39      	ldr	r2, [pc, #228]	; (8006cc4 <HAL_DMA_IRQHandler+0xe28>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d031      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a38      	ldr	r2, [pc, #224]	; (8006cc8 <HAL_DMA_IRQHandler+0xe2c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d02c      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a36      	ldr	r2, [pc, #216]	; (8006ccc <HAL_DMA_IRQHandler+0xe30>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d027      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a35      	ldr	r2, [pc, #212]	; (8006cd0 <HAL_DMA_IRQHandler+0xe34>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d022      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a33      	ldr	r2, [pc, #204]	; (8006cd4 <HAL_DMA_IRQHandler+0xe38>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d01d      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a32      	ldr	r2, [pc, #200]	; (8006cd8 <HAL_DMA_IRQHandler+0xe3c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d018      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a30      	ldr	r2, [pc, #192]	; (8006cdc <HAL_DMA_IRQHandler+0xe40>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <HAL_DMA_IRQHandler+0xe44>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00e      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_DMA_IRQHandler+0xe48>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d009      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_DMA_IRQHandler+0xe4c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d004      	beq.n	8006c46 <HAL_DMA_IRQHandler+0xdaa>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_DMA_IRQHandler+0xe50>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d108      	bne.n	8006c58 <HAL_DMA_IRQHandler+0xdbc>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 021c 	bic.w	r2, r2, #28
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e007      	b.n	8006c68 <HAL_DMA_IRQHandler+0xdcc>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 020e 	bic.w	r2, r2, #14
 8006c66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
 8006c9e:	e004      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006caa:	3728      	adds	r7, #40	; 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40020010 	.word	0x40020010
 8006cb4:	40020028 	.word	0x40020028
 8006cb8:	40020040 	.word	0x40020040
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	40020070 	.word	0x40020070
 8006cc4:	40020088 	.word	0x40020088
 8006cc8:	400200a0 	.word	0x400200a0
 8006ccc:	400200b8 	.word	0x400200b8
 8006cd0:	40020410 	.word	0x40020410
 8006cd4:	40020428 	.word	0x40020428
 8006cd8:	40020440 	.word	0x40020440
 8006cdc:	40020458 	.word	0x40020458
 8006ce0:	40020470 	.word	0x40020470
 8006ce4:	40020488 	.word	0x40020488
 8006ce8:	400204a0 	.word	0x400204a0
 8006cec:	400204b8 	.word	0x400204b8

08006cf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a7f      	ldr	r2, [pc, #508]	; (8006f0c <DMA_SetConfig+0x21c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d072      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a7d      	ldr	r2, [pc, #500]	; (8006f10 <DMA_SetConfig+0x220>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d06d      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a7c      	ldr	r2, [pc, #496]	; (8006f14 <DMA_SetConfig+0x224>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d068      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a7a      	ldr	r2, [pc, #488]	; (8006f18 <DMA_SetConfig+0x228>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d063      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a79      	ldr	r2, [pc, #484]	; (8006f1c <DMA_SetConfig+0x22c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d05e      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a77      	ldr	r2, [pc, #476]	; (8006f20 <DMA_SetConfig+0x230>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d059      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a76      	ldr	r2, [pc, #472]	; (8006f24 <DMA_SetConfig+0x234>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d054      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a74      	ldr	r2, [pc, #464]	; (8006f28 <DMA_SetConfig+0x238>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d04f      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a73      	ldr	r2, [pc, #460]	; (8006f2c <DMA_SetConfig+0x23c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d04a      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a71      	ldr	r2, [pc, #452]	; (8006f30 <DMA_SetConfig+0x240>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d045      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a70      	ldr	r2, [pc, #448]	; (8006f34 <DMA_SetConfig+0x244>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d040      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a6e      	ldr	r2, [pc, #440]	; (8006f38 <DMA_SetConfig+0x248>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d03b      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a6d      	ldr	r2, [pc, #436]	; (8006f3c <DMA_SetConfig+0x24c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d036      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6b      	ldr	r2, [pc, #428]	; (8006f40 <DMA_SetConfig+0x250>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d031      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6a      	ldr	r2, [pc, #424]	; (8006f44 <DMA_SetConfig+0x254>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d02c      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a68      	ldr	r2, [pc, #416]	; (8006f48 <DMA_SetConfig+0x258>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d027      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a67      	ldr	r2, [pc, #412]	; (8006f4c <DMA_SetConfig+0x25c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d022      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a65      	ldr	r2, [pc, #404]	; (8006f50 <DMA_SetConfig+0x260>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01d      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a64      	ldr	r2, [pc, #400]	; (8006f54 <DMA_SetConfig+0x264>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d018      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a62      	ldr	r2, [pc, #392]	; (8006f58 <DMA_SetConfig+0x268>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a61      	ldr	r2, [pc, #388]	; (8006f5c <DMA_SetConfig+0x26c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a5f      	ldr	r2, [pc, #380]	; (8006f60 <DMA_SetConfig+0x270>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a5e      	ldr	r2, [pc, #376]	; (8006f64 <DMA_SetConfig+0x274>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <DMA_SetConfig+0x10a>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5c      	ldr	r2, [pc, #368]	; (8006f68 <DMA_SetConfig+0x278>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <DMA_SetConfig+0x10e>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <DMA_SetConfig+0x110>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a39      	ldr	r2, [pc, #228]	; (8006f0c <DMA_SetConfig+0x21c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d04a      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a38      	ldr	r2, [pc, #224]	; (8006f10 <DMA_SetConfig+0x220>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d045      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a36      	ldr	r2, [pc, #216]	; (8006f14 <DMA_SetConfig+0x224>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d040      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a35      	ldr	r2, [pc, #212]	; (8006f18 <DMA_SetConfig+0x228>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d03b      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a33      	ldr	r2, [pc, #204]	; (8006f1c <DMA_SetConfig+0x22c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d036      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a32      	ldr	r2, [pc, #200]	; (8006f20 <DMA_SetConfig+0x230>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d031      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a30      	ldr	r2, [pc, #192]	; (8006f24 <DMA_SetConfig+0x234>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d02c      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <DMA_SetConfig+0x238>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d027      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2d      	ldr	r2, [pc, #180]	; (8006f2c <DMA_SetConfig+0x23c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d022      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a2c      	ldr	r2, [pc, #176]	; (8006f30 <DMA_SetConfig+0x240>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d01d      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <DMA_SetConfig+0x244>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <DMA_SetConfig+0x248>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <DMA_SetConfig+0x24c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <DMA_SetConfig+0x250>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a24      	ldr	r2, [pc, #144]	; (8006f44 <DMA_SetConfig+0x254>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <DMA_SetConfig+0x1d0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a23      	ldr	r2, [pc, #140]	; (8006f48 <DMA_SetConfig+0x258>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d101      	bne.n	8006ec4 <DMA_SetConfig+0x1d4>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <DMA_SetConfig+0x1d6>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d059      	beq.n	8006f7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	223f      	movs	r2, #63	; 0x3f
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ee8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d138      	bne.n	8006f6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f0a:	e086      	b.n	800701a <DMA_SetConfig+0x32a>
 8006f0c:	40020010 	.word	0x40020010
 8006f10:	40020028 	.word	0x40020028
 8006f14:	40020040 	.word	0x40020040
 8006f18:	40020058 	.word	0x40020058
 8006f1c:	40020070 	.word	0x40020070
 8006f20:	40020088 	.word	0x40020088
 8006f24:	400200a0 	.word	0x400200a0
 8006f28:	400200b8 	.word	0x400200b8
 8006f2c:	40020410 	.word	0x40020410
 8006f30:	40020428 	.word	0x40020428
 8006f34:	40020440 	.word	0x40020440
 8006f38:	40020458 	.word	0x40020458
 8006f3c:	40020470 	.word	0x40020470
 8006f40:	40020488 	.word	0x40020488
 8006f44:	400204a0 	.word	0x400204a0
 8006f48:	400204b8 	.word	0x400204b8
 8006f4c:	58025408 	.word	0x58025408
 8006f50:	5802541c 	.word	0x5802541c
 8006f54:	58025430 	.word	0x58025430
 8006f58:	58025444 	.word	0x58025444
 8006f5c:	58025458 	.word	0x58025458
 8006f60:	5802546c 	.word	0x5802546c
 8006f64:	58025480 	.word	0x58025480
 8006f68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]
}
 8006f7c:	e04d      	b.n	800701a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a29      	ldr	r2, [pc, #164]	; (8007028 <DMA_SetConfig+0x338>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d022      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a27      	ldr	r2, [pc, #156]	; (800702c <DMA_SetConfig+0x33c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01d      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a26      	ldr	r2, [pc, #152]	; (8007030 <DMA_SetConfig+0x340>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d018      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a24      	ldr	r2, [pc, #144]	; (8007034 <DMA_SetConfig+0x344>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a23      	ldr	r2, [pc, #140]	; (8007038 <DMA_SetConfig+0x348>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00e      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a21      	ldr	r2, [pc, #132]	; (800703c <DMA_SetConfig+0x34c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a20      	ldr	r2, [pc, #128]	; (8007040 <DMA_SetConfig+0x350>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <DMA_SetConfig+0x2de>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <DMA_SetConfig+0x354>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <DMA_SetConfig+0x2e2>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <DMA_SetConfig+0x2e4>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d020      	beq.n	800701a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	409a      	lsls	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d108      	bne.n	800700a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	60da      	str	r2, [r3, #12]
}
 8007008:	e007      	b.n	800701a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	58025408 	.word	0x58025408
 800702c:	5802541c 	.word	0x5802541c
 8007030:	58025430 	.word	0x58025430
 8007034:	58025444 	.word	0x58025444
 8007038:	58025458 	.word	0x58025458
 800703c:	5802546c 	.word	0x5802546c
 8007040:	58025480 	.word	0x58025480
 8007044:	58025494 	.word	0x58025494

08007048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a42      	ldr	r2, [pc, #264]	; (8007160 <DMA_CalcBaseAndBitshift+0x118>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d04a      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a41      	ldr	r2, [pc, #260]	; (8007164 <DMA_CalcBaseAndBitshift+0x11c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d045      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <DMA_CalcBaseAndBitshift+0x120>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d040      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3e      	ldr	r2, [pc, #248]	; (800716c <DMA_CalcBaseAndBitshift+0x124>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d03b      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3c      	ldr	r2, [pc, #240]	; (8007170 <DMA_CalcBaseAndBitshift+0x128>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d036      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3b      	ldr	r2, [pc, #236]	; (8007174 <DMA_CalcBaseAndBitshift+0x12c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d031      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a39      	ldr	r2, [pc, #228]	; (8007178 <DMA_CalcBaseAndBitshift+0x130>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d02c      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a38      	ldr	r2, [pc, #224]	; (800717c <DMA_CalcBaseAndBitshift+0x134>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d027      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a36      	ldr	r2, [pc, #216]	; (8007180 <DMA_CalcBaseAndBitshift+0x138>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a35      	ldr	r2, [pc, #212]	; (8007184 <DMA_CalcBaseAndBitshift+0x13c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01d      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a33      	ldr	r2, [pc, #204]	; (8007188 <DMA_CalcBaseAndBitshift+0x140>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a32      	ldr	r2, [pc, #200]	; (800718c <DMA_CalcBaseAndBitshift+0x144>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a30      	ldr	r2, [pc, #192]	; (8007190 <DMA_CalcBaseAndBitshift+0x148>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a2f      	ldr	r2, [pc, #188]	; (8007194 <DMA_CalcBaseAndBitshift+0x14c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <DMA_CalcBaseAndBitshift+0x150>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xa8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a2c      	ldr	r2, [pc, #176]	; (800719c <DMA_CalcBaseAndBitshift+0x154>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d101      	bne.n	80070f4 <DMA_CalcBaseAndBitshift+0xac>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <DMA_CalcBaseAndBitshift+0xae>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d024      	beq.n	8007144 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	3b10      	subs	r3, #16
 8007102:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <DMA_CalcBaseAndBitshift+0x158>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	091b      	lsrs	r3, r3, #4
 800710a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	4a24      	ldr	r2, [pc, #144]	; (80071a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007114:	5cd3      	ldrb	r3, [r2, r3]
 8007116:	461a      	mov	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d908      	bls.n	8007134 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	4b1f      	ldr	r3, [pc, #124]	; (80071a8 <DMA_CalcBaseAndBitshift+0x160>)
 800712a:	4013      	ands	r3, r2
 800712c:	1d1a      	adds	r2, r3, #4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	; 0x58
 8007132:	e00d      	b.n	8007150 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <DMA_CalcBaseAndBitshift+0x160>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6593      	str	r3, [r2, #88]	; 0x58
 8007142:	e005      	b.n	8007150 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	40020010 	.word	0x40020010
 8007164:	40020028 	.word	0x40020028
 8007168:	40020040 	.word	0x40020040
 800716c:	40020058 	.word	0x40020058
 8007170:	40020070 	.word	0x40020070
 8007174:	40020088 	.word	0x40020088
 8007178:	400200a0 	.word	0x400200a0
 800717c:	400200b8 	.word	0x400200b8
 8007180:	40020410 	.word	0x40020410
 8007184:	40020428 	.word	0x40020428
 8007188:	40020440 	.word	0x40020440
 800718c:	40020458 	.word	0x40020458
 8007190:	40020470 	.word	0x40020470
 8007194:	40020488 	.word	0x40020488
 8007198:	400204a0 	.word	0x400204a0
 800719c:	400204b8 	.word	0x400204b8
 80071a0:	aaaaaaab 	.word	0xaaaaaaab
 80071a4:	08010d1c 	.word	0x08010d1c
 80071a8:	fffffc00 	.word	0xfffffc00

080071ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d120      	bne.n	8007202 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d858      	bhi.n	800727a <DMA_CheckFifoParam+0xce>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <DMA_CheckFifoParam+0x24>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071f3 	.word	0x080071f3
 80071d8:	080071e1 	.word	0x080071e1
 80071dc:	0800727b 	.word	0x0800727b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d048      	beq.n	800727e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071f0:	e045      	b.n	800727e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071fa:	d142      	bne.n	8007282 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007200:	e03f      	b.n	8007282 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720a:	d123      	bne.n	8007254 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	2b03      	cmp	r3, #3
 8007212:	d838      	bhi.n	8007286 <DMA_CheckFifoParam+0xda>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <DMA_CheckFifoParam+0x70>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	0800722d 	.word	0x0800722d
 8007220:	08007233 	.word	0x08007233
 8007224:	0800722d 	.word	0x0800722d
 8007228:	08007245 	.word	0x08007245
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
        break;
 8007230:	e030      	b.n	8007294 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d025      	beq.n	800728a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007242:	e022      	b.n	800728a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800724c:	d11f      	bne.n	800728e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007252:	e01c      	b.n	800728e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	2b02      	cmp	r3, #2
 800725a:	d902      	bls.n	8007262 <DMA_CheckFifoParam+0xb6>
 800725c:	2b03      	cmp	r3, #3
 800725e:	d003      	beq.n	8007268 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007260:	e018      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	73fb      	strb	r3, [r7, #15]
        break;
 8007266:	e015      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00e      	beq.n	8007292 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	e00b      	b.n	8007292 <DMA_CheckFifoParam+0xe6>
        break;
 800727a:	bf00      	nop
 800727c:	e00a      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 800727e:	bf00      	nop
 8007280:	e008      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 8007282:	bf00      	nop
 8007284:	e006      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 8007286:	bf00      	nop
 8007288:	e004      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 800728a:	bf00      	nop
 800728c:	e002      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
        break;
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <DMA_CheckFifoParam+0xe8>
    break;
 8007292:	bf00      	nop
    }
  }

  return status;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a38      	ldr	r2, [pc, #224]	; (8007398 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d022      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a36      	ldr	r2, [pc, #216]	; (800739c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01d      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a35      	ldr	r2, [pc, #212]	; (80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d018      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a33      	ldr	r2, [pc, #204]	; (80073a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a32      	ldr	r2, [pc, #200]	; (80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a30      	ldr	r2, [pc, #192]	; (80073ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2f      	ldr	r2, [pc, #188]	; (80073b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2d      	ldr	r2, [pc, #180]	; (80073b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d101      	bne.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01a      	beq.n	8007342 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	3b08      	subs	r3, #8
 8007314:	4a28      	ldr	r2, [pc, #160]	; (80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4b26      	ldr	r3, [pc, #152]	; (80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007330:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007340:	e024      	b.n	800738c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	3b10      	subs	r3, #16
 800734a:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d806      	bhi.n	800736a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d902      	bls.n	800736a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3308      	adds	r3, #8
 8007368:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4b18      	ldr	r3, [pc, #96]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800737c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	2201      	movs	r2, #1
 8007386:	409a      	lsls	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	58025408 	.word	0x58025408
 800739c:	5802541c 	.word	0x5802541c
 80073a0:	58025430 	.word	0x58025430
 80073a4:	58025444 	.word	0x58025444
 80073a8:	58025458 	.word	0x58025458
 80073ac:	5802546c 	.word	0x5802546c
 80073b0:	58025480 	.word	0x58025480
 80073b4:	58025494 	.word	0x58025494
 80073b8:	cccccccd 	.word	0xcccccccd
 80073bc:	16009600 	.word	0x16009600
 80073c0:	58025880 	.word	0x58025880
 80073c4:	aaaaaaab 	.word	0xaaaaaaab
 80073c8:	400204b8 	.word	0x400204b8
 80073cc:	4002040f 	.word	0x4002040f
 80073d0:	10008200 	.word	0x10008200
 80073d4:	40020880 	.word	0x40020880

080073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04a      	beq.n	8007484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d847      	bhi.n	8007484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a24      	ldr	r2, [pc, #144]	; (8007494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d01d      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a22      	ldr	r2, [pc, #136]	; (8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	; (800749c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1b      	ldr	r2, [pc, #108]	; (80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d101      	bne.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007448:	2300      	movs	r3, #0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007460:	671a      	str	r2, [r3, #112]	; 0x70
 8007462:	e009      	b.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a11      	ldr	r2, [pc, #68]	; (80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007476:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3b01      	subs	r3, #1
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	58025408 	.word	0x58025408
 8007494:	5802541c 	.word	0x5802541c
 8007498:	58025430 	.word	0x58025430
 800749c:	58025444 	.word	0x58025444
 80074a0:	58025458 	.word	0x58025458
 80074a4:	5802546c 	.word	0x5802546c
 80074a8:	58025480 	.word	0x58025480
 80074ac:	58025494 	.word	0x58025494
 80074b0:	1600963f 	.word	0x1600963f
 80074b4:	58025940 	.word	0x58025940
 80074b8:	1000823f 	.word	0x1000823f
 80074bc:	40020940 	.word	0x40020940

080074c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b089      	sub	sp, #36	; 0x24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80074ce:	4b89      	ldr	r3, [pc, #548]	; (80076f4 <HAL_GPIO_Init+0x234>)
 80074d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074d2:	e194      	b.n	80077fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	2101      	movs	r1, #1
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	4013      	ands	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 8186 	beq.w	80077f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d005      	beq.n	8007504 <HAL_GPIO_Init+0x44>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d130      	bne.n	8007566 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	2203      	movs	r2, #3
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	43db      	mvns	r3, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	4313      	orrs	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800753a:	2201      	movs	r2, #1
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43db      	mvns	r3, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4013      	ands	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	f003 0201 	and.w	r2, r3, #1
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4313      	orrs	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d017      	beq.n	80075a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	2203      	movs	r2, #3
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4013      	ands	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d123      	bne.n	80075f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	08da      	lsrs	r2, r3, #3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3208      	adds	r2, #8
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	220f      	movs	r2, #15
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	43db      	mvns	r3, r3
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4013      	ands	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	08da      	lsrs	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3208      	adds	r2, #8
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	2203      	movs	r2, #3
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	43db      	mvns	r3, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4013      	ands	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 0203 	and.w	r2, r3, #3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4313      	orrs	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80e0 	beq.w	80077f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007638:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <HAL_GPIO_Init+0x238>)
 800763a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800763e:	4a2e      	ldr	r2, [pc, #184]	; (80076f8 <HAL_GPIO_Init+0x238>)
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007648:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <HAL_GPIO_Init+0x238>)
 800764a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007656:	4a29      	ldr	r2, [pc, #164]	; (80076fc <HAL_GPIO_Init+0x23c>)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	3302      	adds	r3, #2
 800765e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	220f      	movs	r2, #15
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43db      	mvns	r3, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4013      	ands	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a20      	ldr	r2, [pc, #128]	; (8007700 <HAL_GPIO_Init+0x240>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d052      	beq.n	8007728 <HAL_GPIO_Init+0x268>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1f      	ldr	r2, [pc, #124]	; (8007704 <HAL_GPIO_Init+0x244>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d031      	beq.n	80076ee <HAL_GPIO_Init+0x22e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <HAL_GPIO_Init+0x248>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02b      	beq.n	80076ea <HAL_GPIO_Init+0x22a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_GPIO_Init+0x24c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d025      	beq.n	80076e6 <HAL_GPIO_Init+0x226>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a1c      	ldr	r2, [pc, #112]	; (8007710 <HAL_GPIO_Init+0x250>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01f      	beq.n	80076e2 <HAL_GPIO_Init+0x222>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	; (8007714 <HAL_GPIO_Init+0x254>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d019      	beq.n	80076de <HAL_GPIO_Init+0x21e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1a      	ldr	r2, [pc, #104]	; (8007718 <HAL_GPIO_Init+0x258>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_GPIO_Init+0x21a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a19      	ldr	r2, [pc, #100]	; (800771c <HAL_GPIO_Init+0x25c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00d      	beq.n	80076d6 <HAL_GPIO_Init+0x216>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a18      	ldr	r2, [pc, #96]	; (8007720 <HAL_GPIO_Init+0x260>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <HAL_GPIO_Init+0x212>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_GPIO_Init+0x264>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_GPIO_Init+0x20e>
 80076ca:	2309      	movs	r3, #9
 80076cc:	e02d      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076ce:	230a      	movs	r3, #10
 80076d0:	e02b      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076d2:	2308      	movs	r3, #8
 80076d4:	e029      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076d6:	2307      	movs	r3, #7
 80076d8:	e027      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076da:	2306      	movs	r3, #6
 80076dc:	e025      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076de:	2305      	movs	r3, #5
 80076e0:	e023      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076e2:	2304      	movs	r3, #4
 80076e4:	e021      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076e6:	2303      	movs	r3, #3
 80076e8:	e01f      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e01d      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e01b      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076f2:	bf00      	nop
 80076f4:	58000080 	.word	0x58000080
 80076f8:	58024400 	.word	0x58024400
 80076fc:	58000400 	.word	0x58000400
 8007700:	58020000 	.word	0x58020000
 8007704:	58020400 	.word	0x58020400
 8007708:	58020800 	.word	0x58020800
 800770c:	58020c00 	.word	0x58020c00
 8007710:	58021000 	.word	0x58021000
 8007714:	58021400 	.word	0x58021400
 8007718:	58021800 	.word	0x58021800
 800771c:	58021c00 	.word	0x58021c00
 8007720:	58022000 	.word	0x58022000
 8007724:	58022400 	.word	0x58022400
 8007728:	2300      	movs	r3, #0
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	f002 0203 	and.w	r2, r2, #3
 8007730:	0092      	lsls	r2, r2, #2
 8007732:	4093      	lsls	r3, r2
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	4313      	orrs	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800773a:	4938      	ldr	r1, [pc, #224]	; (800781c <HAL_GPIO_Init+0x35c>)
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	089b      	lsrs	r3, r3, #2
 8007740:	3302      	adds	r3, #2
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800776e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	43db      	mvns	r3, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4013      	ands	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800779c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	4013      	ands	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	43db      	mvns	r3, r3
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	4013      	ands	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	f47f ae63 	bne.w	80074d4 <HAL_GPIO_Init+0x14>
  }
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3724      	adds	r7, #36	; 0x24
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	58000400 	.word	0x58000400

08007820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	887b      	ldrh	r3, [r7, #2]
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e001      	b.n	8007842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	807b      	strh	r3, [r7, #2]
 800785c:	4613      	mov	r3, r2
 800785e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007860:	787b      	ldrb	r3, [r7, #1]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007866:	887a      	ldrh	r2, [r7, #2]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800786c:	e003      	b.n	8007876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800786e:	887b      	ldrh	r3, [r7, #2]
 8007870:	041a      	lsls	r2, r3, #16
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	619a      	str	r2, [r3, #24]
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e08b      	b.n	80079ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fa fb50 	bl	8001f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2224      	movs	r2, #36	; 0x24
 80078b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d107      	bne.n	80078fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	e006      	b.n	800790c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800790a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d108      	bne.n	8007926 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007922:	605a      	str	r2, [r3, #4]
 8007924:	e007      	b.n	8007936 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6859      	ldr	r1, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4b1d      	ldr	r3, [pc, #116]	; (80079b8 <HAL_I2C_Init+0x134>)
 8007942:	430b      	orrs	r3, r1
 8007944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69d9      	ldr	r1, [r3, #28]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1a      	ldr	r2, [r3, #32]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	02008000 	.word	0x02008000

080079bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	461a      	mov	r2, r3
 80079c8:	460b      	mov	r3, r1
 80079ca:	817b      	strh	r3, [r7, #10]
 80079cc:	4613      	mov	r3, r2
 80079ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b20      	cmp	r3, #32
 80079da:	f040 80fd 	bne.w	8007bd8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_I2C_Master_Transmit+0x30>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e0f6      	b.n	8007bda <HAL_I2C_Master_Transmit+0x21e>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079f4:	f7fa fefa 	bl	80027ec <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2319      	movs	r3, #25
 8007a00:	2201      	movs	r2, #1
 8007a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fa0a 	bl	8007e20 <I2C_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e0e1      	b.n	8007bda <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2221      	movs	r2, #33	; 0x21
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2210      	movs	r2, #16
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	893a      	ldrh	r2, [r7, #8]
 8007a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2bff      	cmp	r3, #255	; 0xff
 8007a46:	d906      	bls.n	8007a56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	22ff      	movs	r2, #255	; 0xff
 8007a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007a4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e007      	b.n	8007a66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d024      	beq.n	8007ab8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	8979      	ldrh	r1, [r7, #10]
 8007aaa:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <HAL_I2C_Master_Transmit+0x228>)
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fc05 	bl	80082c0 <I2C_TransferConfig>
 8007ab6:	e066      	b.n	8007b86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	8979      	ldrh	r1, [r7, #10]
 8007ac0:	4b48      	ldr	r3, [pc, #288]	; (8007be4 <HAL_I2C_Master_Transmit+0x228>)
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fbfa 	bl	80082c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007acc:	e05b      	b.n	8007b86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	6a39      	ldr	r1, [r7, #32]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f9fd 	bl	8007ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e07b      	b.n	8007bda <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d034      	beq.n	8007b86 <HAL_I2C_Master_Transmit+0x1ca>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d130      	bne.n	8007b86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2180      	movs	r1, #128	; 0x80
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f976 	bl	8007e20 <I2C_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e04d      	b.n	8007bda <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2bff      	cmp	r3, #255	; 0xff
 8007b46:	d90e      	bls.n	8007b66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	22ff      	movs	r2, #255	; 0xff
 8007b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	8979      	ldrh	r1, [r7, #10]
 8007b56:	2300      	movs	r3, #0
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fbae 	bl	80082c0 <I2C_TransferConfig>
 8007b64:	e00f      	b.n	8007b86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	8979      	ldrh	r1, [r7, #10]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fb9d 	bl	80082c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d19e      	bne.n	8007ace <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	6a39      	ldr	r1, [r7, #32]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f9e3 	bl	8007f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e01a      	b.n	8007bda <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <HAL_I2C_Master_Transmit+0x22c>)
 8007bb8:	400b      	ands	r3, r1
 8007bba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e000      	b.n	8007bda <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007bd8:	2302      	movs	r3, #2
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	80002000 	.word	0x80002000
 8007be8:	fe00e800 	.word	0xfe00e800

08007bec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	817b      	strh	r3, [r7, #10]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	f040 80db 	bne.w	8007dc4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_I2C_Master_Receive+0x30>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e0d4      	b.n	8007dc6 <HAL_I2C_Master_Receive+0x1da>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c24:	f7fa fde2 	bl	80027ec <HAL_GetTick>
 8007c28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2319      	movs	r3, #25
 8007c30:	2201      	movs	r2, #1
 8007c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f8f2 	bl	8007e20 <I2C_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e0bf      	b.n	8007dc6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2222      	movs	r2, #34	; 0x22
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2210      	movs	r2, #16
 8007c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	893a      	ldrh	r2, [r7, #8]
 8007c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2bff      	cmp	r3, #255	; 0xff
 8007c76:	d90e      	bls.n	8007c96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	22ff      	movs	r2, #255	; 0xff
 8007c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	8979      	ldrh	r1, [r7, #10]
 8007c86:	4b52      	ldr	r3, [pc, #328]	; (8007dd0 <HAL_I2C_Master_Receive+0x1e4>)
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fb16 	bl	80082c0 <I2C_TransferConfig>
 8007c94:	e06d      	b.n	8007d72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	8979      	ldrh	r1, [r7, #10]
 8007ca8:	4b49      	ldr	r3, [pc, #292]	; (8007dd0 <HAL_I2C_Master_Receive+0x1e4>)
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fb05 	bl	80082c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007cb6:	e05c      	b.n	8007d72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	6a39      	ldr	r1, [r7, #32]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f993 	bl	8007fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e07c      	b.n	8007dc6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d034      	beq.n	8007d72 <HAL_I2C_Master_Receive+0x186>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d130      	bne.n	8007d72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	2200      	movs	r2, #0
 8007d18:	2180      	movs	r1, #128	; 0x80
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f880 	bl	8007e20 <I2C_WaitOnFlagUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e04d      	b.n	8007dc6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2bff      	cmp	r3, #255	; 0xff
 8007d32:	d90e      	bls.n	8007d52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	22ff      	movs	r2, #255	; 0xff
 8007d38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	8979      	ldrh	r1, [r7, #10]
 8007d42:	2300      	movs	r3, #0
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 fab8 	bl	80082c0 <I2C_TransferConfig>
 8007d50:	e00f      	b.n	8007d72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	8979      	ldrh	r1, [r7, #10]
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 faa7 	bl	80082c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d19d      	bne.n	8007cb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	6a39      	ldr	r1, [r7, #32]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f8ed 	bl	8007f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e01a      	b.n	8007dc6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2220      	movs	r2, #32
 8007d96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6859      	ldr	r1, [r3, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <HAL_I2C_Master_Receive+0x1e8>)
 8007da4:	400b      	ands	r3, r1
 8007da6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e000      	b.n	8007dc6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007dc4:	2302      	movs	r3, #2
  }
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	80002400 	.word	0x80002400
 8007dd4:	fe00e800 	.word	0xfe00e800

08007dd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d103      	bne.n	8007df6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d007      	beq.n	8007e14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	619a      	str	r2, [r3, #24]
  }
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e30:	e03b      	b.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f962 	bl	8008100 <I2C_IsErrorOccurred>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e041      	b.n	8007eca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e4c:	d02d      	beq.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4e:	f7fa fccd 	bl	80027ec <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d302      	bcc.n	8007e64 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d122      	bne.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d113      	bne.n	8007eaa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	f043 0220 	orr.w	r2, r3, #32
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e00f      	b.n	8007eca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d0b4      	beq.n	8007e32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ede:	e033      	b.n	8007f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f90b 	bl	8008100 <I2C_IsErrorOccurred>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e031      	b.n	8007f58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efa:	d025      	beq.n	8007f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efc:	f7fa fc76 	bl	80027ec <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d302      	bcc.n	8007f12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d11a      	bne.n	8007f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d013      	beq.n	8007f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e007      	b.n	8007f58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d1c4      	bne.n	8007ee0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f6c:	e02f      	b.n	8007fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f8c4 	bl	8008100 <I2C_IsErrorOccurred>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e02d      	b.n	8007fde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7fa fc33 	bl	80027ec <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11a      	bne.n	8007fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d013      	beq.n	8007fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007faa:	f043 0220 	orr.w	r2, r3, #32
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e007      	b.n	8007fde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d1c8      	bne.n	8007f6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007ff8:	e071      	b.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f87e 	bl	8008100 <I2C_IsErrorOccurred>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b20      	cmp	r3, #32
 800801a:	d13b      	bne.n	8008094 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d138      	bne.n	8008094 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b04      	cmp	r3, #4
 800802e:	d105      	bne.n	800803c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b10      	cmp	r3, #16
 8008048:	d121      	bne.n	800808e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2210      	movs	r2, #16
 8008050:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2204      	movs	r2, #4
 8008056:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2220      	movs	r2, #32
 800805e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800806c:	400b      	ands	r3, r1
 800806e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
 800808c:	e002      	b.n	8008094 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008094:	f7fa fbaa 	bl	80027ec <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d302      	bcc.n	80080aa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d119      	bne.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d116      	bne.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d00f      	beq.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c2:	f043 0220 	orr.w	r2, r3, #32
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d002      	beq.n	80080f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d083      	beq.n	8007ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	fe00e800 	.word	0xfe00e800

08008100 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	; 0x28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	d068      	beq.n	80081fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2210      	movs	r2, #16
 8008132:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008134:	e049      	b.n	80081ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800813c:	d045      	beq.n	80081ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800813e:	f7fa fb55 	bl	80027ec <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <I2C_IsErrorOccurred+0x54>
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d13a      	bne.n	80081ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008166:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008176:	d121      	bne.n	80081bc <I2C_IsErrorOccurred+0xbc>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800817e:	d01d      	beq.n	80081bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008180:	7cfb      	ldrb	r3, [r7, #19]
 8008182:	2b20      	cmp	r3, #32
 8008184:	d01a      	beq.n	80081bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008194:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008196:	f7fa fb29 	bl	80027ec <HAL_GetTick>
 800819a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800819c:	e00e      	b.n	80081bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800819e:	f7fa fb25 	bl	80027ec <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b19      	cmp	r3, #25
 80081aa:	d907      	bls.n	80081bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	f043 0320 	orr.w	r3, r3, #32
 80081b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80081ba:	e006      	b.n	80081ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d1e9      	bne.n	800819e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d003      	beq.n	80081e0 <I2C_IsErrorOccurred+0xe0>
 80081d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0aa      	beq.n	8008136 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80081e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2220      	movs	r2, #32
 80081ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	f043 0304 	orr.w	r3, r3, #4
 80081f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	f043 0308 	orr.w	r3, r3, #8
 8008238:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008242:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f043 0302 	orr.w	r3, r3, #2
 800825a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800826c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01c      	beq.n	80082ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff fdaf 	bl	8007dd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6859      	ldr	r1, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <I2C_IsErrorOccurred+0x1bc>)
 8008286:	400b      	ands	r3, r1
 8008288:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	431a      	orrs	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80082ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3728      	adds	r7, #40	; 0x28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	fe00e800 	.word	0xfe00e800

080082c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	607b      	str	r3, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	817b      	strh	r3, [r7, #10]
 80082ce:	4613      	mov	r3, r2
 80082d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082d2:	897b      	ldrh	r3, [r7, #10]
 80082d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80082d8:	7a7b      	ldrb	r3, [r7, #9]
 80082da:	041b      	lsls	r3, r3, #16
 80082dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	0d5b      	lsrs	r3, r3, #21
 80082fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80082fe:	4b08      	ldr	r3, [pc, #32]	; (8008320 <I2C_TransferConfig+0x60>)
 8008300:	430b      	orrs	r3, r1
 8008302:	43db      	mvns	r3, r3
 8008304:	ea02 0103 	and.w	r1, r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	03ff63ff 	.word	0x03ff63ff

08008324 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b20      	cmp	r3, #32
 8008338:	d138      	bne.n	80083ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008344:	2302      	movs	r3, #2
 8008346:	e032      	b.n	80083ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2224      	movs	r2, #36	; 0x24
 8008354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0201 	bic.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008376:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0201 	orr.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e000      	b.n	80083ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083ac:	2302      	movs	r3, #2
  }
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d139      	bne.n	8008444 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083da:	2302      	movs	r3, #2
 80083dc:	e033      	b.n	8008446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2224      	movs	r2, #36	; 0x24
 80083ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0201 	bic.w	r2, r2, #1
 80083fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800840c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	e000      	b.n	8008446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008444:	2302      	movs	r3, #2
  }
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
	...

08008454 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008460:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f023 0201 	bic.w	r2, r3, #1
 8008468:	4916      	ldr	r1, [pc, #88]	; (80084c4 <HAL_PWR_EnterSTOPMode+0x70>)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4313      	orrs	r3, r2
 800846e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	4a13      	ldr	r2, [pc, #76]	; (80084c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008476:	f023 0305 	bic.w	r3, r3, #5
 800847a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <HAL_PWR_EnterSTOPMode+0x70>)
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	4a10      	ldr	r2, [pc, #64]	; (80084c4 <HAL_PWR_EnterSTOPMode+0x70>)
 8008482:	f023 0302 	bic.w	r3, r3, #2
 8008486:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <HAL_PWR_EnterSTOPMode+0x74>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	4a0e      	ldr	r2, [pc, #56]	; (80084c8 <HAL_PWR_EnterSTOPMode+0x74>)
 800848e:	f043 0304 	orr.w	r3, r3, #4
 8008492:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008494:	f3bf 8f4f 	dsb	sy
}
 8008498:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800849a:	f3bf 8f6f 	isb	sy
}
 800849e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80084a6:	bf30      	wfi
 80084a8:	e000      	b.n	80084ac <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80084aa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <HAL_PWR_EnterSTOPMode+0x74>)
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	4a05      	ldr	r2, [pc, #20]	; (80084c8 <HAL_PWR_EnterSTOPMode+0x74>)
 80084b2:	f023 0304 	bic.w	r3, r3, #4
 80084b6:	6113      	str	r3, [r2, #16]
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	58024800 	.word	0x58024800
 80084c8:	e000ed00 	.word	0xe000ed00

080084cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084d4:	4b19      	ldr	r3, [pc, #100]	; (800853c <HAL_PWREx_ConfigSupply+0x70>)
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d00a      	beq.n	80084f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084e0:	4b16      	ldr	r3, [pc, #88]	; (800853c <HAL_PWREx_ConfigSupply+0x70>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d001      	beq.n	80084f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e01f      	b.n	8008532 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e01d      	b.n	8008532 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084f6:	4b11      	ldr	r3, [pc, #68]	; (800853c <HAL_PWREx_ConfigSupply+0x70>)
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f023 0207 	bic.w	r2, r3, #7
 80084fe:	490f      	ldr	r1, [pc, #60]	; (800853c <HAL_PWREx_ConfigSupply+0x70>)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4313      	orrs	r3, r2
 8008504:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008506:	f7fa f971 	bl	80027ec <HAL_GetTick>
 800850a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800850c:	e009      	b.n	8008522 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800850e:	f7fa f96d 	bl	80027ec <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800851c:	d901      	bls.n	8008522 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e007      	b.n	8008532 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <HAL_PWREx_ConfigSupply+0x70>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800852a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800852e:	d1ee      	bne.n	800850e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	58024800 	.word	0x58024800

08008540 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08c      	sub	sp, #48	; 0x30
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d102      	bne.n	8008554 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	f000 bc48 	b.w	8008de4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 8088 	beq.w	8008672 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008562:	4b99      	ldr	r3, [pc, #612]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800856a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800856c:	4b96      	ldr	r3, [pc, #600]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800856e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008570:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	2b10      	cmp	r3, #16
 8008576:	d007      	beq.n	8008588 <HAL_RCC_OscConfig+0x48>
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	2b18      	cmp	r3, #24
 800857c:	d111      	bne.n	80085a2 <HAL_RCC_OscConfig+0x62>
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d10c      	bne.n	80085a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008588:	4b8f      	ldr	r3, [pc, #572]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d06d      	beq.n	8008670 <HAL_RCC_OscConfig+0x130>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d169      	bne.n	8008670 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	f000 bc21 	b.w	8008de4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085aa:	d106      	bne.n	80085ba <HAL_RCC_OscConfig+0x7a>
 80085ac:	4b86      	ldr	r3, [pc, #536]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a85      	ldr	r2, [pc, #532]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	e02e      	b.n	8008618 <HAL_RCC_OscConfig+0xd8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <HAL_RCC_OscConfig+0x9c>
 80085c2:	4b81      	ldr	r3, [pc, #516]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a80      	ldr	r2, [pc, #512]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	4b7e      	ldr	r3, [pc, #504]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a7d      	ldr	r2, [pc, #500]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e01d      	b.n	8008618 <HAL_RCC_OscConfig+0xd8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085e4:	d10c      	bne.n	8008600 <HAL_RCC_OscConfig+0xc0>
 80085e6:	4b78      	ldr	r3, [pc, #480]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a77      	ldr	r2, [pc, #476]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	4b75      	ldr	r3, [pc, #468]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a74      	ldr	r2, [pc, #464]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e00b      	b.n	8008618 <HAL_RCC_OscConfig+0xd8>
 8008600:	4b71      	ldr	r3, [pc, #452]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a70      	ldr	r2, [pc, #448]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	4b6e      	ldr	r3, [pc, #440]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a6d      	ldr	r2, [pc, #436]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d013      	beq.n	8008648 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008620:	f7fa f8e4 	bl	80027ec <HAL_GetTick>
 8008624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008628:	f7fa f8e0 	bl	80027ec <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	; 0x64
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e3d4      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800863a:	4b63      	ldr	r3, [pc, #396]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <HAL_RCC_OscConfig+0xe8>
 8008646:	e014      	b.n	8008672 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008648:	f7fa f8d0 	bl	80027ec <HAL_GetTick>
 800864c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008650:	f7fa f8cc 	bl	80027ec <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b64      	cmp	r3, #100	; 0x64
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e3c0      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008662:	4b59      	ldr	r3, [pc, #356]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1f0      	bne.n	8008650 <HAL_RCC_OscConfig+0x110>
 800866e:	e000      	b.n	8008672 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80ca 	beq.w	8008814 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008680:	4b51      	ldr	r3, [pc, #324]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008688:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800868a:	4b4f      	ldr	r3, [pc, #316]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <HAL_RCC_OscConfig+0x166>
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	2b18      	cmp	r3, #24
 800869a:	d156      	bne.n	800874a <HAL_RCC_OscConfig+0x20a>
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d151      	bne.n	800874a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086a6:	4b48      	ldr	r3, [pc, #288]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_RCC_OscConfig+0x17e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e392      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086be:	4b42      	ldr	r3, [pc, #264]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f023 0219 	bic.w	r2, r3, #25
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	493f      	ldr	r1, [pc, #252]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d0:	f7fa f88c 	bl	80027ec <HAL_GetTick>
 80086d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086d8:	f7fa f888 	bl	80027ec <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e37c      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086ea:	4b37      	ldr	r3, [pc, #220]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0f0      	beq.n	80086d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f6:	f7fa f895 	bl	8002824 <HAL_GetREVID>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008700:	4293      	cmp	r3, r2
 8008702:	d817      	bhi.n	8008734 <HAL_RCC_OscConfig+0x1f4>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2b40      	cmp	r3, #64	; 0x40
 800870a:	d108      	bne.n	800871e <HAL_RCC_OscConfig+0x1de>
 800870c:	4b2e      	ldr	r3, [pc, #184]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008714:	4a2c      	ldr	r2, [pc, #176]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800871a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800871c:	e07a      	b.n	8008814 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800871e:	4b2a      	ldr	r3, [pc, #168]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	031b      	lsls	r3, r3, #12
 800872c:	4926      	ldr	r1, [pc, #152]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 800872e:	4313      	orrs	r3, r2
 8008730:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008732:	e06f      	b.n	8008814 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008734:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	061b      	lsls	r3, r3, #24
 8008742:	4921      	ldr	r1, [pc, #132]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008744:	4313      	orrs	r3, r2
 8008746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008748:	e064      	b.n	8008814 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d047      	beq.n	80087e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f023 0219 	bic.w	r2, r3, #25
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	491a      	ldr	r1, [pc, #104]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008764:	f7fa f842 	bl	80027ec <HAL_GetTick>
 8008768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800876c:	f7fa f83e 	bl	80027ec <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e332      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f0      	beq.n	800876c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800878a:	f7fa f84b 	bl	8002824 <HAL_GetREVID>
 800878e:	4603      	mov	r3, r0
 8008790:	f241 0203 	movw	r2, #4099	; 0x1003
 8008794:	4293      	cmp	r3, r2
 8008796:	d819      	bhi.n	80087cc <HAL_RCC_OscConfig+0x28c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d108      	bne.n	80087b2 <HAL_RCC_OscConfig+0x272>
 80087a0:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087a8:	4a07      	ldr	r2, [pc, #28]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ae:	6053      	str	r3, [r2, #4]
 80087b0:	e030      	b.n	8008814 <HAL_RCC_OscConfig+0x2d4>
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	031b      	lsls	r3, r3, #12
 80087c0:	4901      	ldr	r1, [pc, #4]	; (80087c8 <HAL_RCC_OscConfig+0x288>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	604b      	str	r3, [r1, #4]
 80087c6:	e025      	b.n	8008814 <HAL_RCC_OscConfig+0x2d4>
 80087c8:	58024400 	.word	0x58024400
 80087cc:	4b9a      	ldr	r3, [pc, #616]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	061b      	lsls	r3, r3, #24
 80087da:	4997      	ldr	r1, [pc, #604]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	604b      	str	r3, [r1, #4]
 80087e0:	e018      	b.n	8008814 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087e2:	4b95      	ldr	r3, [pc, #596]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a94      	ldr	r2, [pc, #592]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80087e8:	f023 0301 	bic.w	r3, r3, #1
 80087ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ee:	f7f9 fffd 	bl	80027ec <HAL_GetTick>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087f6:	f7f9 fff9 	bl	80027ec <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e2ed      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008808:	4b8b      	ldr	r3, [pc, #556]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1f0      	bne.n	80087f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80a9 	beq.w	8008974 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008822:	4b85      	ldr	r3, [pc, #532]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800882a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800882c:	4b82      	ldr	r3, [pc, #520]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	2b08      	cmp	r3, #8
 8008836:	d007      	beq.n	8008848 <HAL_RCC_OscConfig+0x308>
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b18      	cmp	r3, #24
 800883c:	d13a      	bne.n	80088b4 <HAL_RCC_OscConfig+0x374>
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b01      	cmp	r3, #1
 8008846:	d135      	bne.n	80088b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008848:	4b7b      	ldr	r3, [pc, #492]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <HAL_RCC_OscConfig+0x320>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	2b80      	cmp	r3, #128	; 0x80
 800885a:	d001      	beq.n	8008860 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e2c1      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008860:	f7f9 ffe0 	bl	8002824 <HAL_GetREVID>
 8008864:	4603      	mov	r3, r0
 8008866:	f241 0203 	movw	r2, #4099	; 0x1003
 800886a:	4293      	cmp	r3, r2
 800886c:	d817      	bhi.n	800889e <HAL_RCC_OscConfig+0x35e>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	2b20      	cmp	r3, #32
 8008874:	d108      	bne.n	8008888 <HAL_RCC_OscConfig+0x348>
 8008876:	4b70      	ldr	r3, [pc, #448]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800887e:	4a6e      	ldr	r2, [pc, #440]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008884:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008886:	e075      	b.n	8008974 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008888:	4b6b      	ldr	r3, [pc, #428]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	069b      	lsls	r3, r3, #26
 8008896:	4968      	ldr	r1, [pc, #416]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008898:	4313      	orrs	r3, r2
 800889a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800889c:	e06a      	b.n	8008974 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800889e:	4b66      	ldr	r3, [pc, #408]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	061b      	lsls	r3, r3, #24
 80088ac:	4962      	ldr	r1, [pc, #392]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088b2:	e05f      	b.n	8008974 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d042      	beq.n	8008942 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80088bc:	4b5e      	ldr	r3, [pc, #376]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a5d      	ldr	r2, [pc, #372]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c8:	f7f9 ff90 	bl	80027ec <HAL_GetTick>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088ce:	e008      	b.n	80088e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80088d0:	f7f9 ff8c 	bl	80027ec <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d901      	bls.n	80088e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e280      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088e2:	4b55      	ldr	r3, [pc, #340]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0f0      	beq.n	80088d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088ee:	f7f9 ff99 	bl	8002824 <HAL_GetREVID>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d817      	bhi.n	800892c <HAL_RCC_OscConfig+0x3ec>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b20      	cmp	r3, #32
 8008902:	d108      	bne.n	8008916 <HAL_RCC_OscConfig+0x3d6>
 8008904:	4b4c      	ldr	r3, [pc, #304]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800890c:	4a4a      	ldr	r2, [pc, #296]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800890e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008912:	6053      	str	r3, [r2, #4]
 8008914:	e02e      	b.n	8008974 <HAL_RCC_OscConfig+0x434>
 8008916:	4b48      	ldr	r3, [pc, #288]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	069b      	lsls	r3, r3, #26
 8008924:	4944      	ldr	r1, [pc, #272]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008926:	4313      	orrs	r3, r2
 8008928:	604b      	str	r3, [r1, #4]
 800892a:	e023      	b.n	8008974 <HAL_RCC_OscConfig+0x434>
 800892c:	4b42      	ldr	r3, [pc, #264]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	493f      	ldr	r1, [pc, #252]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800893c:	4313      	orrs	r3, r2
 800893e:	60cb      	str	r3, [r1, #12]
 8008940:	e018      	b.n	8008974 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008942:	4b3d      	ldr	r3, [pc, #244]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a3c      	ldr	r2, [pc, #240]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800894c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894e:	f7f9 ff4d 	bl	80027ec <HAL_GetTick>
 8008952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008956:	f7f9 ff49 	bl	80027ec <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e23d      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008968:	4b33      	ldr	r3, [pc, #204]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f0      	bne.n	8008956 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b00      	cmp	r3, #0
 800897e:	d036      	beq.n	80089ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d019      	beq.n	80089bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008988:	4b2b      	ldr	r3, [pc, #172]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800898a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800898c:	4a2a      	ldr	r2, [pc, #168]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008994:	f7f9 ff2a 	bl	80027ec <HAL_GetTick>
 8008998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800899c:	f7f9 ff26 	bl	80027ec <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e21a      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089ae:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80089b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f0      	beq.n	800899c <HAL_RCC_OscConfig+0x45c>
 80089ba:	e018      	b.n	80089ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089bc:	4b1e      	ldr	r3, [pc, #120]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80089be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c0:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80089c2:	f023 0301 	bic.w	r3, r3, #1
 80089c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c8:	f7f9 ff10 	bl	80027ec <HAL_GetTick>
 80089cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80089ce:	e008      	b.n	80089e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089d0:	f7f9 ff0c 	bl	80027ec <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e200      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 80089e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1f0      	bne.n	80089d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d039      	beq.n	8008a6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01c      	beq.n	8008a3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a02:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a0e:	f7f9 feed 	bl	80027ec <HAL_GetTick>
 8008a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a14:	e008      	b.n	8008a28 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a16:	f7f9 fee9 	bl	80027ec <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e1dd      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a28:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <HAL_RCC_OscConfig+0x4f8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f0      	beq.n	8008a16 <HAL_RCC_OscConfig+0x4d6>
 8008a34:	e01b      	b.n	8008a6e <HAL_RCC_OscConfig+0x52e>
 8008a36:	bf00      	nop
 8008a38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a3c:	4b9b      	ldr	r3, [pc, #620]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a9a      	ldr	r2, [pc, #616]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a48:	f7f9 fed0 	bl	80027ec <HAL_GetTick>
 8008a4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a4e:	e008      	b.n	8008a62 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a50:	f7f9 fecc 	bl	80027ec <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d901      	bls.n	8008a62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e1c0      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a62:	4b92      	ldr	r3, [pc, #584]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f0      	bne.n	8008a50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8081 	beq.w	8008b7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008a7c:	4b8c      	ldr	r3, [pc, #560]	; (8008cb0 <HAL_RCC_OscConfig+0x770>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a8b      	ldr	r2, [pc, #556]	; (8008cb0 <HAL_RCC_OscConfig+0x770>)
 8008a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a88:	f7f9 feb0 	bl	80027ec <HAL_GetTick>
 8008a8c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a90:	f7f9 feac 	bl	80027ec <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b64      	cmp	r3, #100	; 0x64
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e1a0      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aa2:	4b83      	ldr	r3, [pc, #524]	; (8008cb0 <HAL_RCC_OscConfig+0x770>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0f0      	beq.n	8008a90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d106      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x584>
 8008ab6:	4b7d      	ldr	r3, [pc, #500]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aba:	4a7c      	ldr	r2, [pc, #496]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008abc:	f043 0301 	orr.w	r3, r3, #1
 8008ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ac2:	e02d      	b.n	8008b20 <HAL_RCC_OscConfig+0x5e0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10c      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x5a6>
 8008acc:	4b77      	ldr	r3, [pc, #476]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad0:	4a76      	ldr	r2, [pc, #472]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad8:	4b74      	ldr	r3, [pc, #464]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	4a73      	ldr	r2, [pc, #460]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ade:	f023 0304 	bic.w	r3, r3, #4
 8008ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ae4:	e01c      	b.n	8008b20 <HAL_RCC_OscConfig+0x5e0>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	d10c      	bne.n	8008b08 <HAL_RCC_OscConfig+0x5c8>
 8008aee:	4b6f      	ldr	r3, [pc, #444]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af2:	4a6e      	ldr	r2, [pc, #440]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008af4:	f043 0304 	orr.w	r3, r3, #4
 8008af8:	6713      	str	r3, [r2, #112]	; 0x70
 8008afa:	4b6c      	ldr	r3, [pc, #432]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afe:	4a6b      	ldr	r2, [pc, #428]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b00:	f043 0301 	orr.w	r3, r3, #1
 8008b04:	6713      	str	r3, [r2, #112]	; 0x70
 8008b06:	e00b      	b.n	8008b20 <HAL_RCC_OscConfig+0x5e0>
 8008b08:	4b68      	ldr	r3, [pc, #416]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0c:	4a67      	ldr	r2, [pc, #412]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	6713      	str	r3, [r2, #112]	; 0x70
 8008b14:	4b65      	ldr	r3, [pc, #404]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b18:	4a64      	ldr	r2, [pc, #400]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b1a:	f023 0304 	bic.w	r3, r3, #4
 8008b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d015      	beq.n	8008b54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b28:	f7f9 fe60 	bl	80027ec <HAL_GetTick>
 8008b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b30:	f7f9 fe5c 	bl	80027ec <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e14e      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b46:	4b59      	ldr	r3, [pc, #356]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0ee      	beq.n	8008b30 <HAL_RCC_OscConfig+0x5f0>
 8008b52:	e014      	b.n	8008b7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b54:	f7f9 fe4a 	bl	80027ec <HAL_GetTick>
 8008b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b5a:	e00a      	b.n	8008b72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5c:	f7f9 fe46 	bl	80027ec <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e138      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b72:	4b4e      	ldr	r3, [pc, #312]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1ee      	bne.n	8008b5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 812d 	beq.w	8008de2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b88:	4b48      	ldr	r3, [pc, #288]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b90:	2b18      	cmp	r3, #24
 8008b92:	f000 80bd 	beq.w	8008d10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	f040 809e 	bne.w	8008cdc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ba0:	4b42      	ldr	r3, [pc, #264]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a41      	ldr	r2, [pc, #260]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bac:	f7f9 fe1e 	bl	80027ec <HAL_GetTick>
 8008bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bb2:	e008      	b.n	8008bc6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bb4:	f7f9 fe1a 	bl	80027ec <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d901      	bls.n	8008bc6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e10e      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bc6:	4b39      	ldr	r3, [pc, #228]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f0      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bd2:	4b36      	ldr	r3, [pc, #216]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bd6:	4b37      	ldr	r3, [pc, #220]	; (8008cb4 <HAL_RCC_OscConfig+0x774>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008be2:	0112      	lsls	r2, r2, #4
 8008be4:	430a      	orrs	r2, r1
 8008be6:	4931      	ldr	r1, [pc, #196]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	628b      	str	r3, [r1, #40]	; 0x28
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	025b      	lsls	r3, r3, #9
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	3b01      	subs	r3, #1
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c14:	3b01      	subs	r3, #1
 8008c16:	061b      	lsls	r3, r3, #24
 8008c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c1c:	4923      	ldr	r1, [pc, #140]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008c22:	4b22      	ldr	r3, [pc, #136]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	4a21      	ldr	r2, [pc, #132]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c2e:	4b1f      	ldr	r3, [pc, #124]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c32:	4b21      	ldr	r3, [pc, #132]	; (8008cb8 <HAL_RCC_OscConfig+0x778>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c3a:	00d2      	lsls	r2, r2, #3
 8008c3c:	491b      	ldr	r1, [pc, #108]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008c42:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	f023 020c 	bic.w	r2, r3, #12
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	4917      	ldr	r1, [pc, #92]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008c54:	4b15      	ldr	r3, [pc, #84]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	f023 0202 	bic.w	r2, r3, #2
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c60:	4912      	ldr	r1, [pc, #72]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	4a10      	ldr	r2, [pc, #64]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c72:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	4a0d      	ldr	r2, [pc, #52]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c7e:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008c8a:	4b08      	ldr	r3, [pc, #32]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	4a07      	ldr	r2, [pc, #28]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c96:	4b05      	ldr	r3, [pc, #20]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a04      	ldr	r2, [pc, #16]	; (8008cac <HAL_RCC_OscConfig+0x76c>)
 8008c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca2:	f7f9 fda3 	bl	80027ec <HAL_GetTick>
 8008ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ca8:	e011      	b.n	8008cce <HAL_RCC_OscConfig+0x78e>
 8008caa:	bf00      	nop
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	58024800 	.word	0x58024800
 8008cb4:	fffffc0c 	.word	0xfffffc0c
 8008cb8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbc:	f7f9 fd96 	bl	80027ec <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e08a      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cce:	4b47      	ldr	r3, [pc, #284]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f0      	beq.n	8008cbc <HAL_RCC_OscConfig+0x77c>
 8008cda:	e082      	b.n	8008de2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cdc:	4b43      	ldr	r3, [pc, #268]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a42      	ldr	r2, [pc, #264]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce8:	f7f9 fd80 	bl	80027ec <HAL_GetTick>
 8008cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf0:	f7f9 fd7c 	bl	80027ec <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e070      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d02:	4b3a      	ldr	r3, [pc, #232]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f0      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x7b0>
 8008d0e:	e068      	b.n	8008de2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d10:	4b36      	ldr	r3, [pc, #216]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d16:	4b35      	ldr	r3, [pc, #212]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d031      	beq.n	8008d88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f003 0203 	and.w	r2, r3, #3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d12a      	bne.n	8008d88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	091b      	lsrs	r3, r3, #4
 8008d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d122      	bne.n	8008d88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d11a      	bne.n	8008d88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	0a5b      	lsrs	r3, r3, #9
 8008d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d111      	bne.n	8008d88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	0c1b      	lsrs	r3, r3, #16
 8008d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d108      	bne.n	8008d88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	0e1b      	lsrs	r3, r3, #24
 8008d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d001      	beq.n	8008d8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e02b      	b.n	8008de4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008d8c:	4b17      	ldr	r3, [pc, #92]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	08db      	lsrs	r3, r3, #3
 8008d92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d01f      	beq.n	8008de2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008da2:	4b12      	ldr	r3, [pc, #72]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da6:	4a11      	ldr	r2, [pc, #68]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008da8:	f023 0301 	bic.w	r3, r3, #1
 8008dac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008dae:	f7f9 fd1d 	bl	80027ec <HAL_GetTick>
 8008db2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008db4:	bf00      	nop
 8008db6:	f7f9 fd19 	bl	80027ec <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d0f9      	beq.n	8008db6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <HAL_RCC_OscConfig+0x8b0>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008dce:	00d2      	lsls	r2, r2, #3
 8008dd0:	4906      	ldr	r1, [pc, #24]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	4a04      	ldr	r2, [pc, #16]	; (8008dec <HAL_RCC_OscConfig+0x8ac>)
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3730      	adds	r7, #48	; 0x30
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	58024400 	.word	0x58024400
 8008df0:	ffff0007 	.word	0xffff0007

08008df4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e19c      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e08:	4b8a      	ldr	r3, [pc, #552]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d910      	bls.n	8008e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e16:	4b87      	ldr	r3, [pc, #540]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f023 020f 	bic.w	r2, r3, #15
 8008e1e:	4985      	ldr	r1, [pc, #532]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e26:	4b83      	ldr	r3, [pc, #524]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d001      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e184      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	4b7b      	ldr	r3, [pc, #492]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d908      	bls.n	8008e66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e54:	4b78      	ldr	r3, [pc, #480]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4975      	ldr	r1, [pc, #468]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	4b70      	ldr	r3, [pc, #448]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d908      	bls.n	8008e94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e82:	4b6d      	ldr	r3, [pc, #436]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	496a      	ldr	r1, [pc, #424]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	4b64      	ldr	r3, [pc, #400]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d908      	bls.n	8008ec2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008eb0:	4b61      	ldr	r3, [pc, #388]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	495e      	ldr	r1, [pc, #376]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	4b59      	ldr	r3, [pc, #356]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d908      	bls.n	8008ef0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ede:	4b56      	ldr	r3, [pc, #344]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4953      	ldr	r1, [pc, #332]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d010      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	4b4d      	ldr	r3, [pc, #308]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d908      	bls.n	8008f1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f0c:	4b4a      	ldr	r3, [pc, #296]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f023 020f 	bic.w	r2, r3, #15
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4947      	ldr	r1, [pc, #284]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d055      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f2a:	4b43      	ldr	r3, [pc, #268]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4940      	ldr	r1, [pc, #256]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d107      	bne.n	8008f54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f44:	4b3c      	ldr	r3, [pc, #240]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d121      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e0f6      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d115      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0ea      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d107      	bne.n	8008f84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f74:	4b30      	ldr	r3, [pc, #192]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e0de      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f84:	4b2c      	ldr	r3, [pc, #176]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e0d6      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f94:	4b28      	ldr	r3, [pc, #160]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	f023 0207 	bic.w	r2, r3, #7
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4925      	ldr	r1, [pc, #148]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa6:	f7f9 fc21 	bl	80027ec <HAL_GetTick>
 8008faa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fac:	e00a      	b.n	8008fc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fae:	f7f9 fc1d 	bl	80027ec <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e0be      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fc4:	4b1c      	ldr	r3, [pc, #112]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d1eb      	bne.n	8008fae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d010      	beq.n	8009004 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	4b14      	ldr	r3, [pc, #80]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d208      	bcs.n	8009004 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f023 020f 	bic.w	r2, r3, #15
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	490e      	ldr	r1, [pc, #56]	; (8009038 <HAL_RCC_ClockConfig+0x244>)
 8009000:	4313      	orrs	r3, r2
 8009002:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009004:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 030f 	and.w	r3, r3, #15
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d214      	bcs.n	800903c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009012:	4b08      	ldr	r3, [pc, #32]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f023 020f 	bic.w	r2, r3, #15
 800901a:	4906      	ldr	r1, [pc, #24]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	4313      	orrs	r3, r2
 8009020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009022:	4b04      	ldr	r3, [pc, #16]	; (8009034 <HAL_RCC_ClockConfig+0x240>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d005      	beq.n	800903c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e086      	b.n	8009142 <HAL_RCC_ClockConfig+0x34e>
 8009034:	52002000 	.word	0x52002000
 8009038:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d010      	beq.n	800906a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	4b3f      	ldr	r3, [pc, #252]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009054:	429a      	cmp	r2, r3
 8009056:	d208      	bcs.n	800906a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009058:	4b3c      	ldr	r3, [pc, #240]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	4939      	ldr	r1, [pc, #228]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 8009066:	4313      	orrs	r3, r2
 8009068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d010      	beq.n	8009098 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695a      	ldr	r2, [r3, #20]
 800907a:	4b34      	ldr	r3, [pc, #208]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009082:	429a      	cmp	r2, r3
 8009084:	d208      	bcs.n	8009098 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009086:	4b31      	ldr	r3, [pc, #196]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	492e      	ldr	r1, [pc, #184]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 8009094:	4313      	orrs	r3, r2
 8009096:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d010      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699a      	ldr	r2, [r3, #24]
 80090a8:	4b28      	ldr	r3, [pc, #160]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d208      	bcs.n	80090c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	4922      	ldr	r1, [pc, #136]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d010      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69da      	ldr	r2, [r3, #28]
 80090d6:	4b1d      	ldr	r3, [pc, #116]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090de:	429a      	cmp	r2, r3
 80090e0:	d208      	bcs.n	80090f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090e2:	4b1a      	ldr	r3, [pc, #104]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	4917      	ldr	r1, [pc, #92]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80090f4:	f000 f834 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 80090f8:	4602      	mov	r2, r0
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	0a1b      	lsrs	r3, r3, #8
 8009100:	f003 030f 	and.w	r3, r3, #15
 8009104:	4912      	ldr	r1, [pc, #72]	; (8009150 <HAL_RCC_ClockConfig+0x35c>)
 8009106:	5ccb      	ldrb	r3, [r1, r3]
 8009108:	f003 031f 	and.w	r3, r3, #31
 800910c:	fa22 f303 	lsr.w	r3, r2, r3
 8009110:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009112:	4b0e      	ldr	r3, [pc, #56]	; (800914c <HAL_RCC_ClockConfig+0x358>)
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	4a0d      	ldr	r2, [pc, #52]	; (8009150 <HAL_RCC_ClockConfig+0x35c>)
 800911c:	5cd3      	ldrb	r3, [r2, r3]
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	fa22 f303 	lsr.w	r3, r2, r3
 8009128:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <HAL_RCC_ClockConfig+0x360>)
 800912a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800912c:	4a0a      	ldr	r2, [pc, #40]	; (8009158 <HAL_RCC_ClockConfig+0x364>)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009132:	4b0a      	ldr	r3, [pc, #40]	; (800915c <HAL_RCC_ClockConfig+0x368>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f7f9 fb0e 	bl	8002758 <HAL_InitTick>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	58024400 	.word	0x58024400
 8009150:	08010d0c 	.word	0x08010d0c
 8009154:	24000048 	.word	0x24000048
 8009158:	24000044 	.word	0x24000044
 800915c:	2400004c 	.word	0x2400004c

08009160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009160:	b480      	push	{r7}
 8009162:	b089      	sub	sp, #36	; 0x24
 8009164:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009166:	4bb3      	ldr	r3, [pc, #716]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800916e:	2b18      	cmp	r3, #24
 8009170:	f200 8155 	bhi.w	800941e <HAL_RCC_GetSysClockFreq+0x2be>
 8009174:	a201      	add	r2, pc, #4	; (adr r2, 800917c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	080091e1 	.word	0x080091e1
 8009180:	0800941f 	.word	0x0800941f
 8009184:	0800941f 	.word	0x0800941f
 8009188:	0800941f 	.word	0x0800941f
 800918c:	0800941f 	.word	0x0800941f
 8009190:	0800941f 	.word	0x0800941f
 8009194:	0800941f 	.word	0x0800941f
 8009198:	0800941f 	.word	0x0800941f
 800919c:	08009207 	.word	0x08009207
 80091a0:	0800941f 	.word	0x0800941f
 80091a4:	0800941f 	.word	0x0800941f
 80091a8:	0800941f 	.word	0x0800941f
 80091ac:	0800941f 	.word	0x0800941f
 80091b0:	0800941f 	.word	0x0800941f
 80091b4:	0800941f 	.word	0x0800941f
 80091b8:	0800941f 	.word	0x0800941f
 80091bc:	0800920d 	.word	0x0800920d
 80091c0:	0800941f 	.word	0x0800941f
 80091c4:	0800941f 	.word	0x0800941f
 80091c8:	0800941f 	.word	0x0800941f
 80091cc:	0800941f 	.word	0x0800941f
 80091d0:	0800941f 	.word	0x0800941f
 80091d4:	0800941f 	.word	0x0800941f
 80091d8:	0800941f 	.word	0x0800941f
 80091dc:	08009213 	.word	0x08009213
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091e0:	4b94      	ldr	r3, [pc, #592]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091ec:	4b91      	ldr	r3, [pc, #580]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	08db      	lsrs	r3, r3, #3
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	4a90      	ldr	r2, [pc, #576]	; (8009438 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091f8:	fa22 f303 	lsr.w	r3, r2, r3
 80091fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80091fe:	e111      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009200:	4b8d      	ldr	r3, [pc, #564]	; (8009438 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009202:	61bb      	str	r3, [r7, #24]
      break;
 8009204:	e10e      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009206:	4b8d      	ldr	r3, [pc, #564]	; (800943c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009208:	61bb      	str	r3, [r7, #24]
      break;
 800920a:	e10b      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800920c:	4b8c      	ldr	r3, [pc, #560]	; (8009440 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800920e:	61bb      	str	r3, [r7, #24]
      break;
 8009210:	e108      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009212:	4b88      	ldr	r3, [pc, #544]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800921c:	4b85      	ldr	r3, [pc, #532]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	091b      	lsrs	r3, r3, #4
 8009222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009226:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009228:	4b82      	ldr	r3, [pc, #520]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009232:	4b80      	ldr	r3, [pc, #512]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	08db      	lsrs	r3, r3, #3
 8009238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 80e1 	beq.w	8009418 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b02      	cmp	r3, #2
 800925a:	f000 8083 	beq.w	8009364 <HAL_RCC_GetSysClockFreq+0x204>
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b02      	cmp	r3, #2
 8009262:	f200 80a1 	bhi.w	80093a8 <HAL_RCC_GetSysClockFreq+0x248>
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <HAL_RCC_GetSysClockFreq+0x114>
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d056      	beq.n	8009320 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009272:	e099      	b.n	80093a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009274:	4b6f      	ldr	r3, [pc, #444]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d02d      	beq.n	80092dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009280:	4b6c      	ldr	r3, [pc, #432]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	08db      	lsrs	r3, r3, #3
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	4a6b      	ldr	r2, [pc, #428]	; (8009438 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
 8009290:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092aa:	4b62      	ldr	r3, [pc, #392]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80092be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009444 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80092da:	e087      	b.n	80093ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009448 <HAL_RCC_GetSysClockFreq+0x2e8>
 80092ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ee:	4b51      	ldr	r3, [pc, #324]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009302:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009444 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800931e:	e065      	b.n	80093ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800944c <HAL_RCC_GetSysClockFreq+0x2ec>
 800932e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009332:	4b40      	ldr	r3, [pc, #256]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933a:	ee07 3a90 	vmov	s15, r3
 800933e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009342:	ed97 6a02 	vldr	s12, [r7, #8]
 8009346:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009444 <HAL_RCC_GetSysClockFreq+0x2e4>
 800934a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009362:	e043      	b.n	80093ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009450 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009376:	4b2f      	ldr	r3, [pc, #188]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009386:	ed97 6a02 	vldr	s12, [r7, #8]
 800938a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009444 <HAL_RCC_GetSysClockFreq+0x2e4>
 800938e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800939a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093a6:	e021      	b.n	80093ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800944c <HAL_RCC_GetSysClockFreq+0x2ec>
 80093b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ba:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009444 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	0a5b      	lsrs	r3, r3, #9
 80093f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f6:	3301      	adds	r3, #1
 80093f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009404:	edd7 6a07 	vldr	s13, [r7, #28]
 8009408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800940c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009410:	ee17 3a90 	vmov	r3, s15
 8009414:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009416:	e005      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	61bb      	str	r3, [r7, #24]
      break;
 800941c:	e002      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800941e:	4b07      	ldr	r3, [pc, #28]	; (800943c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009420:	61bb      	str	r3, [r7, #24]
      break;
 8009422:	bf00      	nop
  }

  return sysclockfreq;
 8009424:	69bb      	ldr	r3, [r7, #24]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3724      	adds	r7, #36	; 0x24
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	58024400 	.word	0x58024400
 8009438:	03d09000 	.word	0x03d09000
 800943c:	003d0900 	.word	0x003d0900
 8009440:	017d7840 	.word	0x017d7840
 8009444:	46000000 	.word	0x46000000
 8009448:	4c742400 	.word	0x4c742400
 800944c:	4a742400 	.word	0x4a742400
 8009450:	4bbebc20 	.word	0x4bbebc20

08009454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800945a:	f7ff fe81 	bl	8009160 <HAL_RCC_GetSysClockFreq>
 800945e:	4602      	mov	r2, r0
 8009460:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	0a1b      	lsrs	r3, r3, #8
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	490f      	ldr	r1, [pc, #60]	; (80094a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800946c:	5ccb      	ldrb	r3, [r1, r3]
 800946e:	f003 031f 	and.w	r3, r3, #31
 8009472:	fa22 f303 	lsr.w	r3, r2, r3
 8009476:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	4a09      	ldr	r2, [pc, #36]	; (80094a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009482:	5cd3      	ldrb	r3, [r2, r3]
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	fa22 f303 	lsr.w	r3, r2, r3
 800948e:	4a07      	ldr	r2, [pc, #28]	; (80094ac <HAL_RCC_GetHCLKFreq+0x58>)
 8009490:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009492:	4a07      	ldr	r2, [pc, #28]	; (80094b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009498:	4b04      	ldr	r3, [pc, #16]	; (80094ac <HAL_RCC_GetHCLKFreq+0x58>)
 800949a:	681b      	ldr	r3, [r3, #0]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	58024400 	.word	0x58024400
 80094a8:	08010d0c 	.word	0x08010d0c
 80094ac:	24000048 	.word	0x24000048
 80094b0:	24000044 	.word	0x24000044

080094b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094b8:	f7ff ffcc 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 80094bc:	4602      	mov	r2, r0
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	091b      	lsrs	r3, r3, #4
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	4904      	ldr	r1, [pc, #16]	; (80094dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80094ca:	5ccb      	ldrb	r3, [r1, r3]
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58024400 	.word	0x58024400
 80094dc:	08010d0c 	.word	0x08010d0c

080094e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80094e4:	f7ff ffb6 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4b06      	ldr	r3, [pc, #24]	; (8009504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	4904      	ldr	r1, [pc, #16]	; (8009508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80094f6:	5ccb      	ldrb	r3, [r1, r3]
 80094f8:	f003 031f 	and.w	r3, r3, #31
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	58024400 	.word	0x58024400
 8009508:	08010d0c 	.word	0x08010d0c

0800950c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800950c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009510:	b0ca      	sub	sp, #296	; 0x128
 8009512:	af00      	add	r7, sp, #0
 8009514:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009518:	2300      	movs	r3, #0
 800951a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800951e:	2300      	movs	r3, #0
 8009520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009530:	2500      	movs	r5, #0
 8009532:	ea54 0305 	orrs.w	r3, r4, r5
 8009536:	d049      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800953e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009542:	d02f      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009544:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009548:	d828      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800954a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800954e:	d01a      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009554:	d822      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800955a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800955e:	d007      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009560:	e01c      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009562:	4bb8      	ldr	r3, [pc, #736]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009566:	4ab7      	ldr	r2, [pc, #732]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800956c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800956e:	e01a      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009574:	3308      	adds	r3, #8
 8009576:	2102      	movs	r1, #2
 8009578:	4618      	mov	r0, r3
 800957a:	f002 fb61 	bl	800bc40 <RCCEx_PLL2_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009584:	e00f      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958a:	3328      	adds	r3, #40	; 0x28
 800958c:	2102      	movs	r1, #2
 800958e:	4618      	mov	r0, r3
 8009590:	f002 fc08 	bl	800bda4 <RCCEx_PLL3_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800959a:	e004      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80095a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095ae:	4ba5      	ldr	r3, [pc, #660]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095bc:	4aa1      	ldr	r2, [pc, #644]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095be:	430b      	orrs	r3, r1
 80095c0:	6513      	str	r3, [r2, #80]	; 0x50
 80095c2:	e003      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80095d8:	f04f 0900 	mov.w	r9, #0
 80095dc:	ea58 0309 	orrs.w	r3, r8, r9
 80095e0:	d047      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d82a      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80095ec:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80095ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f2:	bf00      	nop
 80095f4:	08009609 	.word	0x08009609
 80095f8:	08009617 	.word	0x08009617
 80095fc:	0800962d 	.word	0x0800962d
 8009600:	0800964b 	.word	0x0800964b
 8009604:	0800964b 	.word	0x0800964b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009608:	4b8e      	ldr	r3, [pc, #568]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	4a8d      	ldr	r2, [pc, #564]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800960e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009614:	e01a      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961a:	3308      	adds	r3, #8
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f002 fb0e 	bl	800bc40 <RCCEx_PLL2_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800962a:	e00f      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800962c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009630:	3328      	adds	r3, #40	; 0x28
 8009632:	2100      	movs	r1, #0
 8009634:	4618      	mov	r0, r3
 8009636:	f002 fbb5 	bl	800bda4 <RCCEx_PLL3_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009640:	e004      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009648:	e000      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800964a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009654:	4b7b      	ldr	r3, [pc, #492]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009658:	f023 0107 	bic.w	r1, r3, #7
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009662:	4a78      	ldr	r2, [pc, #480]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009664:	430b      	orrs	r3, r1
 8009666:	6513      	str	r3, [r2, #80]	; 0x50
 8009668:	e003      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800966e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800967e:	f04f 0b00 	mov.w	fp, #0
 8009682:	ea5a 030b 	orrs.w	r3, sl, fp
 8009686:	d04c      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009692:	d030      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009698:	d829      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800969a:	2bc0      	cmp	r3, #192	; 0xc0
 800969c:	d02d      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800969e:	2bc0      	cmp	r3, #192	; 0xc0
 80096a0:	d825      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d018      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80096a6:	2b80      	cmp	r3, #128	; 0x80
 80096a8:	d821      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d007      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80096b2:	e01c      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b4:	4b63      	ldr	r3, [pc, #396]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a62      	ldr	r2, [pc, #392]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80096c0:	e01c      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c6:	3308      	adds	r3, #8
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f002 fab8 	bl	800bc40 <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80096d6:	e011      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096dc:	3328      	adds	r3, #40	; 0x28
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f002 fb5f 	bl	800bda4 <RCCEx_PLL3_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80096ec:	e006      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80096fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009704:	4b4f      	ldr	r3, [pc, #316]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800970c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009712:	4a4c      	ldr	r2, [pc, #304]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009714:	430b      	orrs	r3, r1
 8009716:	6513      	str	r3, [r2, #80]	; 0x50
 8009718:	e003      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800971e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800972e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009732:	2300      	movs	r3, #0
 8009734:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009738:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800973c:	460b      	mov	r3, r1
 800973e:	4313      	orrs	r3, r2
 8009740:	d053      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009746:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800974a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800974e:	d035      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009754:	d82e      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009756:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800975a:	d031      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800975c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009760:	d828      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009766:	d01a      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800976c:	d822      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009776:	d007      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009778:	e01c      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977a:	4b32      	ldr	r3, [pc, #200]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	4a31      	ldr	r2, [pc, #196]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009786:	e01c      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978c:	3308      	adds	r3, #8
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f002 fa55 	bl	800bc40 <RCCEx_PLL2_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800979c:	e011      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800979e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a2:	3328      	adds	r3, #40	; 0x28
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f002 fafc 	bl	800bda4 <RCCEx_PLL3_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097b2:	e006      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ba:	e002      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097bc:	bf00      	nop
 80097be:	e000      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10b      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097ca:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80097d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097dc:	430b      	orrs	r3, r1
 80097de:	6593      	str	r3, [r2, #88]	; 0x58
 80097e0:	e003      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80097f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80097fa:	2300      	movs	r3, #0
 80097fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009800:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009804:	460b      	mov	r3, r1
 8009806:	4313      	orrs	r3, r2
 8009808:	d056      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009816:	d038      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800981c:	d831      	bhi.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800981e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009822:	d034      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009828:	d82b      	bhi.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800982a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800982e:	d01d      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009834:	d825      	bhi.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d006      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800983a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800983e:	d00a      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009840:	e01f      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009842:	bf00      	nop
 8009844:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009848:	4ba2      	ldr	r3, [pc, #648]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4aa1      	ldr	r2, [pc, #644]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800984e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009854:	e01c      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985a:	3308      	adds	r3, #8
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f002 f9ee 	bl	800bc40 <RCCEx_PLL2_Config>
 8009864:	4603      	mov	r3, r0
 8009866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800986a:	e011      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800986c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009870:	3328      	adds	r3, #40	; 0x28
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f002 fa95 	bl	800bda4 <RCCEx_PLL3_Config>
 800987a:	4603      	mov	r3, r0
 800987c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009880:	e006      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009888:	e002      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800988a:	bf00      	nop
 800988c:	e000      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800988e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10b      	bne.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009898:	4b8e      	ldr	r3, [pc, #568]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800989a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098a8:	4a8a      	ldr	r2, [pc, #552]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098aa:	430b      	orrs	r3, r1
 80098ac:	6593      	str	r3, [r2, #88]	; 0x58
 80098ae:	e003      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80098c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098c8:	2300      	movs	r3, #0
 80098ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80098d2:	460b      	mov	r3, r1
 80098d4:	4313      	orrs	r3, r2
 80098d6:	d03a      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	2b30      	cmp	r3, #48	; 0x30
 80098e0:	d01f      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80098e2:	2b30      	cmp	r3, #48	; 0x30
 80098e4:	d819      	bhi.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d00c      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d815      	bhi.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d019      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80098f2:	2b10      	cmp	r3, #16
 80098f4:	d111      	bne.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098f6:	4b77      	ldr	r3, [pc, #476]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fa:	4a76      	ldr	r2, [pc, #472]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009902:	e011      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009908:	3308      	adds	r3, #8
 800990a:	2102      	movs	r1, #2
 800990c:	4618      	mov	r0, r3
 800990e:	f002 f997 	bl	800bc40 <RCCEx_PLL2_Config>
 8009912:	4603      	mov	r3, r0
 8009914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009918:	e006      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009920:	e002      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10a      	bne.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009930:	4b68      	ldr	r3, [pc, #416]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009934:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993e:	4a65      	ldr	r2, [pc, #404]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009940:	430b      	orrs	r3, r1
 8009942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009944:	e003      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800994a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800995a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800995e:	2300      	movs	r3, #0
 8009960:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009964:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009968:	460b      	mov	r3, r1
 800996a:	4313      	orrs	r3, r2
 800996c:	d051      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009978:	d035      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800997a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800997e:	d82e      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009984:	d031      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800998a:	d828      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800998c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009990:	d01a      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009996:	d822      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a0:	d007      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80099a2:	e01c      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a4:	4b4b      	ldr	r3, [pc, #300]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	4a4a      	ldr	r2, [pc, #296]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099b0:	e01c      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b6:	3308      	adds	r3, #8
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 f940 	bl	800bc40 <RCCEx_PLL2_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099c6:	e011      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099cc:	3328      	adds	r3, #40	; 0x28
 80099ce:	2100      	movs	r1, #0
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 f9e7 	bl	800bda4 <RCCEx_PLL3_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099dc:	e006      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80099ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099f4:	4b37      	ldr	r3, [pc, #220]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a02:	4a34      	ldr	r2, [pc, #208]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6513      	str	r3, [r2, #80]	; 0x50
 8009a08:	e003      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a22:	2300      	movs	r3, #0
 8009a24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	d056      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a3c:	d033      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a42:	d82c      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a48:	d02f      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a4e:	d826      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a54:	d02b      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009a56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a5a:	d820      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a60:	d012      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a66:	d81a      	bhi.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d022      	beq.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a70:	d115      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a76:	3308      	adds	r3, #8
 8009a78:	2101      	movs	r1, #1
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f002 f8e0 	bl	800bc40 <RCCEx_PLL2_Config>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009a86:	e015      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8c:	3328      	adds	r3, #40	; 0x28
 8009a8e:	2101      	movs	r1, #1
 8009a90:	4618      	mov	r0, r3
 8009a92:	f002 f987 	bl	800bda4 <RCCEx_PLL3_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009a9c:	e00a      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa4:	e006      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009aa6:	bf00      	nop
 8009aa8:	e004      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009aaa:	bf00      	nop
 8009aac:	e002      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009aae:	bf00      	nop
 8009ab0:	e000      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10d      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009abc:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aca:	4a02      	ldr	r2, [pc, #8]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009acc:	430b      	orrs	r3, r1
 8009ace:	6513      	str	r3, [r2, #80]	; 0x50
 8009ad0:	e006      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009ad2:	bf00      	nop
 8009ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009adc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009af0:	2300      	movs	r3, #0
 8009af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009af6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4313      	orrs	r3, r2
 8009afe:	d055      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b0c:	d033      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b12:	d82c      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b18:	d02f      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1e:	d826      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b24:	d02b      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009b26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b2a:	d820      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b30:	d012      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b36:	d81a      	bhi.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d022      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b40:	d115      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b46:	3308      	adds	r3, #8
 8009b48:	2101      	movs	r1, #1
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f002 f878 	bl	800bc40 <RCCEx_PLL2_Config>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b56:	e015      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5c:	3328      	adds	r3, #40	; 0x28
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4618      	mov	r0, r3
 8009b62:	f002 f91f 	bl	800bda4 <RCCEx_PLL3_Config>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b6c:	e00a      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b74:	e006      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009b76:	bf00      	nop
 8009b78:	e004      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009b7a:	bf00      	nop
 8009b7c:	e002      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009b7e:	bf00      	nop
 8009b80:	e000      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b8c:	4ba3      	ldr	r3, [pc, #652]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b9c:	4a9f      	ldr	r2, [pc, #636]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b9e:	430b      	orrs	r3, r1
 8009ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ba2:	e003      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ba8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	d037      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd6:	d00e      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bdc:	d816      	bhi.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d018      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009be6:	d111      	bne.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be8:	4b8c      	ldr	r3, [pc, #560]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	4a8b      	ldr	r2, [pc, #556]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009bf4:	e00f      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f002 f81e 	bl	800bc40 <RCCEx_PLL2_Config>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c0a:	e004      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c12:	e000      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c1e:	4b7f      	ldr	r3, [pc, #508]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c22:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2c:	4a7b      	ldr	r2, [pc, #492]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	6513      	str	r3, [r2, #80]	; 0x50
 8009c32:	e003      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	d039      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d81c      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009ca9 	.word	0x08009ca9
 8009c70:	08009c7d 	.word	0x08009c7d
 8009c74:	08009c8b 	.word	0x08009c8b
 8009c78:	08009ca9 	.word	0x08009ca9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c7c:	4b67      	ldr	r3, [pc, #412]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a66      	ldr	r2, [pc, #408]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c88:	e00f      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2102      	movs	r1, #2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 ffd4 	bl	800bc40 <RCCEx_PLL2_Config>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009c9e:	e004      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ca6:	e000      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cb2:	4b5a      	ldr	r3, [pc, #360]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb6:	f023 0103 	bic.w	r1, r3, #3
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc0:	4a56      	ldr	r2, [pc, #344]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cc6:	e003      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ccc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ce6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	f000 809f 	beq.w	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cf2:	4b4b      	ldr	r3, [pc, #300]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a4a      	ldr	r2, [pc, #296]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cfe:	f7f8 fd75 	bl	80027ec <HAL_GetTick>
 8009d02:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d06:	e00b      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d08:	f7f8 fd70 	bl	80027ec <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b64      	cmp	r3, #100	; 0x64
 8009d16:	d903      	bls.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d1e:	e005      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d20:	4b3f      	ldr	r3, [pc, #252]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0ed      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d179      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d34:	4b39      	ldr	r3, [pc, #228]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d40:	4053      	eors	r3, r2
 8009d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d015      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d4a:	4b34      	ldr	r3, [pc, #208]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d56:	4b31      	ldr	r3, [pc, #196]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5a:	4a30      	ldr	r2, [pc, #192]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d62:	4b2e      	ldr	r3, [pc, #184]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	4a2d      	ldr	r2, [pc, #180]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d6e:	4a2b      	ldr	r2, [pc, #172]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d82:	d118      	bne.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d84:	f7f8 fd32 	bl	80027ec <HAL_GetTick>
 8009d88:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d8c:	e00d      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d8e:	f7f8 fd2d 	bl	80027ec <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d903      	bls.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009da8:	e005      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009daa:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0eb      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d129      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dce:	d10e      	bne.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009dd0:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009de0:	091a      	lsrs	r2, r3, #4
 8009de2:	4b10      	ldr	r3, [pc, #64]	; (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	4a0d      	ldr	r2, [pc, #52]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009de8:	430b      	orrs	r3, r1
 8009dea:	6113      	str	r3, [r2, #16]
 8009dec:	e005      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009dee:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	4a0a      	ldr	r2, [pc, #40]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009df8:	6113      	str	r3, [r2, #16]
 8009dfa:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e0a:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e0c:	430b      	orrs	r3, r1
 8009e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e10:	e00e      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009e1a:	e009      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009e1c:	58024400 	.word	0x58024400
 8009e20:	58024800 	.word	0x58024800
 8009e24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f002 0301 	and.w	r3, r2, #1
 8009e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e40:	2300      	movs	r3, #0
 8009e42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	f000 8089 	beq.w	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e58:	2b28      	cmp	r3, #40	; 0x28
 8009e5a:	d86b      	bhi.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009f3d 	.word	0x08009f3d
 8009e68:	08009f35 	.word	0x08009f35
 8009e6c:	08009f35 	.word	0x08009f35
 8009e70:	08009f35 	.word	0x08009f35
 8009e74:	08009f35 	.word	0x08009f35
 8009e78:	08009f35 	.word	0x08009f35
 8009e7c:	08009f35 	.word	0x08009f35
 8009e80:	08009f35 	.word	0x08009f35
 8009e84:	08009f09 	.word	0x08009f09
 8009e88:	08009f35 	.word	0x08009f35
 8009e8c:	08009f35 	.word	0x08009f35
 8009e90:	08009f35 	.word	0x08009f35
 8009e94:	08009f35 	.word	0x08009f35
 8009e98:	08009f35 	.word	0x08009f35
 8009e9c:	08009f35 	.word	0x08009f35
 8009ea0:	08009f35 	.word	0x08009f35
 8009ea4:	08009f1f 	.word	0x08009f1f
 8009ea8:	08009f35 	.word	0x08009f35
 8009eac:	08009f35 	.word	0x08009f35
 8009eb0:	08009f35 	.word	0x08009f35
 8009eb4:	08009f35 	.word	0x08009f35
 8009eb8:	08009f35 	.word	0x08009f35
 8009ebc:	08009f35 	.word	0x08009f35
 8009ec0:	08009f35 	.word	0x08009f35
 8009ec4:	08009f3d 	.word	0x08009f3d
 8009ec8:	08009f35 	.word	0x08009f35
 8009ecc:	08009f35 	.word	0x08009f35
 8009ed0:	08009f35 	.word	0x08009f35
 8009ed4:	08009f35 	.word	0x08009f35
 8009ed8:	08009f35 	.word	0x08009f35
 8009edc:	08009f35 	.word	0x08009f35
 8009ee0:	08009f35 	.word	0x08009f35
 8009ee4:	08009f3d 	.word	0x08009f3d
 8009ee8:	08009f35 	.word	0x08009f35
 8009eec:	08009f35 	.word	0x08009f35
 8009ef0:	08009f35 	.word	0x08009f35
 8009ef4:	08009f35 	.word	0x08009f35
 8009ef8:	08009f35 	.word	0x08009f35
 8009efc:	08009f35 	.word	0x08009f35
 8009f00:	08009f35 	.word	0x08009f35
 8009f04:	08009f3d 	.word	0x08009f3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4618      	mov	r0, r3
 8009f12:	f001 fe95 	bl	800bc40 <RCCEx_PLL2_Config>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f1c:	e00f      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f22:	3328      	adds	r3, #40	; 0x28
 8009f24:	2101      	movs	r1, #1
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 ff3c 	bl	800bda4 <RCCEx_PLL3_Config>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f32:	e004      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f3a:	e000      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f46:	4bbf      	ldr	r3, [pc, #764]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f54:	4abb      	ldr	r2, [pc, #748]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f56:	430b      	orrs	r3, r1
 8009f58:	6553      	str	r3, [r2, #84]	; 0x54
 8009f5a:	e003      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f002 0302 	and.w	r3, r2, #2
 8009f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4313      	orrs	r3, r2
 8009f82:	d041      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d824      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fe1 	.word	0x08009fe1
 8009f98:	08009fad 	.word	0x08009fad
 8009f9c:	08009fc3 	.word	0x08009fc3
 8009fa0:	08009fe1 	.word	0x08009fe1
 8009fa4:	08009fe1 	.word	0x08009fe1
 8009fa8:	08009fe1 	.word	0x08009fe1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 fe43 	bl	800bc40 <RCCEx_PLL2_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fc0:	e00f      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc6:	3328      	adds	r3, #40	; 0x28
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 feea 	bl	800bda4 <RCCEx_PLL3_Config>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fd6:	e004      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fde:	e000      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fea:	4b96      	ldr	r3, [pc, #600]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fee:	f023 0107 	bic.w	r1, r3, #7
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ff8:	4a92      	ldr	r2, [pc, #584]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	6553      	str	r3, [r2, #84]	; 0x54
 8009ffe:	e003      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a004:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f002 0304 	and.w	r3, r2, #4
 800a014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a018:	2300      	movs	r3, #0
 800a01a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a01e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a022:	460b      	mov	r3, r1
 800a024:	4313      	orrs	r3, r2
 800a026:	d044      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a02c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a030:	2b05      	cmp	r3, #5
 800a032:	d825      	bhi.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a034:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a089 	.word	0x0800a089
 800a040:	0800a055 	.word	0x0800a055
 800a044:	0800a06b 	.word	0x0800a06b
 800a048:	0800a089 	.word	0x0800a089
 800a04c:	0800a089 	.word	0x0800a089
 800a050:	0800a089 	.word	0x0800a089
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a058:	3308      	adds	r3, #8
 800a05a:	2101      	movs	r1, #1
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fdef 	bl	800bc40 <RCCEx_PLL2_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a068:	e00f      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	3328      	adds	r3, #40	; 0x28
 800a070:	2101      	movs	r1, #1
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fe96 	bl	800bda4 <RCCEx_PLL3_Config>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a07e:	e004      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a086:	e000      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10b      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a092:	4b6c      	ldr	r3, [pc, #432]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a096:	f023 0107 	bic.w	r1, r3, #7
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0a2:	4a68      	ldr	r2, [pc, #416]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a0a8:	e003      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f002 0320 	and.w	r3, r2, #32
 800a0be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	d055      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0de:	d033      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a0e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0e4:	d82c      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ea:	d02f      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f0:	d826      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a0f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0f6:	d02b      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a0f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0fc:	d820      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a0fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a102:	d012      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a108:	d81a      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d022      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a10e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a112:	d115      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a118:	3308      	adds	r3, #8
 800a11a:	2100      	movs	r1, #0
 800a11c:	4618      	mov	r0, r3
 800a11e:	f001 fd8f 	bl	800bc40 <RCCEx_PLL2_Config>
 800a122:	4603      	mov	r3, r0
 800a124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a128:	e015      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12e:	3328      	adds	r3, #40	; 0x28
 800a130:	2102      	movs	r1, #2
 800a132:	4618      	mov	r0, r3
 800a134:	f001 fe36 	bl	800bda4 <RCCEx_PLL3_Config>
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a13e:	e00a      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a146:	e006      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a148:	bf00      	nop
 800a14a:	e004      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a14c:	bf00      	nop
 800a14e:	e002      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a150:	bf00      	nop
 800a152:	e000      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10b      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a15e:	4b39      	ldr	r3, [pc, #228]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16e:	4a35      	ldr	r2, [pc, #212]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a170:	430b      	orrs	r3, r1
 800a172:	6553      	str	r3, [r2, #84]	; 0x54
 800a174:	e003      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a17a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a18a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a18e:	2300      	movs	r3, #0
 800a190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a194:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a198:	460b      	mov	r3, r1
 800a19a:	4313      	orrs	r3, r2
 800a19c:	d058      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1aa:	d033      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a1ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1b0:	d82c      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b6:	d02f      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1bc:	d826      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1c2:	d02b      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a1c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1c8:	d820      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ce:	d012      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a1d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d4:	d81a      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d022      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a1da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1de:	d115      	bne.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 fd29 	bl	800bc40 <RCCEx_PLL2_Config>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a1f4:	e015      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fa:	3328      	adds	r3, #40	; 0x28
 800a1fc:	2102      	movs	r1, #2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 fdd0 	bl	800bda4 <RCCEx_PLL3_Config>
 800a204:	4603      	mov	r3, r0
 800a206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a20a:	e00a      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a212:	e006      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a214:	bf00      	nop
 800a216:	e004      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a218:	bf00      	nop
 800a21a:	e002      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a21c:	bf00      	nop
 800a21e:	e000      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10e      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a22a:	4b06      	ldr	r3, [pc, #24]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a23a:	4a02      	ldr	r2, [pc, #8]	; (800a244 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6593      	str	r3, [r2, #88]	; 0x58
 800a240:	e006      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a242:	bf00      	nop
 800a244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a24c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a25c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a260:	2300      	movs	r3, #0
 800a262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a266:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a26a:	460b      	mov	r3, r1
 800a26c:	4313      	orrs	r3, r2
 800a26e:	d055      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a278:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a27c:	d033      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a27e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a282:	d82c      	bhi.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a288:	d02f      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a28a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a28e:	d826      	bhi.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a290:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a294:	d02b      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a296:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a29a:	d820      	bhi.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a29c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a0:	d012      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a6:	d81a      	bhi.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d022      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a2ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b0:	d115      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 fcc0 	bl	800bc40 <RCCEx_PLL2_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2c6:	e015      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2cc:	3328      	adds	r3, #40	; 0x28
 800a2ce:	2102      	movs	r1, #2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 fd67 	bl	800bda4 <RCCEx_PLL3_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2dc:	e00a      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2e4:	e006      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a2e6:	bf00      	nop
 800a2e8:	e004      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a2ea:	bf00      	nop
 800a2ec:	e002      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a2ee:	bf00      	nop
 800a2f0:	e000      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a2f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10b      	bne.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a2fc:	4ba1      	ldr	r3, [pc, #644]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a300:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a30c:	4a9d      	ldr	r2, [pc, #628]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a30e:	430b      	orrs	r3, r1
 800a310:	6593      	str	r3, [r2, #88]	; 0x58
 800a312:	e003      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a318:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f002 0308 	and.w	r3, r2, #8
 800a328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a32c:	2300      	movs	r3, #0
 800a32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a332:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a336:	460b      	mov	r3, r1
 800a338:	4313      	orrs	r3, r2
 800a33a:	d01e      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a348:	d10c      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34e:	3328      	adds	r3, #40	; 0x28
 800a350:	2102      	movs	r1, #2
 800a352:	4618      	mov	r0, r3
 800a354:	f001 fd26 	bl	800bda4 <RCCEx_PLL3_Config>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a364:	4b87      	ldr	r3, [pc, #540]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a368:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a374:	4a83      	ldr	r2, [pc, #524]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a376:	430b      	orrs	r3, r1
 800a378:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f002 0310 	and.w	r3, r2, #16
 800a386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a38a:	2300      	movs	r3, #0
 800a38c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a390:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a394:	460b      	mov	r3, r1
 800a396:	4313      	orrs	r3, r2
 800a398:	d01e      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a6:	d10c      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	3328      	adds	r3, #40	; 0x28
 800a3ae:	2102      	movs	r1, #2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 fcf7 	bl	800bda4 <RCCEx_PLL3_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3c2:	4b70      	ldr	r3, [pc, #448]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3d2:	4a6c      	ldr	r2, [pc, #432]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a3e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	d03e      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a404:	d022      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a40a:	d81b      	bhi.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d00b      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a416:	e015      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41c:	3308      	adds	r3, #8
 800a41e:	2100      	movs	r1, #0
 800a420:	4618      	mov	r0, r3
 800a422:	f001 fc0d 	bl	800bc40 <RCCEx_PLL2_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a42c:	e00f      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a432:	3328      	adds	r3, #40	; 0x28
 800a434:	2102      	movs	r1, #2
 800a436:	4618      	mov	r0, r3
 800a438:	f001 fcb4 	bl	800bda4 <RCCEx_PLL3_Config>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a442:	e004      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a44a:	e000      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a44c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a44e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10b      	bne.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a456:	4b4b      	ldr	r3, [pc, #300]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a462:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a466:	4a47      	ldr	r2, [pc, #284]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a468:	430b      	orrs	r3, r1
 800a46a:	6593      	str	r3, [r2, #88]	; 0x58
 800a46c:	e003      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a46e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a482:	67bb      	str	r3, [r7, #120]	; 0x78
 800a484:	2300      	movs	r3, #0
 800a486:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a488:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a48c:	460b      	mov	r3, r1
 800a48e:	4313      	orrs	r3, r2
 800a490:	d03b      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a49e:	d01f      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a4a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4a4:	d818      	bhi.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a4a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4aa:	d003      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a4ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4b0:	d007      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a4b2:	e011      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4b4:	4b33      	ldr	r3, [pc, #204]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	4a32      	ldr	r2, [pc, #200]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4c0:	e00f      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	3328      	adds	r3, #40	; 0x28
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 fc6a 	bl	800bda4 <RCCEx_PLL3_Config>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4d6:	e004      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4de:	e000      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10b      	bne.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4ea:	4b26      	ldr	r3, [pc, #152]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fa:	4a22      	ldr	r2, [pc, #136]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	6553      	str	r3, [r2, #84]	; 0x54
 800a500:	e003      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a516:	673b      	str	r3, [r7, #112]	; 0x70
 800a518:	2300      	movs	r3, #0
 800a51a:	677b      	str	r3, [r7, #116]	; 0x74
 800a51c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a520:	460b      	mov	r3, r1
 800a522:	4313      	orrs	r3, r2
 800a524:	d034      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a534:	d007      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a536:	e011      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a538:	4b12      	ldr	r3, [pc, #72]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	4a11      	ldr	r2, [pc, #68]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a53e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a544:	e00e      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54a:	3308      	adds	r3, #8
 800a54c:	2102      	movs	r1, #2
 800a54e:	4618      	mov	r0, r3
 800a550:	f001 fb76 	bl	800bc40 <RCCEx_PLL2_Config>
 800a554:	4603      	mov	r3, r0
 800a556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a55a:	e003      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a562:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10d      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a57a:	4a02      	ldr	r2, [pc, #8]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a57c:	430b      	orrs	r3, r1
 800a57e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a580:	e006      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a582:	bf00      	nop
 800a584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a58c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a59c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a59e:	2300      	movs	r3, #0
 800a5a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	d00c      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b0:	3328      	adds	r3, #40	; 0x28
 800a5b2:	2102      	movs	r1, #2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 fbf5 	bl	800bda4 <RCCEx_PLL3_Config>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a5d2:	663b      	str	r3, [r7, #96]	; 0x60
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a5d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	d038      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5ee:	d018      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a5f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5f4:	d811      	bhi.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a5f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5fa:	d014      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a600:	d80b      	bhi.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d011      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a60a:	d106      	bne.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a60c:	4bc3      	ldr	r3, [pc, #780]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	4ac2      	ldr	r2, [pc, #776]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a618:	e008      	b.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a620:	e004      	b.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a622:	bf00      	nop
 800a624:	e002      	b.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a626:	bf00      	nop
 800a628:	e000      	b.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a62a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10b      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a634:	4bb9      	ldr	r3, [pc, #740]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a638:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a644:	4ab5      	ldr	r2, [pc, #724]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a646:	430b      	orrs	r3, r1
 800a648:	6553      	str	r3, [r2, #84]	; 0x54
 800a64a:	e003      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a660:	65bb      	str	r3, [r7, #88]	; 0x58
 800a662:	2300      	movs	r3, #0
 800a664:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a666:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a66a:	460b      	mov	r3, r1
 800a66c:	4313      	orrs	r3, r2
 800a66e:	d009      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a670:	4baa      	ldr	r3, [pc, #680]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a674:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a67e:	4aa7      	ldr	r2, [pc, #668]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a680:	430b      	orrs	r3, r1
 800a682:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a690:	653b      	str	r3, [r7, #80]	; 0x50
 800a692:	2300      	movs	r3, #0
 800a694:	657b      	str	r3, [r7, #84]	; 0x54
 800a696:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a69a:	460b      	mov	r3, r1
 800a69c:	4313      	orrs	r3, r2
 800a69e:	d00a      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a6a0:	4b9e      	ldr	r3, [pc, #632]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6b0:	4a9a      	ldr	r2, [pc, #616]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a6c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	d009      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6d2:	4b92      	ldr	r3, [pc, #584]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e0:	4a8e      	ldr	r2, [pc, #568]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a6f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4313      	orrs	r3, r2
 800a700:	d00e      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a702:	4b86      	ldr	r3, [pc, #536]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	4a85      	ldr	r2, [pc, #532]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a70c:	6113      	str	r3, [r2, #16]
 800a70e:	4b83      	ldr	r3, [pc, #524]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a710:	6919      	ldr	r1, [r3, #16]
 800a712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a716:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a71a:	4a80      	ldr	r2, [pc, #512]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a71c:	430b      	orrs	r3, r1
 800a71e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a72c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a72e:	2300      	movs	r3, #0
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a732:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a736:	460b      	mov	r3, r1
 800a738:	4313      	orrs	r3, r2
 800a73a:	d009      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a73c:	4b77      	ldr	r3, [pc, #476]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a740:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	4a74      	ldr	r2, [pc, #464]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a74c:	430b      	orrs	r3, r1
 800a74e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a75c:	633b      	str	r3, [r7, #48]	; 0x30
 800a75e:	2300      	movs	r3, #0
 800a760:	637b      	str	r3, [r7, #52]	; 0x34
 800a762:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a766:	460b      	mov	r3, r1
 800a768:	4313      	orrs	r3, r2
 800a76a:	d00a      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a76c:	4b6b      	ldr	r3, [pc, #428]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a770:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77c:	4a67      	ldr	r2, [pc, #412]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a77e:	430b      	orrs	r3, r1
 800a780:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	2100      	movs	r1, #0
 800a78c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a794:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a798:	460b      	mov	r3, r1
 800a79a:	4313      	orrs	r3, r2
 800a79c:	d011      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f001 fa4a 	bl	800bc40 <RCCEx_PLL2_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a7b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	6239      	str	r1, [r7, #32]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	d011      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fa2a 	bl	800bc40 <RCCEx_PLL2_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80a:	2100      	movs	r1, #0
 800a80c:	61b9      	str	r1, [r7, #24]
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	61fb      	str	r3, [r7, #28]
 800a814:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a818:	460b      	mov	r3, r1
 800a81a:	4313      	orrs	r3, r2
 800a81c:	d011      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a822:	3308      	adds	r3, #8
 800a824:	2102      	movs	r1, #2
 800a826:	4618      	mov	r0, r3
 800a828:	f001 fa0a 	bl	800bc40 <RCCEx_PLL2_Config>
 800a82c:	4603      	mov	r3, r0
 800a82e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a83a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a83e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	2100      	movs	r1, #0
 800a84c:	6139      	str	r1, [r7, #16]
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a858:	460b      	mov	r3, r1
 800a85a:	4313      	orrs	r3, r2
 800a85c:	d011      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a862:	3328      	adds	r3, #40	; 0x28
 800a864:	2100      	movs	r1, #0
 800a866:	4618      	mov	r0, r3
 800a868:	f001 fa9c 	bl	800bda4 <RCCEx_PLL3_Config>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a87e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	2100      	movs	r1, #0
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	f003 0310 	and.w	r3, r3, #16
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a898:	460b      	mov	r3, r1
 800a89a:	4313      	orrs	r3, r2
 800a89c:	d011      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a2:	3328      	adds	r3, #40	; 0x28
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 fa7c 	bl	800bda4 <RCCEx_PLL3_Config>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	6039      	str	r1, [r7, #0]
 800a8ce:	f003 0320 	and.w	r3, r3, #32
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	d011      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e2:	3328      	adds	r3, #40	; 0x28
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 fa5c 	bl	800bda4 <RCCEx_PLL3_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a902:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	e000      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
}
 800a910:	4618      	mov	r0, r3
 800a912:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a916:	46bd      	mov	sp, r7
 800a918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a91c:	58024400 	.word	0x58024400

0800a920 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b090      	sub	sp, #64	; 0x40
 800a924:	af00      	add	r7, sp, #0
 800a926:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a92e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a932:	430b      	orrs	r3, r1
 800a934:	f040 8094 	bne.w	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a938:	4b9e      	ldr	r3, [pc, #632]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93c:	f003 0307 	and.w	r3, r3, #7
 800a940:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	2b04      	cmp	r3, #4
 800a946:	f200 8087 	bhi.w	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a965 	.word	0x0800a965
 800a954:	0800a98d 	.word	0x0800a98d
 800a958:	0800a9b5 	.word	0x0800a9b5
 800a95c:	0800aa51 	.word	0x0800aa51
 800a960:	0800a9dd 	.word	0x0800a9dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a964:	4b93      	ldr	r3, [pc, #588]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a970:	d108      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a976:	4618      	mov	r0, r3
 800a978:	f001 f810 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a980:	f000 bd45 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a988:	f000 bd41 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a98c:	4b89      	ldr	r3, [pc, #548]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a998:	d108      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99a:	f107 0318 	add.w	r3, r7, #24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fd54 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a8:	f000 bd31 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b0:	f000 bd2d 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9b4:	4b7f      	ldr	r3, [pc, #508]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c0:	d108      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c2:	f107 030c 	add.w	r3, r7, #12
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fe94 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d0:	f000 bd1d 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9d8:	f000 bd19 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9dc:	4b75      	ldr	r3, [pc, #468]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9e6:	4b73      	ldr	r3, [pc, #460]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d10c      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f8:	4b6e      	ldr	r3, [pc, #440]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	4a6d      	ldr	r2, [pc, #436]	; (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
 800aa08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa0a:	e01f      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa0c:	4b69      	ldr	r3, [pc, #420]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa18:	d106      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa20:	d102      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa22:	4b66      	ldr	r3, [pc, #408]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa26:	e011      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa28:	4b62      	ldr	r3, [pc, #392]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa34:	d106      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3c:	d102      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa3e:	4b60      	ldr	r3, [pc, #384]	; (800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa42:	e003      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa48:	f000 bce1 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa4c:	f000 bcdf 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa50:	4b5c      	ldr	r3, [pc, #368]	; (800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa54:	f000 bcdb 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa5c:	f000 bcd7 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aa60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa64:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	f040 80ad 	bne.w	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800aa6e:	4b51      	ldr	r3, [pc, #324]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa72:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aa76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa7e:	d056      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa86:	f200 8090 	bhi.w	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	2bc0      	cmp	r3, #192	; 0xc0
 800aa8e:	f000 8088 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	2bc0      	cmp	r3, #192	; 0xc0
 800aa96:	f200 8088 	bhi.w	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	2b80      	cmp	r3, #128	; 0x80
 800aa9e:	d032      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	2b80      	cmp	r3, #128	; 0x80
 800aaa4:	f200 8081 	bhi.w	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	2b40      	cmp	r3, #64	; 0x40
 800aab2:	d014      	beq.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800aab4:	e079      	b.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab6:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aabe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac2:	d108      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 ff67 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad2:	f000 bc9c 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aada:	f000 bc98 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aade:	4b35      	ldr	r3, [pc, #212]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaea:	d108      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaec:	f107 0318 	add.w	r3, r7, #24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fcab 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aafa:	f000 bc88 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab02:	f000 bc84 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab06:	4b2b      	ldr	r3, [pc, #172]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab12:	d108      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab14:	f107 030c 	add.w	r3, r7, #12
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 fdeb 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab22:	f000 bc74 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab2a:	f000 bc70 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab2e:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d10c      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ab44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d109      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	4a18      	ldr	r2, [pc, #96]	; (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab56:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab5c:	e01f      	b.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab5e:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab6a:	d106      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab72:	d102      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab74:	4b11      	ldr	r3, [pc, #68]	; (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab78:	e011      	b.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab7a:	4b0e      	ldr	r3, [pc, #56]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab86:	d106      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ab88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab8e:	d102      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ab92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab94:	e003      	b.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab9a:	f000 bc38 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab9e:	f000 bc36 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aba2:	4b08      	ldr	r3, [pc, #32]	; (800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba6:	f000 bc32 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abae:	f000 bc2e 	b.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abb2:	bf00      	nop
 800abb4:	58024400 	.word	0x58024400
 800abb8:	03d09000 	.word	0x03d09000
 800abbc:	003d0900 	.word	0x003d0900
 800abc0:	017d7840 	.word	0x017d7840
 800abc4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800abc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abcc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800abd0:	430b      	orrs	r3, r1
 800abd2:	f040 809c 	bne.w	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800abd6:	4b9e      	ldr	r3, [pc, #632]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800abde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abe6:	d054      	beq.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800abe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abee:	f200 808b 	bhi.w	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf8:	f000 8083 	beq.w	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac02:	f200 8081 	bhi.w	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac0c:	d02f      	beq.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac14:	d878      	bhi.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac22:	d012      	beq.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ac24:	e070      	b.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac26:	4b8a      	ldr	r3, [pc, #552]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac32:	d107      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 feaf 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac42:	e3e4      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac48:	e3e1      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac4a:	4b81      	ldr	r3, [pc, #516]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac56:	d107      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac58:	f107 0318 	add.w	r3, r7, #24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fbf5 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac66:	e3d2      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac6c:	e3cf      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac6e:	4b78      	ldr	r3, [pc, #480]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac7a:	d107      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac7c:	f107 030c 	add.w	r3, r7, #12
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fd37 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac8a:	e3c0      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac90:	e3bd      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac92:	4b6f      	ldr	r3, [pc, #444]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac9c:	4b6c      	ldr	r3, [pc, #432]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0304 	and.w	r3, r3, #4
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d10c      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acae:	4b68      	ldr	r3, [pc, #416]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	08db      	lsrs	r3, r3, #3
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	4a66      	ldr	r2, [pc, #408]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800acba:	fa22 f303 	lsr.w	r3, r2, r3
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc0:	e01e      	b.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acc2:	4b63      	ldr	r3, [pc, #396]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acce:	d106      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acd6:	d102      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acd8:	4b5f      	ldr	r3, [pc, #380]	; (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acdc:	e010      	b.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acde:	4b5c      	ldr	r3, [pc, #368]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acea:	d106      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800acec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf2:	d102      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acf4:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf8:	e002      	b.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800acfe:	e386      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad00:	e385      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad02:	4b57      	ldr	r3, [pc, #348]	; (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad06:	e382      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad0c:	e37f      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad12:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ad16:	430b      	orrs	r3, r1
 800ad18:	f040 80a7 	bne.w	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ad1c:	4b4c      	ldr	r3, [pc, #304]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad20:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ad24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad2c:	d055      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad34:	f200 8096 	bhi.w	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad3e:	f000 8084 	beq.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad48:	f200 808c 	bhi.w	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad52:	d030      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad5a:	f200 8083 	bhi.w	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad6a:	d012      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ad6c:	e07a      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad6e:	4b38      	ldr	r3, [pc, #224]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7a:	d107      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fe0b 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad8a:	e340      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad90:	e33d      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad92:	4b2f      	ldr	r3, [pc, #188]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada0:	f107 0318 	add.w	r3, r7, #24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 fb51 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adae:	e32e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb4:	e32b      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adb6:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc2:	d107      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adc4:	f107 030c 	add.w	r3, r7, #12
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fc93 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add2:	e31c      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800add8:	e319      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adda:	4b1d      	ldr	r3, [pc, #116]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800addc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ade4:	4b1a      	ldr	r3, [pc, #104]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b04      	cmp	r3, #4
 800adee:	d10c      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adf6:	4b16      	ldr	r3, [pc, #88]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	08db      	lsrs	r3, r3, #3
 800adfc:	f003 0303 	and.w	r3, r3, #3
 800ae00:	4a14      	ldr	r2, [pc, #80]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae02:	fa22 f303 	lsr.w	r3, r2, r3
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae08:	e01e      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae0a:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae16:	d106      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae1e:	d102      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae20:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae24:	e010      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae26:	4b0a      	ldr	r3, [pc, #40]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae32:	d106      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3a:	d102      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae3c:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae40:	e002      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae46:	e2e2      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae48:	e2e1      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae4a:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae4e:	e2de      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae50:	58024400 	.word	0x58024400
 800ae54:	03d09000 	.word	0x03d09000
 800ae58:	003d0900 	.word	0x003d0900
 800ae5c:	017d7840 	.word	0x017d7840
 800ae60:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae68:	e2d1      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ae6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae6e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ae72:	430b      	orrs	r3, r1
 800ae74:	f040 809c 	bne.w	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ae78:	4b93      	ldr	r3, [pc, #588]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae88:	d054      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae90:	f200 808b 	bhi.w	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae9a:	f000 8083 	beq.w	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aea4:	f200 8081 	bhi.w	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeae:	d02f      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeb6:	d878      	bhi.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d004      	beq.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec4:	d012      	beq.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aec6:	e070      	b.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aec8:	4b7f      	ldr	r3, [pc, #508]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aed4:	d107      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fd5e 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee4:	e293      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeea:	e290      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeec:	4b76      	ldr	r3, [pc, #472]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aef8:	d107      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefa:	f107 0318 	add.w	r3, r7, #24
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 faa4 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af08:	e281      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af0e:	e27e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af10:	4b6d      	ldr	r3, [pc, #436]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af1c:	d107      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af1e:	f107 030c 	add.w	r3, r7, #12
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fbe6 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2c:	e26f      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af32:	e26c      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af34:	4b64      	ldr	r3, [pc, #400]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af3e:	4b62      	ldr	r3, [pc, #392]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b04      	cmp	r3, #4
 800af48:	d10c      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800af4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d109      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af50:	4b5d      	ldr	r3, [pc, #372]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	08db      	lsrs	r3, r3, #3
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	4a5c      	ldr	r2, [pc, #368]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800af5c:	fa22 f303 	lsr.w	r3, r2, r3
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af62:	e01e      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af64:	4b58      	ldr	r3, [pc, #352]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af70:	d106      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af78:	d102      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af7a:	4b55      	ldr	r3, [pc, #340]	; (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af7e:	e010      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af80:	4b51      	ldr	r3, [pc, #324]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af8c:	d106      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800af8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af94:	d102      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af96:	4b4f      	ldr	r3, [pc, #316]	; (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9a:	e002      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afa0:	e235      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afa2:	e234      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afa4:	4b4c      	ldr	r3, [pc, #304]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa8:	e231      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afae:	e22e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800afb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800afb8:	430b      	orrs	r3, r1
 800afba:	f040 808f 	bne.w	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800afbe:	4b42      	ldr	r3, [pc, #264]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800afc6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afce:	d06b      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afd6:	d874      	bhi.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afde:	d056      	beq.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afe6:	d86c      	bhi.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afee:	d03b      	beq.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aff6:	d864      	bhi.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800affe:	d021      	beq.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b006:	d85c      	bhi.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d004      	beq.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b014:	d004      	beq.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b016:	e054      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b018:	f7fe fa4c 	bl	80094b4 <HAL_RCC_GetPCLK1Freq>
 800b01c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b01e:	e1f6      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b020:	4b29      	ldr	r3, [pc, #164]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b02c:	d107      	bne.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b02e:	f107 0318 	add.w	r3, r7, #24
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fa0a 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b03c:	e1e7      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b042:	e1e4      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b044:	4b20      	ldr	r3, [pc, #128]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b050:	d107      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b052:	f107 030c 	add.w	r3, r7, #12
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fb4c 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b060:	e1d5      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b066:	e1d2      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b068:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b04      	cmp	r3, #4
 800b072:	d109      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b074:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	08db      	lsrs	r3, r3, #3
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	4a13      	ldr	r2, [pc, #76]	; (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b086:	e1c2      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08c:	e1bf      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b08e:	4b0e      	ldr	r3, [pc, #56]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b09a:	d102      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b09c:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a0:	e1b5      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a6:	e1b2      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0a8:	4b07      	ldr	r3, [pc, #28]	; (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b4:	d102      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b0b6:	4b07      	ldr	r3, [pc, #28]	; (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ba:	e1a8      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e1a5      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c6:	e1a2      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0c8:	58024400 	.word	0x58024400
 800b0cc:	03d09000 	.word	0x03d09000
 800b0d0:	003d0900 	.word	0x003d0900
 800b0d4:	017d7840 	.word	0x017d7840
 800b0d8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0e0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	d173      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b0e8:	4b9c      	ldr	r3, [pc, #624]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0f8:	d02f      	beq.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b100:	d863      	bhi.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b10e:	d012      	beq.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b110:	e05b      	b.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b112:	4b92      	ldr	r3, [pc, #584]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b11a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b11e:	d107      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b120:	f107 0318 	add.w	r3, r7, #24
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f991 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b12e:	e16e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b134:	e16b      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b136:	4b89      	ldr	r3, [pc, #548]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b142:	d107      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b144:	f107 030c 	add.w	r3, r7, #12
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 fad3 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b152:	e15c      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b158:	e159      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b15a:	4b80      	ldr	r3, [pc, #512]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b162:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b164:	4b7d      	ldr	r3, [pc, #500]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	d10c      	bne.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b172:	2b00      	cmp	r3, #0
 800b174:	d109      	bne.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b176:	4b79      	ldr	r3, [pc, #484]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	08db      	lsrs	r3, r3, #3
 800b17c:	f003 0303 	and.w	r3, r3, #3
 800b180:	4a77      	ldr	r2, [pc, #476]	; (800b360 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b182:	fa22 f303 	lsr.w	r3, r2, r3
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b188:	e01e      	b.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b18a:	4b74      	ldr	r3, [pc, #464]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b196:	d106      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b19e:	d102      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1a0:	4b70      	ldr	r3, [pc, #448]	; (800b364 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a4:	e010      	b.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1a6:	4b6d      	ldr	r3, [pc, #436]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1b2:	d106      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ba:	d102      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1bc:	4b6a      	ldr	r3, [pc, #424]	; (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c0:	e002      	b.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1c6:	e122      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1c8:	e121      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ce:	e11e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	d133      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b1dc:	4b5f      	ldr	r3, [pc, #380]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d004      	beq.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1f2:	d012      	beq.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b1f4:	e023      	b.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1f6:	4b59      	ldr	r3, [pc, #356]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b202:	d107      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fbc7 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b212:	e0fc      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b218:	e0f9      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b21a:	4b50      	ldr	r3, [pc, #320]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b226:	d107      	bne.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b228:	f107 0318 	add.w	r3, r7, #24
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f90d 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b236:	e0ea      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b23c:	e0e7      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b242:	e0e4      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b244:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b248:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b24c:	430b      	orrs	r3, r1
 800b24e:	f040 808d 	bne.w	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b252:	4b42      	ldr	r3, [pc, #264]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b256:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b25a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b262:	d06b      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b26a:	d874      	bhi.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b272:	d056      	beq.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b27a:	d86c      	bhi.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b282:	d03b      	beq.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b28a:	d864      	bhi.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b292:	d021      	beq.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29a:	d85c      	bhi.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2a8:	d004      	beq.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b2aa:	e054      	b.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b2ac:	f000 f8b8 	bl	800b420 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2b2:	e0ac      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b4:	4b29      	ldr	r3, [pc, #164]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c0:	d107      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c2:	f107 0318 	add.w	r3, r7, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f8c0 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d0:	e09d      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d6:	e09a      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2d8:	4b20      	ldr	r3, [pc, #128]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e4:	d107      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 fa02 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f4:	e08b      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2fa:	e088      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2fc:	4b17      	ldr	r3, [pc, #92]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b04      	cmp	r3, #4
 800b306:	d109      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b308:	4b14      	ldr	r3, [pc, #80]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	08db      	lsrs	r3, r3, #3
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	4a13      	ldr	r2, [pc, #76]	; (800b360 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b314:	fa22 f303 	lsr.w	r3, r2, r3
 800b318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b31a:	e078      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b320:	e075      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b322:	4b0e      	ldr	r3, [pc, #56]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b32e:	d102      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b330:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b334:	e06b      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b33a:	e068      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b33c:	4b07      	ldr	r3, [pc, #28]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b348:	d102      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b34a:	4b07      	ldr	r3, [pc, #28]	; (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34e:	e05e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b354:	e05b      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b35a:	e058      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b35c:	58024400 	.word	0x58024400
 800b360:	03d09000 	.word	0x03d09000
 800b364:	003d0900 	.word	0x003d0900
 800b368:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b36c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b370:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b374:	430b      	orrs	r3, r1
 800b376:	d148      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b378:	4b27      	ldr	r3, [pc, #156]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b37c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b380:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b388:	d02a      	beq.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b390:	d838      	bhi.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b39e:	d00d      	beq.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b3a0:	e030      	b.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3a2:	4b1d      	ldr	r3, [pc, #116]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3ae:	d102      	bne.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b3b0:	4b1a      	ldr	r3, [pc, #104]	; (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b4:	e02b      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ba:	e028      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3bc:	4b16      	ldr	r3, [pc, #88]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c8:	d107      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 fae4 	bl	800b99c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3d8:	e019      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3de:	e016      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3e0:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3ec:	d107      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ee:	f107 0318 	add.w	r3, r7, #24
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 f82a 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3fc:	e007      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b402:	e004      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b408:	e001      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b410:	4618      	mov	r0, r3
 800b412:	3740      	adds	r7, #64	; 0x40
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	58024400 	.word	0x58024400
 800b41c:	017d7840 	.word	0x017d7840

0800b420 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b424:	f7fe f816 	bl	8009454 <HAL_RCC_GetHCLKFreq>
 800b428:	4602      	mov	r2, r0
 800b42a:	4b06      	ldr	r3, [pc, #24]	; (800b444 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	091b      	lsrs	r3, r3, #4
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	4904      	ldr	r1, [pc, #16]	; (800b448 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b436:	5ccb      	ldrb	r3, [r1, r3]
 800b438:	f003 031f 	and.w	r3, r3, #31
 800b43c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b440:	4618      	mov	r0, r3
 800b442:	bd80      	pop	{r7, pc}
 800b444:	58024400 	.word	0x58024400
 800b448:	08010d0c 	.word	0x08010d0c

0800b44c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b089      	sub	sp, #36	; 0x24
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b454:	4ba1      	ldr	r3, [pc, #644]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b45e:	4b9f      	ldr	r3, [pc, #636]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b462:	0b1b      	lsrs	r3, r3, #12
 800b464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b468:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b46a:	4b9c      	ldr	r3, [pc, #624]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	091b      	lsrs	r3, r3, #4
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b476:	4b99      	ldr	r3, [pc, #612]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b47a:	08db      	lsrs	r3, r3, #3
 800b47c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 8111 	beq.w	800b6bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	f000 8083 	beq.w	800b5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	f200 80a1 	bhi.w	800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d056      	beq.n	800b564 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b4b6:	e099      	b.n	800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4b8:	4b88      	ldr	r3, [pc, #544]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0320 	and.w	r3, r3, #32
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d02d      	beq.n	800b520 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4c4:	4b85      	ldr	r3, [pc, #532]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	08db      	lsrs	r3, r3, #3
 800b4ca:	f003 0303 	and.w	r3, r3, #3
 800b4ce:	4a84      	ldr	r2, [pc, #528]	; (800b6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ee:	4b7b      	ldr	r3, [pc, #492]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b502:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b51e:	e087      	b.n	800b630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b532:	4b6a      	ldr	r3, [pc, #424]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b542:	ed97 6a03 	vldr	s12, [r7, #12]
 800b546:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b562:	e065      	b.n	800b630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b576:	4b59      	ldr	r3, [pc, #356]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57e:	ee07 3a90 	vmov	s15, r3
 800b582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b586:	ed97 6a03 	vldr	s12, [r7, #12]
 800b58a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5a6:	e043      	b.n	800b630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ba:	4b48      	ldr	r3, [pc, #288]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5ea:	e021      	b.n	800b630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fe:	4b37      	ldr	r3, [pc, #220]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b612:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b62e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b630:	4b2a      	ldr	r3, [pc, #168]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	0a5b      	lsrs	r3, r3, #9
 800b636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b64a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b64e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b656:	ee17 2a90 	vmov	r2, s15
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b65e:	4b1f      	ldr	r3, [pc, #124]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b662:	0c1b      	lsrs	r3, r3, #16
 800b664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b674:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b678:	edd7 6a07 	vldr	s13, [r7, #28]
 800b67c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b684:	ee17 2a90 	vmov	r2, s15
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b68c:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b690:	0e1b      	lsrs	r3, r3, #24
 800b692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b2:	ee17 2a90 	vmov	r2, s15
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b6ba:	e008      	b.n	800b6ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	609a      	str	r2, [r3, #8]
}
 800b6ce:	bf00      	nop
 800b6d0:	3724      	adds	r7, #36	; 0x24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	58024400 	.word	0x58024400
 800b6e0:	03d09000 	.word	0x03d09000
 800b6e4:	46000000 	.word	0x46000000
 800b6e8:	4c742400 	.word	0x4c742400
 800b6ec:	4a742400 	.word	0x4a742400
 800b6f0:	4bbebc20 	.word	0x4bbebc20

0800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b089      	sub	sp, #36	; 0x24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6fc:	4ba1      	ldr	r3, [pc, #644]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b700:	f003 0303 	and.w	r3, r3, #3
 800b704:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b706:	4b9f      	ldr	r3, [pc, #636]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70a:	0d1b      	lsrs	r3, r3, #20
 800b70c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b710:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b712:	4b9c      	ldr	r3, [pc, #624]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b716:	0a1b      	lsrs	r3, r3, #8
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b71e:	4b99      	ldr	r3, [pc, #612]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b722:	08db      	lsrs	r3, r3, #3
 800b724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	fb02 f303 	mul.w	r3, r2, r3
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 8111 	beq.w	800b964 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b02      	cmp	r3, #2
 800b746:	f000 8083 	beq.w	800b850 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	f200 80a1 	bhi.w	800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d056      	beq.n	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b75e:	e099      	b.n	800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b760:	4b88      	ldr	r3, [pc, #544]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0320 	and.w	r3, r3, #32
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d02d      	beq.n	800b7c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b76c:	4b85      	ldr	r3, [pc, #532]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	08db      	lsrs	r3, r3, #3
 800b772:	f003 0303 	and.w	r3, r3, #3
 800b776:	4a84      	ldr	r2, [pc, #528]	; (800b988 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b778:	fa22 f303 	lsr.w	r3, r2, r3
 800b77c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	ee07 3a90 	vmov	s15, r3
 800b784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b796:	4b7b      	ldr	r3, [pc, #492]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b98c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7c6:	e087      	b.n	800b8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b990 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7da:	4b6a      	ldr	r3, [pc, #424]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b98c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b80a:	e065      	b.n	800b8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81e:	4b59      	ldr	r3, [pc, #356]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b832:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b98c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b84a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b84e:	e043      	b.n	800b8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	ee07 3a90 	vmov	s15, r3
 800b856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b998 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b85e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b862:	4b48      	ldr	r3, [pc, #288]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b872:	ed97 6a03 	vldr	s12, [r7, #12]
 800b876:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b98c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b87a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b892:	e021      	b.n	800b8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8a6:	4b37      	ldr	r3, [pc, #220]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b98c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b8d8:	4b2a      	ldr	r3, [pc, #168]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8dc:	0a5b      	lsrs	r3, r3, #9
 800b8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8fe:	ee17 2a90 	vmov	r2, s15
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b906:	4b1f      	ldr	r3, [pc, #124]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90a:	0c1b      	lsrs	r3, r3, #16
 800b90c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b910:	ee07 3a90 	vmov	s15, r3
 800b914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b91c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b920:	edd7 6a07 	vldr	s13, [r7, #28]
 800b924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92c:	ee17 2a90 	vmov	r2, s15
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b934:	4b13      	ldr	r3, [pc, #76]	; (800b984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b938:	0e1b      	lsrs	r3, r3, #24
 800b93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b93e:	ee07 3a90 	vmov	s15, r3
 800b942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b94a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b94e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95a:	ee17 2a90 	vmov	r2, s15
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b962:	e008      	b.n	800b976 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	609a      	str	r2, [r3, #8]
}
 800b976:	bf00      	nop
 800b978:	3724      	adds	r7, #36	; 0x24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	58024400 	.word	0x58024400
 800b988:	03d09000 	.word	0x03d09000
 800b98c:	46000000 	.word	0x46000000
 800b990:	4c742400 	.word	0x4c742400
 800b994:	4a742400 	.word	0x4a742400
 800b998:	4bbebc20 	.word	0x4bbebc20

0800b99c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b089      	sub	sp, #36	; 0x24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9a4:	4ba0      	ldr	r3, [pc, #640]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a8:	f003 0303 	and.w	r3, r3, #3
 800b9ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b9ae:	4b9e      	ldr	r3, [pc, #632]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b2:	091b      	lsrs	r3, r3, #4
 800b9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b9ba:	4b9b      	ldr	r3, [pc, #620]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b9c4:	4b98      	ldr	r3, [pc, #608]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c8:	08db      	lsrs	r3, r3, #3
 800b9ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	fb02 f303 	mul.w	r3, r2, r3
 800b9d4:	ee07 3a90 	vmov	s15, r3
 800b9d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 8111 	beq.w	800bc0a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	f000 8083 	beq.w	800baf6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	f200 80a1 	bhi.w	800bb3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d056      	beq.n	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba04:	e099      	b.n	800bb3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba06:	4b88      	ldr	r3, [pc, #544]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0320 	and.w	r3, r3, #32
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d02d      	beq.n	800ba6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba12:	4b85      	ldr	r3, [pc, #532]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	08db      	lsrs	r3, r3, #3
 800ba18:	f003 0303 	and.w	r3, r3, #3
 800ba1c:	4a83      	ldr	r2, [pc, #524]	; (800bc2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ba1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba22:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3c:	4b7a      	ldr	r3, [pc, #488]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba50:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba6c:	e087      	b.n	800bb7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba80:	4b69      	ldr	r3, [pc, #420]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba88:	ee07 3a90 	vmov	s15, r3
 800ba8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba94:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab0:	e065      	b.n	800bb7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	ee07 3a90 	vmov	s15, r3
 800bab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac4:	4b58      	ldr	r3, [pc, #352]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800badc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baf4:	e043      	b.n	800bb7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	ee07 3a90 	vmov	s15, r3
 800bafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb00:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb08:	4b47      	ldr	r3, [pc, #284]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb18:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb38:	e021      	b.n	800bb7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	ee07 3a90 	vmov	s15, r3
 800bb40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb44:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bc34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb4c:	4b36      	ldr	r3, [pc, #216]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb60:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bb7e:	4b2a      	ldr	r3, [pc, #168]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	0a5b      	lsrs	r3, r3, #9
 800bb84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb98:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bba4:	ee17 2a90 	vmov	r2, s15
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bbac:	4b1e      	ldr	r3, [pc, #120]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb0:	0c1b      	lsrs	r3, r3, #16
 800bbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbd2:	ee17 2a90 	vmov	r2, s15
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bbda:	4b13      	ldr	r3, [pc, #76]	; (800bc28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbde:	0e1b      	lsrs	r3, r3, #24
 800bbe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe4:	ee07 3a90 	vmov	s15, r3
 800bbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc00:	ee17 2a90 	vmov	r2, s15
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc08:	e008      	b.n	800bc1c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	609a      	str	r2, [r3, #8]
}
 800bc1c:	bf00      	nop
 800bc1e:	3724      	adds	r7, #36	; 0x24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	58024400 	.word	0x58024400
 800bc2c:	03d09000 	.word	0x03d09000
 800bc30:	46000000 	.word	0x46000000
 800bc34:	4c742400 	.word	0x4c742400
 800bc38:	4a742400 	.word	0x4a742400
 800bc3c:	4bbebc20 	.word	0x4bbebc20

0800bc40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc4e:	4b53      	ldr	r3, [pc, #332]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d101      	bne.n	800bc5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e099      	b.n	800bd92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bc5e:	4b4f      	ldr	r3, [pc, #316]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a4e      	ldr	r2, [pc, #312]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bc64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc6a:	f7f6 fdbf 	bl	80027ec <HAL_GetTick>
 800bc6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc70:	e008      	b.n	800bc84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc72:	f7f6 fdbb 	bl	80027ec <HAL_GetTick>
 800bc76:	4602      	mov	r2, r0
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d901      	bls.n	800bc84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e086      	b.n	800bd92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc84:	4b45      	ldr	r3, [pc, #276]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1f0      	bne.n	800bc72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bc90:	4b42      	ldr	r3, [pc, #264]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	031b      	lsls	r3, r3, #12
 800bc9e:	493f      	ldr	r1, [pc, #252]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	628b      	str	r3, [r1, #40]	; 0x28
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	025b      	lsls	r3, r3, #9
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	041b      	lsls	r3, r3, #16
 800bcc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	061b      	lsls	r3, r3, #24
 800bcd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bcd4:	4931      	ldr	r1, [pc, #196]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bcda:	4b30      	ldr	r3, [pc, #192]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	492d      	ldr	r1, [pc, #180]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bce8:	4313      	orrs	r3, r2
 800bcea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bcec:	4b2b      	ldr	r3, [pc, #172]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	f023 0220 	bic.w	r2, r3, #32
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	4928      	ldr	r1, [pc, #160]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bcfe:	4b27      	ldr	r3, [pc, #156]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	4a26      	ldr	r2, [pc, #152]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd04:	f023 0310 	bic.w	r3, r3, #16
 800bd08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd0a:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd0e:	4b24      	ldr	r3, [pc, #144]	; (800bda0 <RCCEx_PLL2_Config+0x160>)
 800bd10:	4013      	ands	r3, r2
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	69d2      	ldr	r2, [r2, #28]
 800bd16:	00d2      	lsls	r2, r2, #3
 800bd18:	4920      	ldr	r1, [pc, #128]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd1e:	4b1f      	ldr	r3, [pc, #124]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd22:	4a1e      	ldr	r2, [pc, #120]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd24:	f043 0310 	orr.w	r3, r3, #16
 800bd28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d106      	bne.n	800bd3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bd30:	4b1a      	ldr	r3, [pc, #104]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	4a19      	ldr	r2, [pc, #100]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd3c:	e00f      	b.n	800bd5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d106      	bne.n	800bd52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd44:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	4a14      	ldr	r2, [pc, #80]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd50:	e005      	b.n	800bd5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bd52:	4b12      	ldr	r3, [pc, #72]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	4a11      	ldr	r2, [pc, #68]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a0e      	ldr	r2, [pc, #56]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd6a:	f7f6 fd3f 	bl	80027ec <HAL_GetTick>
 800bd6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd70:	e008      	b.n	800bd84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd72:	f7f6 fd3b 	bl	80027ec <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d901      	bls.n	800bd84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e006      	b.n	800bd92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd84:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <RCCEx_PLL2_Config+0x15c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0f0      	beq.n	800bd72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	58024400 	.word	0x58024400
 800bda0:	ffff0007 	.word	0xffff0007

0800bda4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdb2:	4b53      	ldr	r3, [pc, #332]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d101      	bne.n	800bdc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e099      	b.n	800bef6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bdc2:	4b4f      	ldr	r3, [pc, #316]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a4e      	ldr	r2, [pc, #312]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bdc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdce:	f7f6 fd0d 	bl	80027ec <HAL_GetTick>
 800bdd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bdd4:	e008      	b.n	800bde8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdd6:	f7f6 fd09 	bl	80027ec <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d901      	bls.n	800bde8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e086      	b.n	800bef6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bde8:	4b45      	ldr	r3, [pc, #276]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1f0      	bne.n	800bdd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bdf4:	4b42      	ldr	r3, [pc, #264]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	051b      	lsls	r3, r3, #20
 800be02:	493f      	ldr	r1, [pc, #252]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be04:	4313      	orrs	r3, r2
 800be06:	628b      	str	r3, [r1, #40]	; 0x28
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	3b01      	subs	r3, #1
 800be18:	025b      	lsls	r3, r3, #9
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	431a      	orrs	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	3b01      	subs	r3, #1
 800be24:	041b      	lsls	r3, r3, #16
 800be26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	3b01      	subs	r3, #1
 800be32:	061b      	lsls	r3, r3, #24
 800be34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be38:	4931      	ldr	r1, [pc, #196]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be3a:	4313      	orrs	r3, r2
 800be3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800be3e:	4b30      	ldr	r3, [pc, #192]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	492d      	ldr	r1, [pc, #180]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800be50:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	4928      	ldr	r1, [pc, #160]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800be62:	4b27      	ldr	r3, [pc, #156]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800be6e:	4b24      	ldr	r3, [pc, #144]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <RCCEx_PLL3_Config+0x160>)
 800be74:	4013      	ands	r3, r2
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	69d2      	ldr	r2, [r2, #28]
 800be7a:	00d2      	lsls	r2, r2, #3
 800be7c:	4920      	ldr	r1, [pc, #128]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	4a1e      	ldr	r2, [pc, #120]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d106      	bne.n	800bea2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800be94:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be98:	4a19      	ldr	r2, [pc, #100]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800be9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800be9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bea0:	e00f      	b.n	800bec2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d106      	bne.n	800beb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bea8:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	4a14      	ldr	r2, [pc, #80]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800beae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800beb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800beb4:	e005      	b.n	800bec2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800beb6:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	4a11      	ldr	r2, [pc, #68]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bec0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bec2:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a0e      	ldr	r2, [pc, #56]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800bec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800becc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bece:	f7f6 fc8d 	bl	80027ec <HAL_GetTick>
 800bed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bed4:	e008      	b.n	800bee8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bed6:	f7f6 fc89 	bl	80027ec <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d901      	bls.n	800bee8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e006      	b.n	800bef6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bee8:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <RCCEx_PLL3_Config+0x15c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d0f0      	beq.n	800bed6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	58024400 	.word	0x58024400
 800bf04:	ffff0007 	.word	0xffff0007

0800bf08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e10f      	b.n	800c13a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a87      	ldr	r2, [pc, #540]	; (800c144 <HAL_SPI_Init+0x23c>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00f      	beq.n	800bf4a <HAL_SPI_Init+0x42>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a86      	ldr	r2, [pc, #536]	; (800c148 <HAL_SPI_Init+0x240>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d00a      	beq.n	800bf4a <HAL_SPI_Init+0x42>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a84      	ldr	r2, [pc, #528]	; (800c14c <HAL_SPI_Init+0x244>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d005      	beq.n	800bf4a <HAL_SPI_Init+0x42>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	2b0f      	cmp	r3, #15
 800bf44:	d901      	bls.n	800bf4a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e0f7      	b.n	800c13a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fc12 	bl	800c774 <SPI_GetPacketSize>
 800bf50:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a7b      	ldr	r2, [pc, #492]	; (800c144 <HAL_SPI_Init+0x23c>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d00c      	beq.n	800bf76 <HAL_SPI_Init+0x6e>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a79      	ldr	r2, [pc, #484]	; (800c148 <HAL_SPI_Init+0x240>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d007      	beq.n	800bf76 <HAL_SPI_Init+0x6e>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a78      	ldr	r2, [pc, #480]	; (800c14c <HAL_SPI_Init+0x244>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d002      	beq.n	800bf76 <HAL_SPI_Init+0x6e>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b08      	cmp	r3, #8
 800bf74:	d811      	bhi.n	800bf9a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf7a:	4a72      	ldr	r2, [pc, #456]	; (800c144 <HAL_SPI_Init+0x23c>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d009      	beq.n	800bf94 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a70      	ldr	r2, [pc, #448]	; (800c148 <HAL_SPI_Init+0x240>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d004      	beq.n	800bf94 <HAL_SPI_Init+0x8c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a6f      	ldr	r2, [pc, #444]	; (800c14c <HAL_SPI_Init+0x244>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d104      	bne.n	800bf9e <HAL_SPI_Init+0x96>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b10      	cmp	r3, #16
 800bf98:	d901      	bls.n	800bf9e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e0cd      	b.n	800c13a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d106      	bne.n	800bfb8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7f6 f836 	bl	8002024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f022 0201 	bic.w	r2, r2, #1
 800bfce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bfda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfe4:	d119      	bne.n	800c01a <HAL_SPI_Init+0x112>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfee:	d103      	bne.n	800bff8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10c      	bne.n	800c01a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c008:	d107      	bne.n	800c01a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c018:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00f      	beq.n	800c046 <HAL_SPI_Init+0x13e>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	2b06      	cmp	r3, #6
 800c02c:	d90b      	bls.n	800c046 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e007      	b.n	800c056 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c054:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	69da      	ldr	r2, [r3, #28]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05e:	431a      	orrs	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	431a      	orrs	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c068:	ea42 0103 	orr.w	r1, r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	430a      	orrs	r2, r1
 800c076:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	431a      	orrs	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	431a      	orrs	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	431a      	orrs	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0aa:	431a      	orrs	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	431a      	orrs	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0b6:	ea42 0103 	orr.w	r1, r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d113      	bne.n	800c0f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c0f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f022 0201 	bic.w	r2, r2, #1
 800c104:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00a      	beq.n	800c128 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	430a      	orrs	r2, r1
 800c126:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	40013000 	.word	0x40013000
 800c148:	40003800 	.word	0x40003800
 800c14c:	40003c00 	.word	0x40003c00

0800c150 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	4613      	mov	r3, r2
 800c15e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c164:	095b      	lsrs	r3, r3, #5
 800c166:	b29b      	uxth	r3, r3
 800c168:	3301      	adds	r3, #1
 800c16a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3330      	adds	r3, #48	; 0x30
 800c172:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c174:	f7f6 fb3a 	bl	80027ec <HAL_GetTick>
 800c178:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b01      	cmp	r3, #1
 800c184:	d001      	beq.n	800c18a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c186:	2302      	movs	r3, #2
 800c188:	e250      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <HAL_SPI_Receive+0x46>
 800c190:	88fb      	ldrh	r3, [r7, #6]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e248      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_SPI_Receive+0x58>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e241      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	88fa      	ldrh	r2, [r7, #6]
 800c1ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	88fa      	ldrh	r2, [r7, #6]
 800c1d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c200:	d108      	bne.n	800c214 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	e009      	b.n	800c228 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c226:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	4b95      	ldr	r3, [pc, #596]	; (800c484 <HAL_SPI_Receive+0x334>)
 800c230:	4013      	ands	r3, r2
 800c232:	88f9      	ldrh	r1, [r7, #6]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	6812      	ldr	r2, [r2, #0]
 800c238:	430b      	orrs	r3, r1
 800c23a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f042 0201 	orr.w	r2, r2, #1
 800c24a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c254:	d107      	bne.n	800c266 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c264:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	d96c      	bls.n	800c348 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c26e:	e064      	b.n	800c33a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b01      	cmp	r3, #1
 800c284:	d114      	bne.n	800c2b0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c28e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c290:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c296:	1d1a      	adds	r2, r3, #4
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c2ae:	e044      	b.n	800c33a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	8bfa      	ldrh	r2, [r7, #30]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d919      	bls.n	800c2f2 <HAL_SPI_Receive+0x1a2>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d014      	beq.n	800c2f2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c2d2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2d8:	1d1a      	adds	r2, r3, #4
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c2f0:	e023      	b.n	800c33a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2f2:	f7f6 fa7b 	bl	80027ec <HAL_GetTick>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d803      	bhi.n	800c30a <HAL_SPI_Receive+0x1ba>
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c308:	d102      	bne.n	800c310 <HAL_SPI_Receive+0x1c0>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d114      	bne.n	800c33a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 f98f 	bl	800c634 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e178      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c340:	b29b      	uxth	r3, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	d194      	bne.n	800c270 <HAL_SPI_Receive+0x120>
 800c346:	e15e      	b.n	800c606 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	2b07      	cmp	r3, #7
 800c34e:	f240 8153 	bls.w	800c5f8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c352:	e08f      	b.n	800c474 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b01      	cmp	r3, #1
 800c368:	d114      	bne.n	800c394 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c36e:	69ba      	ldr	r2, [r7, #24]
 800c370:	8812      	ldrh	r2, [r2, #0]
 800c372:	b292      	uxth	r2, r2
 800c374:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c37a:	1c9a      	adds	r2, r3, #2
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c386:	b29b      	uxth	r3, r3
 800c388:	3b01      	subs	r3, #1
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c392:	e06f      	b.n	800c474 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	8bfa      	ldrh	r2, [r7, #30]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d924      	bls.n	800c3ec <HAL_SPI_Receive+0x29c>
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01f      	beq.n	800c3ec <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3b0:	69ba      	ldr	r2, [r7, #24]
 800c3b2:	8812      	ldrh	r2, [r2, #0]
 800c3b4:	b292      	uxth	r2, r2
 800c3b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3bc:	1c9a      	adds	r2, r3, #2
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	8812      	ldrh	r2, [r2, #0]
 800c3ca:	b292      	uxth	r2, r2
 800c3cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3d2:	1c9a      	adds	r2, r3, #2
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	3b02      	subs	r3, #2
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3ea:	e043      	b.n	800c474 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d119      	bne.n	800c42c <HAL_SPI_Receive+0x2dc>
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d014      	beq.n	800c42c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	8812      	ldrh	r2, [r2, #0]
 800c40a:	b292      	uxth	r2, r2
 800c40c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c412:	1c9a      	adds	r2, r3, #2
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c41e:	b29b      	uxth	r3, r3
 800c420:	3b01      	subs	r3, #1
 800c422:	b29a      	uxth	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c42a:	e023      	b.n	800c474 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c42c:	f7f6 f9de 	bl	80027ec <HAL_GetTick>
 800c430:	4602      	mov	r2, r0
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d803      	bhi.n	800c444 <HAL_SPI_Receive+0x2f4>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c442:	d102      	bne.n	800c44a <HAL_SPI_Receive+0x2fa>
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d114      	bne.n	800c474 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 f8f2 	bl	800c634 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c456:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c470:	2303      	movs	r3, #3
 800c472:	e0db      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f47f af69 	bne.w	800c354 <HAL_SPI_Receive+0x204>
 800c482:	e0c0      	b.n	800c606 <HAL_SPI_Receive+0x4b6>
 800c484:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d117      	bne.n	800c4ce <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c4cc:	e094      	b.n	800c5f8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8bfa      	ldrh	r2, [r7, #30]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d946      	bls.n	800c56a <HAL_SPI_Receive+0x41a>
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d041      	beq.n	800c56a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4f2:	7812      	ldrb	r2, [r2, #0]
 800c4f4:	b2d2      	uxtb	r2, r2
 800c4f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c50e:	7812      	ldrb	r2, [r2, #0]
 800c510:	b2d2      	uxtb	r2, r2
 800c512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c52a:	7812      	ldrb	r2, [r2, #0]
 800c52c:	b2d2      	uxtb	r2, r2
 800c52e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c534:	1c5a      	adds	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c546:	7812      	ldrb	r2, [r2, #0]
 800c548:	b2d2      	uxtb	r2, r2
 800c54a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	3b04      	subs	r3, #4
 800c560:	b29a      	uxth	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c568:	e046      	b.n	800c5f8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c570:	b29b      	uxth	r3, r3
 800c572:	2b03      	cmp	r3, #3
 800c574:	d81c      	bhi.n	800c5b0 <HAL_SPI_Receive+0x460>
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d017      	beq.n	800c5b0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c58c:	7812      	ldrb	r2, [r2, #0]
 800c58e:	b2d2      	uxtb	r2, r2
 800c590:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5ae:	e023      	b.n	800c5f8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5b0:	f7f6 f91c 	bl	80027ec <HAL_GetTick>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	1ad3      	subs	r3, r2, r3
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d803      	bhi.n	800c5c8 <HAL_SPI_Receive+0x478>
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5c6:	d102      	bne.n	800c5ce <HAL_SPI_Receive+0x47e>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d114      	bne.n	800c5f8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 f830 	bl	800c634 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e019      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	2b00      	cmp	r3, #0
 800c602:	f47f af41 	bne.w	800c488 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 f814 	bl	800c634 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c62a:	2300      	movs	r3, #0
  }
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3720      	adds	r7, #32
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f042 0208 	orr.w	r2, r2, #8
 800c652:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f042 0210 	orr.w	r2, r2, #16
 800c662:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0201 	bic.w	r2, r2, #1
 800c672:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6919      	ldr	r1, [r3, #16]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	4b3c      	ldr	r3, [pc, #240]	; (800c770 <SPI_CloseTransfer+0x13c>)
 800c680:	400b      	ands	r3, r1
 800c682:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	689a      	ldr	r2, [r3, #8]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c692:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d014      	beq.n	800c6ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00f      	beq.n	800c6ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	699a      	ldr	r2, [r3, #24]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f042 0220 	orr.w	r2, r2, #32
 800c6c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d014      	beq.n	800c700 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00f      	beq.n	800c700 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6e6:	f043 0204 	orr.w	r2, r3, #4
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	699a      	ldr	r2, [r3, #24]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00f      	beq.n	800c72a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c710:	f043 0201 	orr.w	r2, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	699a      	ldr	r2, [r3, #24]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c728:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00f      	beq.n	800c754 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c73a:	f043 0208 	orr.w	r2, r3, #8
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	699a      	ldr	r2, [r3, #24]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c752:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c764:	bf00      	nop
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	fffffc90 	.word	0xfffffc90

0800c774 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c780:	095b      	lsrs	r3, r3, #5
 800c782:	3301      	adds	r3, #1
 800c784:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	3301      	adds	r3, #1
 800c78c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	3307      	adds	r3, #7
 800c792:	08db      	lsrs	r3, r3, #3
 800c794:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e049      	b.n	800c850 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d106      	bne.n	800c7d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7f5 fd1d 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f000 ff85 	bl	800d6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2201      	movs	r2, #1
 800c802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d001      	beq.n	800c870 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e04c      	b.n	800c90a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2202      	movs	r2, #2
 800c874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a26      	ldr	r2, [pc, #152]	; (800c918 <HAL_TIM_Base_Start+0xc0>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d022      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c88a:	d01d      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a22      	ldr	r2, [pc, #136]	; (800c91c <HAL_TIM_Base_Start+0xc4>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d018      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a21      	ldr	r2, [pc, #132]	; (800c920 <HAL_TIM_Base_Start+0xc8>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d013      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a1f      	ldr	r2, [pc, #124]	; (800c924 <HAL_TIM_Base_Start+0xcc>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d00e      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a1e      	ldr	r2, [pc, #120]	; (800c928 <HAL_TIM_Base_Start+0xd0>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d009      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a1c      	ldr	r2, [pc, #112]	; (800c92c <HAL_TIM_Base_Start+0xd4>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d004      	beq.n	800c8c8 <HAL_TIM_Base_Start+0x70>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a1b      	ldr	r2, [pc, #108]	; (800c930 <HAL_TIM_Base_Start+0xd8>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d115      	bne.n	800c8f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	689a      	ldr	r2, [r3, #8]
 800c8ce:	4b19      	ldr	r3, [pc, #100]	; (800c934 <HAL_TIM_Base_Start+0xdc>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b06      	cmp	r3, #6
 800c8d8:	d015      	beq.n	800c906 <HAL_TIM_Base_Start+0xae>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e0:	d011      	beq.n	800c906 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f042 0201 	orr.w	r2, r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8f2:	e008      	b.n	800c906 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f042 0201 	orr.w	r2, r2, #1
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	e000      	b.n	800c908 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	40010000 	.word	0x40010000
 800c91c:	40000400 	.word	0x40000400
 800c920:	40000800 	.word	0x40000800
 800c924:	40000c00 	.word	0x40000c00
 800c928:	40010400 	.word	0x40010400
 800c92c:	40001800 	.word	0x40001800
 800c930:	40014000 	.word	0x40014000
 800c934:	00010007 	.word	0x00010007

0800c938 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d109      	bne.n	800c960 <HAL_TIM_OC_Start_IT+0x28>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b01      	cmp	r3, #1
 800c956:	bf14      	ite	ne
 800c958:	2301      	movne	r3, #1
 800c95a:	2300      	moveq	r3, #0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	e03c      	b.n	800c9da <HAL_TIM_OC_Start_IT+0xa2>
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	2b04      	cmp	r3, #4
 800c964:	d109      	bne.n	800c97a <HAL_TIM_OC_Start_IT+0x42>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b01      	cmp	r3, #1
 800c970:	bf14      	ite	ne
 800c972:	2301      	movne	r3, #1
 800c974:	2300      	moveq	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	e02f      	b.n	800c9da <HAL_TIM_OC_Start_IT+0xa2>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b08      	cmp	r3, #8
 800c97e:	d109      	bne.n	800c994 <HAL_TIM_OC_Start_IT+0x5c>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b01      	cmp	r3, #1
 800c98a:	bf14      	ite	ne
 800c98c:	2301      	movne	r3, #1
 800c98e:	2300      	moveq	r3, #0
 800c990:	b2db      	uxtb	r3, r3
 800c992:	e022      	b.n	800c9da <HAL_TIM_OC_Start_IT+0xa2>
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	2b0c      	cmp	r3, #12
 800c998:	d109      	bne.n	800c9ae <HAL_TIM_OC_Start_IT+0x76>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	bf14      	ite	ne
 800c9a6:	2301      	movne	r3, #1
 800c9a8:	2300      	moveq	r3, #0
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	e015      	b.n	800c9da <HAL_TIM_OC_Start_IT+0xa2>
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b10      	cmp	r3, #16
 800c9b2:	d109      	bne.n	800c9c8 <HAL_TIM_OC_Start_IT+0x90>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	bf14      	ite	ne
 800c9c0:	2301      	movne	r3, #1
 800c9c2:	2300      	moveq	r3, #0
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	e008      	b.n	800c9da <HAL_TIM_OC_Start_IT+0xa2>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	bf14      	ite	ne
 800c9d4:	2301      	movne	r3, #1
 800c9d6:	2300      	moveq	r3, #0
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e0ec      	b.n	800cbbc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d104      	bne.n	800c9f2 <HAL_TIM_OC_Start_IT+0xba>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9f0:	e023      	b.n	800ca3a <HAL_TIM_OC_Start_IT+0x102>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d104      	bne.n	800ca02 <HAL_TIM_OC_Start_IT+0xca>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca00:	e01b      	b.n	800ca3a <HAL_TIM_OC_Start_IT+0x102>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b08      	cmp	r3, #8
 800ca06:	d104      	bne.n	800ca12 <HAL_TIM_OC_Start_IT+0xda>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca10:	e013      	b.n	800ca3a <HAL_TIM_OC_Start_IT+0x102>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b0c      	cmp	r3, #12
 800ca16:	d104      	bne.n	800ca22 <HAL_TIM_OC_Start_IT+0xea>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca20:	e00b      	b.n	800ca3a <HAL_TIM_OC_Start_IT+0x102>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b10      	cmp	r3, #16
 800ca26:	d104      	bne.n	800ca32 <HAL_TIM_OC_Start_IT+0xfa>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca30:	e003      	b.n	800ca3a <HAL_TIM_OC_Start_IT+0x102>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2202      	movs	r2, #2
 800ca36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b0c      	cmp	r3, #12
 800ca3e:	d841      	bhi.n	800cac4 <HAL_TIM_OC_Start_IT+0x18c>
 800ca40:	a201      	add	r2, pc, #4	; (adr r2, 800ca48 <HAL_TIM_OC_Start_IT+0x110>)
 800ca42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca46:	bf00      	nop
 800ca48:	0800ca7d 	.word	0x0800ca7d
 800ca4c:	0800cac5 	.word	0x0800cac5
 800ca50:	0800cac5 	.word	0x0800cac5
 800ca54:	0800cac5 	.word	0x0800cac5
 800ca58:	0800ca8f 	.word	0x0800ca8f
 800ca5c:	0800cac5 	.word	0x0800cac5
 800ca60:	0800cac5 	.word	0x0800cac5
 800ca64:	0800cac5 	.word	0x0800cac5
 800ca68:	0800caa1 	.word	0x0800caa1
 800ca6c:	0800cac5 	.word	0x0800cac5
 800ca70:	0800cac5 	.word	0x0800cac5
 800ca74:	0800cac5 	.word	0x0800cac5
 800ca78:	0800cab3 	.word	0x0800cab3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68da      	ldr	r2, [r3, #12]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f042 0202 	orr.w	r2, r2, #2
 800ca8a:	60da      	str	r2, [r3, #12]
      break;
 800ca8c:	e01d      	b.n	800caca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68da      	ldr	r2, [r3, #12]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f042 0204 	orr.w	r2, r2, #4
 800ca9c:	60da      	str	r2, [r3, #12]
      break;
 800ca9e:	e014      	b.n	800caca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68da      	ldr	r2, [r3, #12]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f042 0208 	orr.w	r2, r2, #8
 800caae:	60da      	str	r2, [r3, #12]
      break;
 800cab0:	e00b      	b.n	800caca <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f042 0210 	orr.w	r2, r2, #16
 800cac0:	60da      	str	r2, [r3, #12]
      break;
 800cac2:	e002      	b.n	800caca <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
      break;
 800cac8:	bf00      	nop
  }

  if (status == HAL_OK)
 800caca:	7bfb      	ldrb	r3, [r7, #15]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d174      	bne.n	800cbba <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2201      	movs	r2, #1
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 fa27 	bl	800df2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a38      	ldr	r2, [pc, #224]	; (800cbc4 <HAL_TIM_OC_Start_IT+0x28c>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d013      	beq.n	800cb10 <HAL_TIM_OC_Start_IT+0x1d8>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a36      	ldr	r2, [pc, #216]	; (800cbc8 <HAL_TIM_OC_Start_IT+0x290>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d00e      	beq.n	800cb10 <HAL_TIM_OC_Start_IT+0x1d8>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a35      	ldr	r2, [pc, #212]	; (800cbcc <HAL_TIM_OC_Start_IT+0x294>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d009      	beq.n	800cb10 <HAL_TIM_OC_Start_IT+0x1d8>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a33      	ldr	r2, [pc, #204]	; (800cbd0 <HAL_TIM_OC_Start_IT+0x298>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d004      	beq.n	800cb10 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a32      	ldr	r2, [pc, #200]	; (800cbd4 <HAL_TIM_OC_Start_IT+0x29c>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d101      	bne.n	800cb14 <HAL_TIM_OC_Start_IT+0x1dc>
 800cb10:	2301      	movs	r3, #1
 800cb12:	e000      	b.n	800cb16 <HAL_TIM_OC_Start_IT+0x1de>
 800cb14:	2300      	movs	r3, #0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a25      	ldr	r2, [pc, #148]	; (800cbc4 <HAL_TIM_OC_Start_IT+0x28c>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d022      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb3c:	d01d      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a25      	ldr	r2, [pc, #148]	; (800cbd8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d018      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a23      	ldr	r2, [pc, #140]	; (800cbdc <HAL_TIM_OC_Start_IT+0x2a4>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d013      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a22      	ldr	r2, [pc, #136]	; (800cbe0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d00e      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a19      	ldr	r2, [pc, #100]	; (800cbc8 <HAL_TIM_OC_Start_IT+0x290>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d009      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a1e      	ldr	r2, [pc, #120]	; (800cbe4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d004      	beq.n	800cb7a <HAL_TIM_OC_Start_IT+0x242>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a15      	ldr	r2, [pc, #84]	; (800cbcc <HAL_TIM_OC_Start_IT+0x294>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d115      	bne.n	800cba6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	4b19      	ldr	r3, [pc, #100]	; (800cbe8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cb82:	4013      	ands	r3, r2
 800cb84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b06      	cmp	r3, #6
 800cb8a:	d015      	beq.n	800cbb8 <HAL_TIM_OC_Start_IT+0x280>
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb92:	d011      	beq.n	800cbb8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cba4:	e008      	b.n	800cbb8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f042 0201 	orr.w	r2, r2, #1
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	e000      	b.n	800cbba <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	40010000 	.word	0x40010000
 800cbc8:	40010400 	.word	0x40010400
 800cbcc:	40014000 	.word	0x40014000
 800cbd0:	40014400 	.word	0x40014400
 800cbd4:	40014800 	.word	0x40014800
 800cbd8:	40000400 	.word	0x40000400
 800cbdc:	40000800 	.word	0x40000800
 800cbe0:	40000c00 	.word	0x40000c00
 800cbe4:	40001800 	.word	0x40001800
 800cbe8:	00010007 	.word	0x00010007

0800cbec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	2b0c      	cmp	r3, #12
 800cbfe:	d841      	bhi.n	800cc84 <HAL_TIM_OC_Stop_IT+0x98>
 800cc00:	a201      	add	r2, pc, #4	; (adr r2, 800cc08 <HAL_TIM_OC_Stop_IT+0x1c>)
 800cc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc06:	bf00      	nop
 800cc08:	0800cc3d 	.word	0x0800cc3d
 800cc0c:	0800cc85 	.word	0x0800cc85
 800cc10:	0800cc85 	.word	0x0800cc85
 800cc14:	0800cc85 	.word	0x0800cc85
 800cc18:	0800cc4f 	.word	0x0800cc4f
 800cc1c:	0800cc85 	.word	0x0800cc85
 800cc20:	0800cc85 	.word	0x0800cc85
 800cc24:	0800cc85 	.word	0x0800cc85
 800cc28:	0800cc61 	.word	0x0800cc61
 800cc2c:	0800cc85 	.word	0x0800cc85
 800cc30:	0800cc85 	.word	0x0800cc85
 800cc34:	0800cc85 	.word	0x0800cc85
 800cc38:	0800cc73 	.word	0x0800cc73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f022 0202 	bic.w	r2, r2, #2
 800cc4a:	60da      	str	r2, [r3, #12]
      break;
 800cc4c:	e01d      	b.n	800cc8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f022 0204 	bic.w	r2, r2, #4
 800cc5c:	60da      	str	r2, [r3, #12]
      break;
 800cc5e:	e014      	b.n	800cc8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f022 0208 	bic.w	r2, r2, #8
 800cc6e:	60da      	str	r2, [r3, #12]
      break;
 800cc70:	e00b      	b.n	800cc8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68da      	ldr	r2, [r3, #12]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f022 0210 	bic.w	r2, r2, #16
 800cc80:	60da      	str	r2, [r3, #12]
      break;
 800cc82:	e002      	b.n	800cc8a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	73fb      	strb	r3, [r7, #15]
      break;
 800cc88:	bf00      	nop
  }

  if (status == HAL_OK)
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f040 8081 	bne.w	800cd94 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2200      	movs	r2, #0
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f001 f946 	bl	800df2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a3e      	ldr	r2, [pc, #248]	; (800cda0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d013      	beq.n	800ccd2 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a3d      	ldr	r2, [pc, #244]	; (800cda4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d00e      	beq.n	800ccd2 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a3b      	ldr	r2, [pc, #236]	; (800cda8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d009      	beq.n	800ccd2 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a3a      	ldr	r2, [pc, #232]	; (800cdac <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d004      	beq.n	800ccd2 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a38      	ldr	r2, [pc, #224]	; (800cdb0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d101      	bne.n	800ccd6 <HAL_TIM_OC_Stop_IT+0xea>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e000      	b.n	800ccd8 <HAL_TIM_OC_Stop_IT+0xec>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d017      	beq.n	800cd0c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6a1a      	ldr	r2, [r3, #32]
 800cce2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cce6:	4013      	ands	r3, r2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10f      	bne.n	800cd0c <HAL_TIM_OC_Stop_IT+0x120>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6a1a      	ldr	r2, [r3, #32]
 800ccf2:	f240 4344 	movw	r3, #1092	; 0x444
 800ccf6:	4013      	ands	r3, r2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d107      	bne.n	800cd0c <HAL_TIM_OC_Stop_IT+0x120>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6a1a      	ldr	r2, [r3, #32]
 800cd12:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd16:	4013      	ands	r3, r2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10f      	bne.n	800cd3c <HAL_TIM_OC_Stop_IT+0x150>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6a1a      	ldr	r2, [r3, #32]
 800cd22:	f240 4344 	movw	r3, #1092	; 0x444
 800cd26:	4013      	ands	r3, r2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d107      	bne.n	800cd3c <HAL_TIM_OC_Stop_IT+0x150>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f022 0201 	bic.w	r2, r2, #1
 800cd3a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d104      	bne.n	800cd4c <HAL_TIM_OC_Stop_IT+0x160>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd4a:	e023      	b.n	800cd94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	d104      	bne.n	800cd5c <HAL_TIM_OC_Stop_IT+0x170>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd5a:	e01b      	b.n	800cd94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b08      	cmp	r3, #8
 800cd60:	d104      	bne.n	800cd6c <HAL_TIM_OC_Stop_IT+0x180>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd6a:	e013      	b.n	800cd94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b0c      	cmp	r3, #12
 800cd70:	d104      	bne.n	800cd7c <HAL_TIM_OC_Stop_IT+0x190>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2201      	movs	r2, #1
 800cd76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd7a:	e00b      	b.n	800cd94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b10      	cmp	r3, #16
 800cd80:	d104      	bne.n	800cd8c <HAL_TIM_OC_Stop_IT+0x1a0>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd8a:	e003      	b.n	800cd94 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	40010000 	.word	0x40010000
 800cda4:	40010400 	.word	0x40010400
 800cda8:	40014000 	.word	0x40014000
 800cdac:	40014400 	.word	0x40014400
 800cdb0:	40014800 	.word	0x40014800

0800cdb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e049      	b.n	800ce5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d106      	bne.n	800cde0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7f5 f9d8 	bl	8002190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4610      	mov	r0, r2
 800cdf4:	f000 fc80 	bl	800d6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d109      	bne.n	800ce88 <HAL_TIM_PWM_Start+0x24>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	bf14      	ite	ne
 800ce80:	2301      	movne	r3, #1
 800ce82:	2300      	moveq	r3, #0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	e03c      	b.n	800cf02 <HAL_TIM_PWM_Start+0x9e>
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	d109      	bne.n	800cea2 <HAL_TIM_PWM_Start+0x3e>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	bf14      	ite	ne
 800ce9a:	2301      	movne	r3, #1
 800ce9c:	2300      	moveq	r3, #0
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	e02f      	b.n	800cf02 <HAL_TIM_PWM_Start+0x9e>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	d109      	bne.n	800cebc <HAL_TIM_PWM_Start+0x58>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	bf14      	ite	ne
 800ceb4:	2301      	movne	r3, #1
 800ceb6:	2300      	moveq	r3, #0
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	e022      	b.n	800cf02 <HAL_TIM_PWM_Start+0x9e>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b0c      	cmp	r3, #12
 800cec0:	d109      	bne.n	800ced6 <HAL_TIM_PWM_Start+0x72>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	bf14      	ite	ne
 800cece:	2301      	movne	r3, #1
 800ced0:	2300      	moveq	r3, #0
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	e015      	b.n	800cf02 <HAL_TIM_PWM_Start+0x9e>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b10      	cmp	r3, #16
 800ceda:	d109      	bne.n	800cef0 <HAL_TIM_PWM_Start+0x8c>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	bf14      	ite	ne
 800cee8:	2301      	movne	r3, #1
 800ceea:	2300      	moveq	r3, #0
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	e008      	b.n	800cf02 <HAL_TIM_PWM_Start+0x9e>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	bf14      	ite	ne
 800cefc:	2301      	movne	r3, #1
 800cefe:	2300      	moveq	r3, #0
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e0a1      	b.n	800d04e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d104      	bne.n	800cf1a <HAL_TIM_PWM_Start+0xb6>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2202      	movs	r2, #2
 800cf14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf18:	e023      	b.n	800cf62 <HAL_TIM_PWM_Start+0xfe>
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b04      	cmp	r3, #4
 800cf1e:	d104      	bne.n	800cf2a <HAL_TIM_PWM_Start+0xc6>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2202      	movs	r2, #2
 800cf24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf28:	e01b      	b.n	800cf62 <HAL_TIM_PWM_Start+0xfe>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b08      	cmp	r3, #8
 800cf2e:	d104      	bne.n	800cf3a <HAL_TIM_PWM_Start+0xd6>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2202      	movs	r2, #2
 800cf34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf38:	e013      	b.n	800cf62 <HAL_TIM_PWM_Start+0xfe>
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b0c      	cmp	r3, #12
 800cf3e:	d104      	bne.n	800cf4a <HAL_TIM_PWM_Start+0xe6>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2202      	movs	r2, #2
 800cf44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf48:	e00b      	b.n	800cf62 <HAL_TIM_PWM_Start+0xfe>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b10      	cmp	r3, #16
 800cf4e:	d104      	bne.n	800cf5a <HAL_TIM_PWM_Start+0xf6>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf58:	e003      	b.n	800cf62 <HAL_TIM_PWM_Start+0xfe>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2201      	movs	r2, #1
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 ffde 	bl	800df2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a38      	ldr	r2, [pc, #224]	; (800d058 <HAL_TIM_PWM_Start+0x1f4>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d013      	beq.n	800cfa2 <HAL_TIM_PWM_Start+0x13e>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a37      	ldr	r2, [pc, #220]	; (800d05c <HAL_TIM_PWM_Start+0x1f8>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d00e      	beq.n	800cfa2 <HAL_TIM_PWM_Start+0x13e>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a35      	ldr	r2, [pc, #212]	; (800d060 <HAL_TIM_PWM_Start+0x1fc>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d009      	beq.n	800cfa2 <HAL_TIM_PWM_Start+0x13e>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a34      	ldr	r2, [pc, #208]	; (800d064 <HAL_TIM_PWM_Start+0x200>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d004      	beq.n	800cfa2 <HAL_TIM_PWM_Start+0x13e>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a32      	ldr	r2, [pc, #200]	; (800d068 <HAL_TIM_PWM_Start+0x204>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d101      	bne.n	800cfa6 <HAL_TIM_PWM_Start+0x142>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <HAL_TIM_PWM_Start+0x144>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d007      	beq.n	800cfbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a25      	ldr	r2, [pc, #148]	; (800d058 <HAL_TIM_PWM_Start+0x1f4>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d022      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfce:	d01d      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a25      	ldr	r2, [pc, #148]	; (800d06c <HAL_TIM_PWM_Start+0x208>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d018      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a24      	ldr	r2, [pc, #144]	; (800d070 <HAL_TIM_PWM_Start+0x20c>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d013      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a22      	ldr	r2, [pc, #136]	; (800d074 <HAL_TIM_PWM_Start+0x210>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d00e      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a1a      	ldr	r2, [pc, #104]	; (800d05c <HAL_TIM_PWM_Start+0x1f8>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d009      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a1e      	ldr	r2, [pc, #120]	; (800d078 <HAL_TIM_PWM_Start+0x214>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d004      	beq.n	800d00c <HAL_TIM_PWM_Start+0x1a8>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a16      	ldr	r2, [pc, #88]	; (800d060 <HAL_TIM_PWM_Start+0x1fc>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d115      	bne.n	800d038 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	689a      	ldr	r2, [r3, #8]
 800d012:	4b1a      	ldr	r3, [pc, #104]	; (800d07c <HAL_TIM_PWM_Start+0x218>)
 800d014:	4013      	ands	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b06      	cmp	r3, #6
 800d01c:	d015      	beq.n	800d04a <HAL_TIM_PWM_Start+0x1e6>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d024:	d011      	beq.n	800d04a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f042 0201 	orr.w	r2, r2, #1
 800d034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d036:	e008      	b.n	800d04a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f042 0201 	orr.w	r2, r2, #1
 800d046:	601a      	str	r2, [r3, #0]
 800d048:	e000      	b.n	800d04c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d04a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	40010000 	.word	0x40010000
 800d05c:	40010400 	.word	0x40010400
 800d060:	40014000 	.word	0x40014000
 800d064:	40014400 	.word	0x40014400
 800d068:	40014800 	.word	0x40014800
 800d06c:	40000400 	.word	0x40000400
 800d070:	40000800 	.word	0x40000800
 800d074:	40000c00 	.word	0x40000c00
 800d078:	40001800 	.word	0x40001800
 800d07c:	00010007 	.word	0x00010007

0800d080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f003 0302 	and.w	r3, r3, #2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d020      	beq.n	800d0e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d01b      	beq.n	800d0e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f06f 0202 	mvn.w	r2, #2
 800d0b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	f003 0303 	and.w	r3, r3, #3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 faf6 	bl	800d6bc <HAL_TIM_IC_CaptureCallback>
 800d0d0:	e005      	b.n	800d0de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7f3 fd5e 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 faf9 	bl	800d6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f003 0304 	and.w	r3, r3, #4
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d020      	beq.n	800d130 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01b      	beq.n	800d130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f06f 0204 	mvn.w	r2, #4
 800d100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2202      	movs	r2, #2
 800d106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fad0 	bl	800d6bc <HAL_TIM_IC_CaptureCallback>
 800d11c:	e005      	b.n	800d12a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7f3 fd38 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fad3 	bl	800d6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f003 0308 	and.w	r3, r3, #8
 800d136:	2b00      	cmp	r3, #0
 800d138:	d020      	beq.n	800d17c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f003 0308 	and.w	r3, r3, #8
 800d140:	2b00      	cmp	r3, #0
 800d142:	d01b      	beq.n	800d17c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f06f 0208 	mvn.w	r2, #8
 800d14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2204      	movs	r2, #4
 800d152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	69db      	ldr	r3, [r3, #28]
 800d15a:	f003 0303 	and.w	r3, r3, #3
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 faaa 	bl	800d6bc <HAL_TIM_IC_CaptureCallback>
 800d168:	e005      	b.n	800d176 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7f3 fd12 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 faad 	bl	800d6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	f003 0310 	and.w	r3, r3, #16
 800d182:	2b00      	cmp	r3, #0
 800d184:	d020      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f003 0310 	and.w	r3, r3, #16
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01b      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f06f 0210 	mvn.w	r2, #16
 800d198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2208      	movs	r2, #8
 800d19e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	69db      	ldr	r3, [r3, #28]
 800d1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fa84 	bl	800d6bc <HAL_TIM_IC_CaptureCallback>
 800d1b4:	e005      	b.n	800d1c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7f3 fcec 	bl	8000b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fa87 	bl	800d6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f003 0301 	and.w	r3, r3, #1
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00c      	beq.n	800d1ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d007      	beq.n	800d1ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f06f 0201 	mvn.w	r2, #1
 800d1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fa5e 	bl	800d6a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d104      	bne.n	800d200 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00c      	beq.n	800d21a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d206:	2b00      	cmp	r3, #0
 800d208:	d007      	beq.n	800d21a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 ffc5 	bl	800e1a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00c      	beq.n	800d23e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 ffbd 	bl	800e1b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00c      	beq.n	800d262 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fa41 	bl	800d6e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	f003 0320 	and.w	r3, r3, #32
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00c      	beq.n	800d286 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f003 0320 	and.w	r3, r3, #32
 800d272:	2b00      	cmp	r3, #0
 800d274:	d007      	beq.n	800d286 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f06f 0220 	mvn.w	r2, #32
 800d27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 ff85 	bl	800e190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d101      	bne.n	800d2ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e0ff      	b.n	800d4ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b14      	cmp	r3, #20
 800d2ba:	f200 80f0 	bhi.w	800d49e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d2be:	a201      	add	r2, pc, #4	; (adr r2, 800d2c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c4:	0800d319 	.word	0x0800d319
 800d2c8:	0800d49f 	.word	0x0800d49f
 800d2cc:	0800d49f 	.word	0x0800d49f
 800d2d0:	0800d49f 	.word	0x0800d49f
 800d2d4:	0800d359 	.word	0x0800d359
 800d2d8:	0800d49f 	.word	0x0800d49f
 800d2dc:	0800d49f 	.word	0x0800d49f
 800d2e0:	0800d49f 	.word	0x0800d49f
 800d2e4:	0800d39b 	.word	0x0800d39b
 800d2e8:	0800d49f 	.word	0x0800d49f
 800d2ec:	0800d49f 	.word	0x0800d49f
 800d2f0:	0800d49f 	.word	0x0800d49f
 800d2f4:	0800d3db 	.word	0x0800d3db
 800d2f8:	0800d49f 	.word	0x0800d49f
 800d2fc:	0800d49f 	.word	0x0800d49f
 800d300:	0800d49f 	.word	0x0800d49f
 800d304:	0800d41d 	.word	0x0800d41d
 800d308:	0800d49f 	.word	0x0800d49f
 800d30c:	0800d49f 	.word	0x0800d49f
 800d310:	0800d49f 	.word	0x0800d49f
 800d314:	0800d45d 	.word	0x0800d45d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68b9      	ldr	r1, [r7, #8]
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fa90 	bl	800d844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	699a      	ldr	r2, [r3, #24]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f042 0208 	orr.w	r2, r2, #8
 800d332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	699a      	ldr	r2, [r3, #24]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f022 0204 	bic.w	r2, r2, #4
 800d342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6999      	ldr	r1, [r3, #24]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	691a      	ldr	r2, [r3, #16]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	430a      	orrs	r2, r1
 800d354:	619a      	str	r2, [r3, #24]
      break;
 800d356:	e0a5      	b.n	800d4a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	68b9      	ldr	r1, [r7, #8]
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 fb00 	bl	800d964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	699a      	ldr	r2, [r3, #24]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	699a      	ldr	r2, [r3, #24]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6999      	ldr	r1, [r3, #24]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	021a      	lsls	r2, r3, #8
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	430a      	orrs	r2, r1
 800d396:	619a      	str	r2, [r3, #24]
      break;
 800d398:	e084      	b.n	800d4a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 fb69 	bl	800da78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	69da      	ldr	r2, [r3, #28]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f042 0208 	orr.w	r2, r2, #8
 800d3b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	69da      	ldr	r2, [r3, #28]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f022 0204 	bic.w	r2, r2, #4
 800d3c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	69d9      	ldr	r1, [r3, #28]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	691a      	ldr	r2, [r3, #16]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	61da      	str	r2, [r3, #28]
      break;
 800d3d8:	e064      	b.n	800d4a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68b9      	ldr	r1, [r7, #8]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 fbd1 	bl	800db88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	69da      	ldr	r2, [r3, #28]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	69da      	ldr	r2, [r3, #28]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	69d9      	ldr	r1, [r3, #28]
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	021a      	lsls	r2, r3, #8
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	61da      	str	r2, [r3, #28]
      break;
 800d41a:	e043      	b.n	800d4a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68b9      	ldr	r1, [r7, #8]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fc1a 	bl	800dc5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f042 0208 	orr.w	r2, r2, #8
 800d436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f022 0204 	bic.w	r2, r2, #4
 800d446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	430a      	orrs	r2, r1
 800d458:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d45a:	e023      	b.n	800d4a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68b9      	ldr	r1, [r7, #8]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fc5e 	bl	800dd24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	021a      	lsls	r2, r3, #8
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	430a      	orrs	r2, r1
 800d49a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d49c:	e002      	b.n	800d4a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	75fb      	strb	r3, [r7, #23]
      break;
 800d4a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop

0800d4b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d101      	bne.n	800d4d4 <HAL_TIM_ConfigClockSource+0x1c>
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	e0dc      	b.n	800d68e <HAL_TIM_ConfigClockSource+0x1d6>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	4b6a      	ldr	r3, [pc, #424]	; (800d698 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a64      	ldr	r2, [pc, #400]	; (800d69c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	f000 80a9 	beq.w	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d510:	4a62      	ldr	r2, [pc, #392]	; (800d69c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d512:	4293      	cmp	r3, r2
 800d514:	f200 80ae 	bhi.w	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d518:	4a61      	ldr	r2, [pc, #388]	; (800d6a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	f000 80a1 	beq.w	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d520:	4a5f      	ldr	r2, [pc, #380]	; (800d6a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d522:	4293      	cmp	r3, r2
 800d524:	f200 80a6 	bhi.w	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d528:	4a5e      	ldr	r2, [pc, #376]	; (800d6a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	f000 8099 	beq.w	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d530:	4a5c      	ldr	r2, [pc, #368]	; (800d6a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d532:	4293      	cmp	r3, r2
 800d534:	f200 809e 	bhi.w	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d538:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d53c:	f000 8091 	beq.w	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d540:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d544:	f200 8096 	bhi.w	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d54c:	f000 8089 	beq.w	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d554:	f200 808e 	bhi.w	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d55c:	d03e      	beq.n	800d5dc <HAL_TIM_ConfigClockSource+0x124>
 800d55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d562:	f200 8087 	bhi.w	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d56a:	f000 8086 	beq.w	800d67a <HAL_TIM_ConfigClockSource+0x1c2>
 800d56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d572:	d87f      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d574:	2b70      	cmp	r3, #112	; 0x70
 800d576:	d01a      	beq.n	800d5ae <HAL_TIM_ConfigClockSource+0xf6>
 800d578:	2b70      	cmp	r3, #112	; 0x70
 800d57a:	d87b      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d57c:	2b60      	cmp	r3, #96	; 0x60
 800d57e:	d050      	beq.n	800d622 <HAL_TIM_ConfigClockSource+0x16a>
 800d580:	2b60      	cmp	r3, #96	; 0x60
 800d582:	d877      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d584:	2b50      	cmp	r3, #80	; 0x50
 800d586:	d03c      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x14a>
 800d588:	2b50      	cmp	r3, #80	; 0x50
 800d58a:	d873      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d58c:	2b40      	cmp	r3, #64	; 0x40
 800d58e:	d058      	beq.n	800d642 <HAL_TIM_ConfigClockSource+0x18a>
 800d590:	2b40      	cmp	r3, #64	; 0x40
 800d592:	d86f      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d594:	2b30      	cmp	r3, #48	; 0x30
 800d596:	d064      	beq.n	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d598:	2b30      	cmp	r3, #48	; 0x30
 800d59a:	d86b      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	d060      	beq.n	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	d867      	bhi.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d05c      	beq.n	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5a8:	2b10      	cmp	r3, #16
 800d5aa:	d05a      	beq.n	800d662 <HAL_TIM_ConfigClockSource+0x1aa>
 800d5ac:	e062      	b.n	800d674 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d5be:	f000 fc95 	bl	800deec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d5d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	609a      	str	r2, [r3, #8]
      break;
 800d5da:	e04f      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d5ec:	f000 fc7e 	bl	800deec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	689a      	ldr	r2, [r3, #8]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5fe:	609a      	str	r2, [r3, #8]
      break;
 800d600:	e03c      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d60e:	461a      	mov	r2, r3
 800d610:	f000 fbee 	bl	800ddf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2150      	movs	r1, #80	; 0x50
 800d61a:	4618      	mov	r0, r3
 800d61c:	f000 fc48 	bl	800deb0 <TIM_ITRx_SetConfig>
      break;
 800d620:	e02c      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d62e:	461a      	mov	r2, r3
 800d630:	f000 fc0d 	bl	800de4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2160      	movs	r1, #96	; 0x60
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 fc38 	bl	800deb0 <TIM_ITRx_SetConfig>
      break;
 800d640:	e01c      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d64e:	461a      	mov	r2, r3
 800d650:	f000 fbce 	bl	800ddf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2140      	movs	r1, #64	; 0x40
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 fc28 	bl	800deb0 <TIM_ITRx_SetConfig>
      break;
 800d660:	e00c      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4619      	mov	r1, r3
 800d66c:	4610      	mov	r0, r2
 800d66e:	f000 fc1f 	bl	800deb0 <TIM_ITRx_SetConfig>
      break;
 800d672:	e003      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	73fb      	strb	r3, [r7, #15]
      break;
 800d678:	e000      	b.n	800d67c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d67a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	ffceff88 	.word	0xffceff88
 800d69c:	00100040 	.word	0x00100040
 800d6a0:	00100030 	.word	0x00100030
 800d6a4:	00100020 	.word	0x00100020

0800d6a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a46      	ldr	r2, [pc, #280]	; (800d824 <TIM_Base_SetConfig+0x12c>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d013      	beq.n	800d738 <TIM_Base_SetConfig+0x40>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d716:	d00f      	beq.n	800d738 <TIM_Base_SetConfig+0x40>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4a43      	ldr	r2, [pc, #268]	; (800d828 <TIM_Base_SetConfig+0x130>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d00b      	beq.n	800d738 <TIM_Base_SetConfig+0x40>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	4a42      	ldr	r2, [pc, #264]	; (800d82c <TIM_Base_SetConfig+0x134>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d007      	beq.n	800d738 <TIM_Base_SetConfig+0x40>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a41      	ldr	r2, [pc, #260]	; (800d830 <TIM_Base_SetConfig+0x138>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d003      	beq.n	800d738 <TIM_Base_SetConfig+0x40>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a40      	ldr	r2, [pc, #256]	; (800d834 <TIM_Base_SetConfig+0x13c>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d108      	bne.n	800d74a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d73e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	4313      	orrs	r3, r2
 800d748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a35      	ldr	r2, [pc, #212]	; (800d824 <TIM_Base_SetConfig+0x12c>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d01f      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d758:	d01b      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a32      	ldr	r2, [pc, #200]	; (800d828 <TIM_Base_SetConfig+0x130>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d017      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a31      	ldr	r2, [pc, #196]	; (800d82c <TIM_Base_SetConfig+0x134>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d013      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a30      	ldr	r2, [pc, #192]	; (800d830 <TIM_Base_SetConfig+0x138>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d00f      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a2f      	ldr	r2, [pc, #188]	; (800d834 <TIM_Base_SetConfig+0x13c>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d00b      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4a2e      	ldr	r2, [pc, #184]	; (800d838 <TIM_Base_SetConfig+0x140>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d007      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a2d      	ldr	r2, [pc, #180]	; (800d83c <TIM_Base_SetConfig+0x144>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d003      	beq.n	800d792 <TIM_Base_SetConfig+0x9a>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4a2c      	ldr	r2, [pc, #176]	; (800d840 <TIM_Base_SetConfig+0x148>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d108      	bne.n	800d7a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	689a      	ldr	r2, [r3, #8]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a16      	ldr	r2, [pc, #88]	; (800d824 <TIM_Base_SetConfig+0x12c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d00f      	beq.n	800d7f0 <TIM_Base_SetConfig+0xf8>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a18      	ldr	r2, [pc, #96]	; (800d834 <TIM_Base_SetConfig+0x13c>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d00b      	beq.n	800d7f0 <TIM_Base_SetConfig+0xf8>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a17      	ldr	r2, [pc, #92]	; (800d838 <TIM_Base_SetConfig+0x140>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d007      	beq.n	800d7f0 <TIM_Base_SetConfig+0xf8>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a16      	ldr	r2, [pc, #88]	; (800d83c <TIM_Base_SetConfig+0x144>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d003      	beq.n	800d7f0 <TIM_Base_SetConfig+0xf8>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a15      	ldr	r2, [pc, #84]	; (800d840 <TIM_Base_SetConfig+0x148>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d103      	bne.n	800d7f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	691a      	ldr	r2, [r3, #16]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	2b01      	cmp	r3, #1
 800d808:	d105      	bne.n	800d816 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	f023 0201 	bic.w	r2, r3, #1
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	611a      	str	r2, [r3, #16]
  }
}
 800d816:	bf00      	nop
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	40010000 	.word	0x40010000
 800d828:	40000400 	.word	0x40000400
 800d82c:	40000800 	.word	0x40000800
 800d830:	40000c00 	.word	0x40000c00
 800d834:	40010400 	.word	0x40010400
 800d838:	40014000 	.word	0x40014000
 800d83c:	40014400 	.word	0x40014400
 800d840:	40014800 	.word	0x40014800

0800d844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	f023 0201 	bic.w	r2, r3, #1
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	699b      	ldr	r3, [r3, #24]
 800d86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	4b37      	ldr	r3, [pc, #220]	; (800d94c <TIM_OC1_SetConfig+0x108>)
 800d870:	4013      	ands	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f023 0303 	bic.w	r3, r3, #3
 800d87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	4313      	orrs	r3, r2
 800d884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f023 0302 	bic.w	r3, r3, #2
 800d88c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	4313      	orrs	r3, r2
 800d896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4a2d      	ldr	r2, [pc, #180]	; (800d950 <TIM_OC1_SetConfig+0x10c>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d00f      	beq.n	800d8c0 <TIM_OC1_SetConfig+0x7c>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4a2c      	ldr	r2, [pc, #176]	; (800d954 <TIM_OC1_SetConfig+0x110>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d00b      	beq.n	800d8c0 <TIM_OC1_SetConfig+0x7c>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a2b      	ldr	r2, [pc, #172]	; (800d958 <TIM_OC1_SetConfig+0x114>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d007      	beq.n	800d8c0 <TIM_OC1_SetConfig+0x7c>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a2a      	ldr	r2, [pc, #168]	; (800d95c <TIM_OC1_SetConfig+0x118>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d003      	beq.n	800d8c0 <TIM_OC1_SetConfig+0x7c>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a29      	ldr	r2, [pc, #164]	; (800d960 <TIM_OC1_SetConfig+0x11c>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d10c      	bne.n	800d8da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f023 0308 	bic.w	r3, r3, #8
 800d8c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f023 0304 	bic.w	r3, r3, #4
 800d8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a1c      	ldr	r2, [pc, #112]	; (800d950 <TIM_OC1_SetConfig+0x10c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d00f      	beq.n	800d902 <TIM_OC1_SetConfig+0xbe>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a1b      	ldr	r2, [pc, #108]	; (800d954 <TIM_OC1_SetConfig+0x110>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d00b      	beq.n	800d902 <TIM_OC1_SetConfig+0xbe>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a1a      	ldr	r2, [pc, #104]	; (800d958 <TIM_OC1_SetConfig+0x114>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d007      	beq.n	800d902 <TIM_OC1_SetConfig+0xbe>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a19      	ldr	r2, [pc, #100]	; (800d95c <TIM_OC1_SetConfig+0x118>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d003      	beq.n	800d902 <TIM_OC1_SetConfig+0xbe>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4a18      	ldr	r2, [pc, #96]	; (800d960 <TIM_OC1_SetConfig+0x11c>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d111      	bne.n	800d926 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	4313      	orrs	r3, r2
 800d91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	4313      	orrs	r3, r2
 800d924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	621a      	str	r2, [r3, #32]
}
 800d940:	bf00      	nop
 800d942:	371c      	adds	r7, #28
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	fffeff8f 	.word	0xfffeff8f
 800d950:	40010000 	.word	0x40010000
 800d954:	40010400 	.word	0x40010400
 800d958:	40014000 	.word	0x40014000
 800d95c:	40014400 	.word	0x40014400
 800d960:	40014800 	.word	0x40014800

0800d964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d964:	b480      	push	{r7}
 800d966:	b087      	sub	sp, #28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	f023 0210 	bic.w	r2, r3, #16
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	4b34      	ldr	r3, [pc, #208]	; (800da60 <TIM_OC2_SetConfig+0xfc>)
 800d990:	4013      	ands	r3, r2
 800d992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d99a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	021b      	lsls	r3, r3, #8
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f023 0320 	bic.w	r3, r3, #32
 800d9ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	011b      	lsls	r3, r3, #4
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a29      	ldr	r2, [pc, #164]	; (800da64 <TIM_OC2_SetConfig+0x100>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d003      	beq.n	800d9cc <TIM_OC2_SetConfig+0x68>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4a28      	ldr	r2, [pc, #160]	; (800da68 <TIM_OC2_SetConfig+0x104>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d10d      	bne.n	800d9e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	011b      	lsls	r3, r3, #4
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a1e      	ldr	r2, [pc, #120]	; (800da64 <TIM_OC2_SetConfig+0x100>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d00f      	beq.n	800da10 <TIM_OC2_SetConfig+0xac>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a1d      	ldr	r2, [pc, #116]	; (800da68 <TIM_OC2_SetConfig+0x104>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d00b      	beq.n	800da10 <TIM_OC2_SetConfig+0xac>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a1c      	ldr	r2, [pc, #112]	; (800da6c <TIM_OC2_SetConfig+0x108>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d007      	beq.n	800da10 <TIM_OC2_SetConfig+0xac>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a1b      	ldr	r2, [pc, #108]	; (800da70 <TIM_OC2_SetConfig+0x10c>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d003      	beq.n	800da10 <TIM_OC2_SetConfig+0xac>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a1a      	ldr	r2, [pc, #104]	; (800da74 <TIM_OC2_SetConfig+0x110>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d113      	bne.n	800da38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4313      	orrs	r3, r2
 800da2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	693a      	ldr	r2, [r7, #16]
 800da34:	4313      	orrs	r3, r2
 800da36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	693a      	ldr	r2, [r7, #16]
 800da3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	621a      	str	r2, [r3, #32]
}
 800da52:	bf00      	nop
 800da54:	371c      	adds	r7, #28
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	feff8fff 	.word	0xfeff8fff
 800da64:	40010000 	.word	0x40010000
 800da68:	40010400 	.word	0x40010400
 800da6c:	40014000 	.word	0x40014000
 800da70:	40014400 	.word	0x40014400
 800da74:	40014800 	.word	0x40014800

0800da78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	4b33      	ldr	r3, [pc, #204]	; (800db70 <TIM_OC3_SetConfig+0xf8>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f023 0303 	bic.w	r3, r3, #3
 800daae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	021b      	lsls	r3, r3, #8
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	4313      	orrs	r3, r2
 800dacc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a28      	ldr	r2, [pc, #160]	; (800db74 <TIM_OC3_SetConfig+0xfc>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d003      	beq.n	800dade <TIM_OC3_SetConfig+0x66>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a27      	ldr	r2, [pc, #156]	; (800db78 <TIM_OC3_SetConfig+0x100>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d10d      	bne.n	800dafa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	021b      	lsls	r3, r3, #8
 800daec:	697a      	ldr	r2, [r7, #20]
 800daee:	4313      	orrs	r3, r2
 800daf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800daf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4a1d      	ldr	r2, [pc, #116]	; (800db74 <TIM_OC3_SetConfig+0xfc>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d00f      	beq.n	800db22 <TIM_OC3_SetConfig+0xaa>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a1c      	ldr	r2, [pc, #112]	; (800db78 <TIM_OC3_SetConfig+0x100>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d00b      	beq.n	800db22 <TIM_OC3_SetConfig+0xaa>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a1b      	ldr	r2, [pc, #108]	; (800db7c <TIM_OC3_SetConfig+0x104>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d007      	beq.n	800db22 <TIM_OC3_SetConfig+0xaa>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a1a      	ldr	r2, [pc, #104]	; (800db80 <TIM_OC3_SetConfig+0x108>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d003      	beq.n	800db22 <TIM_OC3_SetConfig+0xaa>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a19      	ldr	r2, [pc, #100]	; (800db84 <TIM_OC3_SetConfig+0x10c>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d113      	bne.n	800db4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	695b      	ldr	r3, [r3, #20]
 800db36:	011b      	lsls	r3, r3, #4
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	011b      	lsls	r3, r3, #4
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4313      	orrs	r3, r2
 800db48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	621a      	str	r2, [r3, #32]
}
 800db64:	bf00      	nop
 800db66:	371c      	adds	r7, #28
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	fffeff8f 	.word	0xfffeff8f
 800db74:	40010000 	.word	0x40010000
 800db78:	40010400 	.word	0x40010400
 800db7c:	40014000 	.word	0x40014000
 800db80:	40014400 	.word	0x40014400
 800db84:	40014800 	.word	0x40014800

0800db88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a1b      	ldr	r3, [r3, #32]
 800db96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	69db      	ldr	r3, [r3, #28]
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	4b24      	ldr	r3, [pc, #144]	; (800dc44 <TIM_OC4_SetConfig+0xbc>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	031b      	lsls	r3, r3, #12
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a19      	ldr	r2, [pc, #100]	; (800dc48 <TIM_OC4_SetConfig+0xc0>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d00f      	beq.n	800dc08 <TIM_OC4_SetConfig+0x80>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a18      	ldr	r2, [pc, #96]	; (800dc4c <TIM_OC4_SetConfig+0xc4>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d00b      	beq.n	800dc08 <TIM_OC4_SetConfig+0x80>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a17      	ldr	r2, [pc, #92]	; (800dc50 <TIM_OC4_SetConfig+0xc8>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d007      	beq.n	800dc08 <TIM_OC4_SetConfig+0x80>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4a16      	ldr	r2, [pc, #88]	; (800dc54 <TIM_OC4_SetConfig+0xcc>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d003      	beq.n	800dc08 <TIM_OC4_SetConfig+0x80>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a15      	ldr	r2, [pc, #84]	; (800dc58 <TIM_OC4_SetConfig+0xd0>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d109      	bne.n	800dc1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	019b      	lsls	r3, r3, #6
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	697a      	ldr	r2, [r7, #20]
 800dc20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	621a      	str	r2, [r3, #32]
}
 800dc36:	bf00      	nop
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	feff8fff 	.word	0xfeff8fff
 800dc48:	40010000 	.word	0x40010000
 800dc4c:	40010400 	.word	0x40010400
 800dc50:	40014000 	.word	0x40014000
 800dc54:	40014400 	.word	0x40014400
 800dc58:	40014800 	.word	0x40014800

0800dc5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b087      	sub	sp, #28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6a1b      	ldr	r3, [r3, #32]
 800dc70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	4b21      	ldr	r3, [pc, #132]	; (800dd0c <TIM_OC5_SetConfig+0xb0>)
 800dc88:	4013      	ands	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	041b      	lsls	r3, r3, #16
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a18      	ldr	r2, [pc, #96]	; (800dd10 <TIM_OC5_SetConfig+0xb4>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d00f      	beq.n	800dcd2 <TIM_OC5_SetConfig+0x76>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4a17      	ldr	r2, [pc, #92]	; (800dd14 <TIM_OC5_SetConfig+0xb8>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d00b      	beq.n	800dcd2 <TIM_OC5_SetConfig+0x76>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4a16      	ldr	r2, [pc, #88]	; (800dd18 <TIM_OC5_SetConfig+0xbc>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d007      	beq.n	800dcd2 <TIM_OC5_SetConfig+0x76>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a15      	ldr	r2, [pc, #84]	; (800dd1c <TIM_OC5_SetConfig+0xc0>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d003      	beq.n	800dcd2 <TIM_OC5_SetConfig+0x76>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4a14      	ldr	r2, [pc, #80]	; (800dd20 <TIM_OC5_SetConfig+0xc4>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d109      	bne.n	800dce6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	021b      	lsls	r3, r3, #8
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	685a      	ldr	r2, [r3, #4]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	621a      	str	r2, [r3, #32]
}
 800dd00:	bf00      	nop
 800dd02:	371c      	adds	r7, #28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	fffeff8f 	.word	0xfffeff8f
 800dd10:	40010000 	.word	0x40010000
 800dd14:	40010400 	.word	0x40010400
 800dd18:	40014000 	.word	0x40014000
 800dd1c:	40014400 	.word	0x40014400
 800dd20:	40014800 	.word	0x40014800

0800dd24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a1b      	ldr	r3, [r3, #32]
 800dd38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	4b22      	ldr	r3, [pc, #136]	; (800ddd8 <TIM_OC6_SetConfig+0xb4>)
 800dd50:	4013      	ands	r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	021b      	lsls	r3, r3, #8
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	051b      	lsls	r3, r3, #20
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a19      	ldr	r2, [pc, #100]	; (800dddc <TIM_OC6_SetConfig+0xb8>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d00f      	beq.n	800dd9c <TIM_OC6_SetConfig+0x78>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a18      	ldr	r2, [pc, #96]	; (800dde0 <TIM_OC6_SetConfig+0xbc>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d00b      	beq.n	800dd9c <TIM_OC6_SetConfig+0x78>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4a17      	ldr	r2, [pc, #92]	; (800dde4 <TIM_OC6_SetConfig+0xc0>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d007      	beq.n	800dd9c <TIM_OC6_SetConfig+0x78>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4a16      	ldr	r2, [pc, #88]	; (800dde8 <TIM_OC6_SetConfig+0xc4>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d003      	beq.n	800dd9c <TIM_OC6_SetConfig+0x78>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a15      	ldr	r2, [pc, #84]	; (800ddec <TIM_OC6_SetConfig+0xc8>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d109      	bne.n	800ddb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dda2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	029b      	lsls	r3, r3, #10
 800ddaa:	697a      	ldr	r2, [r7, #20]
 800ddac:	4313      	orrs	r3, r2
 800ddae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	693a      	ldr	r2, [r7, #16]
 800ddc8:	621a      	str	r2, [r3, #32]
}
 800ddca:	bf00      	nop
 800ddcc:	371c      	adds	r7, #28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	feff8fff 	.word	0xfeff8fff
 800dddc:	40010000 	.word	0x40010000
 800dde0:	40010400 	.word	0x40010400
 800dde4:	40014000 	.word	0x40014000
 800dde8:	40014400 	.word	0x40014400
 800ddec:	40014800 	.word	0x40014800

0800ddf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b087      	sub	sp, #28
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6a1b      	ldr	r3, [r3, #32]
 800de00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	f023 0201 	bic.w	r2, r3, #1
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	011b      	lsls	r3, r3, #4
 800de20:	693a      	ldr	r2, [r7, #16]
 800de22:	4313      	orrs	r3, r2
 800de24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f023 030a 	bic.w	r3, r3, #10
 800de2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	4313      	orrs	r3, r2
 800de34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	693a      	ldr	r2, [r7, #16]
 800de3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	697a      	ldr	r2, [r7, #20]
 800de40:	621a      	str	r2, [r3, #32]
}
 800de42:	bf00      	nop
 800de44:	371c      	adds	r7, #28
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de4e:	b480      	push	{r7}
 800de50:	b087      	sub	sp, #28
 800de52:	af00      	add	r7, sp, #0
 800de54:	60f8      	str	r0, [r7, #12]
 800de56:	60b9      	str	r1, [r7, #8]
 800de58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	f023 0210 	bic.w	r2, r3, #16
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	031b      	lsls	r3, r3, #12
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	4313      	orrs	r3, r2
 800de82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	011b      	lsls	r3, r3, #4
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	4313      	orrs	r3, r2
 800de94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	697a      	ldr	r2, [r7, #20]
 800dea0:	621a      	str	r2, [r3, #32]
}
 800dea2:	bf00      	nop
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
	...

0800deb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <TIM_ITRx_SetConfig+0x38>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dec8:	683a      	ldr	r2, [r7, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	4313      	orrs	r3, r2
 800dece:	f043 0307 	orr.w	r3, r3, #7
 800ded2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	609a      	str	r2, [r3, #8]
}
 800deda:	bf00      	nop
 800dedc:	3714      	adds	r7, #20
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	ffcfff8f 	.word	0xffcfff8f

0800deec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	021a      	lsls	r2, r3, #8
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	431a      	orrs	r2, r3
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	4313      	orrs	r3, r2
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	4313      	orrs	r3, r2
 800df18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	609a      	str	r2, [r3, #8]
}
 800df20:	bf00      	nop
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	f003 031f 	and.w	r3, r3, #31
 800df3e:	2201      	movs	r2, #1
 800df40:	fa02 f303 	lsl.w	r3, r2, r3
 800df44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6a1a      	ldr	r2, [r3, #32]
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	43db      	mvns	r3, r3
 800df4e:	401a      	ands	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6a1a      	ldr	r2, [r3, #32]
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	f003 031f 	and.w	r3, r3, #31
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	fa01 f303 	lsl.w	r3, r1, r3
 800df64:	431a      	orrs	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	621a      	str	r2, [r3, #32]
}
 800df6a:	bf00      	nop
 800df6c:	371c      	adds	r7, #28
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
	...

0800df78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d101      	bne.n	800df90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df8c:	2302      	movs	r3, #2
 800df8e:	e06d      	b.n	800e06c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2202      	movs	r2, #2
 800df9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a30      	ldr	r2, [pc, #192]	; (800e078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d004      	beq.n	800dfc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a2f      	ldr	r2, [pc, #188]	; (800e07c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d108      	bne.n	800dfd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dfca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a20      	ldr	r2, [pc, #128]	; (800e078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d022      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e002:	d01d      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a1d      	ldr	r2, [pc, #116]	; (800e080 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d018      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a1c      	ldr	r2, [pc, #112]	; (800e084 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d013      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a1a      	ldr	r2, [pc, #104]	; (800e088 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d00e      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a15      	ldr	r2, [pc, #84]	; (800e07c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d009      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a16      	ldr	r2, [pc, #88]	; (800e08c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d004      	beq.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a15      	ldr	r2, [pc, #84]	; (800e090 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d10c      	bne.n	800e05a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	4313      	orrs	r3, r2
 800e050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	68ba      	ldr	r2, [r7, #8]
 800e058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3714      	adds	r7, #20
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	40010000 	.word	0x40010000
 800e07c:	40010400 	.word	0x40010400
 800e080:	40000400 	.word	0x40000400
 800e084:	40000800 	.word	0x40000800
 800e088:	40000c00 	.word	0x40000c00
 800e08c:	40001800 	.word	0x40001800
 800e090:	40014000 	.word	0x40014000

0800e094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d101      	bne.n	800e0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e0ac:	2302      	movs	r3, #2
 800e0ae:	e065      	b.n	800e17c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	695b      	ldr	r3, [r3, #20]
 800e108:	4313      	orrs	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e116:	4313      	orrs	r3, r2
 800e118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	699b      	ldr	r3, [r3, #24]
 800e124:	041b      	lsls	r3, r3, #16
 800e126:	4313      	orrs	r3, r2
 800e128:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a16      	ldr	r2, [pc, #88]	; (800e188 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d004      	beq.n	800e13e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a14      	ldr	r2, [pc, #80]	; (800e18c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d115      	bne.n	800e16a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e148:	051b      	lsls	r3, r3, #20
 800e14a:	4313      	orrs	r3, r2
 800e14c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	69db      	ldr	r3, [r3, #28]
 800e158:	4313      	orrs	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	6a1b      	ldr	r3, [r3, #32]
 800e166:	4313      	orrs	r3, r2
 800e168:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3714      	adds	r7, #20
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
 800e188:	40010000 	.word	0x40010000
 800e18c:	40010400 	.word	0x40010400

0800e190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e198:	bf00      	nop
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e042      	b.n	800e264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d106      	bne.n	800e1f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7f4 f897 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2224      	movs	r2, #36	; 0x24
 800e1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f022 0201 	bic.w	r2, r2, #1
 800e20c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f001 fa44 	bl	800f6a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fcd9 	bl	800ebd4 <UART_SetConfig>
 800e222:	4603      	mov	r3, r0
 800e224:	2b01      	cmp	r3, #1
 800e226:	d101      	bne.n	800e22c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	e01b      	b.n	800e264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e23a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	689a      	ldr	r2, [r3, #8]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e24a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f042 0201 	orr.w	r2, r2, #1
 800e25a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f001 fac3 	bl	800f7e8 <UART_CheckIdleState>
 800e262:	4603      	mov	r3, r0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08a      	sub	sp, #40	; 0x28
 800e270:	af02      	add	r7, sp, #8
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	4613      	mov	r3, r2
 800e27a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e282:	2b20      	cmp	r3, #32
 800e284:	d17b      	bne.n	800e37e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <HAL_UART_Transmit+0x26>
 800e28c:	88fb      	ldrh	r3, [r7, #6]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e292:	2301      	movs	r3, #1
 800e294:	e074      	b.n	800e380 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2221      	movs	r2, #33	; 0x21
 800e2a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e2a6:	f7f4 faa1 	bl	80027ec <HAL_GetTick>
 800e2aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	88fa      	ldrh	r2, [r7, #6]
 800e2b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	88fa      	ldrh	r2, [r7, #6]
 800e2b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2c4:	d108      	bne.n	800e2d8 <HAL_UART_Transmit+0x6c>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d104      	bne.n	800e2d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	61bb      	str	r3, [r7, #24]
 800e2d6:	e003      	b.n	800e2e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e2e0:	e030      	b.n	800e344 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	2180      	movs	r1, #128	; 0x80
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f001 fb25 	bl	800f93c <UART_WaitOnFlagUntilTimeout>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d005      	beq.n	800e304 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2220      	movs	r2, #32
 800e2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e300:	2303      	movs	r3, #3
 800e302:	e03d      	b.n	800e380 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10b      	bne.n	800e322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	461a      	mov	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e318:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	3302      	adds	r3, #2
 800e31e:	61bb      	str	r3, [r7, #24]
 800e320:	e007      	b.n	800e332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	781a      	ldrb	r2, [r3, #0]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	3301      	adds	r3, #1
 800e330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e338:	b29b      	uxth	r3, r3
 800e33a:	3b01      	subs	r3, #1
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1c8      	bne.n	800e2e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2200      	movs	r2, #0
 800e358:	2140      	movs	r1, #64	; 0x40
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f001 faee 	bl	800f93c <UART_WaitOnFlagUntilTimeout>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d005      	beq.n	800e372 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2220      	movs	r2, #32
 800e36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e36e:	2303      	movs	r3, #3
 800e370:	e006      	b.n	800e380 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2220      	movs	r2, #32
 800e376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	e000      	b.n	800e380 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e37e:	2302      	movs	r3, #2
  }
}
 800e380:	4618      	mov	r0, r3
 800e382:	3720      	adds	r7, #32
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b08a      	sub	sp, #40	; 0x28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	4613      	mov	r3, r2
 800e394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e39c:	2b20      	cmp	r3, #32
 800e39e:	d137      	bne.n	800e410 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <HAL_UART_Receive_IT+0x24>
 800e3a6:	88fb      	ldrh	r3, [r7, #6]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d101      	bne.n	800e3b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e030      	b.n	800e412 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a18      	ldr	r2, [pc, #96]	; (800e41c <HAL_UART_Receive_IT+0x94>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d01f      	beq.n	800e400 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d018      	beq.n	800e400 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	e853 3f00 	ldrex	r3, [r3]
 800e3da:	613b      	str	r3, [r7, #16]
   return(result);
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	623b      	str	r3, [r7, #32]
 800e3ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f0:	69f9      	ldr	r1, [r7, #28]
 800e3f2:	6a3a      	ldr	r2, [r7, #32]
 800e3f4:	e841 2300 	strex	r3, r2, [r1]
 800e3f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1e6      	bne.n	800e3ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e400:	88fb      	ldrh	r3, [r7, #6]
 800e402:	461a      	mov	r2, r3
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f001 fb06 	bl	800fa18 <UART_Start_Receive_IT>
 800e40c:	4603      	mov	r3, r0
 800e40e:	e000      	b.n	800e412 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e410:	2302      	movs	r3, #2
  }
}
 800e412:	4618      	mov	r0, r3
 800e414:	3728      	adds	r7, #40	; 0x28
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	58000c00 	.word	0x58000c00

0800e420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b0ba      	sub	sp, #232	; 0xe8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	69db      	ldr	r3, [r3, #28]
 800e42e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e44a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e44e:	4013      	ands	r3, r2
 800e450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d11b      	bne.n	800e494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e460:	f003 0320 	and.w	r3, r3, #32
 800e464:	2b00      	cmp	r3, #0
 800e466:	d015      	beq.n	800e494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e46c:	f003 0320 	and.w	r3, r3, #32
 800e470:	2b00      	cmp	r3, #0
 800e472:	d105      	bne.n	800e480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d009      	beq.n	800e494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e484:	2b00      	cmp	r3, #0
 800e486:	f000 8377 	beq.w	800eb78 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	4798      	blx	r3
      }
      return;
 800e492:	e371      	b.n	800eb78 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 8123 	beq.w	800e6e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e49e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4a2:	4b8d      	ldr	r3, [pc, #564]	; (800e6d8 <HAL_UART_IRQHandler+0x2b8>)
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d106      	bne.n	800e4b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e4aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e4ae:	4b8b      	ldr	r3, [pc, #556]	; (800e6dc <HAL_UART_IRQHandler+0x2bc>)
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 8116 	beq.w	800e6e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d011      	beq.n	800e4e8 <HAL_UART_IRQHandler+0xc8>
 800e4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4de:	f043 0201 	orr.w	r2, r3, #1
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ec:	f003 0302 	and.w	r3, r3, #2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d011      	beq.n	800e518 <HAL_UART_IRQHandler+0xf8>
 800e4f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00b      	beq.n	800e518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2202      	movs	r2, #2
 800e506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e50e:	f043 0204 	orr.w	r2, r3, #4
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d011      	beq.n	800e548 <HAL_UART_IRQHandler+0x128>
 800e524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00b      	beq.n	800e548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2204      	movs	r2, #4
 800e536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e53e:	f043 0202 	orr.w	r2, r3, #2
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e54c:	f003 0308 	and.w	r3, r3, #8
 800e550:	2b00      	cmp	r3, #0
 800e552:	d017      	beq.n	800e584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e558:	f003 0320 	and.w	r3, r3, #32
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d105      	bne.n	800e56c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e564:	4b5c      	ldr	r3, [pc, #368]	; (800e6d8 <HAL_UART_IRQHandler+0x2b8>)
 800e566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2208      	movs	r2, #8
 800e572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e57a:	f043 0208 	orr.w	r2, r3, #8
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d012      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x196>
 800e590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00c      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ac:	f043 0220 	orr.w	r2, r3, #32
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f000 82dd 	beq.w	800eb7c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c6:	f003 0320 	and.w	r3, r3, #32
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d013      	beq.n	800e5f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5d2:	f003 0320 	and.w	r3, r3, #32
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d007      	beq.n	800e5f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e60a:	2b40      	cmp	r3, #64	; 0x40
 800e60c:	d005      	beq.n	800e61a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e60e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e616:	2b00      	cmp	r3, #0
 800e618:	d054      	beq.n	800e6c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f001 fb1e 	bl	800fc5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62a:	2b40      	cmp	r3, #64	; 0x40
 800e62c:	d146      	bne.n	800e6bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3308      	adds	r3, #8
 800e634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e63c:	e853 3f00 	ldrex	r3, [r3]
 800e640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e64c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3308      	adds	r3, #8
 800e656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e65a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e65e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1d9      	bne.n	800e62e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e680:	2b00      	cmp	r3, #0
 800e682:	d017      	beq.n	800e6b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e68a:	4a15      	ldr	r2, [pc, #84]	; (800e6e0 <HAL_UART_IRQHandler+0x2c0>)
 800e68c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e694:	4618      	mov	r0, r3
 800e696:	f7f7 f9bb 	bl	8005a10 <HAL_DMA_Abort_IT>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d019      	beq.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6b2:	e00f      	b.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fa77 	bl	800eba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6ba:	e00b      	b.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fa73 	bl	800eba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6c2:	e007      	b.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 fa6f 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e6d2:	e253      	b.n	800eb7c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6d4:	bf00      	nop
    return;
 800e6d6:	e251      	b.n	800eb7c <HAL_UART_IRQHandler+0x75c>
 800e6d8:	10000001 	.word	0x10000001
 800e6dc:	04000120 	.word	0x04000120
 800e6e0:	0800fd29 	.word	0x0800fd29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	f040 81e7 	bne.w	800eabc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6f2:	f003 0310 	and.w	r3, r3, #16
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 81e0 	beq.w	800eabc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e700:	f003 0310 	and.w	r3, r3, #16
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 81d9 	beq.w	800eabc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2210      	movs	r2, #16
 800e710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e71c:	2b40      	cmp	r3, #64	; 0x40
 800e71e:	f040 8151 	bne.w	800e9c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a96      	ldr	r2, [pc, #600]	; (800e984 <HAL_UART_IRQHandler+0x564>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d068      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a93      	ldr	r2, [pc, #588]	; (800e988 <HAL_UART_IRQHandler+0x568>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d061      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a91      	ldr	r2, [pc, #580]	; (800e98c <HAL_UART_IRQHandler+0x56c>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d05a      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a8e      	ldr	r2, [pc, #568]	; (800e990 <HAL_UART_IRQHandler+0x570>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d053      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a8c      	ldr	r2, [pc, #560]	; (800e994 <HAL_UART_IRQHandler+0x574>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d04c      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a89      	ldr	r2, [pc, #548]	; (800e998 <HAL_UART_IRQHandler+0x578>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d045      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a87      	ldr	r2, [pc, #540]	; (800e99c <HAL_UART_IRQHandler+0x57c>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d03e      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a84      	ldr	r2, [pc, #528]	; (800e9a0 <HAL_UART_IRQHandler+0x580>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d037      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a82      	ldr	r2, [pc, #520]	; (800e9a4 <HAL_UART_IRQHandler+0x584>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d030      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a7f      	ldr	r2, [pc, #508]	; (800e9a8 <HAL_UART_IRQHandler+0x588>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d029      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a7d      	ldr	r2, [pc, #500]	; (800e9ac <HAL_UART_IRQHandler+0x58c>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d022      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a7a      	ldr	r2, [pc, #488]	; (800e9b0 <HAL_UART_IRQHandler+0x590>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d01b      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a78      	ldr	r2, [pc, #480]	; (800e9b4 <HAL_UART_IRQHandler+0x594>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d014      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a75      	ldr	r2, [pc, #468]	; (800e9b8 <HAL_UART_IRQHandler+0x598>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d00d      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a73      	ldr	r2, [pc, #460]	; (800e9bc <HAL_UART_IRQHandler+0x59c>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d006      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a70      	ldr	r2, [pc, #448]	; (800e9c0 <HAL_UART_IRQHandler+0x5a0>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d106      	bne.n	800e810 <HAL_UART_IRQHandler+0x3f0>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	e005      	b.n	800e81c <HAL_UART_IRQHandler+0x3fc>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 81ab 	beq.w	800eb80 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e834:	429a      	cmp	r2, r3
 800e836:	f080 81a3 	bcs.w	800eb80 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84a:	69db      	ldr	r3, [r3, #28]
 800e84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e850:	f000 8087 	beq.w	800e962 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	461a      	mov	r2, r3
 800e87a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e87e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e88a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e88e:	e841 2300 	strex	r3, r2, [r1]
 800e892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1da      	bne.n	800e854 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8a8:	e853 3f00 	ldrex	r3, [r3]
 800e8ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e8ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8b0:	f023 0301 	bic.w	r3, r3, #1
 800e8b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3308      	adds	r3, #8
 800e8be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e8c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e8c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e8ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e8d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e1      	bne.n	800e89e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8e4:	e853 3f00 	ldrex	r3, [r3]
 800e8e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e8fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e90c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e3      	bne.n	800e8da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2220      	movs	r2, #32
 800e916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e928:	e853 3f00 	ldrex	r3, [r3]
 800e92c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e930:	f023 0310 	bic.w	r3, r3, #16
 800e934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	461a      	mov	r2, r3
 800e93e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e942:	65bb      	str	r3, [r7, #88]	; 0x58
 800e944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e94a:	e841 2300 	strex	r3, r2, [r1]
 800e94e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e4      	bne.n	800e920 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7f6 fd39 	bl	80053d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2202      	movs	r2, #2
 800e966:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e974:	b29b      	uxth	r3, r3
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 f91d 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e982:	e0fd      	b.n	800eb80 <HAL_UART_IRQHandler+0x760>
 800e984:	40020010 	.word	0x40020010
 800e988:	40020028 	.word	0x40020028
 800e98c:	40020040 	.word	0x40020040
 800e990:	40020058 	.word	0x40020058
 800e994:	40020070 	.word	0x40020070
 800e998:	40020088 	.word	0x40020088
 800e99c:	400200a0 	.word	0x400200a0
 800e9a0:	400200b8 	.word	0x400200b8
 800e9a4:	40020410 	.word	0x40020410
 800e9a8:	40020428 	.word	0x40020428
 800e9ac:	40020440 	.word	0x40020440
 800e9b0:	40020458 	.word	0x40020458
 800e9b4:	40020470 	.word	0x40020470
 800e9b8:	40020488 	.word	0x40020488
 800e9bc:	400204a0 	.word	0x400204a0
 800e9c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 80cf 	beq.w	800eb84 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e9e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 80ca 	beq.w	800eb84 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	e853 3f00 	ldrex	r3, [r3]
 800e9fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea12:	647b      	str	r3, [r7, #68]	; 0x44
 800ea14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e4      	bne.n	800e9f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	623b      	str	r3, [r7, #32]
   return(result);
 800ea36:	6a3a      	ldr	r2, [r7, #32]
 800ea38:	4b55      	ldr	r3, [pc, #340]	; (800eb90 <HAL_UART_IRQHandler+0x770>)
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3308      	adds	r3, #8
 800ea46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea4a:	633a      	str	r2, [r7, #48]	; 0x30
 800ea4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea52:	e841 2300 	strex	r3, r2, [r1]
 800ea56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1e3      	bne.n	800ea26 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2220      	movs	r2, #32
 800ea62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	e853 3f00 	ldrex	r3, [r3]
 800ea7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f023 0310 	bic.w	r3, r3, #16
 800ea86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea94:	61fb      	str	r3, [r7, #28]
 800ea96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea98:	69b9      	ldr	r1, [r7, #24]
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	e841 2300 	strex	r3, r2, [r1]
 800eaa0:	617b      	str	r3, [r7, #20]
   return(result);
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e4      	bne.n	800ea72 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2202      	movs	r2, #2
 800eaac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eaae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eab2:	4619      	mov	r1, r3
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f881 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaba:	e063      	b.n	800eb84 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00e      	beq.n	800eae6 <HAL_UART_IRQHandler+0x6c6>
 800eac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eacc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d008      	beq.n	800eae6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eadc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f001 fe80 	bl	80107e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eae4:	e051      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d014      	beq.n	800eb1c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eaf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d105      	bne.n	800eb0a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eafe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d008      	beq.n	800eb1c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d03a      	beq.n	800eb88 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	4798      	blx	r3
    }
    return;
 800eb1a:	e035      	b.n	800eb88 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d009      	beq.n	800eb3c <HAL_UART_IRQHandler+0x71c>
 800eb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d003      	beq.n	800eb3c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f001 f90d 	bl	800fd54 <UART_EndTransmit_IT>
    return;
 800eb3a:	e026      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d009      	beq.n	800eb5c <HAL_UART_IRQHandler+0x73c>
 800eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d003      	beq.n	800eb5c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f001 fe59 	bl	801080c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb5a:	e016      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d010      	beq.n	800eb8a <HAL_UART_IRQHandler+0x76a>
 800eb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	da0c      	bge.n	800eb8a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f001 fe41 	bl	80107f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb76:	e008      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb78:	bf00      	nop
 800eb7a:	e006      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
    return;
 800eb7c:	bf00      	nop
 800eb7e:	e004      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb80:	bf00      	nop
 800eb82:	e002      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb84:	bf00      	nop
 800eb86:	e000      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
    return;
 800eb88:	bf00      	nop
  }
}
 800eb8a:	37e8      	adds	r7, #232	; 0xe8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	effffffe 	.word	0xeffffffe

0800eb94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebd8:	b092      	sub	sp, #72	; 0x48
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	431a      	orrs	r2, r3
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	431a      	orrs	r2, r3
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	69db      	ldr	r3, [r3, #28]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	4bbe      	ldr	r3, [pc, #760]	; (800eefc <UART_SetConfig+0x328>)
 800ec04:	4013      	ands	r3, r2
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	6812      	ldr	r2, [r2, #0]
 800ec0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec0c:	430b      	orrs	r3, r1
 800ec0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	68da      	ldr	r2, [r3, #12]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	699b      	ldr	r3, [r3, #24]
 800ec2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4ab3      	ldr	r2, [pc, #716]	; (800ef00 <UART_SetConfig+0x32c>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d004      	beq.n	800ec40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	4baf      	ldr	r3, [pc, #700]	; (800ef04 <UART_SetConfig+0x330>)
 800ec48:	4013      	ands	r3, r2
 800ec4a:	697a      	ldr	r2, [r7, #20]
 800ec4c:	6812      	ldr	r2, [r2, #0]
 800ec4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec50:	430b      	orrs	r3, r1
 800ec52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5a:	f023 010f 	bic.w	r1, r3, #15
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4aa6      	ldr	r2, [pc, #664]	; (800ef08 <UART_SetConfig+0x334>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d177      	bne.n	800ed64 <UART_SetConfig+0x190>
 800ec74:	4ba5      	ldr	r3, [pc, #660]	; (800ef0c <UART_SetConfig+0x338>)
 800ec76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec7c:	2b28      	cmp	r3, #40	; 0x28
 800ec7e:	d86d      	bhi.n	800ed5c <UART_SetConfig+0x188>
 800ec80:	a201      	add	r2, pc, #4	; (adr r2, 800ec88 <UART_SetConfig+0xb4>)
 800ec82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec86:	bf00      	nop
 800ec88:	0800ed2d 	.word	0x0800ed2d
 800ec8c:	0800ed5d 	.word	0x0800ed5d
 800ec90:	0800ed5d 	.word	0x0800ed5d
 800ec94:	0800ed5d 	.word	0x0800ed5d
 800ec98:	0800ed5d 	.word	0x0800ed5d
 800ec9c:	0800ed5d 	.word	0x0800ed5d
 800eca0:	0800ed5d 	.word	0x0800ed5d
 800eca4:	0800ed5d 	.word	0x0800ed5d
 800eca8:	0800ed35 	.word	0x0800ed35
 800ecac:	0800ed5d 	.word	0x0800ed5d
 800ecb0:	0800ed5d 	.word	0x0800ed5d
 800ecb4:	0800ed5d 	.word	0x0800ed5d
 800ecb8:	0800ed5d 	.word	0x0800ed5d
 800ecbc:	0800ed5d 	.word	0x0800ed5d
 800ecc0:	0800ed5d 	.word	0x0800ed5d
 800ecc4:	0800ed5d 	.word	0x0800ed5d
 800ecc8:	0800ed3d 	.word	0x0800ed3d
 800eccc:	0800ed5d 	.word	0x0800ed5d
 800ecd0:	0800ed5d 	.word	0x0800ed5d
 800ecd4:	0800ed5d 	.word	0x0800ed5d
 800ecd8:	0800ed5d 	.word	0x0800ed5d
 800ecdc:	0800ed5d 	.word	0x0800ed5d
 800ece0:	0800ed5d 	.word	0x0800ed5d
 800ece4:	0800ed5d 	.word	0x0800ed5d
 800ece8:	0800ed45 	.word	0x0800ed45
 800ecec:	0800ed5d 	.word	0x0800ed5d
 800ecf0:	0800ed5d 	.word	0x0800ed5d
 800ecf4:	0800ed5d 	.word	0x0800ed5d
 800ecf8:	0800ed5d 	.word	0x0800ed5d
 800ecfc:	0800ed5d 	.word	0x0800ed5d
 800ed00:	0800ed5d 	.word	0x0800ed5d
 800ed04:	0800ed5d 	.word	0x0800ed5d
 800ed08:	0800ed4d 	.word	0x0800ed4d
 800ed0c:	0800ed5d 	.word	0x0800ed5d
 800ed10:	0800ed5d 	.word	0x0800ed5d
 800ed14:	0800ed5d 	.word	0x0800ed5d
 800ed18:	0800ed5d 	.word	0x0800ed5d
 800ed1c:	0800ed5d 	.word	0x0800ed5d
 800ed20:	0800ed5d 	.word	0x0800ed5d
 800ed24:	0800ed5d 	.word	0x0800ed5d
 800ed28:	0800ed55 	.word	0x0800ed55
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed32:	e222      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed34:	2304      	movs	r3, #4
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3a:	e21e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed3c:	2308      	movs	r3, #8
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed42:	e21a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed44:	2310      	movs	r3, #16
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4a:	e216      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed4c:	2320      	movs	r3, #32
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed52:	e212      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed54:	2340      	movs	r3, #64	; 0x40
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5a:	e20e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed5c:	2380      	movs	r3, #128	; 0x80
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed62:	e20a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a69      	ldr	r2, [pc, #420]	; (800ef10 <UART_SetConfig+0x33c>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d130      	bne.n	800edd0 <UART_SetConfig+0x1fc>
 800ed6e:	4b67      	ldr	r3, [pc, #412]	; (800ef0c <UART_SetConfig+0x338>)
 800ed70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	2b05      	cmp	r3, #5
 800ed78:	d826      	bhi.n	800edc8 <UART_SetConfig+0x1f4>
 800ed7a:	a201      	add	r2, pc, #4	; (adr r2, 800ed80 <UART_SetConfig+0x1ac>)
 800ed7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed80:	0800ed99 	.word	0x0800ed99
 800ed84:	0800eda1 	.word	0x0800eda1
 800ed88:	0800eda9 	.word	0x0800eda9
 800ed8c:	0800edb1 	.word	0x0800edb1
 800ed90:	0800edb9 	.word	0x0800edb9
 800ed94:	0800edc1 	.word	0x0800edc1
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9e:	e1ec      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eda0:	2304      	movs	r3, #4
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda6:	e1e8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eda8:	2308      	movs	r3, #8
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edae:	e1e4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edb0:	2310      	movs	r3, #16
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb6:	e1e0      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edb8:	2320      	movs	r3, #32
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edbe:	e1dc      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edc0:	2340      	movs	r3, #64	; 0x40
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc6:	e1d8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edc8:	2380      	movs	r3, #128	; 0x80
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edce:	e1d4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a4f      	ldr	r2, [pc, #316]	; (800ef14 <UART_SetConfig+0x340>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d130      	bne.n	800ee3c <UART_SetConfig+0x268>
 800edda:	4b4c      	ldr	r3, [pc, #304]	; (800ef0c <UART_SetConfig+0x338>)
 800eddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edde:	f003 0307 	and.w	r3, r3, #7
 800ede2:	2b05      	cmp	r3, #5
 800ede4:	d826      	bhi.n	800ee34 <UART_SetConfig+0x260>
 800ede6:	a201      	add	r2, pc, #4	; (adr r2, 800edec <UART_SetConfig+0x218>)
 800ede8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edec:	0800ee05 	.word	0x0800ee05
 800edf0:	0800ee0d 	.word	0x0800ee0d
 800edf4:	0800ee15 	.word	0x0800ee15
 800edf8:	0800ee1d 	.word	0x0800ee1d
 800edfc:	0800ee25 	.word	0x0800ee25
 800ee00:	0800ee2d 	.word	0x0800ee2d
 800ee04:	2300      	movs	r3, #0
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0a:	e1b6      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee12:	e1b2      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee14:	2308      	movs	r3, #8
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1a:	e1ae      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee22:	e1aa      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee24:	2320      	movs	r3, #32
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e1a6      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee2c:	2340      	movs	r3, #64	; 0x40
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e1a2      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee34:	2380      	movs	r3, #128	; 0x80
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e19e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a35      	ldr	r2, [pc, #212]	; (800ef18 <UART_SetConfig+0x344>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d130      	bne.n	800eea8 <UART_SetConfig+0x2d4>
 800ee46:	4b31      	ldr	r3, [pc, #196]	; (800ef0c <UART_SetConfig+0x338>)
 800ee48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee4a:	f003 0307 	and.w	r3, r3, #7
 800ee4e:	2b05      	cmp	r3, #5
 800ee50:	d826      	bhi.n	800eea0 <UART_SetConfig+0x2cc>
 800ee52:	a201      	add	r2, pc, #4	; (adr r2, 800ee58 <UART_SetConfig+0x284>)
 800ee54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee58:	0800ee71 	.word	0x0800ee71
 800ee5c:	0800ee79 	.word	0x0800ee79
 800ee60:	0800ee81 	.word	0x0800ee81
 800ee64:	0800ee89 	.word	0x0800ee89
 800ee68:	0800ee91 	.word	0x0800ee91
 800ee6c:	0800ee99 	.word	0x0800ee99
 800ee70:	2300      	movs	r3, #0
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee76:	e180      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee78:	2304      	movs	r3, #4
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7e:	e17c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee80:	2308      	movs	r3, #8
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee86:	e178      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee88:	2310      	movs	r3, #16
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8e:	e174      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee90:	2320      	movs	r3, #32
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee96:	e170      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee98:	2340      	movs	r3, #64	; 0x40
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9e:	e16c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eea0:	2380      	movs	r3, #128	; 0x80
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea6:	e168      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a1b      	ldr	r2, [pc, #108]	; (800ef1c <UART_SetConfig+0x348>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d142      	bne.n	800ef38 <UART_SetConfig+0x364>
 800eeb2:	4b16      	ldr	r3, [pc, #88]	; (800ef0c <UART_SetConfig+0x338>)
 800eeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb6:	f003 0307 	and.w	r3, r3, #7
 800eeba:	2b05      	cmp	r3, #5
 800eebc:	d838      	bhi.n	800ef30 <UART_SetConfig+0x35c>
 800eebe:	a201      	add	r2, pc, #4	; (adr r2, 800eec4 <UART_SetConfig+0x2f0>)
 800eec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec4:	0800eedd 	.word	0x0800eedd
 800eec8:	0800eee5 	.word	0x0800eee5
 800eecc:	0800eeed 	.word	0x0800eeed
 800eed0:	0800eef5 	.word	0x0800eef5
 800eed4:	0800ef21 	.word	0x0800ef21
 800eed8:	0800ef29 	.word	0x0800ef29
 800eedc:	2300      	movs	r3, #0
 800eede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee2:	e14a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eee4:	2304      	movs	r3, #4
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e146      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eeec:	2308      	movs	r3, #8
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef2:	e142      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eef4:	2310      	movs	r3, #16
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefa:	e13e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eefc:	cfff69f3 	.word	0xcfff69f3
 800ef00:	58000c00 	.word	0x58000c00
 800ef04:	11fff4ff 	.word	0x11fff4ff
 800ef08:	40011000 	.word	0x40011000
 800ef0c:	58024400 	.word	0x58024400
 800ef10:	40004400 	.word	0x40004400
 800ef14:	40004800 	.word	0x40004800
 800ef18:	40004c00 	.word	0x40004c00
 800ef1c:	40005000 	.word	0x40005000
 800ef20:	2320      	movs	r3, #32
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e128      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ef28:	2340      	movs	r3, #64	; 0x40
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e124      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ef30:	2380      	movs	r3, #128	; 0x80
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef36:	e120      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4acb      	ldr	r2, [pc, #812]	; (800f26c <UART_SetConfig+0x698>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d176      	bne.n	800f030 <UART_SetConfig+0x45c>
 800ef42:	4bcb      	ldr	r3, [pc, #812]	; (800f270 <UART_SetConfig+0x69c>)
 800ef44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef4a:	2b28      	cmp	r3, #40	; 0x28
 800ef4c:	d86c      	bhi.n	800f028 <UART_SetConfig+0x454>
 800ef4e:	a201      	add	r2, pc, #4	; (adr r2, 800ef54 <UART_SetConfig+0x380>)
 800ef50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef54:	0800eff9 	.word	0x0800eff9
 800ef58:	0800f029 	.word	0x0800f029
 800ef5c:	0800f029 	.word	0x0800f029
 800ef60:	0800f029 	.word	0x0800f029
 800ef64:	0800f029 	.word	0x0800f029
 800ef68:	0800f029 	.word	0x0800f029
 800ef6c:	0800f029 	.word	0x0800f029
 800ef70:	0800f029 	.word	0x0800f029
 800ef74:	0800f001 	.word	0x0800f001
 800ef78:	0800f029 	.word	0x0800f029
 800ef7c:	0800f029 	.word	0x0800f029
 800ef80:	0800f029 	.word	0x0800f029
 800ef84:	0800f029 	.word	0x0800f029
 800ef88:	0800f029 	.word	0x0800f029
 800ef8c:	0800f029 	.word	0x0800f029
 800ef90:	0800f029 	.word	0x0800f029
 800ef94:	0800f009 	.word	0x0800f009
 800ef98:	0800f029 	.word	0x0800f029
 800ef9c:	0800f029 	.word	0x0800f029
 800efa0:	0800f029 	.word	0x0800f029
 800efa4:	0800f029 	.word	0x0800f029
 800efa8:	0800f029 	.word	0x0800f029
 800efac:	0800f029 	.word	0x0800f029
 800efb0:	0800f029 	.word	0x0800f029
 800efb4:	0800f011 	.word	0x0800f011
 800efb8:	0800f029 	.word	0x0800f029
 800efbc:	0800f029 	.word	0x0800f029
 800efc0:	0800f029 	.word	0x0800f029
 800efc4:	0800f029 	.word	0x0800f029
 800efc8:	0800f029 	.word	0x0800f029
 800efcc:	0800f029 	.word	0x0800f029
 800efd0:	0800f029 	.word	0x0800f029
 800efd4:	0800f019 	.word	0x0800f019
 800efd8:	0800f029 	.word	0x0800f029
 800efdc:	0800f029 	.word	0x0800f029
 800efe0:	0800f029 	.word	0x0800f029
 800efe4:	0800f029 	.word	0x0800f029
 800efe8:	0800f029 	.word	0x0800f029
 800efec:	0800f029 	.word	0x0800f029
 800eff0:	0800f029 	.word	0x0800f029
 800eff4:	0800f021 	.word	0x0800f021
 800eff8:	2301      	movs	r3, #1
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e0bc      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f000:	2304      	movs	r3, #4
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e0b8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f008:	2308      	movs	r3, #8
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e0b4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f010:	2310      	movs	r3, #16
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e0b0      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f018:	2320      	movs	r3, #32
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e0ac      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f020:	2340      	movs	r3, #64	; 0x40
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e0a8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f028:	2380      	movs	r3, #128	; 0x80
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e0a4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a8f      	ldr	r2, [pc, #572]	; (800f274 <UART_SetConfig+0x6a0>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d130      	bne.n	800f09c <UART_SetConfig+0x4c8>
 800f03a:	4b8d      	ldr	r3, [pc, #564]	; (800f270 <UART_SetConfig+0x69c>)
 800f03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	2b05      	cmp	r3, #5
 800f044:	d826      	bhi.n	800f094 <UART_SetConfig+0x4c0>
 800f046:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <UART_SetConfig+0x478>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f065 	.word	0x0800f065
 800f050:	0800f06d 	.word	0x0800f06d
 800f054:	0800f075 	.word	0x0800f075
 800f058:	0800f07d 	.word	0x0800f07d
 800f05c:	0800f085 	.word	0x0800f085
 800f060:	0800f08d 	.word	0x0800f08d
 800f064:	2300      	movs	r3, #0
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e086      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f06c:	2304      	movs	r3, #4
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e082      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f074:	2308      	movs	r3, #8
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e07e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f07c:	2310      	movs	r3, #16
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f082:	e07a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f084:	2320      	movs	r3, #32
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08a:	e076      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f08c:	2340      	movs	r3, #64	; 0x40
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e072      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f094:	2380      	movs	r3, #128	; 0x80
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e06e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a75      	ldr	r2, [pc, #468]	; (800f278 <UART_SetConfig+0x6a4>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d130      	bne.n	800f108 <UART_SetConfig+0x534>
 800f0a6:	4b72      	ldr	r3, [pc, #456]	; (800f270 <UART_SetConfig+0x69c>)
 800f0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0aa:	f003 0307 	and.w	r3, r3, #7
 800f0ae:	2b05      	cmp	r3, #5
 800f0b0:	d826      	bhi.n	800f100 <UART_SetConfig+0x52c>
 800f0b2:	a201      	add	r2, pc, #4	; (adr r2, 800f0b8 <UART_SetConfig+0x4e4>)
 800f0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b8:	0800f0d1 	.word	0x0800f0d1
 800f0bc:	0800f0d9 	.word	0x0800f0d9
 800f0c0:	0800f0e1 	.word	0x0800f0e1
 800f0c4:	0800f0e9 	.word	0x0800f0e9
 800f0c8:	0800f0f1 	.word	0x0800f0f1
 800f0cc:	0800f0f9 	.word	0x0800f0f9
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e050      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0d8:	2304      	movs	r3, #4
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e04c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0e0:	2308      	movs	r3, #8
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e048      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0e8:	2310      	movs	r3, #16
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e044      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0f0:	2320      	movs	r3, #32
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e040      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0f8:	2340      	movs	r3, #64	; 0x40
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e03c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f100:	2380      	movs	r3, #128	; 0x80
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e038      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a5b      	ldr	r2, [pc, #364]	; (800f27c <UART_SetConfig+0x6a8>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d130      	bne.n	800f174 <UART_SetConfig+0x5a0>
 800f112:	4b57      	ldr	r3, [pc, #348]	; (800f270 <UART_SetConfig+0x69c>)
 800f114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f116:	f003 0307 	and.w	r3, r3, #7
 800f11a:	2b05      	cmp	r3, #5
 800f11c:	d826      	bhi.n	800f16c <UART_SetConfig+0x598>
 800f11e:	a201      	add	r2, pc, #4	; (adr r2, 800f124 <UART_SetConfig+0x550>)
 800f120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f124:	0800f13d 	.word	0x0800f13d
 800f128:	0800f145 	.word	0x0800f145
 800f12c:	0800f14d 	.word	0x0800f14d
 800f130:	0800f155 	.word	0x0800f155
 800f134:	0800f15d 	.word	0x0800f15d
 800f138:	0800f165 	.word	0x0800f165
 800f13c:	2302      	movs	r3, #2
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e01a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f144:	2304      	movs	r3, #4
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e016      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f14c:	2308      	movs	r3, #8
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e012      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f154:	2310      	movs	r3, #16
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e00e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f15c:	2320      	movs	r3, #32
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e00a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f164:	2340      	movs	r3, #64	; 0x40
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e006      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f16c:	2380      	movs	r3, #128	; 0x80
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e002      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f174:	2380      	movs	r3, #128	; 0x80
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a3f      	ldr	r2, [pc, #252]	; (800f27c <UART_SetConfig+0x6a8>)
 800f180:	4293      	cmp	r3, r2
 800f182:	f040 80f8 	bne.w	800f376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f18a:	2b20      	cmp	r3, #32
 800f18c:	dc46      	bgt.n	800f21c <UART_SetConfig+0x648>
 800f18e:	2b02      	cmp	r3, #2
 800f190:	f2c0 8082 	blt.w	800f298 <UART_SetConfig+0x6c4>
 800f194:	3b02      	subs	r3, #2
 800f196:	2b1e      	cmp	r3, #30
 800f198:	d87e      	bhi.n	800f298 <UART_SetConfig+0x6c4>
 800f19a:	a201      	add	r2, pc, #4	; (adr r2, 800f1a0 <UART_SetConfig+0x5cc>)
 800f19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a0:	0800f223 	.word	0x0800f223
 800f1a4:	0800f299 	.word	0x0800f299
 800f1a8:	0800f22b 	.word	0x0800f22b
 800f1ac:	0800f299 	.word	0x0800f299
 800f1b0:	0800f299 	.word	0x0800f299
 800f1b4:	0800f299 	.word	0x0800f299
 800f1b8:	0800f23b 	.word	0x0800f23b
 800f1bc:	0800f299 	.word	0x0800f299
 800f1c0:	0800f299 	.word	0x0800f299
 800f1c4:	0800f299 	.word	0x0800f299
 800f1c8:	0800f299 	.word	0x0800f299
 800f1cc:	0800f299 	.word	0x0800f299
 800f1d0:	0800f299 	.word	0x0800f299
 800f1d4:	0800f299 	.word	0x0800f299
 800f1d8:	0800f24b 	.word	0x0800f24b
 800f1dc:	0800f299 	.word	0x0800f299
 800f1e0:	0800f299 	.word	0x0800f299
 800f1e4:	0800f299 	.word	0x0800f299
 800f1e8:	0800f299 	.word	0x0800f299
 800f1ec:	0800f299 	.word	0x0800f299
 800f1f0:	0800f299 	.word	0x0800f299
 800f1f4:	0800f299 	.word	0x0800f299
 800f1f8:	0800f299 	.word	0x0800f299
 800f1fc:	0800f299 	.word	0x0800f299
 800f200:	0800f299 	.word	0x0800f299
 800f204:	0800f299 	.word	0x0800f299
 800f208:	0800f299 	.word	0x0800f299
 800f20c:	0800f299 	.word	0x0800f299
 800f210:	0800f299 	.word	0x0800f299
 800f214:	0800f299 	.word	0x0800f299
 800f218:	0800f28b 	.word	0x0800f28b
 800f21c:	2b40      	cmp	r3, #64	; 0x40
 800f21e:	d037      	beq.n	800f290 <UART_SetConfig+0x6bc>
 800f220:	e03a      	b.n	800f298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f222:	f7fc f8fd 	bl	800b420 <HAL_RCCEx_GetD3PCLK1Freq>
 800f226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f228:	e03c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f22a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fc f90c 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f238:	e034      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f23a:	f107 0318 	add.w	r3, r7, #24
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fc fa58 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f248:	e02c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f24a:	4b09      	ldr	r3, [pc, #36]	; (800f270 <UART_SetConfig+0x69c>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0320 	and.w	r3, r3, #32
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f256:	4b06      	ldr	r3, [pc, #24]	; (800f270 <UART_SetConfig+0x69c>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	08db      	lsrs	r3, r3, #3
 800f25c:	f003 0303 	and.w	r3, r3, #3
 800f260:	4a07      	ldr	r2, [pc, #28]	; (800f280 <UART_SetConfig+0x6ac>)
 800f262:	fa22 f303 	lsr.w	r3, r2, r3
 800f266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f268:	e01c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
 800f26a:	bf00      	nop
 800f26c:	40011400 	.word	0x40011400
 800f270:	58024400 	.word	0x58024400
 800f274:	40007800 	.word	0x40007800
 800f278:	40007c00 	.word	0x40007c00
 800f27c:	58000c00 	.word	0x58000c00
 800f280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f284:	4b9d      	ldr	r3, [pc, #628]	; (800f4fc <UART_SetConfig+0x928>)
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f288:	e00c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f28a:	4b9d      	ldr	r3, [pc, #628]	; (800f500 <UART_SetConfig+0x92c>)
 800f28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f28e:	e009      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f296:	e005      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f298:	2300      	movs	r3, #0
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f000 81de 	beq.w	800f668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b0:	4a94      	ldr	r2, [pc, #592]	; (800f504 <UART_SetConfig+0x930>)
 800f2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	685a      	ldr	r2, [r3, #4]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	005b      	lsls	r3, r3, #1
 800f2c8:	4413      	add	r3, r2
 800f2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d305      	bcc.n	800f2dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d903      	bls.n	800f2e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2e2:	e1c1      	b.n	800f668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	60bb      	str	r3, [r7, #8]
 800f2ea:	60fa      	str	r2, [r7, #12]
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f0:	4a84      	ldr	r2, [pc, #528]	; (800f504 <UART_SetConfig+0x930>)
 800f2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	603b      	str	r3, [r7, #0]
 800f2fc:	607a      	str	r2, [r7, #4]
 800f2fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f306:	f7f0 ffe7 	bl	80002d8 <__aeabi_uldivmod>
 800f30a:	4602      	mov	r2, r0
 800f30c:	460b      	mov	r3, r1
 800f30e:	4610      	mov	r0, r2
 800f310:	4619      	mov	r1, r3
 800f312:	f04f 0200 	mov.w	r2, #0
 800f316:	f04f 0300 	mov.w	r3, #0
 800f31a:	020b      	lsls	r3, r1, #8
 800f31c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f320:	0202      	lsls	r2, r0, #8
 800f322:	6979      	ldr	r1, [r7, #20]
 800f324:	6849      	ldr	r1, [r1, #4]
 800f326:	0849      	lsrs	r1, r1, #1
 800f328:	2000      	movs	r0, #0
 800f32a:	460c      	mov	r4, r1
 800f32c:	4605      	mov	r5, r0
 800f32e:	eb12 0804 	adds.w	r8, r2, r4
 800f332:	eb43 0905 	adc.w	r9, r3, r5
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	469a      	mov	sl, r3
 800f33e:	4693      	mov	fp, r2
 800f340:	4652      	mov	r2, sl
 800f342:	465b      	mov	r3, fp
 800f344:	4640      	mov	r0, r8
 800f346:	4649      	mov	r1, r9
 800f348:	f7f0 ffc6 	bl	80002d8 <__aeabi_uldivmod>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	4613      	mov	r3, r2
 800f352:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f35a:	d308      	bcc.n	800f36e <UART_SetConfig+0x79a>
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f362:	d204      	bcs.n	800f36e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f36a:	60da      	str	r2, [r3, #12]
 800f36c:	e17c      	b.n	800f668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f36e:	2301      	movs	r3, #1
 800f370:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f374:	e178      	b.n	800f668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	69db      	ldr	r3, [r3, #28]
 800f37a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f37e:	f040 80c5 	bne.w	800f50c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f386:	2b20      	cmp	r3, #32
 800f388:	dc48      	bgt.n	800f41c <UART_SetConfig+0x848>
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	db7b      	blt.n	800f486 <UART_SetConfig+0x8b2>
 800f38e:	2b20      	cmp	r3, #32
 800f390:	d879      	bhi.n	800f486 <UART_SetConfig+0x8b2>
 800f392:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <UART_SetConfig+0x7c4>)
 800f394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f398:	0800f423 	.word	0x0800f423
 800f39c:	0800f42b 	.word	0x0800f42b
 800f3a0:	0800f487 	.word	0x0800f487
 800f3a4:	0800f487 	.word	0x0800f487
 800f3a8:	0800f433 	.word	0x0800f433
 800f3ac:	0800f487 	.word	0x0800f487
 800f3b0:	0800f487 	.word	0x0800f487
 800f3b4:	0800f487 	.word	0x0800f487
 800f3b8:	0800f443 	.word	0x0800f443
 800f3bc:	0800f487 	.word	0x0800f487
 800f3c0:	0800f487 	.word	0x0800f487
 800f3c4:	0800f487 	.word	0x0800f487
 800f3c8:	0800f487 	.word	0x0800f487
 800f3cc:	0800f487 	.word	0x0800f487
 800f3d0:	0800f487 	.word	0x0800f487
 800f3d4:	0800f487 	.word	0x0800f487
 800f3d8:	0800f453 	.word	0x0800f453
 800f3dc:	0800f487 	.word	0x0800f487
 800f3e0:	0800f487 	.word	0x0800f487
 800f3e4:	0800f487 	.word	0x0800f487
 800f3e8:	0800f487 	.word	0x0800f487
 800f3ec:	0800f487 	.word	0x0800f487
 800f3f0:	0800f487 	.word	0x0800f487
 800f3f4:	0800f487 	.word	0x0800f487
 800f3f8:	0800f487 	.word	0x0800f487
 800f3fc:	0800f487 	.word	0x0800f487
 800f400:	0800f487 	.word	0x0800f487
 800f404:	0800f487 	.word	0x0800f487
 800f408:	0800f487 	.word	0x0800f487
 800f40c:	0800f487 	.word	0x0800f487
 800f410:	0800f487 	.word	0x0800f487
 800f414:	0800f487 	.word	0x0800f487
 800f418:	0800f479 	.word	0x0800f479
 800f41c:	2b40      	cmp	r3, #64	; 0x40
 800f41e:	d02e      	beq.n	800f47e <UART_SetConfig+0x8aa>
 800f420:	e031      	b.n	800f486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f422:	f7fa f847 	bl	80094b4 <HAL_RCC_GetPCLK1Freq>
 800f426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f428:	e033      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f42a:	f7fa f859 	bl	80094e0 <HAL_RCC_GetPCLK2Freq>
 800f42e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f430:	e02f      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f436:	4618      	mov	r0, r3
 800f438:	f7fc f808 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f440:	e027      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f442:	f107 0318 	add.w	r3, r7, #24
 800f446:	4618      	mov	r0, r3
 800f448:	f7fc f954 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f450:	e01f      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f452:	4b2d      	ldr	r3, [pc, #180]	; (800f508 <UART_SetConfig+0x934>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f003 0320 	and.w	r3, r3, #32
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d009      	beq.n	800f472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f45e:	4b2a      	ldr	r3, [pc, #168]	; (800f508 <UART_SetConfig+0x934>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	08db      	lsrs	r3, r3, #3
 800f464:	f003 0303 	and.w	r3, r3, #3
 800f468:	4a24      	ldr	r2, [pc, #144]	; (800f4fc <UART_SetConfig+0x928>)
 800f46a:	fa22 f303 	lsr.w	r3, r2, r3
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f470:	e00f      	b.n	800f492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f472:	4b22      	ldr	r3, [pc, #136]	; (800f4fc <UART_SetConfig+0x928>)
 800f474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f476:	e00c      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f478:	4b21      	ldr	r3, [pc, #132]	; (800f500 <UART_SetConfig+0x92c>)
 800f47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f47c:	e009      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f484:	e005      	b.n	800f492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f486:	2300      	movs	r3, #0
 800f488:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 80e7 	beq.w	800f668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49e:	4a19      	ldr	r2, [pc, #100]	; (800f504 <UART_SetConfig+0x930>)
 800f4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4ac:	005a      	lsls	r2, r3, #1
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	085b      	lsrs	r3, r3, #1
 800f4b4:	441a      	add	r2, r3
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	2b0f      	cmp	r3, #15
 800f4c4:	d916      	bls.n	800f4f4 <UART_SetConfig+0x920>
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4cc:	d212      	bcs.n	800f4f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	f023 030f 	bic.w	r3, r3, #15
 800f4d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	085b      	lsrs	r3, r3, #1
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	f003 0307 	and.w	r3, r3, #7
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4f0:	60da      	str	r2, [r3, #12]
 800f4f2:	e0b9      	b.n	800f668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4fa:	e0b5      	b.n	800f668 <UART_SetConfig+0xa94>
 800f4fc:	03d09000 	.word	0x03d09000
 800f500:	003d0900 	.word	0x003d0900
 800f504:	08010d24 	.word	0x08010d24
 800f508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f50c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f510:	2b20      	cmp	r3, #32
 800f512:	dc49      	bgt.n	800f5a8 <UART_SetConfig+0x9d4>
 800f514:	2b00      	cmp	r3, #0
 800f516:	db7c      	blt.n	800f612 <UART_SetConfig+0xa3e>
 800f518:	2b20      	cmp	r3, #32
 800f51a:	d87a      	bhi.n	800f612 <UART_SetConfig+0xa3e>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <UART_SetConfig+0x950>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f5af 	.word	0x0800f5af
 800f528:	0800f5b7 	.word	0x0800f5b7
 800f52c:	0800f613 	.word	0x0800f613
 800f530:	0800f613 	.word	0x0800f613
 800f534:	0800f5bf 	.word	0x0800f5bf
 800f538:	0800f613 	.word	0x0800f613
 800f53c:	0800f613 	.word	0x0800f613
 800f540:	0800f613 	.word	0x0800f613
 800f544:	0800f5cf 	.word	0x0800f5cf
 800f548:	0800f613 	.word	0x0800f613
 800f54c:	0800f613 	.word	0x0800f613
 800f550:	0800f613 	.word	0x0800f613
 800f554:	0800f613 	.word	0x0800f613
 800f558:	0800f613 	.word	0x0800f613
 800f55c:	0800f613 	.word	0x0800f613
 800f560:	0800f613 	.word	0x0800f613
 800f564:	0800f5df 	.word	0x0800f5df
 800f568:	0800f613 	.word	0x0800f613
 800f56c:	0800f613 	.word	0x0800f613
 800f570:	0800f613 	.word	0x0800f613
 800f574:	0800f613 	.word	0x0800f613
 800f578:	0800f613 	.word	0x0800f613
 800f57c:	0800f613 	.word	0x0800f613
 800f580:	0800f613 	.word	0x0800f613
 800f584:	0800f613 	.word	0x0800f613
 800f588:	0800f613 	.word	0x0800f613
 800f58c:	0800f613 	.word	0x0800f613
 800f590:	0800f613 	.word	0x0800f613
 800f594:	0800f613 	.word	0x0800f613
 800f598:	0800f613 	.word	0x0800f613
 800f59c:	0800f613 	.word	0x0800f613
 800f5a0:	0800f613 	.word	0x0800f613
 800f5a4:	0800f605 	.word	0x0800f605
 800f5a8:	2b40      	cmp	r3, #64	; 0x40
 800f5aa:	d02e      	beq.n	800f60a <UART_SetConfig+0xa36>
 800f5ac:	e031      	b.n	800f612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5ae:	f7f9 ff81 	bl	80094b4 <HAL_RCC_GetPCLK1Freq>
 800f5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5b4:	e033      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5b6:	f7f9 ff93 	bl	80094e0 <HAL_RCC_GetPCLK2Freq>
 800f5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5bc:	e02f      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fb ff42 	bl	800b44c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5cc:	e027      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ce:	f107 0318 	add.w	r3, r7, #24
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fc f88e 	bl	800b6f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5dc:	e01f      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5de:	4b2d      	ldr	r3, [pc, #180]	; (800f694 <UART_SetConfig+0xac0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5ea:	4b2a      	ldr	r3, [pc, #168]	; (800f694 <UART_SetConfig+0xac0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	08db      	lsrs	r3, r3, #3
 800f5f0:	f003 0303 	and.w	r3, r3, #3
 800f5f4:	4a28      	ldr	r2, [pc, #160]	; (800f698 <UART_SetConfig+0xac4>)
 800f5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5fc:	e00f      	b.n	800f61e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f5fe:	4b26      	ldr	r3, [pc, #152]	; (800f698 <UART_SetConfig+0xac4>)
 800f600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f602:	e00c      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f604:	4b25      	ldr	r3, [pc, #148]	; (800f69c <UART_SetConfig+0xac8>)
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f608:	e009      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f610:	e005      	b.n	800f61e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f612:	2300      	movs	r3, #0
 800f614:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f61c:	bf00      	nop
    }

    if (pclk != 0U)
 800f61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f620:	2b00      	cmp	r3, #0
 800f622:	d021      	beq.n	800f668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f628:	4a1d      	ldr	r2, [pc, #116]	; (800f6a0 <UART_SetConfig+0xacc>)
 800f62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f62e:	461a      	mov	r2, r3
 800f630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f632:	fbb3 f2f2 	udiv	r2, r3, r2
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	085b      	lsrs	r3, r3, #1
 800f63c:	441a      	add	r2, r3
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	fbb2 f3f3 	udiv	r3, r2, r3
 800f646:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	2b0f      	cmp	r3, #15
 800f64c:	d909      	bls.n	800f662 <UART_SetConfig+0xa8e>
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f654:	d205      	bcs.n	800f662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	b29a      	uxth	r2, r3
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	60da      	str	r2, [r3, #12]
 800f660:	e002      	b.n	800f668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2201      	movs	r2, #1
 800f674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2200      	movs	r2, #0
 800f67c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2200      	movs	r2, #0
 800f682:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f684:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3748      	adds	r7, #72	; 0x48
 800f68c:	46bd      	mov	sp, r7
 800f68e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f692:	bf00      	nop
 800f694:	58024400 	.word	0x58024400
 800f698:	03d09000 	.word	0x03d09000
 800f69c:	003d0900 	.word	0x003d0900
 800f6a0:	08010d24 	.word	0x08010d24

0800f6a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b0:	f003 0308 	and.w	r3, r3, #8
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00a      	beq.n	800f6ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f4:	f003 0302 	and.w	r3, r3, #2
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00a      	beq.n	800f712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	430a      	orrs	r2, r1
 800f710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f716:	f003 0304 	and.w	r3, r3, #4
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	430a      	orrs	r2, r1
 800f732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f738:	f003 0310 	and.w	r3, r3, #16
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00a      	beq.n	800f756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	430a      	orrs	r2, r1
 800f754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75a:	f003 0320 	and.w	r3, r3, #32
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00a      	beq.n	800f778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	430a      	orrs	r2, r1
 800f776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f780:	2b00      	cmp	r3, #0
 800f782:	d01a      	beq.n	800f7ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	430a      	orrs	r2, r1
 800f798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f79e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7a2:	d10a      	bne.n	800f7ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	430a      	orrs	r2, r1
 800f7b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00a      	beq.n	800f7dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	430a      	orrs	r2, r1
 800f7da:	605a      	str	r2, [r3, #4]
  }
}
 800f7dc:	bf00      	nop
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b098      	sub	sp, #96	; 0x60
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7f8:	f7f2 fff8 	bl	80027ec <HAL_GetTick>
 800f7fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f003 0308 	and.w	r3, r3, #8
 800f808:	2b08      	cmp	r3, #8
 800f80a:	d12f      	bne.n	800f86c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f80c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f810:	9300      	str	r3, [sp, #0]
 800f812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f814:	2200      	movs	r2, #0
 800f816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 f88e 	bl	800f93c <UART_WaitOnFlagUntilTimeout>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d022      	beq.n	800f86c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82e:	e853 3f00 	ldrex	r3, [r3]
 800f832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f83a:	653b      	str	r3, [r7, #80]	; 0x50
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	461a      	mov	r2, r3
 800f842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f844:	647b      	str	r3, [r7, #68]	; 0x44
 800f846:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f84a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84c:	e841 2300 	strex	r3, r2, [r1]
 800f850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1e6      	bne.n	800f826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2220      	movs	r2, #32
 800f85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f868:	2303      	movs	r3, #3
 800f86a:	e063      	b.n	800f934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f003 0304 	and.w	r3, r3, #4
 800f876:	2b04      	cmp	r3, #4
 800f878:	d149      	bne.n	800f90e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f87a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f882:	2200      	movs	r2, #0
 800f884:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f857 	bl	800f93c <UART_WaitOnFlagUntilTimeout>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d03c      	beq.n	800f90e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	e853 3f00 	ldrex	r3, [r3]
 800f8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800f8a2:	6a3b      	ldr	r3, [r7, #32]
 800f8a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ba:	e841 2300 	strex	r3, r2, [r1]
 800f8be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1e6      	bne.n	800f894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3308      	adds	r3, #8
 800f8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f023 0301 	bic.w	r3, r3, #1
 800f8dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3308      	adds	r3, #8
 800f8e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8e6:	61fa      	str	r2, [r7, #28]
 800f8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ea:	69b9      	ldr	r1, [r7, #24]
 800f8ec:	69fa      	ldr	r2, [r7, #28]
 800f8ee:	e841 2300 	strex	r3, r2, [r1]
 800f8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e5      	bne.n	800f8c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2220      	movs	r2, #32
 800f8fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f90a:	2303      	movs	r3, #3
 800f90c:	e012      	b.n	800f934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2220      	movs	r2, #32
 800f912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2220      	movs	r2, #32
 800f91a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3758      	adds	r7, #88	; 0x58
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	603b      	str	r3, [r7, #0]
 800f948:	4613      	mov	r3, r2
 800f94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f94c:	e04f      	b.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f954:	d04b      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f956:	f7f2 ff49 	bl	80027ec <HAL_GetTick>
 800f95a:	4602      	mov	r2, r0
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	69ba      	ldr	r2, [r7, #24]
 800f962:	429a      	cmp	r2, r3
 800f964:	d302      	bcc.n	800f96c <UART_WaitOnFlagUntilTimeout+0x30>
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d101      	bne.n	800f970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f96c:	2303      	movs	r3, #3
 800f96e:	e04e      	b.n	800fa0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d037      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2b80      	cmp	r3, #128	; 0x80
 800f982:	d034      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	2b40      	cmp	r3, #64	; 0x40
 800f988:	d031      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	69db      	ldr	r3, [r3, #28]
 800f990:	f003 0308 	and.w	r3, r3, #8
 800f994:	2b08      	cmp	r3, #8
 800f996:	d110      	bne.n	800f9ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2208      	movs	r2, #8
 800f99e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 f95b 	bl	800fc5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2208      	movs	r2, #8
 800f9aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	e029      	b.n	800fa0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	69db      	ldr	r3, [r3, #28]
 800f9c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9c8:	d111      	bne.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f000 f941 	bl	800fc5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2220      	movs	r2, #32
 800f9de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e00f      	b.n	800fa0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	69da      	ldr	r2, [r3, #28]
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	4013      	ands	r3, r2
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	bf0c      	ite	eq
 800f9fe:	2301      	moveq	r3, #1
 800fa00:	2300      	movne	r3, #0
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	461a      	mov	r2, r3
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d0a0      	beq.n	800f94e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b0a3      	sub	sp, #140	; 0x8c
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	4613      	mov	r3, r2
 800fa24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	88fa      	ldrh	r2, [r7, #6]
 800fa30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	88fa      	ldrh	r2, [r7, #6]
 800fa38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	689b      	ldr	r3, [r3, #8]
 800fa46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa4a:	d10e      	bne.n	800fa6a <UART_Start_Receive_IT+0x52>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d105      	bne.n	800fa60 <UART_Start_Receive_IT+0x48>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fa5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa5e:	e02d      	b.n	800fabc <UART_Start_Receive_IT+0xa4>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	22ff      	movs	r2, #255	; 0xff
 800fa64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa68:	e028      	b.n	800fabc <UART_Start_Receive_IT+0xa4>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d10d      	bne.n	800fa8e <UART_Start_Receive_IT+0x76>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d104      	bne.n	800fa84 <UART_Start_Receive_IT+0x6c>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	22ff      	movs	r2, #255	; 0xff
 800fa7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa82:	e01b      	b.n	800fabc <UART_Start_Receive_IT+0xa4>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	227f      	movs	r2, #127	; 0x7f
 800fa88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa8c:	e016      	b.n	800fabc <UART_Start_Receive_IT+0xa4>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	689b      	ldr	r3, [r3, #8]
 800fa92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa96:	d10d      	bne.n	800fab4 <UART_Start_Receive_IT+0x9c>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d104      	bne.n	800faaa <UART_Start_Receive_IT+0x92>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	227f      	movs	r2, #127	; 0x7f
 800faa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800faa8:	e008      	b.n	800fabc <UART_Start_Receive_IT+0xa4>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	223f      	movs	r2, #63	; 0x3f
 800faae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fab2:	e003      	b.n	800fabc <UART_Start_Receive_IT+0xa4>
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2200      	movs	r2, #0
 800fac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2222      	movs	r2, #34	; 0x22
 800fac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	3308      	adds	r3, #8
 800fad2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fad6:	e853 3f00 	ldrex	r3, [r3]
 800fada:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fadc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fade:	f043 0301 	orr.w	r3, r3, #1
 800fae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	3308      	adds	r3, #8
 800faec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800faf0:	673a      	str	r2, [r7, #112]	; 0x70
 800faf2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800faf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800faf8:	e841 2300 	strex	r3, r2, [r1]
 800fafc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fafe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1e3      	bne.n	800facc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb0c:	d14f      	bne.n	800fbae <UART_Start_Receive_IT+0x196>
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb14:	88fa      	ldrh	r2, [r7, #6]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d349      	bcc.n	800fbae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb22:	d107      	bne.n	800fb34 <UART_Start_Receive_IT+0x11c>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d103      	bne.n	800fb34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4a47      	ldr	r2, [pc, #284]	; (800fc4c <UART_Start_Receive_IT+0x234>)
 800fb30:	675a      	str	r2, [r3, #116]	; 0x74
 800fb32:	e002      	b.n	800fb3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	4a46      	ldr	r2, [pc, #280]	; (800fc50 <UART_Start_Receive_IT+0x238>)
 800fb38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d01a      	beq.n	800fb78 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb4a:	e853 3f00 	ldrex	r3, [r3]
 800fb4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	461a      	mov	r2, r3
 800fb60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb66:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb6c:	e841 2300 	strex	r3, r2, [r1]
 800fb70:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1e4      	bne.n	800fb42 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb82:	e853 3f00 	ldrex	r3, [r3]
 800fb86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	3308      	adds	r3, #8
 800fb96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb98:	64ba      	str	r2, [r7, #72]	; 0x48
 800fb9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fba0:	e841 2300 	strex	r3, r2, [r1]
 800fba4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1e5      	bne.n	800fb78 <UART_Start_Receive_IT+0x160>
 800fbac:	e046      	b.n	800fc3c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbb6:	d107      	bne.n	800fbc8 <UART_Start_Receive_IT+0x1b0>
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d103      	bne.n	800fbc8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4a24      	ldr	r2, [pc, #144]	; (800fc54 <UART_Start_Receive_IT+0x23c>)
 800fbc4:	675a      	str	r2, [r3, #116]	; 0x74
 800fbc6:	e002      	b.n	800fbce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	4a23      	ldr	r2, [pc, #140]	; (800fc58 <UART_Start_Receive_IT+0x240>)
 800fbcc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d019      	beq.n	800fc0a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	e853 3f00 	ldrex	r3, [r3]
 800fbe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fbea:	677b      	str	r3, [r7, #116]	; 0x74
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbf4:	637b      	str	r3, [r7, #52]	; 0x34
 800fbf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbfc:	e841 2300 	strex	r3, r2, [r1]
 800fc00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1e6      	bne.n	800fbd6 <UART_Start_Receive_IT+0x1be>
 800fc08:	e018      	b.n	800fc3c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	e853 3f00 	ldrex	r3, [r3]
 800fc16:	613b      	str	r3, [r7, #16]
   return(result);
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	f043 0320 	orr.w	r3, r3, #32
 800fc1e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	461a      	mov	r2, r3
 800fc26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc28:	623b      	str	r3, [r7, #32]
 800fc2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2c:	69f9      	ldr	r1, [r7, #28]
 800fc2e:	6a3a      	ldr	r2, [r7, #32]
 800fc30:	e841 2300 	strex	r3, r2, [r1]
 800fc34:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1e6      	bne.n	800fc0a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	378c      	adds	r7, #140	; 0x8c
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	0801047d 	.word	0x0801047d
 800fc50:	0801011d 	.word	0x0801011d
 800fc54:	0800ff65 	.word	0x0800ff65
 800fc58:	0800fdad 	.word	0x0800fdad

0800fc5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b095      	sub	sp, #84	; 0x54
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6c:	e853 3f00 	ldrex	r3, [r3]
 800fc70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc82:	643b      	str	r3, [r7, #64]	; 0x40
 800fc84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc8a:	e841 2300 	strex	r3, r2, [r1]
 800fc8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1e6      	bne.n	800fc64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3308      	adds	r3, #8
 800fc9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9e:	6a3b      	ldr	r3, [r7, #32]
 800fca0:	e853 3f00 	ldrex	r3, [r3]
 800fca4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fca6:	69fa      	ldr	r2, [r7, #28]
 800fca8:	4b1e      	ldr	r3, [pc, #120]	; (800fd24 <UART_EndRxTransfer+0xc8>)
 800fcaa:	4013      	ands	r3, r2
 800fcac:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3308      	adds	r3, #8
 800fcb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcbe:	e841 2300 	strex	r3, r2, [r1]
 800fcc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1e5      	bne.n	800fc96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d118      	bne.n	800fd04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	e853 3f00 	ldrex	r3, [r3]
 800fcde:	60bb      	str	r3, [r7, #8]
   return(result);
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	f023 0310 	bic.w	r3, r3, #16
 800fce6:	647b      	str	r3, [r7, #68]	; 0x44
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	461a      	mov	r2, r3
 800fcee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcf0:	61bb      	str	r3, [r7, #24]
 800fcf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf4:	6979      	ldr	r1, [r7, #20]
 800fcf6:	69ba      	ldr	r2, [r7, #24]
 800fcf8:	e841 2300 	strex	r3, r2, [r1]
 800fcfc:	613b      	str	r3, [r7, #16]
   return(result);
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d1e6      	bne.n	800fcd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2220      	movs	r2, #32
 800fd08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fd18:	bf00      	nop
 800fd1a:	3754      	adds	r7, #84	; 0x54
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	effffffe 	.word	0xeffffffe

0800fd28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f7fe ff2e 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd4c:	bf00      	nop
 800fd4e:	3710      	adds	r7, #16
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b088      	sub	sp, #32
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	e853 3f00 	ldrex	r3, [r3]
 800fd68:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd70:	61fb      	str	r3, [r7, #28]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	61bb      	str	r3, [r7, #24]
 800fd7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7e:	6979      	ldr	r1, [r7, #20]
 800fd80:	69ba      	ldr	r2, [r7, #24]
 800fd82:	e841 2300 	strex	r3, r2, [r1]
 800fd86:	613b      	str	r3, [r7, #16]
   return(result);
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d1e6      	bne.n	800fd5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2220      	movs	r2, #32
 800fd92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7fe fef9 	bl	800eb94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fda2:	bf00      	nop
 800fda4:	3720      	adds	r7, #32
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
	...

0800fdac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b09c      	sub	sp, #112	; 0x70
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fdba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdc4:	2b22      	cmp	r3, #34	; 0x22
 800fdc6:	f040 80be 	bne.w	800ff46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fdd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fdd8:	b2d9      	uxtb	r1, r3
 800fdda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fde4:	400a      	ands	r2, r1
 800fde6:	b2d2      	uxtb	r2, r2
 800fde8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdee:	1c5a      	adds	r2, r3, #1
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f040 80a1 	bne.w	800ff56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe1c:	e853 3f00 	ldrex	r3, [r3]
 800fe20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe28:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe32:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe3a:	e841 2300 	strex	r3, r2, [r1]
 800fe3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1e6      	bne.n	800fe14 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	3308      	adds	r3, #8
 800fe4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe50:	e853 3f00 	ldrex	r3, [r3]
 800fe54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe58:	f023 0301 	bic.w	r3, r3, #1
 800fe5c:	667b      	str	r3, [r7, #100]	; 0x64
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	3308      	adds	r3, #8
 800fe64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe66:	647a      	str	r2, [r7, #68]	; 0x44
 800fe68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe6e:	e841 2300 	strex	r3, r2, [r1]
 800fe72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1e5      	bne.n	800fe46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2220      	movs	r2, #32
 800fe7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a33      	ldr	r2, [pc, #204]	; (800ff60 <UART_RxISR_8BIT+0x1b4>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d01f      	beq.n	800fed8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d018      	beq.n	800fed8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	e853 3f00 	ldrex	r3, [r3]
 800feb2:	623b      	str	r3, [r7, #32]
   return(result);
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800feba:	663b      	str	r3, [r7, #96]	; 0x60
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	461a      	mov	r2, r3
 800fec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fec4:	633b      	str	r3, [r7, #48]	; 0x30
 800fec6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800feca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fecc:	e841 2300 	strex	r3, r2, [r1]
 800fed0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1e6      	bne.n	800fea6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d12e      	bne.n	800ff3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	e853 3f00 	ldrex	r3, [r3]
 800fef2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f023 0310 	bic.w	r3, r3, #16
 800fefa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	461a      	mov	r2, r3
 800ff02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff04:	61fb      	str	r3, [r7, #28]
 800ff06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff08:	69b9      	ldr	r1, [r7, #24]
 800ff0a:	69fa      	ldr	r2, [r7, #28]
 800ff0c:	e841 2300 	strex	r3, r2, [r1]
 800ff10:	617b      	str	r3, [r7, #20]
   return(result);
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1e6      	bne.n	800fee6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	69db      	ldr	r3, [r3, #28]
 800ff1e:	f003 0310 	and.w	r3, r3, #16
 800ff22:	2b10      	cmp	r3, #16
 800ff24:	d103      	bne.n	800ff2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2210      	movs	r2, #16
 800ff2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7fe fe40 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff3c:	e00b      	b.n	800ff56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7f0 feb4 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 800ff44:	e007      	b.n	800ff56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	699a      	ldr	r2, [r3, #24]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f042 0208 	orr.w	r2, r2, #8
 800ff54:	619a      	str	r2, [r3, #24]
}
 800ff56:	bf00      	nop
 800ff58:	3770      	adds	r7, #112	; 0x70
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	58000c00 	.word	0x58000c00

0800ff64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b09c      	sub	sp, #112	; 0x70
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff7c:	2b22      	cmp	r3, #34	; 0x22
 800ff7e:	f040 80be 	bne.w	80100fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ff92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ff96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	b29a      	uxth	r2, r3
 800ff9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffa0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffa6:	1c9a      	adds	r2, r3, #2
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	3b01      	subs	r3, #1
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f040 80a1 	bne.w	801010e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd4:	e853 3f00 	ldrex	r3, [r3]
 800ffd8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ffda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffe0:	667b      	str	r3, [r7, #100]	; 0x64
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffea:	657b      	str	r3, [r7, #84]	; 0x54
 800ffec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fff2:	e841 2300 	strex	r3, r2, [r1]
 800fff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1e6      	bne.n	800ffcc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3308      	adds	r3, #8
 8010004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010008:	e853 3f00 	ldrex	r3, [r3]
 801000c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801000e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010010:	f023 0301 	bic.w	r3, r3, #1
 8010014:	663b      	str	r3, [r7, #96]	; 0x60
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3308      	adds	r3, #8
 801001c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801001e:	643a      	str	r2, [r7, #64]	; 0x40
 8010020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010026:	e841 2300 	strex	r3, r2, [r1]
 801002a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1e5      	bne.n	800fffe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2220      	movs	r2, #32
 8010036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a33      	ldr	r2, [pc, #204]	; (8010118 <UART_RxISR_16BIT+0x1b4>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d01f      	beq.n	8010090 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801005a:	2b00      	cmp	r3, #0
 801005c:	d018      	beq.n	8010090 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010064:	6a3b      	ldr	r3, [r7, #32]
 8010066:	e853 3f00 	ldrex	r3, [r3]
 801006a:	61fb      	str	r3, [r7, #28]
   return(result);
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	461a      	mov	r2, r3
 801007a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801007c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801007e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010084:	e841 2300 	strex	r3, r2, [r1]
 8010088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801008a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1e6      	bne.n	801005e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010094:	2b01      	cmp	r3, #1
 8010096:	d12e      	bne.n	80100f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	e853 3f00 	ldrex	r3, [r3]
 80100aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	f023 0310 	bic.w	r3, r3, #16
 80100b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	461a      	mov	r2, r3
 80100ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100bc:	61bb      	str	r3, [r7, #24]
 80100be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c0:	6979      	ldr	r1, [r7, #20]
 80100c2:	69ba      	ldr	r2, [r7, #24]
 80100c4:	e841 2300 	strex	r3, r2, [r1]
 80100c8:	613b      	str	r3, [r7, #16]
   return(result);
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1e6      	bne.n	801009e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	69db      	ldr	r3, [r3, #28]
 80100d6:	f003 0310 	and.w	r3, r3, #16
 80100da:	2b10      	cmp	r3, #16
 80100dc:	d103      	bne.n	80100e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2210      	movs	r2, #16
 80100e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100ec:	4619      	mov	r1, r3
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7fe fd64 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80100f4:	e00b      	b.n	801010e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7f0 fdd8 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 80100fc:	e007      	b.n	801010e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	699a      	ldr	r2, [r3, #24]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f042 0208 	orr.w	r2, r2, #8
 801010c:	619a      	str	r2, [r3, #24]
}
 801010e:	bf00      	nop
 8010110:	3770      	adds	r7, #112	; 0x70
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	58000c00 	.word	0x58000c00

0801011c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b0ac      	sub	sp, #176	; 0xb0
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801012a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	69db      	ldr	r3, [r3, #28]
 8010134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010152:	2b22      	cmp	r3, #34	; 0x22
 8010154:	f040 8180 	bne.w	8010458 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801015e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010162:	e123      	b.n	80103ac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801016e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010172:	b2d9      	uxtb	r1, r3
 8010174:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010178:	b2da      	uxtb	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801017e:	400a      	ands	r2, r1
 8010180:	b2d2      	uxtb	r2, r2
 8010182:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010188:	1c5a      	adds	r2, r3, #1
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010194:	b29b      	uxth	r3, r3
 8010196:	3b01      	subs	r3, #1
 8010198:	b29a      	uxth	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	69db      	ldr	r3, [r3, #28]
 80101a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80101aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ae:	f003 0307 	and.w	r3, r3, #7
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d053      	beq.n	801025e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ba:	f003 0301 	and.w	r3, r3, #1
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d011      	beq.n	80101e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80101c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00b      	beq.n	80101e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	2201      	movs	r2, #1
 80101d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101dc:	f043 0201 	orr.w	r2, r3, #1
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ea:	f003 0302 	and.w	r3, r3, #2
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d011      	beq.n	8010216 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80101f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101f6:	f003 0301 	and.w	r3, r3, #1
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00b      	beq.n	8010216 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2202      	movs	r2, #2
 8010204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801020c:	f043 0204 	orr.w	r2, r3, #4
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801021a:	f003 0304 	and.w	r3, r3, #4
 801021e:	2b00      	cmp	r3, #0
 8010220:	d011      	beq.n	8010246 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010226:	f003 0301 	and.w	r3, r3, #1
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00b      	beq.n	8010246 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2204      	movs	r2, #4
 8010234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801023c:	f043 0202 	orr.w	r2, r3, #2
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801024c:	2b00      	cmp	r3, #0
 801024e:	d006      	beq.n	801025e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7fe fca9 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010264:	b29b      	uxth	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	f040 80a0 	bne.w	80103ac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010274:	e853 3f00 	ldrex	r3, [r3]
 8010278:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801027a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801027c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801028e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010290:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010292:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010294:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010296:	e841 2300 	strex	r3, r2, [r1]
 801029a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801029c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1e4      	bne.n	801026c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	3308      	adds	r3, #8
 80102a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102ac:	e853 3f00 	ldrex	r3, [r3]
 80102b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80102b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102b4:	4b6e      	ldr	r3, [pc, #440]	; (8010470 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80102b6:	4013      	ands	r3, r2
 80102b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3308      	adds	r3, #8
 80102c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80102c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80102c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80102cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102ce:	e841 2300 	strex	r3, r2, [r1]
 80102d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80102d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d1e3      	bne.n	80102a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2220      	movs	r2, #32
 80102de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4a60      	ldr	r2, [pc, #384]	; (8010474 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d021      	beq.n	801033c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010302:	2b00      	cmp	r3, #0
 8010304:	d01a      	beq.n	801033c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801030e:	e853 3f00 	ldrex	r3, [r3]
 8010312:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801031a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	461a      	mov	r2, r3
 8010324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010328:	657b      	str	r3, [r7, #84]	; 0x54
 801032a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801032c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801032e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010330:	e841 2300 	strex	r3, r2, [r1]
 8010334:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1e4      	bne.n	8010306 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010340:	2b01      	cmp	r3, #1
 8010342:	d130      	bne.n	80103a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010352:	e853 3f00 	ldrex	r3, [r3]
 8010356:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035a:	f023 0310 	bic.w	r3, r3, #16
 801035e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	461a      	mov	r2, r3
 8010368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801036c:	643b      	str	r3, [r7, #64]	; 0x40
 801036e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010374:	e841 2300 	strex	r3, r2, [r1]
 8010378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801037a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1e4      	bne.n	801034a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	69db      	ldr	r3, [r3, #28]
 8010386:	f003 0310 	and.w	r3, r3, #16
 801038a:	2b10      	cmp	r3, #16
 801038c:	d103      	bne.n	8010396 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2210      	movs	r2, #16
 8010394:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801039c:	4619      	mov	r1, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7fe fc0c 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
 80103a4:	e002      	b.n	80103ac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7f0 fc80 	bl	8000cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d006      	beq.n	80103c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80103b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103b8:	f003 0320 	and.w	r3, r3, #32
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f47f aed1 	bne.w	8010164 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80103cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d049      	beq.n	8010468 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80103de:	429a      	cmp	r2, r3
 80103e0:	d242      	bcs.n	8010468 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3308      	adds	r3, #8
 80103e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ea:	6a3b      	ldr	r3, [r7, #32]
 80103ec:	e853 3f00 	ldrex	r3, [r3]
 80103f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	3308      	adds	r3, #8
 8010402:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801040c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801040e:	e841 2300 	strex	r3, r2, [r1]
 8010412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1e3      	bne.n	80103e2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4a16      	ldr	r2, [pc, #88]	; (8010478 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801041e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	e853 3f00 	ldrex	r3, [r3]
 801042c:	60bb      	str	r3, [r7, #8]
   return(result);
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	f043 0320 	orr.w	r3, r3, #32
 8010434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010442:	61bb      	str	r3, [r7, #24]
 8010444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010446:	6979      	ldr	r1, [r7, #20]
 8010448:	69ba      	ldr	r2, [r7, #24]
 801044a:	e841 2300 	strex	r3, r2, [r1]
 801044e:	613b      	str	r3, [r7, #16]
   return(result);
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1e4      	bne.n	8010420 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010456:	e007      	b.n	8010468 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	699a      	ldr	r2, [r3, #24]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f042 0208 	orr.w	r2, r2, #8
 8010466:	619a      	str	r2, [r3, #24]
}
 8010468:	bf00      	nop
 801046a:	37b0      	adds	r7, #176	; 0xb0
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	effffffe 	.word	0xeffffffe
 8010474:	58000c00 	.word	0x58000c00
 8010478:	0800fdad 	.word	0x0800fdad

0801047c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b0ae      	sub	sp, #184	; 0xb8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801048a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	69db      	ldr	r3, [r3, #28]
 8010494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	689b      	ldr	r3, [r3, #8]
 80104a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104b2:	2b22      	cmp	r3, #34	; 0x22
 80104b4:	f040 8184 	bne.w	80107c0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104c2:	e127      	b.n	8010714 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80104d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80104da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80104de:	4013      	ands	r3, r2
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104ec:	1c9a      	adds	r2, r3, #2
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	3b01      	subs	r3, #1
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	69db      	ldr	r3, [r3, #28]
 801050a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801050e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010512:	f003 0307 	and.w	r3, r3, #7
 8010516:	2b00      	cmp	r3, #0
 8010518:	d053      	beq.n	80105c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801051a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	d011      	beq.n	801054a <UART_RxISR_16BIT_FIFOEN+0xce>
 8010526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801052a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00b      	beq.n	801054a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2201      	movs	r2, #1
 8010538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010540:	f043 0201 	orr.w	r2, r3, #1
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801054a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801054e:	f003 0302 	and.w	r3, r3, #2
 8010552:	2b00      	cmp	r3, #0
 8010554:	d011      	beq.n	801057a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801055a:	f003 0301 	and.w	r3, r3, #1
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00b      	beq.n	801057a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2202      	movs	r2, #2
 8010568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010570:	f043 0204 	orr.w	r2, r3, #4
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801057a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801057e:	f003 0304 	and.w	r3, r3, #4
 8010582:	2b00      	cmp	r3, #0
 8010584:	d011      	beq.n	80105aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00b      	beq.n	80105aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2204      	movs	r2, #4
 8010598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105a0:	f043 0202 	orr.w	r2, r3, #2
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d006      	beq.n	80105c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7fe faf7 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f040 80a2 	bne.w	8010714 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105d8:	e853 3f00 	ldrex	r3, [r3]
 80105dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80105de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	461a      	mov	r2, r3
 80105ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105f6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105fe:	e841 2300 	strex	r3, r2, [r1]
 8010602:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e2      	bne.n	80105d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3308      	adds	r3, #8
 8010610:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010614:	e853 3f00 	ldrex	r3, [r3]
 8010618:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801061a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801061c:	4b6e      	ldr	r3, [pc, #440]	; (80107d8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801061e:	4013      	ands	r3, r2
 8010620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3308      	adds	r3, #8
 801062a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801062e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010630:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010632:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010634:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010636:	e841 2300 	strex	r3, r2, [r1]
 801063a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801063c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801063e:	2b00      	cmp	r3, #0
 8010640:	d1e3      	bne.n	801060a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2220      	movs	r2, #32
 8010646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a60      	ldr	r2, [pc, #384]	; (80107dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d021      	beq.n	80106a4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801066a:	2b00      	cmp	r3, #0
 801066c:	d01a      	beq.n	80106a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010676:	e853 3f00 	ldrex	r3, [r3]
 801067a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801067c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801067e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	461a      	mov	r2, r3
 801068c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010690:	65bb      	str	r3, [r7, #88]	; 0x58
 8010692:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010698:	e841 2300 	strex	r3, r2, [r1]
 801069c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801069e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1e4      	bne.n	801066e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d130      	bne.n	801070e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ba:	e853 3f00 	ldrex	r3, [r3]
 80106be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	f023 0310 	bic.w	r3, r3, #16
 80106c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106d4:	647b      	str	r3, [r7, #68]	; 0x44
 80106d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106dc:	e841 2300 	strex	r3, r2, [r1]
 80106e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d1e4      	bne.n	80106b2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	69db      	ldr	r3, [r3, #28]
 80106ee:	f003 0310 	and.w	r3, r3, #16
 80106f2:	2b10      	cmp	r3, #16
 80106f4:	d103      	bne.n	80106fe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2210      	movs	r2, #16
 80106fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010704:	4619      	mov	r1, r3
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7fe fa58 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
 801070c:	e002      	b.n	8010714 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7f0 facc 	bl	8000cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010714:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010718:	2b00      	cmp	r3, #0
 801071a:	d006      	beq.n	801072a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801071c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010720:	f003 0320 	and.w	r3, r3, #32
 8010724:	2b00      	cmp	r3, #0
 8010726:	f47f aecd 	bne.w	80104c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010730:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010734:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010738:	2b00      	cmp	r3, #0
 801073a:	d049      	beq.n	80107d0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010742:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010746:	429a      	cmp	r2, r3
 8010748:	d242      	bcs.n	80107d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3308      	adds	r3, #8
 8010750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	e853 3f00 	ldrex	r3, [r3]
 8010758:	623b      	str	r3, [r7, #32]
   return(result);
 801075a:	6a3b      	ldr	r3, [r7, #32]
 801075c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	3308      	adds	r3, #8
 801076a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801076e:	633a      	str	r2, [r7, #48]	; 0x30
 8010770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010776:	e841 2300 	strex	r3, r2, [r1]
 801077a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e3      	bne.n	801074a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4a16      	ldr	r2, [pc, #88]	; (80107e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010786:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	e853 3f00 	ldrex	r3, [r3]
 8010794:	60fb      	str	r3, [r7, #12]
   return(result);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f043 0320 	orr.w	r3, r3, #32
 801079c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107aa:	61fb      	str	r3, [r7, #28]
 80107ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ae:	69b9      	ldr	r1, [r7, #24]
 80107b0:	69fa      	ldr	r2, [r7, #28]
 80107b2:	e841 2300 	strex	r3, r2, [r1]
 80107b6:	617b      	str	r3, [r7, #20]
   return(result);
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1e4      	bne.n	8010788 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107be:	e007      	b.n	80107d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	699a      	ldr	r2, [r3, #24]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f042 0208 	orr.w	r2, r2, #8
 80107ce:	619a      	str	r2, [r3, #24]
}
 80107d0:	bf00      	nop
 80107d2:	37b8      	adds	r7, #184	; 0xb8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	effffffe 	.word	0xeffffffe
 80107dc:	58000c00 	.word	0x58000c00
 80107e0:	0800ff65 	.word	0x0800ff65

080107e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80107ec:	bf00      	nop
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010814:	bf00      	nop
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801082e:	2b01      	cmp	r3, #1
 8010830:	d101      	bne.n	8010836 <HAL_UARTEx_DisableFifoMode+0x16>
 8010832:	2302      	movs	r3, #2
 8010834:	e027      	b.n	8010886 <HAL_UARTEx_DisableFifoMode+0x66>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2201      	movs	r2, #1
 801083a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2224      	movs	r2, #36	; 0x24
 8010842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f022 0201 	bic.w	r2, r2, #1
 801085c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2220      	movs	r2, #32
 8010878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr

08010892 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b084      	sub	sp, #16
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
 801089a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d101      	bne.n	80108aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108a6:	2302      	movs	r3, #2
 80108a8:	e02d      	b.n	8010906 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2201      	movs	r2, #1
 80108ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2224      	movs	r2, #36	; 0x24
 80108b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f022 0201 	bic.w	r2, r2, #1
 80108d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	430a      	orrs	r2, r1
 80108e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 f850 	bl	801098c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2220      	movs	r2, #32
 80108f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b084      	sub	sp, #16
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
 8010916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801091e:	2b01      	cmp	r3, #1
 8010920:	d101      	bne.n	8010926 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010922:	2302      	movs	r3, #2
 8010924:	e02d      	b.n	8010982 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2201      	movs	r2, #1
 801092a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2224      	movs	r2, #36	; 0x24
 8010932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f022 0201 	bic.w	r2, r2, #1
 801094c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	430a      	orrs	r2, r1
 8010960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 f812 	bl	801098c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2220      	movs	r2, #32
 8010974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010980:	2300      	movs	r3, #0
}
 8010982:	4618      	mov	r0, r3
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
	...

0801098c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010998:	2b00      	cmp	r3, #0
 801099a:	d108      	bne.n	80109ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2201      	movs	r2, #1
 80109a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2201      	movs	r2, #1
 80109a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109ac:	e031      	b.n	8010a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109ae:	2310      	movs	r3, #16
 80109b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80109b2:	2310      	movs	r3, #16
 80109b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	0e5b      	lsrs	r3, r3, #25
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	f003 0307 	and.w	r3, r3, #7
 80109c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	0f5b      	lsrs	r3, r3, #29
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	f003 0307 	and.w	r3, r3, #7
 80109d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109d6:	7bbb      	ldrb	r3, [r7, #14]
 80109d8:	7b3a      	ldrb	r2, [r7, #12]
 80109da:	4911      	ldr	r1, [pc, #68]	; (8010a20 <UARTEx_SetNbDataToProcess+0x94>)
 80109dc:	5c8a      	ldrb	r2, [r1, r2]
 80109de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80109e2:	7b3a      	ldrb	r2, [r7, #12]
 80109e4:	490f      	ldr	r1, [pc, #60]	; (8010a24 <UARTEx_SetNbDataToProcess+0x98>)
 80109e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80109ec:	b29a      	uxth	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109f4:	7bfb      	ldrb	r3, [r7, #15]
 80109f6:	7b7a      	ldrb	r2, [r7, #13]
 80109f8:	4909      	ldr	r1, [pc, #36]	; (8010a20 <UARTEx_SetNbDataToProcess+0x94>)
 80109fa:	5c8a      	ldrb	r2, [r1, r2]
 80109fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a00:	7b7a      	ldrb	r2, [r7, #13]
 8010a02:	4908      	ldr	r1, [pc, #32]	; (8010a24 <UARTEx_SetNbDataToProcess+0x98>)
 8010a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a12:	bf00      	nop
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	08010d3c 	.word	0x08010d3c
 8010a24:	08010d44 	.word	0x08010d44

08010a28 <malloc>:
 8010a28:	4b02      	ldr	r3, [pc, #8]	; (8010a34 <malloc+0xc>)
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	6818      	ldr	r0, [r3, #0]
 8010a2e:	f000 b82b 	b.w	8010a88 <_malloc_r>
 8010a32:	bf00      	nop
 8010a34:	240000a0 	.word	0x240000a0

08010a38 <free>:
 8010a38:	4b02      	ldr	r3, [pc, #8]	; (8010a44 <free+0xc>)
 8010a3a:	4601      	mov	r1, r0
 8010a3c:	6818      	ldr	r0, [r3, #0]
 8010a3e:	f000 b901 	b.w	8010c44 <_free_r>
 8010a42:	bf00      	nop
 8010a44:	240000a0 	.word	0x240000a0

08010a48 <sbrk_aligned>:
 8010a48:	b570      	push	{r4, r5, r6, lr}
 8010a4a:	4e0e      	ldr	r6, [pc, #56]	; (8010a84 <sbrk_aligned+0x3c>)
 8010a4c:	460c      	mov	r4, r1
 8010a4e:	6831      	ldr	r1, [r6, #0]
 8010a50:	4605      	mov	r5, r0
 8010a52:	b911      	cbnz	r1, 8010a5a <sbrk_aligned+0x12>
 8010a54:	f000 f8ac 	bl	8010bb0 <_sbrk_r>
 8010a58:	6030      	str	r0, [r6, #0]
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	f000 f8a7 	bl	8010bb0 <_sbrk_r>
 8010a62:	1c43      	adds	r3, r0, #1
 8010a64:	d00a      	beq.n	8010a7c <sbrk_aligned+0x34>
 8010a66:	1cc4      	adds	r4, r0, #3
 8010a68:	f024 0403 	bic.w	r4, r4, #3
 8010a6c:	42a0      	cmp	r0, r4
 8010a6e:	d007      	beq.n	8010a80 <sbrk_aligned+0x38>
 8010a70:	1a21      	subs	r1, r4, r0
 8010a72:	4628      	mov	r0, r5
 8010a74:	f000 f89c 	bl	8010bb0 <_sbrk_r>
 8010a78:	3001      	adds	r0, #1
 8010a7a:	d101      	bne.n	8010a80 <sbrk_aligned+0x38>
 8010a7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010a80:	4620      	mov	r0, r4
 8010a82:	bd70      	pop	{r4, r5, r6, pc}
 8010a84:	24000670 	.word	0x24000670

08010a88 <_malloc_r>:
 8010a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a8c:	1ccd      	adds	r5, r1, #3
 8010a8e:	f025 0503 	bic.w	r5, r5, #3
 8010a92:	3508      	adds	r5, #8
 8010a94:	2d0c      	cmp	r5, #12
 8010a96:	bf38      	it	cc
 8010a98:	250c      	movcc	r5, #12
 8010a9a:	2d00      	cmp	r5, #0
 8010a9c:	4607      	mov	r7, r0
 8010a9e:	db01      	blt.n	8010aa4 <_malloc_r+0x1c>
 8010aa0:	42a9      	cmp	r1, r5
 8010aa2:	d905      	bls.n	8010ab0 <_malloc_r+0x28>
 8010aa4:	230c      	movs	r3, #12
 8010aa6:	603b      	str	r3, [r7, #0]
 8010aa8:	2600      	movs	r6, #0
 8010aaa:	4630      	mov	r0, r6
 8010aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ab0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010b84 <_malloc_r+0xfc>
 8010ab4:	f000 f868 	bl	8010b88 <__malloc_lock>
 8010ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8010abc:	461c      	mov	r4, r3
 8010abe:	bb5c      	cbnz	r4, 8010b18 <_malloc_r+0x90>
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	4638      	mov	r0, r7
 8010ac4:	f7ff ffc0 	bl	8010a48 <sbrk_aligned>
 8010ac8:	1c43      	adds	r3, r0, #1
 8010aca:	4604      	mov	r4, r0
 8010acc:	d155      	bne.n	8010b7a <_malloc_r+0xf2>
 8010ace:	f8d8 4000 	ldr.w	r4, [r8]
 8010ad2:	4626      	mov	r6, r4
 8010ad4:	2e00      	cmp	r6, #0
 8010ad6:	d145      	bne.n	8010b64 <_malloc_r+0xdc>
 8010ad8:	2c00      	cmp	r4, #0
 8010ada:	d048      	beq.n	8010b6e <_malloc_r+0xe6>
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4638      	mov	r0, r7
 8010ae2:	eb04 0903 	add.w	r9, r4, r3
 8010ae6:	f000 f863 	bl	8010bb0 <_sbrk_r>
 8010aea:	4581      	cmp	r9, r0
 8010aec:	d13f      	bne.n	8010b6e <_malloc_r+0xe6>
 8010aee:	6821      	ldr	r1, [r4, #0]
 8010af0:	1a6d      	subs	r5, r5, r1
 8010af2:	4629      	mov	r1, r5
 8010af4:	4638      	mov	r0, r7
 8010af6:	f7ff ffa7 	bl	8010a48 <sbrk_aligned>
 8010afa:	3001      	adds	r0, #1
 8010afc:	d037      	beq.n	8010b6e <_malloc_r+0xe6>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	442b      	add	r3, r5
 8010b02:	6023      	str	r3, [r4, #0]
 8010b04:	f8d8 3000 	ldr.w	r3, [r8]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d038      	beq.n	8010b7e <_malloc_r+0xf6>
 8010b0c:	685a      	ldr	r2, [r3, #4]
 8010b0e:	42a2      	cmp	r2, r4
 8010b10:	d12b      	bne.n	8010b6a <_malloc_r+0xe2>
 8010b12:	2200      	movs	r2, #0
 8010b14:	605a      	str	r2, [r3, #4]
 8010b16:	e00f      	b.n	8010b38 <_malloc_r+0xb0>
 8010b18:	6822      	ldr	r2, [r4, #0]
 8010b1a:	1b52      	subs	r2, r2, r5
 8010b1c:	d41f      	bmi.n	8010b5e <_malloc_r+0xd6>
 8010b1e:	2a0b      	cmp	r2, #11
 8010b20:	d917      	bls.n	8010b52 <_malloc_r+0xca>
 8010b22:	1961      	adds	r1, r4, r5
 8010b24:	42a3      	cmp	r3, r4
 8010b26:	6025      	str	r5, [r4, #0]
 8010b28:	bf18      	it	ne
 8010b2a:	6059      	strne	r1, [r3, #4]
 8010b2c:	6863      	ldr	r3, [r4, #4]
 8010b2e:	bf08      	it	eq
 8010b30:	f8c8 1000 	streq.w	r1, [r8]
 8010b34:	5162      	str	r2, [r4, r5]
 8010b36:	604b      	str	r3, [r1, #4]
 8010b38:	4638      	mov	r0, r7
 8010b3a:	f104 060b 	add.w	r6, r4, #11
 8010b3e:	f000 f829 	bl	8010b94 <__malloc_unlock>
 8010b42:	f026 0607 	bic.w	r6, r6, #7
 8010b46:	1d23      	adds	r3, r4, #4
 8010b48:	1af2      	subs	r2, r6, r3
 8010b4a:	d0ae      	beq.n	8010aaa <_malloc_r+0x22>
 8010b4c:	1b9b      	subs	r3, r3, r6
 8010b4e:	50a3      	str	r3, [r4, r2]
 8010b50:	e7ab      	b.n	8010aaa <_malloc_r+0x22>
 8010b52:	42a3      	cmp	r3, r4
 8010b54:	6862      	ldr	r2, [r4, #4]
 8010b56:	d1dd      	bne.n	8010b14 <_malloc_r+0x8c>
 8010b58:	f8c8 2000 	str.w	r2, [r8]
 8010b5c:	e7ec      	b.n	8010b38 <_malloc_r+0xb0>
 8010b5e:	4623      	mov	r3, r4
 8010b60:	6864      	ldr	r4, [r4, #4]
 8010b62:	e7ac      	b.n	8010abe <_malloc_r+0x36>
 8010b64:	4634      	mov	r4, r6
 8010b66:	6876      	ldr	r6, [r6, #4]
 8010b68:	e7b4      	b.n	8010ad4 <_malloc_r+0x4c>
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	e7cc      	b.n	8010b08 <_malloc_r+0x80>
 8010b6e:	230c      	movs	r3, #12
 8010b70:	603b      	str	r3, [r7, #0]
 8010b72:	4638      	mov	r0, r7
 8010b74:	f000 f80e 	bl	8010b94 <__malloc_unlock>
 8010b78:	e797      	b.n	8010aaa <_malloc_r+0x22>
 8010b7a:	6025      	str	r5, [r4, #0]
 8010b7c:	e7dc      	b.n	8010b38 <_malloc_r+0xb0>
 8010b7e:	605b      	str	r3, [r3, #4]
 8010b80:	deff      	udf	#255	; 0xff
 8010b82:	bf00      	nop
 8010b84:	2400066c 	.word	0x2400066c

08010b88 <__malloc_lock>:
 8010b88:	4801      	ldr	r0, [pc, #4]	; (8010b90 <__malloc_lock+0x8>)
 8010b8a:	f000 b84b 	b.w	8010c24 <__retarget_lock_acquire_recursive>
 8010b8e:	bf00      	nop
 8010b90:	240007ac 	.word	0x240007ac

08010b94 <__malloc_unlock>:
 8010b94:	4801      	ldr	r0, [pc, #4]	; (8010b9c <__malloc_unlock+0x8>)
 8010b96:	f000 b846 	b.w	8010c26 <__retarget_lock_release_recursive>
 8010b9a:	bf00      	nop
 8010b9c:	240007ac 	.word	0x240007ac

08010ba0 <memset>:
 8010ba0:	4402      	add	r2, r0
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d100      	bne.n	8010baa <memset+0xa>
 8010ba8:	4770      	bx	lr
 8010baa:	f803 1b01 	strb.w	r1, [r3], #1
 8010bae:	e7f9      	b.n	8010ba4 <memset+0x4>

08010bb0 <_sbrk_r>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	4d06      	ldr	r5, [pc, #24]	; (8010bcc <_sbrk_r+0x1c>)
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	4608      	mov	r0, r1
 8010bba:	602b      	str	r3, [r5, #0]
 8010bbc:	f7f1 fca8 	bl	8002510 <_sbrk>
 8010bc0:	1c43      	adds	r3, r0, #1
 8010bc2:	d102      	bne.n	8010bca <_sbrk_r+0x1a>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	b103      	cbz	r3, 8010bca <_sbrk_r+0x1a>
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	bd38      	pop	{r3, r4, r5, pc}
 8010bcc:	240007b0 	.word	0x240007b0

08010bd0 <__errno>:
 8010bd0:	4b01      	ldr	r3, [pc, #4]	; (8010bd8 <__errno+0x8>)
 8010bd2:	6818      	ldr	r0, [r3, #0]
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	240000a0 	.word	0x240000a0

08010bdc <__libc_init_array>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	4d0d      	ldr	r5, [pc, #52]	; (8010c14 <__libc_init_array+0x38>)
 8010be0:	4c0d      	ldr	r4, [pc, #52]	; (8010c18 <__libc_init_array+0x3c>)
 8010be2:	1b64      	subs	r4, r4, r5
 8010be4:	10a4      	asrs	r4, r4, #2
 8010be6:	2600      	movs	r6, #0
 8010be8:	42a6      	cmp	r6, r4
 8010bea:	d109      	bne.n	8010c00 <__libc_init_array+0x24>
 8010bec:	4d0b      	ldr	r5, [pc, #44]	; (8010c1c <__libc_init_array+0x40>)
 8010bee:	4c0c      	ldr	r4, [pc, #48]	; (8010c20 <__libc_init_array+0x44>)
 8010bf0:	f000 f874 	bl	8010cdc <_init>
 8010bf4:	1b64      	subs	r4, r4, r5
 8010bf6:	10a4      	asrs	r4, r4, #2
 8010bf8:	2600      	movs	r6, #0
 8010bfa:	42a6      	cmp	r6, r4
 8010bfc:	d105      	bne.n	8010c0a <__libc_init_array+0x2e>
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}
 8010c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c04:	4798      	blx	r3
 8010c06:	3601      	adds	r6, #1
 8010c08:	e7ee      	b.n	8010be8 <__libc_init_array+0xc>
 8010c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c0e:	4798      	blx	r3
 8010c10:	3601      	adds	r6, #1
 8010c12:	e7f2      	b.n	8010bfa <__libc_init_array+0x1e>
 8010c14:	08010d54 	.word	0x08010d54
 8010c18:	08010d54 	.word	0x08010d54
 8010c1c:	08010d54 	.word	0x08010d54
 8010c20:	08010d58 	.word	0x08010d58

08010c24 <__retarget_lock_acquire_recursive>:
 8010c24:	4770      	bx	lr

08010c26 <__retarget_lock_release_recursive>:
 8010c26:	4770      	bx	lr

08010c28 <memcpy>:
 8010c28:	440a      	add	r2, r1
 8010c2a:	4291      	cmp	r1, r2
 8010c2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010c30:	d100      	bne.n	8010c34 <memcpy+0xc>
 8010c32:	4770      	bx	lr
 8010c34:	b510      	push	{r4, lr}
 8010c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c3e:	4291      	cmp	r1, r2
 8010c40:	d1f9      	bne.n	8010c36 <memcpy+0xe>
 8010c42:	bd10      	pop	{r4, pc}

08010c44 <_free_r>:
 8010c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c46:	2900      	cmp	r1, #0
 8010c48:	d044      	beq.n	8010cd4 <_free_r+0x90>
 8010c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c4e:	9001      	str	r0, [sp, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f1a1 0404 	sub.w	r4, r1, #4
 8010c56:	bfb8      	it	lt
 8010c58:	18e4      	addlt	r4, r4, r3
 8010c5a:	f7ff ff95 	bl	8010b88 <__malloc_lock>
 8010c5e:	4a1e      	ldr	r2, [pc, #120]	; (8010cd8 <_free_r+0x94>)
 8010c60:	9801      	ldr	r0, [sp, #4]
 8010c62:	6813      	ldr	r3, [r2, #0]
 8010c64:	b933      	cbnz	r3, 8010c74 <_free_r+0x30>
 8010c66:	6063      	str	r3, [r4, #4]
 8010c68:	6014      	str	r4, [r2, #0]
 8010c6a:	b003      	add	sp, #12
 8010c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c70:	f7ff bf90 	b.w	8010b94 <__malloc_unlock>
 8010c74:	42a3      	cmp	r3, r4
 8010c76:	d908      	bls.n	8010c8a <_free_r+0x46>
 8010c78:	6825      	ldr	r5, [r4, #0]
 8010c7a:	1961      	adds	r1, r4, r5
 8010c7c:	428b      	cmp	r3, r1
 8010c7e:	bf01      	itttt	eq
 8010c80:	6819      	ldreq	r1, [r3, #0]
 8010c82:	685b      	ldreq	r3, [r3, #4]
 8010c84:	1949      	addeq	r1, r1, r5
 8010c86:	6021      	streq	r1, [r4, #0]
 8010c88:	e7ed      	b.n	8010c66 <_free_r+0x22>
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	b10b      	cbz	r3, 8010c94 <_free_r+0x50>
 8010c90:	42a3      	cmp	r3, r4
 8010c92:	d9fa      	bls.n	8010c8a <_free_r+0x46>
 8010c94:	6811      	ldr	r1, [r2, #0]
 8010c96:	1855      	adds	r5, r2, r1
 8010c98:	42a5      	cmp	r5, r4
 8010c9a:	d10b      	bne.n	8010cb4 <_free_r+0x70>
 8010c9c:	6824      	ldr	r4, [r4, #0]
 8010c9e:	4421      	add	r1, r4
 8010ca0:	1854      	adds	r4, r2, r1
 8010ca2:	42a3      	cmp	r3, r4
 8010ca4:	6011      	str	r1, [r2, #0]
 8010ca6:	d1e0      	bne.n	8010c6a <_free_r+0x26>
 8010ca8:	681c      	ldr	r4, [r3, #0]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	6053      	str	r3, [r2, #4]
 8010cae:	440c      	add	r4, r1
 8010cb0:	6014      	str	r4, [r2, #0]
 8010cb2:	e7da      	b.n	8010c6a <_free_r+0x26>
 8010cb4:	d902      	bls.n	8010cbc <_free_r+0x78>
 8010cb6:	230c      	movs	r3, #12
 8010cb8:	6003      	str	r3, [r0, #0]
 8010cba:	e7d6      	b.n	8010c6a <_free_r+0x26>
 8010cbc:	6825      	ldr	r5, [r4, #0]
 8010cbe:	1961      	adds	r1, r4, r5
 8010cc0:	428b      	cmp	r3, r1
 8010cc2:	bf04      	itt	eq
 8010cc4:	6819      	ldreq	r1, [r3, #0]
 8010cc6:	685b      	ldreq	r3, [r3, #4]
 8010cc8:	6063      	str	r3, [r4, #4]
 8010cca:	bf04      	itt	eq
 8010ccc:	1949      	addeq	r1, r1, r5
 8010cce:	6021      	streq	r1, [r4, #0]
 8010cd0:	6054      	str	r4, [r2, #4]
 8010cd2:	e7ca      	b.n	8010c6a <_free_r+0x26>
 8010cd4:	b003      	add	sp, #12
 8010cd6:	bd30      	pop	{r4, r5, pc}
 8010cd8:	2400066c 	.word	0x2400066c

08010cdc <_init>:
 8010cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cde:	bf00      	nop
 8010ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ce2:	bc08      	pop	{r3}
 8010ce4:	469e      	mov	lr, r3
 8010ce6:	4770      	bx	lr

08010ce8 <_fini>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	bf00      	nop
 8010cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cee:	bc08      	pop	{r3}
 8010cf0:	469e      	mov	lr, r3
 8010cf2:	4770      	bx	lr
