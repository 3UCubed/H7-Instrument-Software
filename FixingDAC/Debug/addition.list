
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d7c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08011014  08011014  00021014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801106c  0801106c  0002106c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011074  08011074  00021074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011078  08011078  00021078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  0801107c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005f0  24000100  08011178  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240006f0  08011178  000306f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024bbc  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038e7  00000000  00000000  00054ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c48  00000000  00000000  000585d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001af0  00000000  00000000  0005a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b66a  00000000  00000000  0005bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000259be  00000000  00000000  00097372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180a34  00000000  00000000  000bcd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023d764  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d94  00000000  00000000  0023d7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010ffc 	.word	0x08010ffc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08010ffc 	.word	0x08010ffc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fb3c 	bl	8007ca4 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fc3a 	bl	8007ed4 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000360 	.word	0x24000360
 80006a0:	08011014 	.word	0x08011014
 80006a4:	08011020 	.word	0x08011020

080006a8 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f010 fb68 	bl	8010db4 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
	return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000710:	b084      	sub	sp, #16
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	f107 0c18 	add.w	ip, r7, #24
 800071c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	2301      	movs	r3, #1
 8000724:	2201      	movs	r2, #1
 8000726:	f107 0018 	add.w	r0, r7, #24
 800072a:	f00b fe85 	bl	800c438 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000740:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 8000742:	2002      	movs	r0, #2
 8000744:	f010 fb36 	bl	8010db4 <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3301      	adds	r3, #1
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	701a      	strb	r2, [r3, #0]
	return results;
 800075a:	68bb      	ldr	r3, [r7, #8]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
	...

0800076c <set_erpa_sweep>:

/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <set_erpa_sweep+0x28>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <set_erpa_sweep+0x2c>)
 8000778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <set_erpa_sweep+0x30>)
 8000782:	f003 ffc0 	bl	8004706 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <set_erpa_sweep+0x30>)
 800078a:	f003 fe58 	bl	800443e <HAL_DAC_Start>

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000084 	.word	0x24000084
 8000798:	24000000 	.word	0x24000000
 800079c:	240002d4 	.word	0x240002d4

080007a0 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <erpa_adc+0x34>)
 80007a8:	885b      	ldrh	r3, [r3, #2]
 80007aa:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <erpa_adc+0x34>)
 80007ae:	895b      	ldrh	r3, [r3, #10]
 80007b0:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 80007b2:	2004      	movs	r0, #4
 80007b4:	f010 fafe 	bl	8010db4 <malloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	88fa      	ldrh	r2, [r7, #6]
 80007c0:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	3302      	adds	r3, #2
 80007c6:	88ba      	ldrh	r2, [r7, #4]
 80007c8:	801a      	strh	r2, [r3, #0]

	return results;
 80007ca:	683b      	ldr	r3, [r7, #0]

}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	240006a0 	.word	0x240006a0

080007d8 <hk_adc1>:

uint16_t* hk_adc1() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <hk_adc1+0x98>)
 80007e0:	8a9b      	ldrh	r3, [r3, #20]
 80007e2:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <hk_adc1+0x98>)
 80007e6:	8a1b      	ldrh	r3, [r3, #16]
 80007e8:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <hk_adc1+0x98>)
 80007ec:	899b      	ldrh	r3, [r3, #12]
 80007ee:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <hk_adc1+0x98>)
 80007f2:	8a5b      	ldrh	r3, [r3, #18]
 80007f4:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <hk_adc1+0x98>)
 80007f8:	889b      	ldrh	r3, [r3, #4]
 80007fa:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <hk_adc1+0x98>)
 80007fe:	88db      	ldrh	r3, [r3, #6]
 8000800:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <hk_adc1+0x98>)
 8000804:	89db      	ldrh	r3, [r3, #14]
 8000806:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <hk_adc1+0x98>)
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <hk_adc1+0x98>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 8000814:	2012      	movs	r0, #18
 8000816:	f010 facd 	bl	8010db4 <malloc>
 800081a:	4603      	mov	r3, r0
 800081c:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	8afa      	ldrh	r2, [r7, #22]
 8000822:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	3302      	adds	r3, #2
 8000828:	8aba      	ldrh	r2, [r7, #20]
 800082a:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	8a7a      	ldrh	r2, [r7, #18]
 8000832:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	3306      	adds	r3, #6
 8000838:	8a3a      	ldrh	r2, [r7, #16]
 800083a:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3308      	adds	r3, #8
 8000840:	89fa      	ldrh	r2, [r7, #14]
 8000842:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	330a      	adds	r3, #10
 8000848:	89ba      	ldrh	r2, [r7, #12]
 800084a:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	330c      	adds	r3, #12
 8000850:	897a      	ldrh	r2, [r7, #10]
 8000852:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	330e      	adds	r3, #14
 8000858:	893a      	ldrh	r2, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3310      	adds	r3, #16
 8000860:	88fa      	ldrh	r2, [r7, #6]
 8000862:	801a      	strh	r2, [r3, #0]

	return results;
 8000864:	683b      	ldr	r3, [r7, #0]

}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	240006a0 	.word	0x240006a0

08000874 <hk_adc3>:

uint16_t* hk_adc3() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <hk_adc3+0x50>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <hk_adc3+0x50>)
 8000882:	885b      	ldrh	r3, [r3, #2]
 8000884:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <hk_adc3+0x50>)
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <hk_adc3+0x50>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 8000892:	2008      	movs	r0, #8
 8000894:	f010 fa8e 	bl	8010db4 <malloc>
 8000898:	4603      	mov	r3, r0
 800089a:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	89fa      	ldrh	r2, [r7, #14]
 80008a0:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3302      	adds	r3, #2
 80008a6:	89ba      	ldrh	r2, [r7, #12]
 80008a8:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3304      	adds	r3, #4
 80008ae:	897a      	ldrh	r2, [r7, #10]
 80008b0:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3306      	adds	r3, #6
 80008b6:	893a      	ldrh	r2, [r7, #8]
 80008b8:	801a      	strh	r2, [r3, #0]

	return results;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	240006c0 	.word	0x240006c0

080008c8 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 80008d2:	23aa      	movs	r3, #170	; 0xaa
 80008d4:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80008d6:	23aa      	movs	r3, #170	; 0xaa
 80008d8:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <send_erpa_packet+0x90>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	0a1b      	lsrs	r3, r3, #8
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <send_erpa_packet+0x90>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008ee:	2300      	movs	r3, #0
 80008f0:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008f2:	2300      	movs	r3, #0
 80008f4:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	3302      	adds	r3, #2
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	b29b      	uxth	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3302      	adds	r3, #2
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 8000922:	2300      	movs	r3, #0
 8000924:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 8000926:	2300      	movs	r3, #0
 8000928:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000936:	f107 0108 	add.w	r1, r7, #8
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	220e      	movs	r2, #14
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <send_erpa_packet+0x94>)
 8000940:	f00d fe30 	bl	800e5a4 <HAL_UART_Transmit>
	erpa_seq++;
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <send_erpa_packet+0x90>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <send_erpa_packet+0x90>)
 800094e:	801a      	strh	r2, [r3, #0]

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	240006cc 	.word	0x240006cc
 800095c:	240005a8 	.word	0x240005a8

08000960 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 800096c:	23cc      	movs	r3, #204	; 0xcc
 800096e:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000970:	23cc      	movs	r3, #204	; 0xcc
 8000972:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000974:	4b7d      	ldr	r3, [pc, #500]	; (8000b6c <send_hk_packet+0x20c>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000980:	4b7a      	ldr	r3, [pc, #488]	; (8000b6c <send_hk_packet+0x20c>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3302      	adds	r3, #2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3302      	adds	r3, #2
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ba:	121b      	asrs	r3, r3, #8
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3302      	adds	r3, #2
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	121b      	asrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3302      	adds	r3, #2
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3304      	adds	r3, #4
 80009e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ec:	121b      	asrs	r3, r3, #8
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3304      	adds	r3, #4
 80009f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3306      	adds	r3, #6
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	121b      	asrs	r3, r3, #8
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3306      	adds	r3, #6
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3302      	adds	r3, #2
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3302      	adds	r3, #2
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	0a1b      	lsrs	r3, r3, #8
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	330c      	adds	r3, #12
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	330c      	adds	r3, #12
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	3306      	adds	r3, #6
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3306      	adds	r3, #6
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3304      	adds	r3, #4
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	330e      	adds	r3, #14
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	330e      	adds	r3, #14
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3310      	adds	r3, #16
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3310      	adds	r3, #16
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	3308      	adds	r3, #8
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3308      	adds	r3, #8
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	330a      	adds	r3, #10
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	330a      	adds	r3, #10
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b48:	f107 0110 	add.w	r1, r7, #16
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2226      	movs	r2, #38	; 0x26
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <send_hk_packet+0x210>)
 8000b52:	f00d fd27 	bl	800e5a4 <HAL_UART_Transmit>
	hk_seq++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <send_hk_packet+0x20c>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <send_hk_packet+0x20c>)
 8000b60:	801a      	strh	r2, [r3, #0]

}
 8000b62:	bf00      	nop
 8000b64:	3738      	adds	r7, #56	; 0x38
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	240006d0 	.word	0x240006d0
 8000b70:	240005a8 	.word	0x240005a8

08000b74 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b7c:	23bb      	movs	r3, #187	; 0xbb
 8000b7e:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b80:	23bb      	movs	r3, #187	; 0xbb
 8000b82:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <send_pmt_packet+0x54>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <send_pmt_packet+0x54>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000ba4:	f107 0108 	add.w	r1, r7, #8
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2206      	movs	r2, #6
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <send_pmt_packet+0x58>)
 8000bae:	f00d fcf9 	bl	800e5a4 <HAL_UART_Transmit>
	pmt_seq++;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <send_pmt_packet+0x54>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <send_pmt_packet+0x54>)
 8000bbc:	801a      	strh	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	240006ce 	.word	0x240006ce
 8000bcc:	240005a8 	.word	0x240005a8

08000bd0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b0a7      	sub	sp, #156	; 0x9c
 8000bd4:	af1e      	add	r7, sp, #120	; 0x78
 8000bd6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d120      	bne.n	8000c22 <HAL_TIM_OC_DelayElapsedCallback+0x52>
		if (PMT_ON) {
 8000be0:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d06d      	beq.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>

			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000be8:	bf00      	nop
 8000bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bee:	4839      	ldr	r0, [pc, #228]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000bf0:	f006 ff8a 	bl	8007b08 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f7      	bne.n	8000bea <HAL_TIM_OC_DelayElapsedCallback+0x1a>
			}

			uint8_t *spi1_results = spi(hspi1);
 8000bfa:	4c37      	ldr	r4, [pc, #220]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	f104 0310 	add.w	r3, r4, #16
 8000c02:	2278      	movs	r2, #120	; 0x78
 8000c04:	4619      	mov	r1, r3
 8000c06:	f010 f8e5 	bl	8010dd4 <memcpy>
 8000c0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c0e:	f7ff fd7f 	bl	8000710 <spi>
 8000c12:	60b8      	str	r0, [r7, #8]

			send_pmt_packet(spi1_results);
 8000c14:	68b8      	ldr	r0, [r7, #8]
 8000c16:	f7ff ffad 	bl	8000b74 <send_pmt_packet>

			free(spi1_results);
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f010 f8d2 	bl	8010dc4 <free>
			free(hk_adc1_results);
			free(hk_adc3_results);

		}
	}
}
 8000c20:	e050      	b.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
	} else if (htim == &htim2) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12d      	bne.n	8000c86 <HAL_TIM_OC_DelayElapsedCallback+0xb6>
		if (ERPA_ON) {
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d048      	beq.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000c32:	bf00      	nop
 8000c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c38:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c3a:	f006 ff65 	bl	8007b08 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f7      	bne.n	8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			uint8_t *spi2_results = spi(hspi2);
 8000c44:	4c28      	ldr	r4, [pc, #160]	; (8000ce8 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000c46:	4668      	mov	r0, sp
 8000c48:	f104 0310 	add.w	r3, r4, #16
 8000c4c:	2278      	movs	r2, #120	; 0x78
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f010 f8c0 	bl	8010dd4 <memcpy>
 8000c54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c58:	f7ff fd5a 	bl	8000710 <spi>
 8000c5c:	6138      	str	r0, [r7, #16]
			uint16_t *erpa_adc_results = erpa_adc();
 8000c5e:	f7ff fd9f 	bl	80007a0 <erpa_adc>
 8000c62:	60f8      	str	r0, [r7, #12]
			if (!auto_sweep){
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
				set_erpa_sweep();
 8000c6c:	f7ff fd7e 	bl	800076c <set_erpa_sweep>
			send_erpa_packet(spi2_results, erpa_adc_results);
 8000c70:	68f9      	ldr	r1, [r7, #12]
 8000c72:	6938      	ldr	r0, [r7, #16]
 8000c74:	f7ff fe28 	bl	80008c8 <send_erpa_packet>
			free(spi2_results);
 8000c78:	6938      	ldr	r0, [r7, #16]
 8000c7a:	f010 f8a3 	bl	8010dc4 <free>
			free(erpa_adc_results);
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f010 f8a0 	bl	8010dc4 <free>
}
 8000c84:	e01e      	b.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
	} else if (htim == &htim4) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d11a      	bne.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
		if (HK_ON) {
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d016      	beq.n	8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0xf4>
			int16_t *i2c_values = i2c();
 8000c96:	f7ff fd07 	bl	80006a8 <i2c>
 8000c9a:	61f8      	str	r0, [r7, #28]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c9c:	f7ff fd9c 	bl	80007d8 <hk_adc1>
 8000ca0:	61b8      	str	r0, [r7, #24]
			uint16_t *hk_adc3_results = hk_adc3();
 8000ca2:	f7ff fde7 	bl	8000874 <hk_adc3>
 8000ca6:	6178      	str	r0, [r7, #20]
			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	69b9      	ldr	r1, [r7, #24]
 8000cac:	69f8      	ldr	r0, [r7, #28]
 8000cae:	f7ff fe57 	bl	8000960 <send_hk_packet>
			free(i2c_values);
 8000cb2:	69f8      	ldr	r0, [r7, #28]
 8000cb4:	f010 f886 	bl	8010dc4 <free>
			free(hk_adc1_results);
 8000cb8:	69b8      	ldr	r0, [r7, #24]
 8000cba:	f010 f883 	bl	8010dc4 <free>
			free(hk_adc3_results);
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f010 f880 	bl	8010dc4 <free>
}
 8000cc4:	bf00      	nop
 8000cc6:	3724      	adds	r7, #36	; 0x24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	240004c4 	.word	0x240004c4
 8000cd0:	240006d2 	.word	0x240006d2
 8000cd4:	58020000 	.word	0x58020000
 8000cd8:	240003b4 	.word	0x240003b4
 8000cdc:	24000510 	.word	0x24000510
 8000ce0:	240006d3 	.word	0x240006d3
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	2400043c 	.word	0x2400043c
 8000cec:	240006c8 	.word	0x240006c8
 8000cf0:	2400055c 	.word	0x2400055c
 8000cf4:	240006d4 	.word	0x240006d4

08000cf8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	49bf      	ldr	r1, [pc, #764]	; (8001000 <HAL_UART_RxCpltCallback+0x308>)
 8000d04:	48bf      	ldr	r0, [pc, #764]	; (8001004 <HAL_UART_RxCpltCallback+0x30c>)
 8000d06:	f00d fcdb 	bl	800e6c0 <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000d0a:	4bbd      	ldr	r3, [pc, #756]	; (8001000 <HAL_UART_RxCpltCallback+0x308>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b25      	cmp	r3, #37	; 0x25
 8000d14:	f200 816f 	bhi.w	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
 8000d18:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <HAL_UART_RxCpltCallback+0x28>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000e89 	.word	0x08000e89
 8000d24:	08000ea5 	.word	0x08000ea5
 8000d28:	08000ec1 	.word	0x08000ec1
 8000d2c:	08000ee1 	.word	0x08000ee1
 8000d30:	08000f01 	.word	0x08000f01
 8000d34:	08000f1d 	.word	0x08000f1d
 8000d38:	08000f3d 	.word	0x08000f3d
 8000d3c:	08000f5d 	.word	0x08000f5d
 8000d40:	08000ff7 	.word	0x08000ff7
 8000d44:	08000ff7 	.word	0x08000ff7
 8000d48:	08000dc7 	.word	0x08000dc7
 8000d4c:	08000db9 	.word	0x08000db9
 8000d50:	08000f79 	.word	0x08000f79
 8000d54:	08000f89 	.word	0x08000f89
 8000d58:	08000fa9 	.word	0x08000fa9
 8000d5c:	08000fc9 	.word	0x08000fc9
 8000d60:	08000f99 	.word	0x08000f99
 8000d64:	08000fb9 	.word	0x08000fb9
 8000d68:	08000fd9 	.word	0x08000fd9
 8000d6c:	08000e97 	.word	0x08000e97
 8000d70:	08000eb3 	.word	0x08000eb3
 8000d74:	08000ed1 	.word	0x08000ed1
 8000d78:	08000ef1 	.word	0x08000ef1
 8000d7c:	08000f0f 	.word	0x08000f0f
 8000d80:	08000f2d 	.word	0x08000f2d
 8000d84:	08000f4d 	.word	0x08000f4d
 8000d88:	08000f6b 	.word	0x08000f6b
 8000d8c:	08000dd5 	.word	0x08000dd5
 8000d90:	08000ded 	.word	0x08000ded
 8000d94:	08000e05 	.word	0x08000e05
 8000d98:	08000ff7 	.word	0x08000ff7
 8000d9c:	08000ff7 	.word	0x08000ff7
 8000da0:	08000ff7 	.word	0x08000ff7
 8000da4:	08000ff7 	.word	0x08000ff7
 8000da8:	08000ff7 	.word	0x08000ff7
 8000dac:	08000ff7 	.word	0x08000ff7
 8000db0:	08000e41 	.word	0x08000e41
 8000db4:	08000e65 	.word	0x08000e65
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000db8:	4b93      	ldr	r3, [pc, #588]	; (8001008 <HAL_UART_RxCpltCallback+0x310>)
 8000dba:	2104      	movs	r1, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 feba 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000dc4:	e117      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000dc6:	4b90      	ldr	r3, [pc, #576]	; (8001008 <HAL_UART_RxCpltCallback+0x310>)
 8000dc8:	2104      	movs	r1, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 feb3 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000dd2:	e110      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x1B: {
		if (step < 17) {
 8000dd4:	4b8d      	ldr	r3, [pc, #564]	; (800100c <HAL_UART_RxCpltCallback+0x314>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b10      	cmp	r3, #16
 8000dda:	f200 8105 	bhi.w	8000fe8 <HAL_UART_RxCpltCallback+0x2f0>
			step+=2;
 8000dde:	4b8b      	ldr	r3, [pc, #556]	; (800100c <HAL_UART_RxCpltCallback+0x314>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3302      	adds	r3, #2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b89      	ldr	r3, [pc, #548]	; (800100c <HAL_UART_RxCpltCallback+0x314>)
 8000de8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dea:	e0fd      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0x2f0>
	}
	case 0x1C: {
		if (step > 3) {
 8000dec:	4b87      	ldr	r3, [pc, #540]	; (800100c <HAL_UART_RxCpltCallback+0x314>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	f240 80fb 	bls.w	8000fec <HAL_UART_RxCpltCallback+0x2f4>
			step-=2;
 8000df6:	4b85      	ldr	r3, [pc, #532]	; (800100c <HAL_UART_RxCpltCallback+0x314>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b83      	ldr	r3, [pc, #524]	; (800100c <HAL_UART_RxCpltCallback+0x314>)
 8000e00:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e02:	e0f3      	b.n	8000fec <HAL_UART_RxCpltCallback+0x2f4>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000e04:	4b82      	ldr	r3, [pc, #520]	; (8001010 <HAL_UART_RxCpltCallback+0x318>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10e      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0x132>
			auto_sweep = 1;
 8000e0c:	4b80      	ldr	r3, [pc, #512]	; (8001010 <HAL_UART_RxCpltCallback+0x318>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000e12:	4880      	ldr	r0, [pc, #512]	; (8001014 <HAL_UART_RxCpltCallback+0x31c>)
 8000e14:	f00b fe94 	bl	800cb40 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	4a7e      	ldr	r2, [pc, #504]	; (8001018 <HAL_UART_RxCpltCallback+0x320>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	487e      	ldr	r0, [pc, #504]	; (800101c <HAL_UART_RxCpltCallback+0x324>)
 8000e24:	f003 fb62 	bl	80044ec <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 8000e28:	e0e5      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
			auto_sweep = 0;
 8000e2a:	4b79      	ldr	r3, [pc, #484]	; (8001010 <HAL_UART_RxCpltCallback+0x318>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000e30:	4878      	ldr	r0, [pc, #480]	; (8001014 <HAL_UART_RxCpltCallback+0x31c>)
 8000e32:	f00b fef5 	bl	800cc20 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	4878      	ldr	r0, [pc, #480]	; (800101c <HAL_UART_RxCpltCallback+0x324>)
 8000e3a:	f003 fc17 	bl	800466c <HAL_DAC_Stop_DMA>
		break;
 8000e3e:	e0da      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x24: {
		if (cadence <= 50000){
 8000e40:	4b77      	ldr	r3, [pc, #476]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	f200 80d1 	bhi.w	8000ff0 <HAL_UART_RxCpltCallback+0x2f8>
			cadence *= 2;
 8000e4e:	4b74      	ldr	r3, [pc, #464]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4a72      	ldr	r2, [pc, #456]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e56:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5c:	4b70      	ldr	r3, [pc, #448]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e62:	e0c5      	b.n	8000ff0 <HAL_UART_RxCpltCallback+0x2f8>
	}
	case 0x25: {
		if (cadence >= 6250){
 8000e64:	4b6e      	ldr	r3, [pc, #440]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	f240 80c1 	bls.w	8000ff4 <HAL_UART_RxCpltCallback+0x2fc>
			cadence /= 2;
 8000e72:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	085b      	lsrs	r3, r3, #1
 8000e78:	4a69      	ldr	r2, [pc, #420]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e7a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e80:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_UART_RxCpltCallback+0x328>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e86:	e0b5      	b.n	8000ff4 <HAL_UART_RxCpltCallback+0x2fc>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e88:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <HAL_UART_RxCpltCallback+0x310>)
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f006 fe52 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000e94:	e0af      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_UART_RxCpltCallback+0x310>)
 8000e98:	2120      	movs	r1, #32
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fe4b 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000ea2:	e0a8      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000ea4:	4b58      	ldr	r3, [pc, #352]	; (8001008 <HAL_UART_RxCpltCallback+0x310>)
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f006 fe44 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000eb0:	e0a1      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <HAL_UART_RxCpltCallback+0x310>)
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 fe3d 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000ebe:	e09a      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000ec0:	4b58      	ldr	r3, [pc, #352]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 fe35 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000ece:	e092      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ed0:	4b54      	ldr	r3, [pc, #336]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fe2d 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000ede:	e08a      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ee0:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f006 fe25 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000eee:	e082      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000ef0:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f006 fe1d 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000efe:	e07a      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000f00:	4b48      	ldr	r3, [pc, #288]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	2201      	movs	r2, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 fe16 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f0c:	e073      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000f0e:	4b45      	ldr	r3, [pc, #276]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	2200      	movs	r2, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fe0f 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f1a:	e06c      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	2201      	movs	r2, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fe07 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f2a:	e064      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	2200      	movs	r2, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 fdff 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f3a:	e05c      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	2201      	movs	r2, #1
 8000f44:	4618      	mov	r0, r3
 8000f46:	f006 fdf7 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f4a:	e054      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f4c:	4b35      	ldr	r3, [pc, #212]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	2200      	movs	r2, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 fdef 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f5a:	e04c      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	2201      	movs	r2, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 fde8 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f68:	e045      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <HAL_UART_RxCpltCallback+0x32c>)
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fde1 	bl	8007b38 <HAL_GPIO_WritePin>
		break;
 8000f76:	e03e      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f78:	f001 fcea 	bl	8002950 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f007 fbdc 	bl	800873c <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f84:	f7ff fb2a 	bl	80005dc <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_UART_RxCpltCallback+0x330>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4826      	ldr	r0, [pc, #152]	; (800102c <HAL_UART_RxCpltCallback+0x334>)
 8000f92:	f00b fe6d 	bl	800cc70 <HAL_TIM_OC_Start_IT>
		break;
 8000f96:	e02e      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_UART_RxCpltCallback+0x330>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4822      	ldr	r0, [pc, #136]	; (800102c <HAL_UART_RxCpltCallback+0x334>)
 8000fa2:	f00b ffbf 	bl	800cf24 <HAL_TIM_OC_Stop_IT>

		break;
 8000fa6:	e026      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_UART_RxCpltCallback+0x338>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fae:	210c      	movs	r1, #12
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <HAL_UART_RxCpltCallback+0x31c>)
 8000fb2:	f00b fe5d 	bl	800cc70 <HAL_TIM_OC_Start_IT>
		break;
 8000fb6:	e01e      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_UART_RxCpltCallback+0x338>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000fbe:	210c      	movs	r1, #12
 8000fc0:	4814      	ldr	r0, [pc, #80]	; (8001014 <HAL_UART_RxCpltCallback+0x31c>)
 8000fc2:	f00b ffaf 	bl	800cf24 <HAL_TIM_OC_Stop_IT>

		break;
 8000fc6:	e016      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0F: {
		HK_ON = 1;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_UART_RxCpltCallback+0x33c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <HAL_UART_RxCpltCallback+0x340>)
 8000fd2:	f00b fe4d 	bl	800cc70 <HAL_TIM_OC_Start_IT>

		break;
 8000fd6:	e00e      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x12: {
		HK_ON = 0;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_UART_RxCpltCallback+0x33c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4815      	ldr	r0, [pc, #84]	; (8001038 <HAL_UART_RxCpltCallback+0x340>)
 8000fe2:	f00b fe45 	bl	800cc70 <HAL_TIM_OC_Start_IT>

		break;
 8000fe6:	e006      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000fe8:	bf00      	nop
 8000fea:	e004      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000fec:	bf00      	nop
 8000fee:	e002      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000ff0:	bf00      	nop
 8000ff2:	e000      	b.n	8000ff6 <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000ff4:	bf00      	nop
	}
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2400063c 	.word	0x2400063c
 8001004:	240005a8 	.word	0x240005a8
 8001008:	58020400 	.word	0x58020400
 800100c:	24000084 	.word	0x24000084
 8001010:	240006c8 	.word	0x240006c8
 8001014:	24000510 	.word	0x24000510
 8001018:	24000000 	.word	0x24000000
 800101c:	240002d4 	.word	0x240002d4
 8001020:	24000080 	.word	0x24000080
 8001024:	58020800 	.word	0x58020800
 8001028:	240006d2 	.word	0x240006d2
 800102c:	240004c4 	.word	0x240004c4
 8001030:	240006d3 	.word	0x240006d3
 8001034:	240006d4 	.word	0x240006d4
 8001038:	2400055c 	.word	0x2400055c

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f001 fbf4 	bl	800282c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f876 	bl	8001134 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001048:	f000 f8fa 	bl	8001240 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 fdce 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 8001050:	f000 fd9c 	bl	8001b8c <MX_DMA_Init>
  MX_DAC1_Init();
 8001054:	f000 fad8 	bl	8001608 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001058:	f000 f922 	bl	80012a0 <MX_ADC1_Init>
  MX_ADC3_Init();
 800105c:	f000 fa42 	bl	80014e4 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001060:	f000 fc84 	bl	800196c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001064:	f000 fbf2 	bl	800184c <MX_TIM1_Init>
  MX_I2C1_Init();
 8001068:	f000 fb00 	bl	800166c <MX_I2C1_Init>
  MX_SPI1_Init();
 800106c:	f000 fb3e 	bl	80016ec <MX_SPI1_Init>
  MX_SPI2_Init();
 8001070:	f000 fb94 	bl	800179c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001074:	f000 fd3e 	bl	8001af4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001078:	f000 fcee 	bl	8001a58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 800107c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001080:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001086:	210c      	movs	r1, #12
 8001088:	4823      	ldr	r0, [pc, #140]	; (8001118 <main+0xdc>)
 800108a:	f00c f887 	bl	800d19c <HAL_TIM_PWM_Start>




  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800108e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001096:	4821      	ldr	r0, [pc, #132]	; (800111c <main+0xe0>)
 8001098:	f002 ff5e 	bl	8003f58 <HAL_ADCEx_Calibration_Start>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <main+0x6a>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 80010a2:	f000 fe1d 	bl	8001ce0 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 80010a6:	220b      	movs	r2, #11
 80010a8:	491d      	ldr	r1, [pc, #116]	; (8001120 <main+0xe4>)
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <main+0xe0>)
 80010ac:	f002 f832 	bl	8003114 <HAL_ADC_Start_DMA>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <main+0x7e>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 80010b6:	f000 fe13 	bl	8001ce0 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80010ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <main+0xe8>)
 80010c4:	f002 ff48 	bl	8003f58 <HAL_ADCEx_Calibration_Start>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <main+0x96>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 80010ce:	f000 fe07 	bl	8001ce0 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 80010d2:	2204      	movs	r2, #4
 80010d4:	4914      	ldr	r1, [pc, #80]	; (8001128 <main+0xec>)
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <main+0xe8>)
 80010d8:	f002 f81c 	bl	8003114 <HAL_ADC_Start_DMA>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <main+0xaa>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 80010e2:	f000 fdfd 	bl	8001ce0 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 80010e6:	bf00      	nop
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <main+0xf0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f6:	d0f7      	beq.n	80010e8 <main+0xac>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 80010f8:	bf00      	nop
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <main+0xf0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001108:	d1f7      	bne.n	80010fa <main+0xbe>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	4908      	ldr	r1, [pc, #32]	; (8001130 <main+0xf4>)
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <main+0xf0>)
 8001110:	f00d fad6 	bl	800e6c0 <HAL_UART_Receive_IT>
 8001114:	e7f9      	b.n	800110a <main+0xce>
 8001116:	bf00      	nop
 8001118:	24000510 	.word	0x24000510
 800111c:	2400011c 	.word	0x2400011c
 8001120:	240006a0 	.word	0x240006a0
 8001124:	24000180 	.word	0x24000180
 8001128:	240006c0 	.word	0x240006c0
 800112c:	240005a8 	.word	0x240005a8
 8001130:	2400063c 	.word	0x2400063c

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09c      	sub	sp, #112	; 0x70
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	224c      	movs	r2, #76	; 0x4c
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00f fe54 	bl	8010df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2220      	movs	r2, #32
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f00f fe4e 	bl	8010df0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001154:	2002      	movs	r0, #2
 8001156:	f007 fb2d 	bl	80087b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <SystemClock_Config+0x100>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	4a34      	ldr	r2, [pc, #208]	; (8001234 <SystemClock_Config+0x100>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	62d3      	str	r3, [r2, #44]	; 0x2c
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <SystemClock_Config+0x100>)
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <SystemClock_Config+0x104>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800117c:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <SystemClock_Config+0x104>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <SystemClock_Config+0x104>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001190:	bf00      	nop
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <SystemClock_Config+0x104>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800119e:	d1f8      	bne.n	8001192 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <SystemClock_Config+0x108>)
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	4a25      	ldr	r2, [pc, #148]	; (800123c <SystemClock_Config+0x108>)
 80011a6:	f023 0303 	bic.w	r3, r3, #3
 80011aa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	2302      	movs	r3, #2
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011bc:	2300      	movs	r3, #0
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c0:	2304      	movs	r3, #4
 80011c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011c4:	230c      	movs	r3, #12
 80011c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011c8:	2304      	movs	r3, #4
 80011ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d4:	230c      	movs	r3, #12
 80011d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011d8:	2300      	movs	r3, #0
 80011da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 fb1f 	bl	8008828 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011f0:	f000 fd76 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	233f      	movs	r3, #63	; 0x3f
 80011f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2303      	movs	r3, #3
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001208:	2340      	movs	r3, #64	; 0x40
 800120a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800120c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f007 ff5e 	bl	80090dc <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001226:	f000 fd5b 	bl	8001ce0 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	; 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	58000400 	.word	0x58000400
 8001238:	58024800 	.word	0x58024800
 800123c:	58024400 	.word	0x58024400

08001240 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b0      	sub	sp, #192	; 0xc0
 8001244:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	22c0      	movs	r2, #192	; 0xc0
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00f fdcf 	bl	8010df0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001252:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800125e:	2304      	movs	r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001262:	2309      	movs	r3, #9
 8001264:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001266:	2304      	movs	r3, #4
 8001268:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001272:	23c0      	movs	r3, #192	; 0xc0
 8001274:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001276:	2320      	movs	r3, #32
 8001278:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800127a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4618      	mov	r0, r3
 800128a:	f008 fab3 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001294:	f000 fd24 	bl	8001ce0 <Error_Handler>
  }
}
 8001298:	bf00      	nop
 800129a:	37c0      	adds	r7, #192	; 0xc0
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c4:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012c6:	4a7b      	ldr	r2, [pc, #492]	; (80014b4 <MX_ADC1_Init+0x214>)
 80012c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d2:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012d4:	2208      	movs	r2, #8
 80012d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012d8:	4b75      	ldr	r3, [pc, #468]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012da:	2201      	movs	r2, #1
 80012dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012de:	4b74      	ldr	r3, [pc, #464]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012e0:	2204      	movs	r2, #4
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e4:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012f0:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012f2:	220b      	movs	r2, #11
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b6e      	ldr	r3, [pc, #440]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <MX_ADC1_Init+0x210>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001302:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <MX_ADC1_Init+0x210>)
 800130a:	2203      	movs	r2, #3
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800130e:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800131c:	4b64      	ldr	r3, [pc, #400]	; (80014b0 <MX_ADC1_Init+0x210>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001326:	f001 fd53 	bl	8002dd0 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 fcd6 	bl	8001ce0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	485c      	ldr	r0, [pc, #368]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001340:	f002 fe6e 	bl	8004020 <HAL_ADCEx_MultiModeConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800134a:	f000 fcc9 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800134e:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <MX_ADC1_Init+0x218>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001352:	2306      	movs	r3, #6
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001356:	2307      	movs	r3, #7
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800135e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001360:	2304      	movs	r3, #4
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	484f      	ldr	r0, [pc, #316]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001372:	f001 ffb1 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800137c:	f000 fcb0 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001380:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <MX_ADC1_Init+0x21c>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001384:	230c      	movs	r3, #12
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4848      	ldr	r0, [pc, #288]	; (80014b0 <MX_ADC1_Init+0x210>)
 800138e:	f001 ffa3 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001398:	f000 fca2 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800139c:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MX_ADC1_Init+0x220>)
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a0:	2312      	movs	r3, #18
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4841      	ldr	r0, [pc, #260]	; (80014b0 <MX_ADC1_Init+0x210>)
 80013aa:	f001 ff95 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013b4:	f000 fc94 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <MX_ADC1_Init+0x224>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	483a      	ldr	r0, [pc, #232]	; (80014b0 <MX_ADC1_Init+0x210>)
 80013c6:	f001 ff87 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013d0:	f000 fc86 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013d4:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <MX_ADC1_Init+0x228>)
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4833      	ldr	r0, [pc, #204]	; (80014b0 <MX_ADC1_Init+0x210>)
 80013e4:	f001 ff78 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013ee:	f000 fc77 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_ADC1_Init+0x22c>)
 80013f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	482b      	ldr	r0, [pc, #172]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001402:	f001 ff69 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800140c:	f000 fc68 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_ADC1_Init+0x230>)
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001414:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001418:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001420:	f001 ff5a 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800142a:	f000 fc59 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_ADC1_Init+0x234>)
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001432:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	481c      	ldr	r0, [pc, #112]	; (80014b0 <MX_ADC1_Init+0x210>)
 800143e:	f001 ff4b 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001448:	f000 fc4a 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_ADC1_Init+0x238>)
 800144e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001450:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_ADC1_Init+0x210>)
 800145c:	f001 ff3c 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001466:	f000 fc3b 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_ADC1_Init+0x23c>)
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_ADC1_Init+0x210>)
 800147a:	f001 ff2d 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001484:	f000 fc2c 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_ADC1_Init+0x240>)
 800148a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800148c:	f240 2306 	movw	r3, #518	; 0x206
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_ADC1_Init+0x210>)
 8001498:	f001 ff1e 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80014a2:	f000 fc1d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2400011c 	.word	0x2400011c
 80014b4:	40022000 	.word	0x40022000
 80014b8:	0c900008 	.word	0x0c900008
 80014bc:	10c00010 	.word	0x10c00010
 80014c0:	14f00020 	.word	0x14f00020
 80014c4:	1d500080 	.word	0x1d500080
 80014c8:	21800100 	.word	0x21800100
 80014cc:	25b00200 	.word	0x25b00200
 80014d0:	2a000400 	.word	0x2a000400
 80014d4:	2e300800 	.word	0x2e300800
 80014d8:	3ac04000 	.word	0x3ac04000
 80014dc:	3ef08000 	.word	0x3ef08000
 80014e0:	47520000 	.word	0x47520000

080014e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <MX_ADC3_Init+0x110>)
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <MX_ADC3_Init+0x114>)
 8001500:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001504:	2208      	movs	r2, #8
 8001506:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <MX_ADC3_Init+0x110>)
 800150a:	2201      	movs	r2, #1
 800150c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001510:	2204      	movs	r2, #4
 8001512:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001516:	2200      	movs	r2, #0
 8001518:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_ADC3_Init+0x110>)
 800151c:	2201      	movs	r2, #1
 800151e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001522:	2204      	movs	r2, #4
 8001524:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_ADC3_Init+0x110>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <MX_ADC3_Init+0x110>)
 800153a:	2203      	movs	r2, #3
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_ADC3_Init+0x110>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001554:	4827      	ldr	r0, [pc, #156]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001556:	f001 fc3b 	bl	8002dd0 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001560:	f000 fbbe 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <MX_ADC3_Init+0x118>)
 8001566:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2306      	movs	r3, #6
 800156a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800156c:	2307      	movs	r3, #7
 800156e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001570:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001574:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001576:	2304      	movs	r3, #4
 8001578:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <MX_ADC3_Init+0x110>)
 8001588:	f001 fea6 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001592:	f000 fba5 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_ADC3_Init+0x11c>)
 8001598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800159a:	230c      	movs	r3, #12
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_ADC3_Init+0x110>)
 80015a4:	f001 fe98 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80015ae:	f000 fb97 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015b6:	2312      	movs	r3, #18
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_ADC3_Init+0x110>)
 80015c0:	f001 fe8a 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015ca:	f000 fb89 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_ADC3_Init+0x120>)
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015d2:	2318      	movs	r3, #24
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_ADC3_Init+0x110>)
 80015dc:	f001 fe7c 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015e6:	f000 fb7b 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	24000180 	.word	0x24000180
 80015f8:	58026000 	.word	0x58026000
 80015fc:	cb840000 	.word	0xcb840000
 8001600:	cfb80000 	.word	0xcfb80000
 8001604:	04300002 	.word	0x04300002

08001608 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2224      	movs	r2, #36	; 0x24
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00f fbeb 	bl	8010df0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_DAC1_Init+0x5c>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_DAC1_Init+0x60>)
 800161e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_DAC1_Init+0x5c>)
 8001622:	f002 feea 	bl	80043fa <HAL_DAC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800162c:	f000 fb58 	bl	8001ce0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001634:	230a      	movs	r3, #10
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_DAC1_Init+0x5c>)
 800164c:	f003 f8a4 	bl	8004798 <HAL_DAC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001656:	f000 fb43 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240002d4 	.word	0x240002d4
 8001668:	40007400 	.word	0x40007400

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <MX_I2C1_Init+0x7c>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001684:	2201      	movs	r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a8:	f006 fa60 	bl	8007b6c <HAL_I2C_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016b2:	f000 fb15 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016ba:	f006 ffa7 	bl	800860c <HAL_I2CEx_ConfigAnalogFilter>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016c4:	f000 fb0c 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016cc:	f006 ffe9 	bl	80086a2 <HAL_I2CEx_ConfigDigitalFilter>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f000 fb03 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24000360 	.word	0x24000360
 80016e4:	40005400 	.word	0x40005400
 80016e8:	00506682 	.word	0x00506682

080016ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <MX_SPI1_Init+0xa8>)
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <MX_SPI1_Init+0xac>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <MX_SPI1_Init+0xa8>)
 80016f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001700:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001704:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001708:	220f      	movs	r2, #15
 800170a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_SPI1_Init+0xa8>)
 800171a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800171e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001722:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_SPI1_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_SPI1_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_SPI1_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_SPI1_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001774:	2200      	movs	r2, #0
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_SPI1_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_SPI1_Init+0xa8>)
 8001780:	f00a fd36 	bl	800c1f0 <HAL_SPI_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800178a:	f000 faa9 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	240003b4 	.word	0x240003b4
 8001798:	40013000 	.word	0x40013000

0800179c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <MX_SPI2_Init+0xac>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017b8:	220f      	movs	r2, #15
 80017ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017d2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_SPI2_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_SPI2_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_SPI2_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_SPI2_Init+0xa8>)
 8001818:	2200      	movs	r2, #0
 800181a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_SPI2_Init+0xa8>)
 800181e:	2200      	movs	r2, #0
 8001820:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_SPI2_Init+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_SPI2_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_SPI2_Init+0xa8>)
 8001830:	f00a fcde 	bl	800c1f0 <HAL_SPI_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800183a:	f000 fa51 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2400043c 	.word	0x2400043c
 8001848:	40003800 	.word	0x40003800

0800184c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b096      	sub	sp, #88	; 0x58
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	222c      	movs	r2, #44	; 0x2c
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f00f fab9 	bl	8010df0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <MX_TIM1_Init+0x118>)
 8001880:	4a39      	ldr	r2, [pc, #228]	; (8001968 <MX_TIM1_Init+0x11c>)
 8001882:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <MX_TIM1_Init+0x118>)
 8001886:	225f      	movs	r2, #95	; 0x5f
 8001888:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <MX_TIM1_Init+0x118>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <MX_TIM1_Init+0x118>)
 8001892:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001896:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <MX_TIM1_Init+0x118>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800189e:	4b31      	ldr	r3, [pc, #196]	; (8001964 <MX_TIM1_Init+0x118>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_TIM1_Init+0x118>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018aa:	482e      	ldr	r0, [pc, #184]	; (8001964 <MX_TIM1_Init+0x118>)
 80018ac:	f00b fc1e 	bl	800d0ec <HAL_TIM_PWM_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 fa13 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ca:	4619      	mov	r1, r3
 80018cc:	4825      	ldr	r0, [pc, #148]	; (8001964 <MX_TIM1_Init+0x118>)
 80018ce:	f00c fcef 	bl	800e2b0 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018d8:	f000 fa02 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018dc:	2360      	movs	r3, #96	; 0x60
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018e0:	f240 13df 	movw	r3, #479	; 0x1df
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	4818      	ldr	r0, [pc, #96]	; (8001964 <MX_TIM1_Init+0x118>)
 8001904:	f00b fe60 	bl	800d5c8 <HAL_TIM_PWM_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800190e:	f000 f9e7 	bl	8001ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_TIM1_Init+0x118>)
 8001948:	f00c fd40 	bl	800e3cc <HAL_TIMEx_ConfigBreakDeadTime>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001952:	f000 f9c5 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_TIM1_Init+0x118>)
 8001958:	f000 fd1c 	bl	8002394 <HAL_TIM_MspPostInit>

}
 800195c:	bf00      	nop
 800195e:	3758      	adds	r7, #88	; 0x58
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	240004c4 	.word	0x240004c4
 8001968:	40010000 	.word	0x40010000

0800196c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019a8:	222f      	movs	r2, #47	; 0x2f
 80019aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019b4:	f640 4234 	movw	r2, #3124	; 0xc34
 80019b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c6:	4823      	ldr	r0, [pc, #140]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019c8:	f00b f863 	bl	800ca92 <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019d2:	f000 f985 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e0:	4619      	mov	r1, r3
 80019e2:	481c      	ldr	r0, [pc, #112]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019e4:	f00b ff04 	bl	800d7f0 <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019ee:	f000 f977 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <MX_TIM2_Init+0xe8>)
 80019f4:	f00b fb7a 	bl	800d0ec <HAL_TIM_PWM_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019fe:	f000 f96f 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a02:	2320      	movs	r3, #32
 8001a04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4810      	ldr	r0, [pc, #64]	; (8001a54 <MX_TIM2_Init+0xe8>)
 8001a12:	f00c fc4d 	bl	800e2b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a1c:	f000 f960 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a20:	2360      	movs	r3, #96	; 0x60
 8001a22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	220c      	movs	r2, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <MX_TIM2_Init+0xe8>)
 8001a38:	f00b fdc6 	bl	800d5c8 <HAL_TIM_PWM_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a42:	f000 f94d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a46:	4803      	ldr	r0, [pc, #12]	; (8001a54 <MX_TIM2_Init+0xe8>)
 8001a48:	f000 fca4 	bl	8002394 <HAL_TIM_MspPostInit>

}
 8001a4c:	bf00      	nop
 8001a4e:	3738      	adds	r7, #56	; 0x38
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	24000510 	.word	0x24000510

08001a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a78:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <MX_TIM4_Init+0x98>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a7e:	222f      	movs	r2, #47	; 0x2f
 8001a80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a9c:	4813      	ldr	r0, [pc, #76]	; (8001aec <MX_TIM4_Init+0x94>)
 8001a9e:	f00a fff8 	bl	800ca92 <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001aa8:	f000 f91a 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM4_Init+0x94>)
 8001aba:	f00b fe99 	bl	800d7f0 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ac4:	f000 f90c 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM4_Init+0x94>)
 8001ad6:	f00c fbeb 	bl	800e2b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f000 f8fe 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2400055c 	.word	0x2400055c
 8001af0:	40000800 	.word	0x40000800

08001af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <MX_USART1_UART_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b00:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3c:	4811      	ldr	r0, [pc, #68]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b3e:	f00c fce1 	bl	800e504 <HAL_UART_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b48:	f000 f8ca 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b50:	f00f f83b 	bl	8010bca <HAL_UARTEx_SetTxFifoThreshold>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f000 f8c1 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b62:	f00f f870 	bl	8010c46 <HAL_UARTEx_SetRxFifoThreshold>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b6c:	f000 f8b8 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_USART1_UART_Init+0x90>)
 8001b72:	f00e fff1 	bl	8010b58 <HAL_UARTEx_DisableFifoMode>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f000 f8b0 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	240005a8 	.word	0x240005a8
 8001b88:	40011000 	.word	0x40011000

08001b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_DMA_Init+0x5c>)
 8001b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <MX_DMA_Init+0x5c>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_DMA_Init+0x5c>)
 8001ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	200b      	movs	r0, #11
 8001bb6:	f002 fbec 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bba:	200b      	movs	r0, #11
 8001bbc:	f002 fc03 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	200c      	movs	r0, #12
 8001bc6:	f002 fbe4 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f002 fbfb 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2010      	movs	r0, #16
 8001bd6:	f002 fbdc 	bl	8004392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f002 fbf3 	bl	80043c6 <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58024400 	.word	0x58024400

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c80:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <MX_GPIO_Init+0xec>)
 8001c82:	f005 ff59 	bl	8007b38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2164      	movs	r1, #100	; 0x64
 8001c8a:	4814      	ldr	r0, [pc, #80]	; (8001cdc <MX_GPIO_Init+0xf0>)
 8001c8c:	f005 ff54 	bl	8007b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c90:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <MX_GPIO_Init+0xec>)
 8001caa:	f005 fd7d 	bl	80077a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cae:	2364      	movs	r3, #100	; 0x64
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_GPIO_Init+0xf0>)
 8001cc6:	f005 fd6f 	bl	80077a8 <HAL_GPIO_Init>

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58020800 	.word	0x58020800
 8001cdc:	58020400 	.word	0x58020400

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_MspInit+0x30>)
 8001cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_MspInit+0x30>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_MspInit+0x30>)
 8001d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	58024400 	.word	0x58024400

08001d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	; 0x38
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a7b      	ldr	r2, [pc, #492]	; (8001f2c <HAL_ADC_MspInit+0x20c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	f040 8091 	bne.w	8001e66 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d44:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d4a:	4a79      	ldr	r2, [pc, #484]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d4c:	f043 0320 	orr.w	r3, r3, #32
 8001d50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	4a71      	ldr	r2, [pc, #452]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	4a6a      	ldr	r2, [pc, #424]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d90:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	4a62      	ldr	r2, [pc, #392]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001dbc:	2333      	movs	r3, #51	; 0x33
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4859      	ldr	r0, [pc, #356]	; (8001f34 <HAL_ADC_MspInit+0x214>)
 8001dd0:	f005 fcea 	bl	80077a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001dd4:	23ce      	movs	r3, #206	; 0xce
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4854      	ldr	r0, [pc, #336]	; (8001f38 <HAL_ADC_MspInit+0x218>)
 8001de8:	f005 fcde 	bl	80077a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dec:	2303      	movs	r3, #3
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	484f      	ldr	r0, [pc, #316]	; (8001f3c <HAL_ADC_MspInit+0x21c>)
 8001e00:	f005 fcd2 	bl	80077a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e06:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_ADC_MspInit+0x224>)
 8001e08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e2c:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e34:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e48:	483d      	ldr	r0, [pc, #244]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e4a:	f002 fe71 	bl	8004b30 <HAL_DMA_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001e54:	f7ff ff44 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a39      	ldr	r2, [pc, #228]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e5e:	4a38      	ldr	r2, [pc, #224]	; (8001f40 <HAL_ADC_MspInit+0x220>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e64:	e05e      	b.n	8001f24 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a37      	ldr	r2, [pc, #220]	; (8001f48 <HAL_ADC_MspInit+0x228>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d159      	bne.n	8001f24 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_ADC_MspInit+0x210>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001eac:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001eb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001eb4:	f000 fd68 	bl	8002988 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ebc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001ec0:	f000 fd62 	bl	8002988 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ec6:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <HAL_ADC_MspInit+0x230>)
 8001ec8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ecc:	2273      	movs	r2, #115	; 0x73
 8001ece:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f08:	4810      	ldr	r0, [pc, #64]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001f0a:	f002 fe11 	bl	8004b30 <HAL_DMA_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001f14:	f7ff fee4 	bl	8001ce0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001f1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_ADC_MspInit+0x22c>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f24:	bf00      	nop
 8001f26:	3738      	adds	r7, #56	; 0x38
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	58024400 	.word	0x58024400
 8001f34:	58020800 	.word	0x58020800
 8001f38:	58020000 	.word	0x58020000
 8001f3c:	58020400 	.word	0x58020400
 8001f40:	240001e4 	.word	0x240001e4
 8001f44:	40020010 	.word	0x40020010
 8001f48:	58026000 	.word	0x58026000
 8001f4c:	2400025c 	.word	0x2400025c
 8001f50:	40020028 	.word	0x40020028

08001f54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a30      	ldr	r2, [pc, #192]	; (8002034 <HAL_DAC_MspInit+0xe0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d159      	bne.n	800202a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_DAC_MspInit+0xe4>)
 8001f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <HAL_DAC_MspInit+0xe4>)
 8001f7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f86:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <HAL_DAC_MspInit+0xe4>)
 8001f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_DAC_MspInit+0xe4>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_DAC_MspInit+0xe4>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_DAC_MspInit+0xe4>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	481d      	ldr	r0, [pc, #116]	; (800203c <HAL_DAC_MspInit+0xe8>)
 8001fc6:	f005 fbef 	bl	80077a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_DAC_MspInit+0xf0>)
 8001fce:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001fd2:	2243      	movs	r2, #67	; 0x43
 8001fd4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001ff4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8001ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002000:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_DAC_MspInit+0xec>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800200e:	480c      	ldr	r0, [pc, #48]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8002010:	f002 fd8e 	bl	8004b30 <HAL_DMA_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800201a:	f7ff fe61 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_DAC_MspInit+0xec>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40007400 	.word	0x40007400
 8002038:	58024400 	.word	0x58024400
 800203c:	58020000 	.word	0x58020000
 8002040:	240002e8 	.word	0x240002e8
 8002044:	40020088 	.word	0x40020088

08002048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0ba      	sub	sp, #232	; 0xe8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	22c0      	movs	r2, #192	; 0xc0
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f00e fec1 	bl	8010df0 <memset>
  if(hi2c->Instance==I2C1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a27      	ldr	r2, [pc, #156]	; (8002110 <HAL_I2C_MspInit+0xc8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d146      	bne.n	8002106 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002078:	f04f 0208 	mov.w	r2, #8
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f007 fbb0 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800209a:	f7ff fe21 	bl	8001ce0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_I2C_MspInit+0xcc>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_I2C_MspInit+0xcc>)
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_I2C_MspInit+0xcc>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d6:	2304      	movs	r3, #4
 80020d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020e0:	4619      	mov	r1, r3
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <HAL_I2C_MspInit+0xd0>)
 80020e4:	f005 fb60 	bl	80077a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_I2C_MspInit+0xcc>)
 80020ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_I2C_MspInit+0xcc>)
 80020f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_I2C_MspInit+0xcc>)
 80020fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	37e8      	adds	r7, #232	; 0xe8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40005400 	.word	0x40005400
 8002114:	58024400 	.word	0x58024400
 8002118:	58020400 	.word	0x58020400

0800211c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0bc      	sub	sp, #240	; 0xf0
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 0318 	add.w	r3, r7, #24
 8002138:	22c0      	movs	r2, #192	; 0xc0
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f00e fe57 	bl	8010df0 <memset>
  if(hspi->Instance==SPI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_SPI_MspInit+0x15c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d145      	bne.n	80021d8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800214c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002158:	2300      	movs	r3, #0
 800215a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	4618      	mov	r0, r3
 8002162:	f007 fb47 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800216c:	f7ff fdb8 	bl	8001ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002176:	4a41      	ldr	r2, [pc, #260]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800217c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002180:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002194:	4a39      	ldr	r2, [pc, #228]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_SPI_MspInit+0x160>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80021ac:	2318      	movs	r3, #24
 80021ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c4:	2305      	movs	r3, #5
 80021c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ce:	4619      	mov	r1, r3
 80021d0:	482b      	ldr	r0, [pc, #172]	; (8002280 <HAL_SPI_MspInit+0x164>)
 80021d2:	f005 fae9 	bl	80077a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021d6:	e04a      	b.n	800226e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a29      	ldr	r2, [pc, #164]	; (8002284 <HAL_SPI_MspInit+0x168>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d145      	bne.n	800226e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f007 fafc 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002202:	f7ff fd6d 	bl	8001ce0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <HAL_SPI_MspInit+0x160>)
 800220e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002212:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222a:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_SPI_MspInit+0x160>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_SPI_MspInit+0x160>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002242:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800225c:	2305      	movs	r3, #5
 800225e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_SPI_MspInit+0x164>)
 800226a:	f005 fa9d 	bl	80077a8 <HAL_GPIO_Init>
}
 800226e:	bf00      	nop
 8002270:	37f0      	adds	r7, #240	; 0xf0
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40013000 	.word	0x40013000
 800227c:	58024400 	.word	0x58024400
 8002280:	58020400 	.word	0x58020400
 8002284:	40003800 	.word	0x40003800

08002288 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_TIM_PWM_MspInit+0x78>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12e      	bne.n	80022f8 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_TIM_PWM_MspInit+0x7c>)
 800229c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_TIM_PWM_MspInit+0x7c>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_TIM_PWM_MspInit+0x7c>)
 80022ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	2018      	movs	r0, #24
 80022be:	f002 f868 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80022c2:	2018      	movs	r0, #24
 80022c4:	f002 f87f 	bl	80043c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	2019      	movs	r0, #25
 80022ce:	f002 f860 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022d2:	2019      	movs	r0, #25
 80022d4:	f002 f877 	bl	80043c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	201a      	movs	r0, #26
 80022de:	f002 f858 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022e2:	201a      	movs	r0, #26
 80022e4:	f002 f86f 	bl	80043c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	201b      	movs	r0, #27
 80022ee:	f002 f850 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022f2:	201b      	movs	r0, #27
 80022f4:	f002 f867 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40010000 	.word	0x40010000
 8002304:	58024400 	.word	0x58024400

08002308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d117      	bne.n	800234a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 800231c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 800232c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2101      	movs	r1, #1
 800233c:	201c      	movs	r0, #28
 800233e:	f002 f828 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002342:	201c      	movs	r0, #28
 8002344:	f002 f83f 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002348:	e01b      	b.n	8002382 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_TIM_Base_MspInit+0x88>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d116      	bne.n	8002382 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 8002356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_TIM_Base_MspInit+0x84>)
 8002366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2101      	movs	r1, #1
 8002376:	201e      	movs	r0, #30
 8002378:	f002 f80b 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800237c:	201e      	movs	r0, #30
 800237e:	f002 f822 	bl	80043c6 <HAL_NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	58024400 	.word	0x58024400
 8002390:	40000800 	.word	0x40000800

08002394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_TIM_MspPostInit+0xb8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d120      	bne.n	80023f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_TIM_MspPostInit+0xbc>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <HAL_TIM_MspPostInit+0xbc>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <HAL_TIM_MspPostInit+0xbc>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	4818      	ldr	r0, [pc, #96]	; (8002454 <HAL_TIM_MspPostInit+0xc0>)
 80023f2:	f005 f9d9 	bl	80077a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023f6:	e024      	b.n	8002442 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d11f      	bne.n	8002442 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_TIM_MspPostInit+0xbc>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_TIM_MspPostInit+0xbc>)
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_TIM_MspPostInit+0xbc>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002432:	2301      	movs	r3, #1
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4806      	ldr	r0, [pc, #24]	; (8002458 <HAL_TIM_MspPostInit+0xc4>)
 800243e:	f005 f9b3 	bl	80077a8 <HAL_GPIO_Init>
}
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40010000 	.word	0x40010000
 8002450:	58024400 	.word	0x58024400
 8002454:	58020000 	.word	0x58020000
 8002458:	58020400 	.word	0x58020400

0800245c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0ba      	sub	sp, #232	; 0xe8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	22c0      	movs	r2, #192	; 0xc0
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f00e fcb7 	bl	8010df0 <memset>
  if(huart->Instance==USART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <HAL_UART_MspInit+0xd8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d14e      	bne.n	800252a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800248c:	f04f 0201 	mov.w	r2, #1
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f007 f9a6 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024ae:	f7ff fc17 	bl	8001ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_UART_MspInit+0xdc>)
 80024b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <HAL_UART_MspInit+0xdc>)
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_UART_MspInit+0xdc>)
 80024c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_UART_MspInit+0xdc>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_UART_MspInit+0xdc>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_UART_MspInit+0xdc>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002508:	2307      	movs	r3, #7
 800250a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002512:	4619      	mov	r1, r3
 8002514:	4809      	ldr	r0, [pc, #36]	; (800253c <HAL_UART_MspInit+0xe0>)
 8002516:	f005 f947 	bl	80077a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2025      	movs	r0, #37	; 0x25
 8002520:	f001 ff37 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002524:	2025      	movs	r0, #37	; 0x25
 8002526:	f001 ff4e 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800252a:	bf00      	nop
 800252c:	37e8      	adds	r7, #232	; 0xe8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40011000 	.word	0x40011000
 8002538:	58024400 	.word	0x58024400
 800253c:	58020000 	.word	0x58020000

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 f9c0 	bl	8002910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <DMA1_Stream0_IRQHandler+0x10>)
 800259a:	f003 fdf3 	bl	8006184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	240001e4 	.word	0x240001e4

080025a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <DMA1_Stream1_IRQHandler+0x10>)
 80025ae:	f003 fde9 	bl	8006184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2400025c 	.word	0x2400025c

080025bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <DMA1_Stream5_IRQHandler+0x10>)
 80025c2:	f003 fddf 	bl	8006184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	240002e8 	.word	0x240002e8

080025d0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <TIM1_BRK_IRQHandler+0x10>)
 80025d6:	f00a feef 	bl	800d3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	240004c4 	.word	0x240004c4

080025e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM1_UP_IRQHandler+0x10>)
 80025ea:	f00a fee5 	bl	800d3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	240004c4 	.word	0x240004c4

080025f8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM1_TRG_COM_IRQHandler+0x10>)
 80025fe:	f00a fedb 	bl	800d3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	240004c4 	.word	0x240004c4

0800260c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM1_CC_IRQHandler+0x10>)
 8002612:	f00a fed1 	bl	800d3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	240004c4 	.word	0x240004c4

08002620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <TIM2_IRQHandler+0x10>)
 8002626:	f00a fec7 	bl	800d3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	24000510 	.word	0x24000510

08002634 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <TIM4_IRQHandler+0x10>)
 800263a:	f00a febd 	bl	800d3b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2400055c 	.word	0x2400055c

08002648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <USART1_IRQHandler+0x10>)
 800264e:	f00c f883 	bl	800e758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240005a8 	.word	0x240005a8

0800265c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <_sbrk+0x5c>)
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <_sbrk+0x60>)
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <_sbrk+0x64>)
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <_sbrk+0x68>)
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	429a      	cmp	r2, r3
 800268a:	d207      	bcs.n	800269c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800268c:	f00e fb68 	bl	8010d60 <__errno>
 8002690:	4603      	mov	r3, r0
 8002692:	220c      	movs	r2, #12
 8002694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269a:	e009      	b.n	80026b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <_sbrk+0x64>)
 80026ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	24080000 	.word	0x24080000
 80026bc:	00000400 	.word	0x00000400
 80026c0:	240006d8 	.word	0x240006d8
 80026c4:	240006f0 	.word	0x240006f0

080026c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <SystemInit+0xe4>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	4a36      	ldr	r2, [pc, #216]	; (80027ac <SystemInit+0xe4>)
 80026d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026dc:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <SystemInit+0xe8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d807      	bhi.n	80026f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <SystemInit+0xe8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 030f 	bic.w	r3, r3, #15
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <SystemInit+0xe8>)
 80026f2:	f043 0307 	orr.w	r3, r3, #7
 80026f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <SystemInit+0xec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <SystemInit+0xec>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <SystemInit+0xec>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <SystemInit+0xec>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4929      	ldr	r1, [pc, #164]	; (80027b4 <SystemInit+0xec>)
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <SystemInit+0xf0>)
 8002712:	4013      	ands	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <SystemInit+0xe8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002722:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <SystemInit+0xe8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 030f 	bic.w	r3, r3, #15
 800272a:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <SystemInit+0xe8>)
 800272c:	f043 0307 	orr.w	r3, r3, #7
 8002730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <SystemInit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <SystemInit+0xec>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <SystemInit+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <SystemInit+0xec>)
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <SystemInit+0xf4>)
 8002748:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <SystemInit+0xec>)
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <SystemInit+0xf8>)
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <SystemInit+0xec>)
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <SystemInit+0xfc>)
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <SystemInit+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <SystemInit+0xec>)
 800275e:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <SystemInit+0xfc>)
 8002760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <SystemInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <SystemInit+0xec>)
 800276a:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <SystemInit+0xfc>)
 800276c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800276e:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <SystemInit+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <SystemInit+0xec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <SystemInit+0xec>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <SystemInit+0xec>)
 8002782:	2200      	movs	r2, #0
 8002784:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <SystemInit+0x100>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <SystemInit+0x104>)
 800278c:	4013      	ands	r3, r2
 800278e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002792:	d202      	bcs.n	800279a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <SystemInit+0x108>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <SystemInit+0x10c>)
 800279c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	52002000 	.word	0x52002000
 80027b4:	58024400 	.word	0x58024400
 80027b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80027bc:	02020200 	.word	0x02020200
 80027c0:	01ff0000 	.word	0x01ff0000
 80027c4:	01010280 	.word	0x01010280
 80027c8:	5c001000 	.word	0x5c001000
 80027cc:	ffff0000 	.word	0xffff0000
 80027d0:	51008108 	.word	0x51008108
 80027d4:	52004000 	.word	0x52004000

080027d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027dc:	f7ff ff74 	bl	80026c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e8:	e002      	b.n	80027f0 <LoopCopyDataInit>

080027ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ee:	3304      	adds	r3, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f4:	d3f9      	bcc.n	80027ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f8:	4c0a      	ldr	r4, [pc, #40]	; (8002824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027fc:	e001      	b.n	8002802 <LoopFillZerobss>

080027fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002800:	3204      	adds	r2, #4

08002802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002804:	d3fb      	bcc.n	80027fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002806:	f00e fab1 	bl	8010d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280a:	f7fe fc17 	bl	800103c <main>
  bx  lr
 800280e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002810:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002814:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002818:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 800281c:	0801107c 	.word	0x0801107c
  ldr r2, =_sbss
 8002820:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002824:	240006f0 	.word	0x240006f0

08002828 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <ADC3_IRQHandler>
	...

0800282c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002832:	2003      	movs	r0, #3
 8002834:	f001 fda2 	bl	800437c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002838:	f006 fe06 	bl	8009448 <HAL_RCC_GetSysClockFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_Init+0x68>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	4913      	ldr	r1, [pc, #76]	; (8002898 <HAL_Init+0x6c>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_Init+0x68>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_Init+0x6c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	4a0b      	ldr	r2, [pc, #44]	; (800289c <HAL_Init+0x70>)
 800286e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002870:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <HAL_Init+0x74>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002876:	200f      	movs	r0, #15
 8002878:	f000 f814 	bl	80028a4 <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e002      	b.n	800288c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002886:	f7ff fa31 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	58024400 	.word	0x58024400
 8002898:	0801102c 	.word	0x0801102c
 800289c:	2400008c 	.word	0x2400008c
 80028a0:	24000088 	.word	0x24000088

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_InitTick+0x60>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e021      	b.n	80028fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_InitTick+0x64>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_InitTick+0x60>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 fd87 	bl	80043e2 <HAL_SYSTICK_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e00e      	b.n	80028fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b0f      	cmp	r3, #15
 80028e2:	d80a      	bhi.n	80028fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e4:	2200      	movs	r2, #0
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ec:	f001 fd51 	bl	8004392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f0:	4a06      	ldr	r2, [pc, #24]	; (800290c <HAL_InitTick+0x68>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	24000094 	.word	0x24000094
 8002908:	24000088 	.word	0x24000088
 800290c:	24000090 	.word	0x24000090

08002910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x20>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_IncTick+0x24>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4413      	add	r3, r2
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_IncTick+0x24>)
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	24000094 	.word	0x24000094
 8002934:	240006dc 	.word	0x240006dc

08002938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_GetTick+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	240006dc 	.word	0x240006dc

08002950 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_SuspendTick+0x1c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_SuspendTick+0x1c>)
 800295a:	f023 0302 	bic.w	r3, r3, #2
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_GetREVID+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0c1b      	lsrs	r3, r3, #16
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	5c001000 	.word	0x5c001000

08002988 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	4904      	ldr	r1, [pc, #16]	; (80029b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	58000400 	.word	0x58000400

080029b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3360      	adds	r3, #96	; 0x60
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	611a      	str	r2, [r3, #16]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b087      	sub	sp, #28
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3360      	adds	r3, #96	; 0x60
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	601a      	str	r2, [r3, #0]
  }
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3330      	adds	r3, #48	; 0x30
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	4413      	add	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	211f      	movs	r1, #31
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	f003 011f 	and.w	r1, r3, #31
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f023 0203 	bic.w	r2, r3, #3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3314      	adds	r3, #20
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	0e5b      	lsrs	r3, r3, #25
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0d1b      	lsrs	r3, r3, #20
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2107      	movs	r1, #7
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	0d1b      	lsrs	r3, r3, #20
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0318 	and.w	r3, r3, #24
 8002be2:	4908      	ldr	r1, [pc, #32]	; (8002c04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002be4:	40d9      	lsrs	r1, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	400b      	ands	r3, r1
 8002bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	000fffff 	.word	0x000fffff

08002c08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 031f 	and.w	r3, r3, #31
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6093      	str	r3, [r2, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	5fffffc0 	.word	0x5fffffc0

08002c48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5c:	d101      	bne.n	8002c62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	6fffffc0 	.word	0x6fffffc0

08002c98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cac:	d101      	bne.n	8002cb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <LL_ADC_Enable+0x24>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	7fffffc0 	.word	0x7fffffc0

08002ce8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <LL_ADC_Disable+0x24>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	7fffffc0 	.word	0x7fffffc0

08002d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_IsDisableOngoing+0x18>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_IsDisableOngoing+0x1a>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <LL_ADC_REG_StartConversion+0x24>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	7fffffc0 	.word	0x7fffffc0

08002d84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e18f      	b.n	800310a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7fe ff91 	bl	8001d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff19 	bl	8002c48 <LL_ADC_IsDeepPowerDownEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff feff 	bl	8002c24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ff34 	bl	8002c98 <LL_ADC_IsInternalRegulatorEnabled>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d114      	bne.n	8002e60 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff18 	bl	8002c70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e40:	4b87      	ldr	r3, [pc, #540]	; (8003060 <HAL_ADC_Init+0x290>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	4a87      	ldr	r2, [pc, #540]	; (8003064 <HAL_ADC_Init+0x294>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e52:	e002      	b.n	8002e5a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f9      	bne.n	8002e54 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff17 	bl	8002c98 <LL_ADC_IsInternalRegulatorEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff77 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8002e96:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 8129 	bne.w	80030f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 8125 	bne.w	80030f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002eb6:	f043 0202 	orr.w	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff24 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d136      	bne.n	8002f3c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_ADC_Init+0x298>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_Init+0x112>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a63      	ldr	r2, [pc, #396]	; (800306c <HAL_ADC_Init+0x29c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10e      	bne.n	8002f00 <HAL_ADC_Init+0x130>
 8002ee2:	4861      	ldr	r0, [pc, #388]	; (8003068 <HAL_ADC_Init+0x298>)
 8002ee4:	f7ff ff14 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	4860      	ldr	r0, [pc, #384]	; (800306c <HAL_ADC_Init+0x29c>)
 8002eec:	f7ff ff10 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e008      	b.n	8002f12 <HAL_ADC_Init+0x142>
 8002f00:	485b      	ldr	r0, [pc, #364]	; (8003070 <HAL_ADC_Init+0x2a0>)
 8002f02:	f7ff ff05 	bl	8002d10 <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a53      	ldr	r2, [pc, #332]	; (8003068 <HAL_ADC_Init+0x298>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_ADC_Init+0x15a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_ADC_Init+0x29c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_Init+0x15e>
 8002f2a:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_ADC_Init+0x2a4>)
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_Init+0x160>
 8002f2e:	4a52      	ldr	r2, [pc, #328]	; (8003078 <HAL_ADC_Init+0x2a8>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f7ff fd3c 	bl	80029b4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f3c:	f7ff fd18 	bl	8002970 <HAL_GetREVID>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d914      	bls.n	8002f74 <HAL_ADC_Init+0x1a4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d110      	bne.n	8002f74 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7d5b      	ldrb	r3, [r3, #21]
 8002f56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f5c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7f1b      	ldrb	r3, [r3, #28]
 8002f68:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f6a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f6c:	f043 030c 	orr.w	r3, r3, #12
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e00d      	b.n	8002f90 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7d5b      	ldrb	r3, [r3, #21]
 8002f78:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f7e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f84:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7f1b      	ldrb	r3, [r3, #28]
 8002f8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7f1b      	ldrb	r3, [r3, #28]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	045b      	lsls	r3, r3, #17
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_ADC_Init+0x2ac>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	69b9      	ldr	r1, [r7, #24]
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fed2 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fedf 	bl	8002daa <LL_ADC_INJ_IsConversionOngoing>
 8002fec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d15f      	bne.n	80030b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d15c      	bne.n	80030b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7d1b      	ldrb	r3, [r3, #20]
 8002ffe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_ADC_Init+0x2b0>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	430b      	orrs	r3, r1
 800301a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003022:	2b01      	cmp	r3, #1
 8003024:	d130      	bne.n	8003088 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_ADC_Init+0x2b4>)
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800303a:	3a01      	subs	r2, #1
 800303c:	0411      	lsls	r1, r2, #16
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800304e:	430a      	orrs	r2, r1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	611a      	str	r2, [r3, #16]
 800305c:	e01c      	b.n	8003098 <HAL_ADC_Init+0x2c8>
 800305e:	bf00      	nop
 8003060:	24000088 	.word	0x24000088
 8003064:	053e2d63 	.word	0x053e2d63
 8003068:	40022000 	.word	0x40022000
 800306c:	40022100 	.word	0x40022100
 8003070:	58026000 	.word	0x58026000
 8003074:	40022300 	.word	0x40022300
 8003078:	58026300 	.word	0x58026300
 800307c:	fff0c003 	.word	0xfff0c003
 8003080:	ffffbffc 	.word	0xffffbffc
 8003084:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fdec 	bl	8003c8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f023 010f 	bic.w	r1, r3, #15
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
 80030d4:	e007      	b.n	80030e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 020f 	bic.w	r2, r2, #15
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
 80030f6:	e007      	b.n	8003108 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f043 0210 	orr.w	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003108:	7ffb      	ldrb	r3, [r7, #31]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop

08003114 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a55      	ldr	r2, [pc, #340]	; (800327c <HAL_ADC_Start_DMA+0x168>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_ADC_Start_DMA+0x20>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a54      	ldr	r2, [pc, #336]	; (8003280 <HAL_ADC_Start_DMA+0x16c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_ADC_Start_DMA+0x24>
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_ADC_Start_DMA+0x170>)
 8003136:	e000      	b.n	800313a <HAL_ADC_Start_DMA+0x26>
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_ADC_Start_DMA+0x174>)
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fd64 	bl	8002c08 <LL_ADC_GetMultimode>
 8003140:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fe1c 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 808c 	bne.w	800326c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Start_DMA+0x4e>
 800315e:	2302      	movs	r3, #2
 8003160:	e087      	b.n	8003272 <HAL_ADC_Start_DMA+0x15e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d002      	beq.n	800317c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b09      	cmp	r3, #9
 800317a:	d170      	bne.n	800325e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fc07 	bl	8003990 <ADC_Enable>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d163      	bne.n	8003254 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003190:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_ADC_Start_DMA+0x178>)
 8003192:	4013      	ands	r3, r2
 8003194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a37      	ldr	r2, [pc, #220]	; (8003280 <HAL_ADC_Start_DMA+0x16c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d002      	beq.n	80031ac <HAL_ADC_Start_DMA+0x98>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e000      	b.n	80031ae <HAL_ADC_Start_DMA+0x9a>
 80031ac:	4b33      	ldr	r3, [pc, #204]	; (800327c <HAL_ADC_Start_DMA+0x168>)
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d002      	beq.n	80031bc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f023 0206 	bic.w	r2, r3, #6
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	659a      	str	r2, [r3, #88]	; 0x58
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_ADC_Start_DMA+0x17c>)
 80031ee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <HAL_ADC_Start_DMA+0x180>)
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	4a26      	ldr	r2, [pc, #152]	; (8003298 <HAL_ADC_Start_DMA+0x184>)
 80031fe:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	221c      	movs	r2, #28
 8003206:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0210 	orr.w	r2, r2, #16
 800321e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7ff fc89 	bl	8002b42 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3340      	adds	r3, #64	; 0x40
 800323a:	4619      	mov	r1, r3
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f001 ffd2 	bl	80051e8 <HAL_DMA_Start_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fd85 	bl	8002d5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003252:	e00d      	b.n	8003270 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800325c:	e008      	b.n	8003270 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800326a:	e001      	b.n	8003270 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800326c:	2302      	movs	r3, #2
 800326e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40022000 	.word	0x40022000
 8003280:	40022100 	.word	0x40022100
 8003284:	40022300 	.word	0x40022300
 8003288:	58026300 	.word	0x58026300
 800328c:	fffff0fe 	.word	0xfffff0fe
 8003290:	08003b63 	.word	0x08003b63
 8003294:	08003c3b 	.word	0x08003c3b
 8003298:	08003c57 	.word	0x08003c57

0800329c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b0a1      	sub	sp, #132	; 0x84
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_ADC_ConfigChannel+0x1b0>)
 80032f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x2a>
 80032fe:	2302      	movs	r3, #2
 8003300:	e32e      	b.n	8003960 <HAL_ADC_ConfigChannel+0x688>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fd38 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 8313 	bne.w	8003942 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db2c      	blt.n	800337e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800332c:	2b00      	cmp	r3, #0
 800332e:	d108      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x6a>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2201      	movs	r2, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	e016      	b.n	8003370 <HAL_ADC_ConfigChannel+0x98>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003352:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800335e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2201      	movs	r2, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	69d1      	ldr	r1, [r2, #28]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	430b      	orrs	r3, r1
 800337c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7ff fbad 	bl	8002aea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fcf5 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 800339a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fd02 	bl	8002daa <LL_ADC_INJ_IsConversionOngoing>
 80033a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80b8 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 80b4 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	461a      	mov	r2, r3
 80033c6:	f7ff fbcf 	bl	8002b68 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_ADC_ConfigChannel+0x1b4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d6:	d10b      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x118>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	e01d      	b.n	800342c <HAL_ADC_ConfigChannel+0x154>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x13e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	e00a      	b.n	800342c <HAL_ADC_ConfigChannel+0x154>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d02c      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6919      	ldr	r1, [r3, #16]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003444:	f7ff faea 	bl	8002a1c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6919      	ldr	r1, [r3, #16]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	7e5b      	ldrb	r3, [r3, #25]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <HAL_ADC_ConfigChannel+0x186>
 8003458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800345c:	e000      	b.n	8003460 <HAL_ADC_ConfigChannel+0x188>
 800345e:	2300      	movs	r3, #0
 8003460:	461a      	mov	r2, r3
 8003462:	f7ff fb14 	bl	8002a8e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6919      	ldr	r1, [r3, #16]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7e1b      	ldrb	r3, [r3, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_ADC_ConfigChannel+0x1a4>
 8003476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800347a:	e000      	b.n	800347e <HAL_ADC_ConfigChannel+0x1a6>
 800347c:	2300      	movs	r3, #0
 800347e:	461a      	mov	r2, r3
 8003480:	f7ff faec 	bl	8002a5c <LL_ADC_SetDataRightShift>
 8003484:	e04c      	b.n	8003520 <HAL_ADC_ConfigChannel+0x248>
 8003486:	bf00      	nop
 8003488:	47ff0000 	.word	0x47ff0000
 800348c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	069b      	lsls	r3, r3, #26
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d107      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034d6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	069b      	lsls	r3, r3, #26
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034fa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	069b      	lsls	r3, r3, #26
 800350c:	429a      	cmp	r2, r3
 800350e:	d107      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800351e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fbf3 	bl	8002d10 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f040 8211 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	461a      	mov	r2, r3
 8003540:	f7ff fb3e 	bl	8002bc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4aa1      	ldr	r2, [pc, #644]	; (80037d0 <HAL_ADC_ConfigChannel+0x4f8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	f040 812e 	bne.w	80037ac <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x2a0>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2b09      	cmp	r3, #9
 800356e:	bf94      	ite	ls
 8003570:	2301      	movls	r3, #1
 8003572:	2300      	movhi	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e019      	b.n	80035ac <HAL_ADC_ConfigChannel+0x2d4>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003588:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e003      	b.n	800359c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	bf94      	ite	ls
 80035a6:	2301      	movls	r3, #1
 80035a8:	2300      	movhi	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d079      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x2f4>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	069b      	lsls	r3, r3, #26
 80035c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ca:	e015      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x320>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80035e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	069b      	lsls	r3, r3, #26
 80035f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x340>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	3301      	adds	r3, #1
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	e017      	b.n	8003648 <HAL_ADC_ConfigChannel+0x370>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800362a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_ADC_ConfigChannel+0x396>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	3301      	adds	r3, #1
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	051b      	lsls	r3, r3, #20
 800366c:	e018      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x3c8>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e003      	b.n	8003692 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f003 021f 	and.w	r2, r3, #31
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a0:	430b      	orrs	r3, r1
 80036a2:	e07e      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x3e8>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	069b      	lsls	r3, r3, #26
 80036ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036be:	e015      	b.n	80036ec <HAL_ADC_ConfigChannel+0x414>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	069b      	lsls	r3, r3, #26
 80036e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_ADC_ConfigChannel+0x434>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	e017      	b.n	800373c <HAL_ADC_ConfigChannel+0x464>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	61bb      	str	r3, [r7, #24]
  return result;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	ea42 0103 	orr.w	r1, r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x490>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	3301      	adds	r3, #1
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	3b1e      	subs	r3, #30
 8003760:	051b      	lsls	r3, r3, #20
 8003762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003766:	e01b      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x4c8>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	60fb      	str	r3, [r7, #12]
  return result;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	3b1e      	subs	r3, #30
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a0:	430b      	orrs	r3, r1
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7ff f9de 	bl	8002b68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f280 80cf 	bge.w	8003954 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_ADC_ConfigChannel+0x4fc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x4f2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_ADC_ConfigChannel+0x500>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10a      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x508>
 80037ca:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_ADC_ConfigChannel+0x504>)
 80037cc:	e009      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x50a>
 80037ce:	bf00      	nop
 80037d0:	47ff0000 	.word	0x47ff0000
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40022100 	.word	0x40022100
 80037dc:	40022300 	.word	0x40022300
 80037e0:	4b61      	ldr	r3, [pc, #388]	; (8003968 <HAL_ADC_ConfigChannel+0x690>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f90c 	bl	8002a00 <LL_ADC_GetCommonPathInternalCh>
 80037e8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5f      	ldr	r2, [pc, #380]	; (800396c <HAL_ADC_ConfigChannel+0x694>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_ADC_ConfigChannel+0x526>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <HAL_ADC_ConfigChannel+0x698>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10e      	bne.n	800381c <HAL_ADC_ConfigChannel+0x544>
 80037fe:	485b      	ldr	r0, [pc, #364]	; (800396c <HAL_ADC_ConfigChannel+0x694>)
 8003800:	f7ff fa86 	bl	8002d10 <LL_ADC_IsEnabled>
 8003804:	4604      	mov	r4, r0
 8003806:	485a      	ldr	r0, [pc, #360]	; (8003970 <HAL_ADC_ConfigChannel+0x698>)
 8003808:	f7ff fa82 	bl	8002d10 <LL_ADC_IsEnabled>
 800380c:	4603      	mov	r3, r0
 800380e:	4323      	orrs	r3, r4
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e008      	b.n	800382e <HAL_ADC_ConfigChannel+0x556>
 800381c:	4855      	ldr	r0, [pc, #340]	; (8003974 <HAL_ADC_ConfigChannel+0x69c>)
 800381e:	f7ff fa77 	bl	8002d10 <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d07d      	beq.n	800392e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a50      	ldr	r2, [pc, #320]	; (8003978 <HAL_ADC_ConfigChannel+0x6a0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d130      	bne.n	800389e <HAL_ADC_ConfigChannel+0x5c6>
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d12b      	bne.n	800389e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a4a      	ldr	r2, [pc, #296]	; (8003974 <HAL_ADC_ConfigChannel+0x69c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	f040 8081 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a45      	ldr	r2, [pc, #276]	; (800396c <HAL_ADC_ConfigChannel+0x694>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_ADC_ConfigChannel+0x58e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a43      	ldr	r2, [pc, #268]	; (8003970 <HAL_ADC_ConfigChannel+0x698>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x592>
 8003866:	4a45      	ldr	r2, [pc, #276]	; (800397c <HAL_ADC_ConfigChannel+0x6a4>)
 8003868:	e000      	b.n	800386c <HAL_ADC_ConfigChannel+0x594>
 800386a:	4a3f      	ldr	r2, [pc, #252]	; (8003968 <HAL_ADC_ConfigChannel+0x690>)
 800386c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7ff f8b0 	bl	80029da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_ADC_ConfigChannel+0x6a8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	099b      	lsrs	r3, r3, #6
 8003880:	4a40      	ldr	r2, [pc, #256]	; (8003984 <HAL_ADC_ConfigChannel+0x6ac>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	099b      	lsrs	r3, r3, #6
 8003888:	3301      	adds	r3, #1
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800388e:	e002      	b.n	8003896 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389c:	e05a      	b.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a39      	ldr	r2, [pc, #228]	; (8003988 <HAL_ADC_ConfigChannel+0x6b0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d11e      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x60e>
 80038a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <HAL_ADC_ConfigChannel+0x69c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d14b      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2a      	ldr	r2, [pc, #168]	; (800396c <HAL_ADC_ConfigChannel+0x694>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x5f8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_ADC_ConfigChannel+0x698>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x5fc>
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_ADC_ConfigChannel+0x6a4>)
 80038d2:	e000      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x5fe>
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <HAL_ADC_ConfigChannel+0x690>)
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7ff f87b 	bl	80029da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e4:	e036      	b.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a28      	ldr	r2, [pc, #160]	; (800398c <HAL_ADC_ConfigChannel+0x6b4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d131      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d12c      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <HAL_ADC_ConfigChannel+0x69c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d127      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_ADC_ConfigChannel+0x694>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x640>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_ADC_ConfigChannel+0x698>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x644>
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_ADC_ConfigChannel+0x6a4>)
 800391a:	e000      	b.n	800391e <HAL_ADC_ConfigChannel+0x646>
 800391c:	4a12      	ldr	r2, [pc, #72]	; (8003968 <HAL_ADC_ConfigChannel+0x690>)
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7ff f857 	bl	80029da <LL_ADC_SetCommonPathInternalCh>
 800392c:	e012      	b.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003940:	e008      	b.n	8003954 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800395c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003960:	4618      	mov	r0, r3
 8003962:	3784      	adds	r7, #132	; 0x84
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	58026300 	.word	0x58026300
 800396c:	40022000 	.word	0x40022000
 8003970:	40022100 	.word	0x40022100
 8003974:	58026000 	.word	0x58026000
 8003978:	cb840000 	.word	0xcb840000
 800397c:	40022300 	.word	0x40022300
 8003980:	24000088 	.word	0x24000088
 8003984:	053e2d63 	.word	0x053e2d63
 8003988:	c7520000 	.word	0xc7520000
 800398c:	cfb80000 	.word	0xcfb80000

08003990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f9b7 	bl	8002d10 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d16e      	bne.n	8003a86 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <ADC_Enable+0x100>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e05a      	b.n	8003a88 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff f972 	bl	8002cc0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039dc:	f7fe ffac 	bl	8002938 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <ADC_Enable+0x104>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <ADC_Enable+0x66>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <ADC_Enable+0x108>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <ADC_Enable+0x6a>
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <ADC_Enable+0x10c>)
 80039f8:	e000      	b.n	80039fc <ADC_Enable+0x6c>
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <ADC_Enable+0x110>)
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f903 	bl	8002c08 <LL_ADC_GetMultimode>
 8003a02:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <ADC_Enable+0x108>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d002      	beq.n	8003a14 <ADC_Enable+0x84>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e000      	b.n	8003a16 <ADC_Enable+0x86>
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <ADC_Enable+0x104>)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02c      	beq.n	8003a78 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d130      	bne.n	8003a86 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a24:	e028      	b.n	8003a78 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff f970 	bl	8002d10 <LL_ADC_IsEnabled>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f940 	bl	8002cc0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a40:	f7fe ff7a 	bl	8002938 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d914      	bls.n	8003a78 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00d      	beq.n	8003a78 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d1cf      	bne.n	8003a26 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	8000003f 	.word	0x8000003f
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022100 	.word	0x40022100
 8003a9c:	40022300 	.word	0x40022300
 8003aa0:	58026300 	.word	0x58026300

08003aa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff f940 	bl	8002d36 <LL_ADC_IsDisableOngoing>
 8003ab6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff f927 	bl	8002d10 <LL_ADC_IsEnabled>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d047      	beq.n	8003b58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d144      	bne.n	8003b58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 030d 	and.w	r3, r3, #13
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10c      	bne.n	8003af6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f901 	bl	8002ce8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2203      	movs	r2, #3
 8003aec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aee:	f7fe ff23 	bl	8002938 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af4:	e029      	b.n	8003b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e023      	b.n	8003b5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b12:	f7fe ff11 	bl	8002938 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d914      	bls.n	8003b4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f043 0210 	orr.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e007      	b.n	8003b5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1dc      	bne.n	8003b12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d14b      	bne.n	8003c14 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d021      	beq.n	8003bda <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe ff92 	bl	8002ac4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d032      	beq.n	8003c0c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d12b      	bne.n	8003c0c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11f      	bne.n	8003c0c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
 8003bd8:	e018      	b.n	8003c0c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff fb45 	bl	800329c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c12:	e00e      	b.n	8003c32 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff fb4f 	bl	80032c4 <HAL_ADC_ErrorCallback>
}
 8003c26:	e004      	b.n	8003c32 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fb31 	bl	80032b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f043 0204 	orr.w	r2, r3, #4
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fb21 	bl	80032c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <ADC_ConfigureBoostMode+0x1f8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <ADC_ConfigureBoostMode+0x1c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a79      	ldr	r2, [pc, #484]	; (8003e88 <ADC_ConfigureBoostMode+0x1fc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d109      	bne.n	8003cbc <ADC_ConfigureBoostMode+0x30>
 8003ca8:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <ADC_ConfigureBoostMode+0x200>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e008      	b.n	8003cce <ADC_ConfigureBoostMode+0x42>
 8003cbc:	4b74      	ldr	r3, [pc, #464]	; (8003e90 <ADC_ConfigureBoostMode+0x204>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01c      	beq.n	8003d0c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cd2:	f005 fd33 	bl	800973c <HAL_RCC_GetHCLKFreq>
 8003cd6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ce0:	d010      	beq.n	8003d04 <ADC_ConfigureBoostMode+0x78>
 8003ce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ce6:	d873      	bhi.n	8003dd0 <ADC_ConfigureBoostMode+0x144>
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d002      	beq.n	8003cf4 <ADC_ConfigureBoostMode+0x68>
 8003cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cf2:	d16d      	bne.n	8003dd0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	60fb      	str	r3, [r7, #12]
        break;
 8003d02:	e068      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	60fb      	str	r3, [r7, #12]
        break;
 8003d0a:	e064      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	f006 ff78 	bl	800ac08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d18:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d22:	d051      	beq.n	8003dc8 <ADC_ConfigureBoostMode+0x13c>
 8003d24:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d28:	d854      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d2a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d2e:	d047      	beq.n	8003dc0 <ADC_ConfigureBoostMode+0x134>
 8003d30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d34:	d84e      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d3a:	d03d      	beq.n	8003db8 <ADC_ConfigureBoostMode+0x12c>
 8003d3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d40:	d848      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d46:	d033      	beq.n	8003db0 <ADC_ConfigureBoostMode+0x124>
 8003d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4c:	d842      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d4e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d52:	d029      	beq.n	8003da8 <ADC_ConfigureBoostMode+0x11c>
 8003d54:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d58:	d83c      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d5a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d5e:	d01a      	beq.n	8003d96 <ADC_ConfigureBoostMode+0x10a>
 8003d60:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d64:	d836      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d66:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d6a:	d014      	beq.n	8003d96 <ADC_ConfigureBoostMode+0x10a>
 8003d6c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d70:	d830      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d76:	d00e      	beq.n	8003d96 <ADC_ConfigureBoostMode+0x10a>
 8003d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7c:	d82a      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d82:	d008      	beq.n	8003d96 <ADC_ConfigureBoostMode+0x10a>
 8003d84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d88:	d824      	bhi.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
 8003d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d8e:	d002      	beq.n	8003d96 <ADC_ConfigureBoostMode+0x10a>
 8003d90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d94:	d11e      	bne.n	8003dd4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	60fb      	str	r3, [r7, #12]
        break;
 8003da6:	e016      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
        break;
 8003dae:	e012      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	60fb      	str	r3, [r7, #12]
        break;
 8003db6:	e00e      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	60fb      	str	r3, [r7, #12]
        break;
 8003dbe:	e00a      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	09db      	lsrs	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
        break;
 8003dc6:	e006      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	60fb      	str	r3, [r7, #12]
        break;
 8003dce:	e002      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003dd4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003dd6:	f7fe fdcb 	bl	8002970 <HAL_GetREVID>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d815      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <ADC_ConfigureBoostMode+0x208>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d908      	bls.n	8003dfe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dfc:	e03e      	b.n	8003e7c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e0c:	609a      	str	r2, [r3, #8]
}
 8003e0e:	e035      	b.n	8003e7c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <ADC_ConfigureBoostMode+0x20c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d808      	bhi.n	8003e30 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e2c:	609a      	str	r2, [r3, #8]
}
 8003e2e:	e025      	b.n	8003e7c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <ADC_ConfigureBoostMode+0x210>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d80a      	bhi.n	8003e4e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	e016      	b.n	8003e7c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <ADC_ConfigureBoostMode+0x214>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d80a      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	609a      	str	r2, [r3, #8]
}
 8003e6a:	e007      	b.n	8003e7c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40022000 	.word	0x40022000
 8003e88:	40022100 	.word	0x40022100
 8003e8c:	40022300 	.word	0x40022300
 8003e90:	58026300 	.word	0x58026300
 8003e94:	01312d00 	.word	0x01312d00
 8003e98:	005f5e10 	.word	0x005f5e10
 8003e9c:	00bebc20 	.word	0x00bebc20
 8003ea0:	017d7840 	.word	0x017d7840

08003ea4 <LL_ADC_IsEnabled>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <LL_ADC_IsEnabled+0x18>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <LL_ADC_IsEnabled+0x1a>
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <LL_ADC_StartCalibration>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <LL_ADC_StartCalibration+0x38>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eec:	430a      	orrs	r2, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	3ffeffc0 	.word	0x3ffeffc0

08003f08 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f1c:	d101      	bne.n	8003f22 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d101      	bne.n	8003f48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e04c      	b.n	8004010 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff fd90 	bl	8003aa4 <ADC_Disable>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d135      	bne.n	8003ffa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	f043 0202 	orr.w	r2, r3, #2
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff ff90 	bl	8003ecc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fac:	e014      	b.n	8003fd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_ADCEx_Calibration_Start+0xc4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d30d      	bcc.n	8003fd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f023 0312 	bic.w	r3, r3, #18
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01b      	b.n	8004010 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff93 	bl	8003f08 <LL_ADC_IsCalibrationOnGoing>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e2      	bne.n	8003fae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
 8003ff8:	e005      	b.n	8004006 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f043 0210 	orr.w	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	ffffeefd 	.word	0xffffeefd
 800401c:	25c3f800 	.word	0x25c3f800

08004020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b09f      	sub	sp, #124	; 0x7c
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800403a:	2302      	movs	r3, #2
 800403c:	e0be      	b.n	80041bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800404a:	2300      	movs	r3, #0
 800404c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5c      	ldr	r2, [pc, #368]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d102      	bne.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004058:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	e001      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e09d      	b.n	80041bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff54 	bl	8003f30 <LL_ADC_REG_IsConversionOngoing>
 8004088:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff4e 	bl	8003f30 <LL_ADC_REG_IsConversionOngoing>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d17f      	bne.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800409a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409c:	2b00      	cmp	r3, #0
 800409e:	d17c      	bne.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a47      	ldr	r2, [pc, #284]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a46      	ldr	r2, [pc, #280]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040b4:	4b45      	ldr	r3, [pc, #276]	; (80041cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040b6:	e000      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040b8:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d039      	beq.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a38      	ldr	r2, [pc, #224]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10e      	bne.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040ea:	4836      	ldr	r0, [pc, #216]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ec:	f7ff feda 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040f0:	4604      	mov	r4, r0
 80040f2:	4835      	ldr	r0, [pc, #212]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f4:	f7ff fed6 	bl	8003ea4 <LL_ADC_IsEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4323      	orrs	r3, r4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e008      	b.n	800411a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004108:	4832      	ldr	r0, [pc, #200]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800410a:	f7ff fecb 	bl	8003ea4 <LL_ADC_IsEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d047      	beq.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004124:	4013      	ands	r3, r2
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	6892      	ldr	r2, [r2, #8]
 800412e:	430a      	orrs	r2, r1
 8004130:	431a      	orrs	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004136:	e03a      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10e      	bne.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004158:	481a      	ldr	r0, [pc, #104]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800415a:	f7ff fea3 	bl	8003ea4 <LL_ADC_IsEnabled>
 800415e:	4604      	mov	r4, r0
 8004160:	4819      	ldr	r0, [pc, #100]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004162:	f7ff fe9f 	bl	8003ea4 <LL_ADC_IsEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	4323      	orrs	r3, r4
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e008      	b.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004176:	4817      	ldr	r0, [pc, #92]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004178:	f7ff fe94 	bl	8003ea4 <LL_ADC_IsEnabled>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004192:	4013      	ands	r3, r2
 8004194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004196:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004198:	e009      	b.n	80041ae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80041ac:	e000      	b.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80041bc:	4618      	mov	r0, r3
 80041be:	377c      	adds	r7, #124	; 0x7c
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40022100 	.word	0x40022100
 80041cc:	40022300 	.word	0x40022300
 80041d0:	58026300 	.word	0x58026300
 80041d4:	58026000 	.word	0x58026000
 80041d8:	fffff0e0 	.word	0xfffff0e0

080041dc <__NVIC_SetPriorityGrouping>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <__NVIC_SetPriorityGrouping+0x40>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 8004206:	4313      	orrs	r3, r2
 8004208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <__NVIC_SetPriorityGrouping+0x40>)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	60d3      	str	r3, [r2, #12]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00
 8004220:	05fa0000 	.word	0x05fa0000

08004224 <__NVIC_GetPriorityGrouping>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <__NVIC_GetPriorityGrouping+0x18>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 0307 	and.w	r3, r3, #7
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_EnableIRQ>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800424a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db0b      	blt.n	800426a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4907      	ldr	r1, [pc, #28]	; (8004278 <__NVIC_EnableIRQ+0x38>)
 800425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2001      	movs	r0, #1
 8004262:	fa00 f202 	lsl.w	r2, r0, r2
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000e100 	.word	0xe000e100

0800427c <__NVIC_SetPriority>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <NVIC_EncodePriority>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004348:	d301      	bcc.n	800434e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434a:	2301      	movs	r3, #1
 800434c:	e00f      	b.n	800436e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <SysTick_Config+0x40>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004356:	210f      	movs	r1, #15
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	f7ff ff8e 	bl	800427c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <SysTick_Config+0x40>)
 8004362:	2200      	movs	r2, #0
 8004364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <SysTick_Config+0x40>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff29 	bl	80041dc <__NVIC_SetPriorityGrouping>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043a0:	f7ff ff40 	bl	8004224 <__NVIC_GetPriorityGrouping>
 80043a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f7ff ff90 	bl	80042d0 <NVIC_EncodePriority>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff5f 	bl	800427c <__NVIC_SetPriority>
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff33 	bl	8004240 <__NVIC_EnableIRQ>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff ffa4 	bl	8004338 <SysTick_Config>
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e014      	b.n	8004436 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fd fd99 	bl	8001f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e046      	b.n	80044e0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	795b      	ldrb	r3, [r3, #5]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_DAC_Start+0x20>
 800445a:	2302      	movs	r3, #2
 800445c:	e040      	b.n	80044e0 <HAL_DAC_Start+0xa2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2201      	movs	r2, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10f      	bne.n	80044a8 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004492:	2b02      	cmp	r3, #2
 8004494:	d11d      	bne.n	80044d2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	e014      	b.n	80044d2 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2102      	movs	r1, #2
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	429a      	cmp	r2, r3
 80044c0:	d107      	bne.n	80044d2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0202 	orr.w	r2, r2, #2
 80044d0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0a2      	b.n	800464a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	795b      	ldrb	r3, [r3, #5]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_DAC_Start_DMA+0x24>
 800450c:	2302      	movs	r3, #2
 800450e:	e09c      	b.n	800464a <HAL_DAC_Start_DMA+0x15e>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2202      	movs	r2, #2
 800451a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d129      	bne.n	8004576 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a4b      	ldr	r2, [pc, #300]	; (8004654 <HAL_DAC_Start_DMA+0x168>)
 8004528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4a4a      	ldr	r2, [pc, #296]	; (8004658 <HAL_DAC_Start_DMA+0x16c>)
 8004530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a49      	ldr	r2, [pc, #292]	; (800465c <HAL_DAC_Start_DMA+0x170>)
 8004538:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004548:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_DAC_Start_DMA+0x6c>
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d005      	beq.n	8004562 <HAL_DAC_Start_DMA+0x76>
 8004556:	e009      	b.n	800456c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	613b      	str	r3, [r7, #16]
        break;
 8004560:	e033      	b.n	80045ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	613b      	str	r3, [r7, #16]
        break;
 800456a:	e02e      	b.n	80045ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3310      	adds	r3, #16
 8004572:	613b      	str	r3, [r7, #16]
        break;
 8004574:	e029      	b.n	80045ca <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4a39      	ldr	r2, [pc, #228]	; (8004660 <HAL_DAC_Start_DMA+0x174>)
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <HAL_DAC_Start_DMA+0x178>)
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a37      	ldr	r2, [pc, #220]	; (8004668 <HAL_DAC_Start_DMA+0x17c>)
 800458c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_DAC_Start_DMA+0xc0>
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d005      	beq.n	80045b6 <HAL_DAC_Start_DMA+0xca>
 80045aa:	e009      	b.n	80045c0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	613b      	str	r3, [r7, #16]
        break;
 80045b4:	e009      	b.n	80045ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3318      	adds	r3, #24
 80045bc:	613b      	str	r3, [r7, #16]
        break;
 80045be:	e004      	b.n	80045ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	331c      	adds	r3, #28
 80045c6:	613b      	str	r3, [r7, #16]
        break;
 80045c8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d111      	bne.n	80045f4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6898      	ldr	r0, [r3, #8]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	f000 fdfd 	bl	80051e8 <HAL_DMA_Start_IT>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]
 80045f2:	e010      	b.n	8004616 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004602:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68d8      	ldr	r0, [r3, #12]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	f000 fdeb 	bl	80051e8 <HAL_DMA_Start_IT>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6819      	ldr	r1, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2201      	movs	r2, #1
 8004630:	409a      	lsls	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e005      	b.n	8004648 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	08004a1d 	.word	0x08004a1d
 8004658:	08004a3f 	.word	0x08004a3f
 800465c:	08004a5b 	.word	0x08004a5b
 8004660:	08004ac5 	.word	0x08004ac5
 8004664:	08004ae7 	.word	0x08004ae7
 8004668:	08004b03 	.word	0x08004b03

0800466c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e03e      	b.n	80046fe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43da      	mvns	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	400a      	ands	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2201      	movs	r2, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43da      	mvns	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	400a      	ands	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fff9 	bl	80056bc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e00c      	b.n	80046f6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 ffeb 	bl	80056bc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80046f4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004706:	b480      	push	{r7}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e015      	b.n	800474e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	3308      	adds	r3, #8
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e004      	b.n	8004744 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	3314      	adds	r3, #20
 8004742:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	461a      	mov	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_DAC_ConfigChannel+0x1e>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e12a      	b.n	8004a10 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	795b      	ldrb	r3, [r3, #5]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_DAC_ConfigChannel+0x2e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e124      	b.n	8004a10 <HAL_DAC_ConfigChannel+0x278>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2202      	movs	r2, #2
 80047d0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d17a      	bne.n	80048d0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80047da:	f7fe f8ad 	bl	8002938 <HAL_GetTick>
 80047de:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d13d      	bne.n	8004862 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047e6:	e018      	b.n	800481a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047e8:	f7fe f8a6 	bl	8002938 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d911      	bls.n	800481a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fc:	4b86      	ldr	r3, [pc, #536]	; (8004a18 <HAL_DAC_ConfigChannel+0x280>)
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f043 0208 	orr.w	r2, r3, #8
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2203      	movs	r2, #3
 8004814:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0fa      	b.n	8004a10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004820:	4b7d      	ldr	r3, [pc, #500]	; (8004a18 <HAL_DAC_ConfigChannel+0x280>)
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1df      	bne.n	80047e8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	6992      	ldr	r2, [r2, #24]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
 8004832:	e020      	b.n	8004876 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004834:	f7fe f880 	bl	8002938 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d90f      	bls.n	8004862 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	2b00      	cmp	r3, #0
 800484a:	da0a      	bge.n	8004862 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f043 0208 	orr.w	r2, r3, #8
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2203      	movs	r2, #3
 800485c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0d6      	b.n	8004a10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	2b00      	cmp	r3, #0
 800486a:	dbe3      	blt.n	8004834 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	6992      	ldr	r2, [r2, #24]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	ea02 0103 	and.w	r1, r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	409a      	lsls	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	21ff      	movs	r1, #255	; 0xff
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	ea02 0103 	and.w	r1, r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	409a      	lsls	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d11d      	bne.n	8004914 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	221f      	movs	r2, #31
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2207      	movs	r2, #7
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	e00f      	b.n	800495e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d102      	bne.n	800494c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004946:	2301      	movs	r3, #1
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	e008      	b.n	800495e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004954:	2301      	movs	r3, #1
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
 8004958:	e001      	b.n	800495e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800495a:	2300      	movs	r3, #0
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43da      	mvns	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	400a      	ands	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6819      	ldr	r1, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	22c0      	movs	r2, #192	; 0xc0
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43da      	mvns	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	400a      	ands	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3728      	adds	r7, #40	; 0x28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20008000 	.word	0x20008000

08004a1c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f7ff fe95 	bl	800475a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	711a      	strb	r2, [r3, #4]
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff fe8e 	bl	800476e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fe84 	bl	8004782 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	711a      	strb	r2, [r3, #4]
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ffd8 	bl	8004a88 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	711a      	strb	r2, [r3, #4]
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff ffd1 	bl	8004a9c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ffc7 	bl	8004ab0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	711a      	strb	r2, [r3, #4]
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7fd fefe 	bl	8002938 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e316      	b.n	8005176 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a66      	ldr	r2, [pc, #408]	; (8004ce8 <HAL_DMA_Init+0x1b8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a65      	ldr	r2, [pc, #404]	; (8004cec <HAL_DMA_Init+0x1bc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a63      	ldr	r2, [pc, #396]	; (8004cf0 <HAL_DMA_Init+0x1c0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a62      	ldr	r2, [pc, #392]	; (8004cf4 <HAL_DMA_Init+0x1c4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <HAL_DMA_Init+0x1c8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a5f      	ldr	r2, [pc, #380]	; (8004cfc <HAL_DMA_Init+0x1cc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5d      	ldr	r2, [pc, #372]	; (8004d00 <HAL_DMA_Init+0x1d0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a5c      	ldr	r2, [pc, #368]	; (8004d04 <HAL_DMA_Init+0x1d4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5a      	ldr	r2, [pc, #360]	; (8004d08 <HAL_DMA_Init+0x1d8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a59      	ldr	r2, [pc, #356]	; (8004d0c <HAL_DMA_Init+0x1dc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a57      	ldr	r2, [pc, #348]	; (8004d10 <HAL_DMA_Init+0x1e0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a56      	ldr	r2, [pc, #344]	; (8004d14 <HAL_DMA_Init+0x1e4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a54      	ldr	r2, [pc, #336]	; (8004d18 <HAL_DMA_Init+0x1e8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a53      	ldr	r2, [pc, #332]	; (8004d1c <HAL_DMA_Init+0x1ec>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a51      	ldr	r2, [pc, #324]	; (8004d20 <HAL_DMA_Init+0x1f0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_DMA_Init+0xb8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a50      	ldr	r2, [pc, #320]	; (8004d24 <HAL_DMA_Init+0x1f4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_DMA_Init+0xbc>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_DMA_Init+0xbe>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 813b 	beq.w	8004e6a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a37      	ldr	r2, [pc, #220]	; (8004ce8 <HAL_DMA_Init+0x1b8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d04a      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a36      	ldr	r2, [pc, #216]	; (8004cec <HAL_DMA_Init+0x1bc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d045      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <HAL_DMA_Init+0x1c0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d040      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a33      	ldr	r2, [pc, #204]	; (8004cf4 <HAL_DMA_Init+0x1c4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d03b      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <HAL_DMA_Init+0x1c8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d036      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a30      	ldr	r2, [pc, #192]	; (8004cfc <HAL_DMA_Init+0x1cc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d031      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2e      	ldr	r2, [pc, #184]	; (8004d00 <HAL_DMA_Init+0x1d0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02c      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <HAL_DMA_Init+0x1d4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d027      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <HAL_DMA_Init+0x1d8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d022      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <HAL_DMA_Init+0x1dc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01d      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_DMA_Init+0x1e0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d018      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <HAL_DMA_Init+0x1e4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <HAL_DMA_Init+0x1e8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <HAL_DMA_Init+0x1ec>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <HAL_DMA_Init+0x1f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_DMA_Init+0x174>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_DMA_Init+0x1f4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d108      	bne.n	8004cb6 <HAL_DMA_Init+0x186>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e007      	b.n	8004cc6 <HAL_DMA_Init+0x196>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cc6:	e02f      	b.n	8004d28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cc8:	f7fd fe36 	bl	8002938 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d928      	bls.n	8004d28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2203      	movs	r2, #3
 8004ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e246      	b.n	8005176 <HAL_DMA_Init+0x646>
 8004ce8:	40020010 	.word	0x40020010
 8004cec:	40020028 	.word	0x40020028
 8004cf0:	40020040 	.word	0x40020040
 8004cf4:	40020058 	.word	0x40020058
 8004cf8:	40020070 	.word	0x40020070
 8004cfc:	40020088 	.word	0x40020088
 8004d00:	400200a0 	.word	0x400200a0
 8004d04:	400200b8 	.word	0x400200b8
 8004d08:	40020410 	.word	0x40020410
 8004d0c:	40020428 	.word	0x40020428
 8004d10:	40020440 	.word	0x40020440
 8004d14:	40020458 	.word	0x40020458
 8004d18:	40020470 	.word	0x40020470
 8004d1c:	40020488 	.word	0x40020488
 8004d20:	400204a0 	.word	0x400204a0
 8004d24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1c8      	bne.n	8004cc8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4b83      	ldr	r3, [pc, #524]	; (8004f50 <HAL_DMA_Init+0x420>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d107      	bne.n	8004d8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4313      	orrs	r3, r2
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d8c:	4b71      	ldr	r3, [pc, #452]	; (8004f54 <HAL_DMA_Init+0x424>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b71      	ldr	r3, [pc, #452]	; (8004f58 <HAL_DMA_Init+0x428>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d98:	d328      	bcc.n	8004dec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b28      	cmp	r3, #40	; 0x28
 8004da0:	d903      	bls.n	8004daa <HAL_DMA_Init+0x27a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b2e      	cmp	r3, #46	; 0x2e
 8004da8:	d917      	bls.n	8004dda <HAL_DMA_Init+0x2aa>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b3e      	cmp	r3, #62	; 0x3e
 8004db0:	d903      	bls.n	8004dba <HAL_DMA_Init+0x28a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b42      	cmp	r3, #66	; 0x42
 8004db8:	d90f      	bls.n	8004dda <HAL_DMA_Init+0x2aa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b46      	cmp	r3, #70	; 0x46
 8004dc0:	d903      	bls.n	8004dca <HAL_DMA_Init+0x29a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b48      	cmp	r3, #72	; 0x48
 8004dc8:	d907      	bls.n	8004dda <HAL_DMA_Init+0x2aa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b4e      	cmp	r3, #78	; 0x4e
 8004dd0:	d905      	bls.n	8004dde <HAL_DMA_Init+0x2ae>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b52      	cmp	r3, #82	; 0x52
 8004dd8:	d801      	bhi.n	8004dde <HAL_DMA_Init+0x2ae>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_DMA_Init+0x2b0>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0307 	bic.w	r3, r3, #7
 8004e02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d117      	bne.n	8004e46 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f002 fb33 	bl	8007494 <DMA_CheckFifoParam>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2240      	movs	r2, #64	; 0x40
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e197      	b.n	8005176 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f002 fa6e 	bl	8007330 <DMA_CalcBaseAndBitshift>
 8004e54:	4603      	mov	r3, r0
 8004e56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	223f      	movs	r2, #63	; 0x3f
 8004e62:	409a      	lsls	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	e0cd      	b.n	8005006 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3b      	ldr	r2, [pc, #236]	; (8004f5c <HAL_DMA_Init+0x42c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a39      	ldr	r2, [pc, #228]	; (8004f60 <HAL_DMA_Init+0x430>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01d      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a38      	ldr	r2, [pc, #224]	; (8004f64 <HAL_DMA_Init+0x434>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a36      	ldr	r2, [pc, #216]	; (8004f68 <HAL_DMA_Init+0x438>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a35      	ldr	r2, [pc, #212]	; (8004f6c <HAL_DMA_Init+0x43c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a33      	ldr	r2, [pc, #204]	; (8004f70 <HAL_DMA_Init+0x440>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a32      	ldr	r2, [pc, #200]	; (8004f74 <HAL_DMA_Init+0x444>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_DMA_Init+0x38a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a30      	ldr	r2, [pc, #192]	; (8004f78 <HAL_DMA_Init+0x448>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_DMA_Init+0x38e>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_DMA_Init+0x390>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8097 	beq.w	8004ff4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <HAL_DMA_Init+0x42c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d021      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_DMA_Init+0x430>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01c      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_DMA_Init+0x434>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d017      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_DMA_Init+0x438>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d012      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <HAL_DMA_Init+0x43c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00d      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <HAL_DMA_Init+0x440>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <HAL_DMA_Init+0x444>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <HAL_DMA_Init+0x3e4>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_DMA_Init+0x448>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <HAL_DMA_Init+0x44c>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d020      	beq.n	8004f80 <HAL_DMA_Init+0x450>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d102      	bne.n	8004f4c <HAL_DMA_Init+0x41c>
 8004f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f4a:	e01a      	b.n	8004f82 <HAL_DMA_Init+0x452>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e018      	b.n	8004f82 <HAL_DMA_Init+0x452>
 8004f50:	fe10803f 	.word	0xfe10803f
 8004f54:	5c001000 	.word	0x5c001000
 8004f58:	ffff0000 	.word	0xffff0000
 8004f5c:	58025408 	.word	0x58025408
 8004f60:	5802541c 	.word	0x5802541c
 8004f64:	58025430 	.word	0x58025430
 8004f68:	58025444 	.word	0x58025444
 8004f6c:	58025458 	.word	0x58025458
 8004f70:	5802546c 	.word	0x5802546c
 8004f74:	58025480 	.word	0x58025480
 8004f78:	58025494 	.word	0x58025494
 8004f7c:	fffe000f 	.word	0xfffe000f
 8004f80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b6e      	ldr	r3, [pc, #440]	; (8005180 <HAL_DMA_Init+0x650>)
 8004fc8:	4413      	add	r3, r2
 8004fca:	4a6e      	ldr	r2, [pc, #440]	; (8005184 <HAL_DMA_Init+0x654>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	009a      	lsls	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f002 f9a9 	bl	8007330 <DMA_CalcBaseAndBitshift>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2201      	movs	r2, #1
 8004fec:	409a      	lsls	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e008      	b.n	8005006 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0b7      	b.n	8005176 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5f      	ldr	r2, [pc, #380]	; (8005188 <HAL_DMA_Init+0x658>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d072      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	; (800518c <HAL_DMA_Init+0x65c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d06d      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a5c      	ldr	r2, [pc, #368]	; (8005190 <HAL_DMA_Init+0x660>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d068      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5a      	ldr	r2, [pc, #360]	; (8005194 <HAL_DMA_Init+0x664>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d063      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a59      	ldr	r2, [pc, #356]	; (8005198 <HAL_DMA_Init+0x668>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d05e      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a57      	ldr	r2, [pc, #348]	; (800519c <HAL_DMA_Init+0x66c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d059      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a56      	ldr	r2, [pc, #344]	; (80051a0 <HAL_DMA_Init+0x670>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d054      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a54      	ldr	r2, [pc, #336]	; (80051a4 <HAL_DMA_Init+0x674>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d04f      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a53      	ldr	r2, [pc, #332]	; (80051a8 <HAL_DMA_Init+0x678>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d04a      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_DMA_Init+0x67c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d045      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a50      	ldr	r2, [pc, #320]	; (80051b0 <HAL_DMA_Init+0x680>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d040      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <HAL_DMA_Init+0x684>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d03b      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <HAL_DMA_Init+0x688>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d036      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_DMA_Init+0x68c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d031      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_DMA_Init+0x690>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d02c      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a48      	ldr	r2, [pc, #288]	; (80051c4 <HAL_DMA_Init+0x694>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d027      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <HAL_DMA_Init+0x698>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a45      	ldr	r2, [pc, #276]	; (80051cc <HAL_DMA_Init+0x69c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a44      	ldr	r2, [pc, #272]	; (80051d0 <HAL_DMA_Init+0x6a0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a42      	ldr	r2, [pc, #264]	; (80051d4 <HAL_DMA_Init+0x6a4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a41      	ldr	r2, [pc, #260]	; (80051d8 <HAL_DMA_Init+0x6a8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3f      	ldr	r2, [pc, #252]	; (80051dc <HAL_DMA_Init+0x6ac>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <HAL_DMA_Init+0x6b0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_Init+0x5c6>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3c      	ldr	r2, [pc, #240]	; (80051e4 <HAL_DMA_Init+0x6b4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <HAL_DMA_Init+0x5ca>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_DMA_Init+0x5cc>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d032      	beq.n	8005166 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f002 fa43 	bl	800758c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b80      	cmp	r3, #128	; 0x80
 800510c:	d102      	bne.n	8005114 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005128:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <HAL_DMA_Init+0x624>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b08      	cmp	r3, #8
 8005138:	d80c      	bhi.n	8005154 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f002 fac0 	bl	80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	e008      	b.n	8005166 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	a7fdabf8 	.word	0xa7fdabf8
 8005184:	cccccccd 	.word	0xcccccccd
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8
 80051c8:	58025408 	.word	0x58025408
 80051cc:	5802541c 	.word	0x5802541c
 80051d0:	58025430 	.word	0x58025430
 80051d4:	58025444 	.word	0x58025444
 80051d8:	58025458 	.word	0x58025458
 80051dc:	5802546c 	.word	0x5802546c
 80051e0:	58025480 	.word	0x58025480
 80051e4:	58025494 	.word	0x58025494

080051e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e226      	b.n	8005652 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_DMA_Start_IT+0x2a>
 800520e:	2302      	movs	r3, #2
 8005210:	e21f      	b.n	8005652 <HAL_DMA_Start_IT+0x46a>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	f040 820a 	bne.w	800563c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a68      	ldr	r2, [pc, #416]	; (80053dc <HAL_DMA_Start_IT+0x1f4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d04a      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a66      	ldr	r2, [pc, #408]	; (80053e0 <HAL_DMA_Start_IT+0x1f8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d045      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a65      	ldr	r2, [pc, #404]	; (80053e4 <HAL_DMA_Start_IT+0x1fc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d040      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a63      	ldr	r2, [pc, #396]	; (80053e8 <HAL_DMA_Start_IT+0x200>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d03b      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a62      	ldr	r2, [pc, #392]	; (80053ec <HAL_DMA_Start_IT+0x204>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d036      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a60      	ldr	r2, [pc, #384]	; (80053f0 <HAL_DMA_Start_IT+0x208>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5f      	ldr	r2, [pc, #380]	; (80053f4 <HAL_DMA_Start_IT+0x20c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d02c      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5d      	ldr	r2, [pc, #372]	; (80053f8 <HAL_DMA_Start_IT+0x210>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d027      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5c      	ldr	r2, [pc, #368]	; (80053fc <HAL_DMA_Start_IT+0x214>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5a      	ldr	r2, [pc, #360]	; (8005400 <HAL_DMA_Start_IT+0x218>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01d      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a59      	ldr	r2, [pc, #356]	; (8005404 <HAL_DMA_Start_IT+0x21c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_DMA_Start_IT+0x220>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a56      	ldr	r2, [pc, #344]	; (800540c <HAL_DMA_Start_IT+0x224>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a54      	ldr	r2, [pc, #336]	; (8005410 <HAL_DMA_Start_IT+0x228>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a53      	ldr	r2, [pc, #332]	; (8005414 <HAL_DMA_Start_IT+0x22c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_DMA_Start_IT+0xee>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a51      	ldr	r2, [pc, #324]	; (8005418 <HAL_DMA_Start_IT+0x230>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d108      	bne.n	80052e8 <HAL_DMA_Start_IT+0x100>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e007      	b.n	80052f8 <HAL_DMA_Start_IT+0x110>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0201 	bic.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f001 fe6a 	bl	8006fd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a34      	ldr	r2, [pc, #208]	; (80053dc <HAL_DMA_Start_IT+0x1f4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d04a      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <HAL_DMA_Start_IT+0x1f8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d045      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a31      	ldr	r2, [pc, #196]	; (80053e4 <HAL_DMA_Start_IT+0x1fc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d040      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <HAL_DMA_Start_IT+0x200>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d03b      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2e      	ldr	r2, [pc, #184]	; (80053ec <HAL_DMA_Start_IT+0x204>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d036      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <HAL_DMA_Start_IT+0x208>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d031      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2b      	ldr	r2, [pc, #172]	; (80053f4 <HAL_DMA_Start_IT+0x20c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d02c      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <HAL_DMA_Start_IT+0x210>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d027      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a28      	ldr	r2, [pc, #160]	; (80053fc <HAL_DMA_Start_IT+0x214>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a27      	ldr	r2, [pc, #156]	; (8005400 <HAL_DMA_Start_IT+0x218>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d01d      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a25      	ldr	r2, [pc, #148]	; (8005404 <HAL_DMA_Start_IT+0x21c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a24      	ldr	r2, [pc, #144]	; (8005408 <HAL_DMA_Start_IT+0x220>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a22      	ldr	r2, [pc, #136]	; (800540c <HAL_DMA_Start_IT+0x224>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <HAL_DMA_Start_IT+0x228>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_DMA_Start_IT+0x22c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_DMA_Start_IT+0x1bc>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_DMA_Start_IT+0x230>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d101      	bne.n	80053a8 <HAL_DMA_Start_IT+0x1c0>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_DMA_Start_IT+0x1c2>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d036      	beq.n	800541c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 021e 	bic.w	r2, r3, #30
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0216 	orr.w	r2, r2, #22
 80053c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d03e      	beq.n	8005448 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0208 	orr.w	r2, r2, #8
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e035      	b.n	8005448 <HAL_DMA_Start_IT+0x260>
 80053dc:	40020010 	.word	0x40020010
 80053e0:	40020028 	.word	0x40020028
 80053e4:	40020040 	.word	0x40020040
 80053e8:	40020058 	.word	0x40020058
 80053ec:	40020070 	.word	0x40020070
 80053f0:	40020088 	.word	0x40020088
 80053f4:	400200a0 	.word	0x400200a0
 80053f8:	400200b8 	.word	0x400200b8
 80053fc:	40020410 	.word	0x40020410
 8005400:	40020428 	.word	0x40020428
 8005404:	40020440 	.word	0x40020440
 8005408:	40020458 	.word	0x40020458
 800540c:	40020470 	.word	0x40020470
 8005410:	40020488 	.word	0x40020488
 8005414:	400204a0 	.word	0x400204a0
 8005418:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 020e 	bic.w	r2, r3, #14
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 020a 	orr.w	r2, r2, #10
 800542e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0204 	orr.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a83      	ldr	r2, [pc, #524]	; (800565c <HAL_DMA_Start_IT+0x474>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d072      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a82      	ldr	r2, [pc, #520]	; (8005660 <HAL_DMA_Start_IT+0x478>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d06d      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a80      	ldr	r2, [pc, #512]	; (8005664 <HAL_DMA_Start_IT+0x47c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d068      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a7f      	ldr	r2, [pc, #508]	; (8005668 <HAL_DMA_Start_IT+0x480>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d063      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a7d      	ldr	r2, [pc, #500]	; (800566c <HAL_DMA_Start_IT+0x484>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d05e      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7c      	ldr	r2, [pc, #496]	; (8005670 <HAL_DMA_Start_IT+0x488>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d059      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a7a      	ldr	r2, [pc, #488]	; (8005674 <HAL_DMA_Start_IT+0x48c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d054      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a79      	ldr	r2, [pc, #484]	; (8005678 <HAL_DMA_Start_IT+0x490>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04f      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a77      	ldr	r2, [pc, #476]	; (800567c <HAL_DMA_Start_IT+0x494>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d04a      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a76      	ldr	r2, [pc, #472]	; (8005680 <HAL_DMA_Start_IT+0x498>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d045      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a74      	ldr	r2, [pc, #464]	; (8005684 <HAL_DMA_Start_IT+0x49c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d040      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a73      	ldr	r2, [pc, #460]	; (8005688 <HAL_DMA_Start_IT+0x4a0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d03b      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a71      	ldr	r2, [pc, #452]	; (800568c <HAL_DMA_Start_IT+0x4a4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d036      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a70      	ldr	r2, [pc, #448]	; (8005690 <HAL_DMA_Start_IT+0x4a8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d031      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6e      	ldr	r2, [pc, #440]	; (8005694 <HAL_DMA_Start_IT+0x4ac>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02c      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a6d      	ldr	r2, [pc, #436]	; (8005698 <HAL_DMA_Start_IT+0x4b0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d027      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a6b      	ldr	r2, [pc, #428]	; (800569c <HAL_DMA_Start_IT+0x4b4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d022      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6a      	ldr	r2, [pc, #424]	; (80056a0 <HAL_DMA_Start_IT+0x4b8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d01d      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a68      	ldr	r2, [pc, #416]	; (80056a4 <HAL_DMA_Start_IT+0x4bc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a67      	ldr	r2, [pc, #412]	; (80056a8 <HAL_DMA_Start_IT+0x4c0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a65      	ldr	r2, [pc, #404]	; (80056ac <HAL_DMA_Start_IT+0x4c4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a64      	ldr	r2, [pc, #400]	; (80056b0 <HAL_DMA_Start_IT+0x4c8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a62      	ldr	r2, [pc, #392]	; (80056b4 <HAL_DMA_Start_IT+0x4cc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_DMA_Start_IT+0x350>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a61      	ldr	r2, [pc, #388]	; (80056b8 <HAL_DMA_Start_IT+0x4d0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_DMA_Start_IT+0x354>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <HAL_DMA_Start_IT+0x356>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01a      	beq.n	8005578 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005576:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a37      	ldr	r2, [pc, #220]	; (800565c <HAL_DMA_Start_IT+0x474>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d04a      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a36      	ldr	r2, [pc, #216]	; (8005660 <HAL_DMA_Start_IT+0x478>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d045      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a34      	ldr	r2, [pc, #208]	; (8005664 <HAL_DMA_Start_IT+0x47c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d040      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a33      	ldr	r2, [pc, #204]	; (8005668 <HAL_DMA_Start_IT+0x480>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d03b      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a31      	ldr	r2, [pc, #196]	; (800566c <HAL_DMA_Start_IT+0x484>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d036      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a30      	ldr	r2, [pc, #192]	; (8005670 <HAL_DMA_Start_IT+0x488>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d031      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <HAL_DMA_Start_IT+0x48c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d02c      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2d      	ldr	r2, [pc, #180]	; (8005678 <HAL_DMA_Start_IT+0x490>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d027      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2b      	ldr	r2, [pc, #172]	; (800567c <HAL_DMA_Start_IT+0x494>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d022      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <HAL_DMA_Start_IT+0x498>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d01d      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a28      	ldr	r2, [pc, #160]	; (8005684 <HAL_DMA_Start_IT+0x49c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a27      	ldr	r2, [pc, #156]	; (8005688 <HAL_DMA_Start_IT+0x4a0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a25      	ldr	r2, [pc, #148]	; (800568c <HAL_DMA_Start_IT+0x4a4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a24      	ldr	r2, [pc, #144]	; (8005690 <HAL_DMA_Start_IT+0x4a8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a22      	ldr	r2, [pc, #136]	; (8005694 <HAL_DMA_Start_IT+0x4ac>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_DMA_Start_IT+0x430>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a21      	ldr	r2, [pc, #132]	; (8005698 <HAL_DMA_Start_IT+0x4b0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <HAL_DMA_Start_IT+0x442>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e012      	b.n	8005650 <HAL_DMA_Start_IT+0x468>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e009      	b.n	8005650 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40020010 	.word	0x40020010
 8005660:	40020028 	.word	0x40020028
 8005664:	40020040 	.word	0x40020040
 8005668:	40020058 	.word	0x40020058
 800566c:	40020070 	.word	0x40020070
 8005670:	40020088 	.word	0x40020088
 8005674:	400200a0 	.word	0x400200a0
 8005678:	400200b8 	.word	0x400200b8
 800567c:	40020410 	.word	0x40020410
 8005680:	40020428 	.word	0x40020428
 8005684:	40020440 	.word	0x40020440
 8005688:	40020458 	.word	0x40020458
 800568c:	40020470 	.word	0x40020470
 8005690:	40020488 	.word	0x40020488
 8005694:	400204a0 	.word	0x400204a0
 8005698:	400204b8 	.word	0x400204b8
 800569c:	58025408 	.word	0x58025408
 80056a0:	5802541c 	.word	0x5802541c
 80056a4:	58025430 	.word	0x58025430
 80056a8:	58025444 	.word	0x58025444
 80056ac:	58025458 	.word	0x58025458
 80056b0:	5802546c 	.word	0x5802546c
 80056b4:	58025480 	.word	0x58025480
 80056b8:	58025494 	.word	0x58025494

080056bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80056c4:	f7fd f938 	bl	8002938 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e2dc      	b.n	8005c8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d008      	beq.n	80056f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e2cd      	b.n	8005c8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a76      	ldr	r2, [pc, #472]	; (80058d0 <HAL_DMA_Abort+0x214>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d04a      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a74      	ldr	r2, [pc, #464]	; (80058d4 <HAL_DMA_Abort+0x218>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d045      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a73      	ldr	r2, [pc, #460]	; (80058d8 <HAL_DMA_Abort+0x21c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d040      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a71      	ldr	r2, [pc, #452]	; (80058dc <HAL_DMA_Abort+0x220>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d03b      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a70      	ldr	r2, [pc, #448]	; (80058e0 <HAL_DMA_Abort+0x224>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d036      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a6e      	ldr	r2, [pc, #440]	; (80058e4 <HAL_DMA_Abort+0x228>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d031      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6d      	ldr	r2, [pc, #436]	; (80058e8 <HAL_DMA_Abort+0x22c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d02c      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6b      	ldr	r2, [pc, #428]	; (80058ec <HAL_DMA_Abort+0x230>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d027      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6a      	ldr	r2, [pc, #424]	; (80058f0 <HAL_DMA_Abort+0x234>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d022      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a68      	ldr	r2, [pc, #416]	; (80058f4 <HAL_DMA_Abort+0x238>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a67      	ldr	r2, [pc, #412]	; (80058f8 <HAL_DMA_Abort+0x23c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a65      	ldr	r2, [pc, #404]	; (80058fc <HAL_DMA_Abort+0x240>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a64      	ldr	r2, [pc, #400]	; (8005900 <HAL_DMA_Abort+0x244>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a62      	ldr	r2, [pc, #392]	; (8005904 <HAL_DMA_Abort+0x248>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a61      	ldr	r2, [pc, #388]	; (8005908 <HAL_DMA_Abort+0x24c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_DMA_Abort+0xd6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a5f      	ldr	r2, [pc, #380]	; (800590c <HAL_DMA_Abort+0x250>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <HAL_DMA_Abort+0xda>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_DMA_Abort+0xdc>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d013      	beq.n	80057c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 021e 	bic.w	r2, r2, #30
 80057aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e00a      	b.n	80057da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 020e 	bic.w	r2, r2, #14
 80057d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a3c      	ldr	r2, [pc, #240]	; (80058d0 <HAL_DMA_Abort+0x214>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d072      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <HAL_DMA_Abort+0x218>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d06d      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a39      	ldr	r2, [pc, #228]	; (80058d8 <HAL_DMA_Abort+0x21c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d068      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a37      	ldr	r2, [pc, #220]	; (80058dc <HAL_DMA_Abort+0x220>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d063      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a36      	ldr	r2, [pc, #216]	; (80058e0 <HAL_DMA_Abort+0x224>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d05e      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a34      	ldr	r2, [pc, #208]	; (80058e4 <HAL_DMA_Abort+0x228>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d059      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a33      	ldr	r2, [pc, #204]	; (80058e8 <HAL_DMA_Abort+0x22c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d054      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a31      	ldr	r2, [pc, #196]	; (80058ec <HAL_DMA_Abort+0x230>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d04f      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a30      	ldr	r2, [pc, #192]	; (80058f0 <HAL_DMA_Abort+0x234>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2e      	ldr	r2, [pc, #184]	; (80058f4 <HAL_DMA_Abort+0x238>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d045      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <HAL_DMA_Abort+0x23c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d040      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2b      	ldr	r2, [pc, #172]	; (80058fc <HAL_DMA_Abort+0x240>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d03b      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <HAL_DMA_Abort+0x244>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d036      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a28      	ldr	r2, [pc, #160]	; (8005904 <HAL_DMA_Abort+0x248>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d031      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a27      	ldr	r2, [pc, #156]	; (8005908 <HAL_DMA_Abort+0x24c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d02c      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <HAL_DMA_Abort+0x250>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a24      	ldr	r2, [pc, #144]	; (8005910 <HAL_DMA_Abort+0x254>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a22      	ldr	r2, [pc, #136]	; (8005914 <HAL_DMA_Abort+0x258>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a21      	ldr	r2, [pc, #132]	; (8005918 <HAL_DMA_Abort+0x25c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <HAL_DMA_Abort+0x260>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <HAL_DMA_Abort+0x264>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_DMA_Abort+0x268>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <HAL_DMA_Abort+0x26c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_DMA_Abort+0x20e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_DMA_Abort+0x270>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d132      	bne.n	8005930 <HAL_DMA_Abort+0x274>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e031      	b.n	8005932 <HAL_DMA_Abort+0x276>
 80058ce:	bf00      	nop
 80058d0:	40020010 	.word	0x40020010
 80058d4:	40020028 	.word	0x40020028
 80058d8:	40020040 	.word	0x40020040
 80058dc:	40020058 	.word	0x40020058
 80058e0:	40020070 	.word	0x40020070
 80058e4:	40020088 	.word	0x40020088
 80058e8:	400200a0 	.word	0x400200a0
 80058ec:	400200b8 	.word	0x400200b8
 80058f0:	40020410 	.word	0x40020410
 80058f4:	40020428 	.word	0x40020428
 80058f8:	40020440 	.word	0x40020440
 80058fc:	40020458 	.word	0x40020458
 8005900:	40020470 	.word	0x40020470
 8005904:	40020488 	.word	0x40020488
 8005908:	400204a0 	.word	0x400204a0
 800590c:	400204b8 	.word	0x400204b8
 8005910:	58025408 	.word	0x58025408
 8005914:	5802541c 	.word	0x5802541c
 8005918:	58025430 	.word	0x58025430
 800591c:	58025444 	.word	0x58025444
 8005920:	58025458 	.word	0x58025458
 8005924:	5802546c 	.word	0x5802546c
 8005928:	58025480 	.word	0x58025480
 800592c:	58025494 	.word	0x58025494
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005944:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6d      	ldr	r2, [pc, #436]	; (8005b00 <HAL_DMA_Abort+0x444>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d04a      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6b      	ldr	r2, [pc, #428]	; (8005b04 <HAL_DMA_Abort+0x448>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d045      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6a      	ldr	r2, [pc, #424]	; (8005b08 <HAL_DMA_Abort+0x44c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d040      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a68      	ldr	r2, [pc, #416]	; (8005b0c <HAL_DMA_Abort+0x450>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a67      	ldr	r2, [pc, #412]	; (8005b10 <HAL_DMA_Abort+0x454>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d036      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <HAL_DMA_Abort+0x458>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a64      	ldr	r2, [pc, #400]	; (8005b18 <HAL_DMA_Abort+0x45c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02c      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a62      	ldr	r2, [pc, #392]	; (8005b1c <HAL_DMA_Abort+0x460>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d027      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a61      	ldr	r2, [pc, #388]	; (8005b20 <HAL_DMA_Abort+0x464>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a5f      	ldr	r2, [pc, #380]	; (8005b24 <HAL_DMA_Abort+0x468>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a5e      	ldr	r2, [pc, #376]	; (8005b28 <HAL_DMA_Abort+0x46c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5c      	ldr	r2, [pc, #368]	; (8005b2c <HAL_DMA_Abort+0x470>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a5b      	ldr	r2, [pc, #364]	; (8005b30 <HAL_DMA_Abort+0x474>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a59      	ldr	r2, [pc, #356]	; (8005b34 <HAL_DMA_Abort+0x478>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <HAL_DMA_Abort+0x47c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_Abort+0x32a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a56      	ldr	r2, [pc, #344]	; (8005b3c <HAL_DMA_Abort+0x480>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <HAL_DMA_Abort+0x33c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e007      	b.n	8005a08 <HAL_DMA_Abort+0x34c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a08:	e013      	b.n	8005a32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a0a:	f7fc ff95 	bl	8002938 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d90c      	bls.n	8005a32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2203      	movs	r2, #3
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e12d      	b.n	8005c8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <HAL_DMA_Abort+0x444>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d04a      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <HAL_DMA_Abort+0x448>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d045      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <HAL_DMA_Abort+0x44c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d040      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <HAL_DMA_Abort+0x450>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d03b      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <HAL_DMA_Abort+0x454>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d036      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <HAL_DMA_Abort+0x458>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d031      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <HAL_DMA_Abort+0x45c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d02c      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a24      	ldr	r2, [pc, #144]	; (8005b1c <HAL_DMA_Abort+0x460>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d027      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a23      	ldr	r2, [pc, #140]	; (8005b20 <HAL_DMA_Abort+0x464>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d022      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <HAL_DMA_Abort+0x468>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01d      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <HAL_DMA_Abort+0x46c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <HAL_DMA_Abort+0x470>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <HAL_DMA_Abort+0x474>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <HAL_DMA_Abort+0x478>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <HAL_DMA_Abort+0x47c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_DMA_Abort+0x422>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_DMA_Abort+0x480>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d101      	bne.n	8005ae2 <HAL_DMA_Abort+0x426>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_DMA_Abort+0x428>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02b      	beq.n	8005b40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	223f      	movs	r2, #63	; 0x3f
 8005af8:	409a      	lsls	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e02a      	b.n	8005b56 <HAL_DMA_Abort+0x49a>
 8005b00:	40020010 	.word	0x40020010
 8005b04:	40020028 	.word	0x40020028
 8005b08:	40020040 	.word	0x40020040
 8005b0c:	40020058 	.word	0x40020058
 8005b10:	40020070 	.word	0x40020070
 8005b14:	40020088 	.word	0x40020088
 8005b18:	400200a0 	.word	0x400200a0
 8005b1c:	400200b8 	.word	0x400200b8
 8005b20:	40020410 	.word	0x40020410
 8005b24:	40020428 	.word	0x40020428
 8005b28:	40020440 	.word	0x40020440
 8005b2c:	40020458 	.word	0x40020458
 8005b30:	40020470 	.word	0x40020470
 8005b34:	40020488 	.word	0x40020488
 8005b38:	400204a0 	.word	0x400204a0
 8005b3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2201      	movs	r2, #1
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a4f      	ldr	r2, [pc, #316]	; (8005c98 <HAL_DMA_Abort+0x5dc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d072      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a4d      	ldr	r2, [pc, #308]	; (8005c9c <HAL_DMA_Abort+0x5e0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d06d      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a4c      	ldr	r2, [pc, #304]	; (8005ca0 <HAL_DMA_Abort+0x5e4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d068      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a4a      	ldr	r2, [pc, #296]	; (8005ca4 <HAL_DMA_Abort+0x5e8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d063      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a49      	ldr	r2, [pc, #292]	; (8005ca8 <HAL_DMA_Abort+0x5ec>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d05e      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a47      	ldr	r2, [pc, #284]	; (8005cac <HAL_DMA_Abort+0x5f0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d059      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a46      	ldr	r2, [pc, #280]	; (8005cb0 <HAL_DMA_Abort+0x5f4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d054      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a44      	ldr	r2, [pc, #272]	; (8005cb4 <HAL_DMA_Abort+0x5f8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d04f      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a43      	ldr	r2, [pc, #268]	; (8005cb8 <HAL_DMA_Abort+0x5fc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d04a      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a41      	ldr	r2, [pc, #260]	; (8005cbc <HAL_DMA_Abort+0x600>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d045      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a40      	ldr	r2, [pc, #256]	; (8005cc0 <HAL_DMA_Abort+0x604>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d040      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3e      	ldr	r2, [pc, #248]	; (8005cc4 <HAL_DMA_Abort+0x608>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d03b      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <HAL_DMA_Abort+0x60c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d036      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3b      	ldr	r2, [pc, #236]	; (8005ccc <HAL_DMA_Abort+0x610>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a3a      	ldr	r2, [pc, #232]	; (8005cd0 <HAL_DMA_Abort+0x614>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d02c      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a38      	ldr	r2, [pc, #224]	; (8005cd4 <HAL_DMA_Abort+0x618>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d027      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a37      	ldr	r2, [pc, #220]	; (8005cd8 <HAL_DMA_Abort+0x61c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a35      	ldr	r2, [pc, #212]	; (8005cdc <HAL_DMA_Abort+0x620>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01d      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <HAL_DMA_Abort+0x624>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a32      	ldr	r2, [pc, #200]	; (8005ce4 <HAL_DMA_Abort+0x628>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a31      	ldr	r2, [pc, #196]	; (8005ce8 <HAL_DMA_Abort+0x62c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2f      	ldr	r2, [pc, #188]	; (8005cec <HAL_DMA_Abort+0x630>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2e      	ldr	r2, [pc, #184]	; (8005cf0 <HAL_DMA_Abort+0x634>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_Abort+0x58a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <HAL_DMA_Abort+0x638>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_DMA_Abort+0x58e>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_DMA_Abort+0x590>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d015      	beq.n	8005c7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
 8005cd8:	58025408 	.word	0x58025408
 8005cdc:	5802541c 	.word	0x5802541c
 8005ce0:	58025430 	.word	0x58025430
 8005ce4:	58025444 	.word	0x58025444
 8005ce8:	58025458 	.word	0x58025458
 8005cec:	5802546c 	.word	0x5802546c
 8005cf0:	58025480 	.word	0x58025480
 8005cf4:	58025494 	.word	0x58025494

08005cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e237      	b.n	800617a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d004      	beq.n	8005d20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e22c      	b.n	800617a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a5c      	ldr	r2, [pc, #368]	; (8005e98 <HAL_DMA_Abort_IT+0x1a0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d04a      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a5b      	ldr	r2, [pc, #364]	; (8005e9c <HAL_DMA_Abort_IT+0x1a4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d045      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a59      	ldr	r2, [pc, #356]	; (8005ea0 <HAL_DMA_Abort_IT+0x1a8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d040      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a58      	ldr	r2, [pc, #352]	; (8005ea4 <HAL_DMA_Abort_IT+0x1ac>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d03b      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a56      	ldr	r2, [pc, #344]	; (8005ea8 <HAL_DMA_Abort_IT+0x1b0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d036      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a55      	ldr	r2, [pc, #340]	; (8005eac <HAL_DMA_Abort_IT+0x1b4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d031      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a53      	ldr	r2, [pc, #332]	; (8005eb0 <HAL_DMA_Abort_IT+0x1b8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d02c      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a52      	ldr	r2, [pc, #328]	; (8005eb4 <HAL_DMA_Abort_IT+0x1bc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d027      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a50      	ldr	r2, [pc, #320]	; (8005eb8 <HAL_DMA_Abort_IT+0x1c0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d022      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a4f      	ldr	r2, [pc, #316]	; (8005ebc <HAL_DMA_Abort_IT+0x1c4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d01d      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a4d      	ldr	r2, [pc, #308]	; (8005ec0 <HAL_DMA_Abort_IT+0x1c8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a4c      	ldr	r2, [pc, #304]	; (8005ec4 <HAL_DMA_Abort_IT+0x1cc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a4a      	ldr	r2, [pc, #296]	; (8005ec8 <HAL_DMA_Abort_IT+0x1d0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a49      	ldr	r2, [pc, #292]	; (8005ecc <HAL_DMA_Abort_IT+0x1d4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a47      	ldr	r2, [pc, #284]	; (8005ed0 <HAL_DMA_Abort_IT+0x1d8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0xc8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a46      	ldr	r2, [pc, #280]	; (8005ed4 <HAL_DMA_Abort_IT+0x1dc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d101      	bne.n	8005dc4 <HAL_DMA_Abort_IT+0xcc>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <HAL_DMA_Abort_IT+0xce>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8086 	beq.w	8005ed8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <HAL_DMA_Abort_IT+0x1a0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d04a      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2e      	ldr	r2, [pc, #184]	; (8005e9c <HAL_DMA_Abort_IT+0x1a4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d045      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <HAL_DMA_Abort_IT+0x1a8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d040      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <HAL_DMA_Abort_IT+0x1ac>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d03b      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <HAL_DMA_Abort_IT+0x1b0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d036      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a28      	ldr	r2, [pc, #160]	; (8005eac <HAL_DMA_Abort_IT+0x1b4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d031      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a26      	ldr	r2, [pc, #152]	; (8005eb0 <HAL_DMA_Abort_IT+0x1b8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02c      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a25      	ldr	r2, [pc, #148]	; (8005eb4 <HAL_DMA_Abort_IT+0x1bc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d027      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <HAL_DMA_Abort_IT+0x1c0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d022      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <HAL_DMA_Abort_IT+0x1c4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d01d      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <HAL_DMA_Abort_IT+0x1c8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <HAL_DMA_Abort_IT+0x1cc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <HAL_DMA_Abort_IT+0x1d0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <HAL_DMA_Abort_IT+0x1d4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1a      	ldr	r2, [pc, #104]	; (8005ed0 <HAL_DMA_Abort_IT+0x1d8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x17c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <HAL_DMA_Abort_IT+0x1dc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <HAL_DMA_Abort_IT+0x18e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e178      	b.n	8006178 <HAL_DMA_Abort_IT+0x480>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e16f      	b.n	8006178 <HAL_DMA_Abort_IT+0x480>
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 020e 	bic.w	r2, r2, #14
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a6c      	ldr	r2, [pc, #432]	; (80060a0 <HAL_DMA_Abort_IT+0x3a8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d04a      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a6b      	ldr	r2, [pc, #428]	; (80060a4 <HAL_DMA_Abort_IT+0x3ac>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d045      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a69      	ldr	r2, [pc, #420]	; (80060a8 <HAL_DMA_Abort_IT+0x3b0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d040      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a68      	ldr	r2, [pc, #416]	; (80060ac <HAL_DMA_Abort_IT+0x3b4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d03b      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a66      	ldr	r2, [pc, #408]	; (80060b0 <HAL_DMA_Abort_IT+0x3b8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d036      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a65      	ldr	r2, [pc, #404]	; (80060b4 <HAL_DMA_Abort_IT+0x3bc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d031      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a63      	ldr	r2, [pc, #396]	; (80060b8 <HAL_DMA_Abort_IT+0x3c0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d02c      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a62      	ldr	r2, [pc, #392]	; (80060bc <HAL_DMA_Abort_IT+0x3c4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d027      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a60      	ldr	r2, [pc, #384]	; (80060c0 <HAL_DMA_Abort_IT+0x3c8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d022      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a5f      	ldr	r2, [pc, #380]	; (80060c4 <HAL_DMA_Abort_IT+0x3cc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d01d      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a5d      	ldr	r2, [pc, #372]	; (80060c8 <HAL_DMA_Abort_IT+0x3d0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d018      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5c      	ldr	r2, [pc, #368]	; (80060cc <HAL_DMA_Abort_IT+0x3d4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5a      	ldr	r2, [pc, #360]	; (80060d0 <HAL_DMA_Abort_IT+0x3d8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00e      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a59      	ldr	r2, [pc, #356]	; (80060d4 <HAL_DMA_Abort_IT+0x3dc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d009      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a57      	ldr	r2, [pc, #348]	; (80060d8 <HAL_DMA_Abort_IT+0x3e0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x290>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a56      	ldr	r2, [pc, #344]	; (80060dc <HAL_DMA_Abort_IT+0x3e4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d108      	bne.n	8005f9a <HAL_DMA_Abort_IT+0x2a2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e007      	b.n	8005faa <HAL_DMA_Abort_IT+0x2b2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0201 	bic.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a3c      	ldr	r2, [pc, #240]	; (80060a0 <HAL_DMA_Abort_IT+0x3a8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d072      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3a      	ldr	r2, [pc, #232]	; (80060a4 <HAL_DMA_Abort_IT+0x3ac>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d06d      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a39      	ldr	r2, [pc, #228]	; (80060a8 <HAL_DMA_Abort_IT+0x3b0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d068      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a37      	ldr	r2, [pc, #220]	; (80060ac <HAL_DMA_Abort_IT+0x3b4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d063      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a36      	ldr	r2, [pc, #216]	; (80060b0 <HAL_DMA_Abort_IT+0x3b8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d05e      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <HAL_DMA_Abort_IT+0x3bc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d059      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a33      	ldr	r2, [pc, #204]	; (80060b8 <HAL_DMA_Abort_IT+0x3c0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d054      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a31      	ldr	r2, [pc, #196]	; (80060bc <HAL_DMA_Abort_IT+0x3c4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d04f      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a30      	ldr	r2, [pc, #192]	; (80060c0 <HAL_DMA_Abort_IT+0x3c8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d04a      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2e      	ldr	r2, [pc, #184]	; (80060c4 <HAL_DMA_Abort_IT+0x3cc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d045      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2d      	ldr	r2, [pc, #180]	; (80060c8 <HAL_DMA_Abort_IT+0x3d0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d040      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2b      	ldr	r2, [pc, #172]	; (80060cc <HAL_DMA_Abort_IT+0x3d4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d03b      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2a      	ldr	r2, [pc, #168]	; (80060d0 <HAL_DMA_Abort_IT+0x3d8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d036      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a28      	ldr	r2, [pc, #160]	; (80060d4 <HAL_DMA_Abort_IT+0x3dc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d031      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <HAL_DMA_Abort_IT+0x3e0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d02c      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a25      	ldr	r2, [pc, #148]	; (80060dc <HAL_DMA_Abort_IT+0x3e4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d027      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a24      	ldr	r2, [pc, #144]	; (80060e0 <HAL_DMA_Abort_IT+0x3e8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d022      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <HAL_DMA_Abort_IT+0x3ec>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01d      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a21      	ldr	r2, [pc, #132]	; (80060e8 <HAL_DMA_Abort_IT+0x3f0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d018      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <HAL_DMA_Abort_IT+0x3f4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <HAL_DMA_Abort_IT+0x3f8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00e      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1c      	ldr	r2, [pc, #112]	; (80060f4 <HAL_DMA_Abort_IT+0x3fc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d009      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <HAL_DMA_Abort_IT+0x400>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d004      	beq.n	800609a <HAL_DMA_Abort_IT+0x3a2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <HAL_DMA_Abort_IT+0x404>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d132      	bne.n	8006100 <HAL_DMA_Abort_IT+0x408>
 800609a:	2301      	movs	r3, #1
 800609c:	e031      	b.n	8006102 <HAL_DMA_Abort_IT+0x40a>
 800609e:	bf00      	nop
 80060a0:	40020010 	.word	0x40020010
 80060a4:	40020028 	.word	0x40020028
 80060a8:	40020040 	.word	0x40020040
 80060ac:	40020058 	.word	0x40020058
 80060b0:	40020070 	.word	0x40020070
 80060b4:	40020088 	.word	0x40020088
 80060b8:	400200a0 	.word	0x400200a0
 80060bc:	400200b8 	.word	0x400200b8
 80060c0:	40020410 	.word	0x40020410
 80060c4:	40020428 	.word	0x40020428
 80060c8:	40020440 	.word	0x40020440
 80060cc:	40020458 	.word	0x40020458
 80060d0:	40020470 	.word	0x40020470
 80060d4:	40020488 	.word	0x40020488
 80060d8:	400204a0 	.word	0x400204a0
 80060dc:	400204b8 	.word	0x400204b8
 80060e0:	58025408 	.word	0x58025408
 80060e4:	5802541c 	.word	0x5802541c
 80060e8:	58025430 	.word	0x58025430
 80060ec:	58025444 	.word	0x58025444
 80060f0:	58025458 	.word	0x58025458
 80060f4:	5802546c 	.word	0x5802546c
 80060f8:	58025480 	.word	0x58025480
 80060fc:	58025494 	.word	0x58025494
 8006100:	2300      	movs	r3, #0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d028      	beq.n	8006158 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006114:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006134:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800614c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006156:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop

08006184 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006190:	4b67      	ldr	r3, [pc, #412]	; (8006330 <HAL_DMA_IRQHandler+0x1ac>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a67      	ldr	r2, [pc, #412]	; (8006334 <HAL_DMA_IRQHandler+0x1b0>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	0a9b      	lsrs	r3, r3, #10
 800619c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a5f      	ldr	r2, [pc, #380]	; (8006338 <HAL_DMA_IRQHandler+0x1b4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d04a      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5d      	ldr	r2, [pc, #372]	; (800633c <HAL_DMA_IRQHandler+0x1b8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d045      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5c      	ldr	r2, [pc, #368]	; (8006340 <HAL_DMA_IRQHandler+0x1bc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d040      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <HAL_DMA_IRQHandler+0x1c0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d03b      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a59      	ldr	r2, [pc, #356]	; (8006348 <HAL_DMA_IRQHandler+0x1c4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d036      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a57      	ldr	r2, [pc, #348]	; (800634c <HAL_DMA_IRQHandler+0x1c8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d031      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a56      	ldr	r2, [pc, #344]	; (8006350 <HAL_DMA_IRQHandler+0x1cc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d02c      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a54      	ldr	r2, [pc, #336]	; (8006354 <HAL_DMA_IRQHandler+0x1d0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d027      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a53      	ldr	r2, [pc, #332]	; (8006358 <HAL_DMA_IRQHandler+0x1d4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d022      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a51      	ldr	r2, [pc, #324]	; (800635c <HAL_DMA_IRQHandler+0x1d8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01d      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a50      	ldr	r2, [pc, #320]	; (8006360 <HAL_DMA_IRQHandler+0x1dc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d018      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4e      	ldr	r2, [pc, #312]	; (8006364 <HAL_DMA_IRQHandler+0x1e0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4d      	ldr	r2, [pc, #308]	; (8006368 <HAL_DMA_IRQHandler+0x1e4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4b      	ldr	r2, [pc, #300]	; (800636c <HAL_DMA_IRQHandler+0x1e8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d009      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a4a      	ldr	r2, [pc, #296]	; (8006370 <HAL_DMA_IRQHandler+0x1ec>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_DMA_IRQHandler+0xd2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a48      	ldr	r2, [pc, #288]	; (8006374 <HAL_DMA_IRQHandler+0x1f0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_DMA_IRQHandler+0xd6>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <HAL_DMA_IRQHandler+0xd8>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 842b 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	2208      	movs	r2, #8
 800626c:	409a      	lsls	r2, r3
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80a2 	beq.w	80063bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2e      	ldr	r2, [pc, #184]	; (8006338 <HAL_DMA_IRQHandler+0x1b4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d04a      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2d      	ldr	r2, [pc, #180]	; (800633c <HAL_DMA_IRQHandler+0x1b8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d045      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2b      	ldr	r2, [pc, #172]	; (8006340 <HAL_DMA_IRQHandler+0x1bc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d040      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <HAL_DMA_IRQHandler+0x1c0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d03b      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a28      	ldr	r2, [pc, #160]	; (8006348 <HAL_DMA_IRQHandler+0x1c4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d036      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a27      	ldr	r2, [pc, #156]	; (800634c <HAL_DMA_IRQHandler+0x1c8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d031      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a25      	ldr	r2, [pc, #148]	; (8006350 <HAL_DMA_IRQHandler+0x1cc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d02c      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a24      	ldr	r2, [pc, #144]	; (8006354 <HAL_DMA_IRQHandler+0x1d0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d027      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a22      	ldr	r2, [pc, #136]	; (8006358 <HAL_DMA_IRQHandler+0x1d4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d022      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a21      	ldr	r2, [pc, #132]	; (800635c <HAL_DMA_IRQHandler+0x1d8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01d      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <HAL_DMA_IRQHandler+0x1dc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1e      	ldr	r2, [pc, #120]	; (8006364 <HAL_DMA_IRQHandler+0x1e0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <HAL_DMA_IRQHandler+0x1e4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1b      	ldr	r2, [pc, #108]	; (800636c <HAL_DMA_IRQHandler+0x1e8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_DMA_IRQHandler+0x1ec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_DMA_IRQHandler+0x194>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a18      	ldr	r2, [pc, #96]	; (8006374 <HAL_DMA_IRQHandler+0x1f0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d12f      	bne.n	8006378 <HAL_DMA_IRQHandler+0x1f4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e02e      	b.n	800638c <HAL_DMA_IRQHandler+0x208>
 800632e:	bf00      	nop
 8006330:	24000088 	.word	0x24000088
 8006334:	1b4e81b5 	.word	0x1b4e81b5
 8006338:	40020010 	.word	0x40020010
 800633c:	40020028 	.word	0x40020028
 8006340:	40020040 	.word	0x40020040
 8006344:	40020058 	.word	0x40020058
 8006348:	40020070 	.word	0x40020070
 800634c:	40020088 	.word	0x40020088
 8006350:	400200a0 	.word	0x400200a0
 8006354:	400200b8 	.word	0x400200b8
 8006358:	40020410 	.word	0x40020410
 800635c:	40020428 	.word	0x40020428
 8006360:	40020440 	.word	0x40020440
 8006364:	40020458 	.word	0x40020458
 8006368:	40020470 	.word	0x40020470
 800636c:	40020488 	.word	0x40020488
 8006370:	400204a0 	.word	0x400204a0
 8006374:	400204b8 	.word	0x400204b8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf14      	ite	ne
 8006386:	2301      	movne	r3, #1
 8006388:	2300      	moveq	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0204 	bic.w	r2, r2, #4
 800639e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2208      	movs	r2, #8
 80063aa:	409a      	lsls	r2, r3
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	f043 0201 	orr.w	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d06e      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a69      	ldr	r2, [pc, #420]	; (800657c <HAL_DMA_IRQHandler+0x3f8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d04a      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a67      	ldr	r2, [pc, #412]	; (8006580 <HAL_DMA_IRQHandler+0x3fc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d045      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a66      	ldr	r2, [pc, #408]	; (8006584 <HAL_DMA_IRQHandler+0x400>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d040      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a64      	ldr	r2, [pc, #400]	; (8006588 <HAL_DMA_IRQHandler+0x404>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d03b      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a63      	ldr	r2, [pc, #396]	; (800658c <HAL_DMA_IRQHandler+0x408>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d036      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a61      	ldr	r2, [pc, #388]	; (8006590 <HAL_DMA_IRQHandler+0x40c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d031      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a60      	ldr	r2, [pc, #384]	; (8006594 <HAL_DMA_IRQHandler+0x410>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d02c      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5e      	ldr	r2, [pc, #376]	; (8006598 <HAL_DMA_IRQHandler+0x414>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d027      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5d      	ldr	r2, [pc, #372]	; (800659c <HAL_DMA_IRQHandler+0x418>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5b      	ldr	r2, [pc, #364]	; (80065a0 <HAL_DMA_IRQHandler+0x41c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01d      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a5a      	ldr	r2, [pc, #360]	; (80065a4 <HAL_DMA_IRQHandler+0x420>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d018      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a58      	ldr	r2, [pc, #352]	; (80065a8 <HAL_DMA_IRQHandler+0x424>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a57      	ldr	r2, [pc, #348]	; (80065ac <HAL_DMA_IRQHandler+0x428>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00e      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a55      	ldr	r2, [pc, #340]	; (80065b0 <HAL_DMA_IRQHandler+0x42c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a54      	ldr	r2, [pc, #336]	; (80065b4 <HAL_DMA_IRQHandler+0x430>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_DMA_IRQHandler+0x2ee>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a52      	ldr	r2, [pc, #328]	; (80065b8 <HAL_DMA_IRQHandler+0x434>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d10a      	bne.n	8006488 <HAL_DMA_IRQHandler+0x304>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf14      	ite	ne
 8006480:	2301      	movne	r3, #1
 8006482:	2300      	moveq	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	e003      	b.n	8006490 <HAL_DMA_IRQHandler+0x30c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00d      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	2201      	movs	r2, #1
 800649e:	409a      	lsls	r2, r3
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	f043 0202 	orr.w	r2, r3, #2
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b4:	f003 031f 	and.w	r3, r3, #31
 80064b8:	2204      	movs	r2, #4
 80064ba:	409a      	lsls	r2, r3
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	4013      	ands	r3, r2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 808f 	beq.w	80065e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a2c      	ldr	r2, [pc, #176]	; (800657c <HAL_DMA_IRQHandler+0x3f8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04a      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2a      	ldr	r2, [pc, #168]	; (8006580 <HAL_DMA_IRQHandler+0x3fc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d045      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a29      	ldr	r2, [pc, #164]	; (8006584 <HAL_DMA_IRQHandler+0x400>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d040      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a27      	ldr	r2, [pc, #156]	; (8006588 <HAL_DMA_IRQHandler+0x404>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d03b      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a26      	ldr	r2, [pc, #152]	; (800658c <HAL_DMA_IRQHandler+0x408>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d036      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a24      	ldr	r2, [pc, #144]	; (8006590 <HAL_DMA_IRQHandler+0x40c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d031      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a23      	ldr	r2, [pc, #140]	; (8006594 <HAL_DMA_IRQHandler+0x410>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d02c      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a21      	ldr	r2, [pc, #132]	; (8006598 <HAL_DMA_IRQHandler+0x414>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d027      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a20      	ldr	r2, [pc, #128]	; (800659c <HAL_DMA_IRQHandler+0x418>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <HAL_DMA_IRQHandler+0x41c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01d      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <HAL_DMA_IRQHandler+0x420>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <HAL_DMA_IRQHandler+0x424>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <HAL_DMA_IRQHandler+0x428>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <HAL_DMA_IRQHandler+0x42c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <HAL_DMA_IRQHandler+0x430>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_DMA_IRQHandler+0x3e2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <HAL_DMA_IRQHandler+0x434>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d12a      	bne.n	80065bc <HAL_DMA_IRQHandler+0x438>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e023      	b.n	80065c4 <HAL_DMA_IRQHandler+0x440>
 800657c:	40020010 	.word	0x40020010
 8006580:	40020028 	.word	0x40020028
 8006584:	40020040 	.word	0x40020040
 8006588:	40020058 	.word	0x40020058
 800658c:	40020070 	.word	0x40020070
 8006590:	40020088 	.word	0x40020088
 8006594:	400200a0 	.word	0x400200a0
 8006598:	400200b8 	.word	0x400200b8
 800659c:	40020410 	.word	0x40020410
 80065a0:	40020428 	.word	0x40020428
 80065a4:	40020440 	.word	0x40020440
 80065a8:	40020458 	.word	0x40020458
 80065ac:	40020470 	.word	0x40020470
 80065b0:	40020488 	.word	0x40020488
 80065b4:	400204a0 	.word	0x400204a0
 80065b8:	400204b8 	.word	0x400204b8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2204      	movs	r2, #4
 80065d2:	409a      	lsls	r2, r3
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	f043 0204 	orr.w	r2, r3, #4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2210      	movs	r2, #16
 80065ee:	409a      	lsls	r2, r3
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80a6 	beq.w	8006746 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a85      	ldr	r2, [pc, #532]	; (8006814 <HAL_DMA_IRQHandler+0x690>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04a      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a83      	ldr	r2, [pc, #524]	; (8006818 <HAL_DMA_IRQHandler+0x694>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d045      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a82      	ldr	r2, [pc, #520]	; (800681c <HAL_DMA_IRQHandler+0x698>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d040      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a80      	ldr	r2, [pc, #512]	; (8006820 <HAL_DMA_IRQHandler+0x69c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d03b      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a7f      	ldr	r2, [pc, #508]	; (8006824 <HAL_DMA_IRQHandler+0x6a0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d036      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a7d      	ldr	r2, [pc, #500]	; (8006828 <HAL_DMA_IRQHandler+0x6a4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d031      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a7c      	ldr	r2, [pc, #496]	; (800682c <HAL_DMA_IRQHandler+0x6a8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d02c      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7a      	ldr	r2, [pc, #488]	; (8006830 <HAL_DMA_IRQHandler+0x6ac>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d027      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a79      	ldr	r2, [pc, #484]	; (8006834 <HAL_DMA_IRQHandler+0x6b0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a77      	ldr	r2, [pc, #476]	; (8006838 <HAL_DMA_IRQHandler+0x6b4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a76      	ldr	r2, [pc, #472]	; (800683c <HAL_DMA_IRQHandler+0x6b8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a74      	ldr	r2, [pc, #464]	; (8006840 <HAL_DMA_IRQHandler+0x6bc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a73      	ldr	r2, [pc, #460]	; (8006844 <HAL_DMA_IRQHandler+0x6c0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a71      	ldr	r2, [pc, #452]	; (8006848 <HAL_DMA_IRQHandler+0x6c4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a70      	ldr	r2, [pc, #448]	; (800684c <HAL_DMA_IRQHandler+0x6c8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_IRQHandler+0x516>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a6e      	ldr	r2, [pc, #440]	; (8006850 <HAL_DMA_IRQHandler+0x6cc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10a      	bne.n	80066b0 <HAL_DMA_IRQHandler+0x52c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e009      	b.n	80066c4 <HAL_DMA_IRQHandler+0x540>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d03e      	beq.n	8006746 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2210      	movs	r2, #16
 80066d2:	409a      	lsls	r2, r3
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d018      	beq.n	8006718 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d024      	beq.n	8006746 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
 8006704:	e01f      	b.n	8006746 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
 8006716:	e016      	b.n	8006746 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0208 	bic.w	r2, r2, #8
 8006734:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	2220      	movs	r2, #32
 8006750:	409a      	lsls	r2, r3
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8110 	beq.w	800697c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2c      	ldr	r2, [pc, #176]	; (8006814 <HAL_DMA_IRQHandler+0x690>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d04a      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2b      	ldr	r2, [pc, #172]	; (8006818 <HAL_DMA_IRQHandler+0x694>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d045      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <HAL_DMA_IRQHandler+0x698>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d040      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a28      	ldr	r2, [pc, #160]	; (8006820 <HAL_DMA_IRQHandler+0x69c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d03b      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a26      	ldr	r2, [pc, #152]	; (8006824 <HAL_DMA_IRQHandler+0x6a0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d036      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a25      	ldr	r2, [pc, #148]	; (8006828 <HAL_DMA_IRQHandler+0x6a4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d031      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a23      	ldr	r2, [pc, #140]	; (800682c <HAL_DMA_IRQHandler+0x6a8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d02c      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a22      	ldr	r2, [pc, #136]	; (8006830 <HAL_DMA_IRQHandler+0x6ac>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d027      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a20      	ldr	r2, [pc, #128]	; (8006834 <HAL_DMA_IRQHandler+0x6b0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d022      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <HAL_DMA_IRQHandler+0x6b4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d01d      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1d      	ldr	r2, [pc, #116]	; (800683c <HAL_DMA_IRQHandler+0x6b8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d018      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_DMA_IRQHandler+0x6bc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <HAL_DMA_IRQHandler+0x6c0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a19      	ldr	r2, [pc, #100]	; (8006848 <HAL_DMA_IRQHandler+0x6c4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a17      	ldr	r2, [pc, #92]	; (800684c <HAL_DMA_IRQHandler+0x6c8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_DMA_IRQHandler+0x678>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a16      	ldr	r2, [pc, #88]	; (8006850 <HAL_DMA_IRQHandler+0x6cc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d12b      	bne.n	8006854 <HAL_DMA_IRQHandler+0x6d0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	bf14      	ite	ne
 800680a:	2301      	movne	r3, #1
 800680c:	2300      	moveq	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e02a      	b.n	8006868 <HAL_DMA_IRQHandler+0x6e4>
 8006812:	bf00      	nop
 8006814:	40020010 	.word	0x40020010
 8006818:	40020028 	.word	0x40020028
 800681c:	40020040 	.word	0x40020040
 8006820:	40020058 	.word	0x40020058
 8006824:	40020070 	.word	0x40020070
 8006828:	40020088 	.word	0x40020088
 800682c:	400200a0 	.word	0x400200a0
 8006830:	400200b8 	.word	0x400200b8
 8006834:	40020410 	.word	0x40020410
 8006838:	40020428 	.word	0x40020428
 800683c:	40020440 	.word	0x40020440
 8006840:	40020458 	.word	0x40020458
 8006844:	40020470 	.word	0x40020470
 8006848:	40020488 	.word	0x40020488
 800684c:	400204a0 	.word	0x400204a0
 8006850:	400204b8 	.word	0x400204b8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8087 	beq.w	800697c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2220      	movs	r2, #32
 8006878:	409a      	lsls	r2, r3
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b04      	cmp	r3, #4
 8006888:	d139      	bne.n	80068fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0216 	bic.w	r2, r2, #22
 8006898:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <HAL_DMA_IRQHandler+0x736>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0208 	bic.w	r2, r2, #8
 80068c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	223f      	movs	r2, #63	; 0x3f
 80068d4:	409a      	lsls	r2, r3
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 834a 	beq.w	8006f88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
          }
          return;
 80068fc:	e344      	b.n	8006f88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d018      	beq.n	800693e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d108      	bne.n	800692c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	2b00      	cmp	r3, #0
 8006920:	d02c      	beq.n	800697c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	e027      	b.n	800697c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d023      	beq.n	800697c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
 800693c:	e01e      	b.n	800697c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10f      	bne.n	800696c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0210 	bic.w	r2, r2, #16
 800695a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8306 	beq.w	8006f92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8088 	beq.w	8006aa4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2204      	movs	r2, #4
 8006998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7a      	ldr	r2, [pc, #488]	; (8006b8c <HAL_DMA_IRQHandler+0xa08>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d04a      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a79      	ldr	r2, [pc, #484]	; (8006b90 <HAL_DMA_IRQHandler+0xa0c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d045      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a77      	ldr	r2, [pc, #476]	; (8006b94 <HAL_DMA_IRQHandler+0xa10>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d040      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a76      	ldr	r2, [pc, #472]	; (8006b98 <HAL_DMA_IRQHandler+0xa14>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d03b      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a74      	ldr	r2, [pc, #464]	; (8006b9c <HAL_DMA_IRQHandler+0xa18>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d036      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a73      	ldr	r2, [pc, #460]	; (8006ba0 <HAL_DMA_IRQHandler+0xa1c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d031      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <HAL_DMA_IRQHandler+0xa20>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d02c      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a70      	ldr	r2, [pc, #448]	; (8006ba8 <HAL_DMA_IRQHandler+0xa24>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d027      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_DMA_IRQHandler+0xa28>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d022      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a6d      	ldr	r2, [pc, #436]	; (8006bb0 <HAL_DMA_IRQHandler+0xa2c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a6b      	ldr	r2, [pc, #428]	; (8006bb4 <HAL_DMA_IRQHandler+0xa30>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a6a      	ldr	r2, [pc, #424]	; (8006bb8 <HAL_DMA_IRQHandler+0xa34>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a68      	ldr	r2, [pc, #416]	; (8006bbc <HAL_DMA_IRQHandler+0xa38>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a67      	ldr	r2, [pc, #412]	; (8006bc0 <HAL_DMA_IRQHandler+0xa3c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a65      	ldr	r2, [pc, #404]	; (8006bc4 <HAL_DMA_IRQHandler+0xa40>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x8b8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a64      	ldr	r2, [pc, #400]	; (8006bc8 <HAL_DMA_IRQHandler+0xa44>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d108      	bne.n	8006a4e <HAL_DMA_IRQHandler+0x8ca>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e007      	b.n	8006a5e <HAL_DMA_IRQHandler+0x8da>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d307      	bcc.n	8006a7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f2      	bne.n	8006a5e <HAL_DMA_IRQHandler+0x8da>
 8006a78:	e000      	b.n	8006a7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a92:	e003      	b.n	8006a9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8272 	beq.w	8006f92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	e26c      	b.n	8006f92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a43      	ldr	r2, [pc, #268]	; (8006bcc <HAL_DMA_IRQHandler+0xa48>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d022      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a42      	ldr	r2, [pc, #264]	; (8006bd0 <HAL_DMA_IRQHandler+0xa4c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d01d      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a40      	ldr	r2, [pc, #256]	; (8006bd4 <HAL_DMA_IRQHandler+0xa50>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d018      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <HAL_DMA_IRQHandler+0xa54>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a3d      	ldr	r2, [pc, #244]	; (8006bdc <HAL_DMA_IRQHandler+0xa58>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00e      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3c      	ldr	r2, [pc, #240]	; (8006be0 <HAL_DMA_IRQHandler+0xa5c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a3a      	ldr	r2, [pc, #232]	; (8006be4 <HAL_DMA_IRQHandler+0xa60>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x984>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a39      	ldr	r2, [pc, #228]	; (8006be8 <HAL_DMA_IRQHandler+0xa64>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x988>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <HAL_DMA_IRQHandler+0x98a>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 823f 	beq.w	8006f92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2204      	movs	r2, #4
 8006b26:	409a      	lsls	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80cd 	beq.w	8006ccc <HAL_DMA_IRQHandler+0xb48>
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80c7 	beq.w	8006ccc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2204      	movs	r2, #4
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d049      	beq.n	8006bec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8210 	beq.w	8006f8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b74:	e20a      	b.n	8006f8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8206 	beq.w	8006f8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b88:	e200      	b.n	8006f8c <HAL_DMA_IRQHandler+0xe08>
 8006b8a:	bf00      	nop
 8006b8c:	40020010 	.word	0x40020010
 8006b90:	40020028 	.word	0x40020028
 8006b94:	40020040 	.word	0x40020040
 8006b98:	40020058 	.word	0x40020058
 8006b9c:	40020070 	.word	0x40020070
 8006ba0:	40020088 	.word	0x40020088
 8006ba4:	400200a0 	.word	0x400200a0
 8006ba8:	400200b8 	.word	0x400200b8
 8006bac:	40020410 	.word	0x40020410
 8006bb0:	40020428 	.word	0x40020428
 8006bb4:	40020440 	.word	0x40020440
 8006bb8:	40020458 	.word	0x40020458
 8006bbc:	40020470 	.word	0x40020470
 8006bc0:	40020488 	.word	0x40020488
 8006bc4:	400204a0 	.word	0x400204a0
 8006bc8:	400204b8 	.word	0x400204b8
 8006bcc:	58025408 	.word	0x58025408
 8006bd0:	5802541c 	.word	0x5802541c
 8006bd4:	58025430 	.word	0x58025430
 8006bd8:	58025444 	.word	0x58025444
 8006bdc:	58025458 	.word	0x58025458
 8006be0:	5802546c 	.word	0x5802546c
 8006be4:	58025480 	.word	0x58025480
 8006be8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d160      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a7f      	ldr	r2, [pc, #508]	; (8006df8 <HAL_DMA_IRQHandler+0xc74>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d04a      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a7d      	ldr	r2, [pc, #500]	; (8006dfc <HAL_DMA_IRQHandler+0xc78>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d045      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a7c      	ldr	r2, [pc, #496]	; (8006e00 <HAL_DMA_IRQHandler+0xc7c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d040      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a7a      	ldr	r2, [pc, #488]	; (8006e04 <HAL_DMA_IRQHandler+0xc80>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d03b      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a79      	ldr	r2, [pc, #484]	; (8006e08 <HAL_DMA_IRQHandler+0xc84>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d036      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a77      	ldr	r2, [pc, #476]	; (8006e0c <HAL_DMA_IRQHandler+0xc88>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d031      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a76      	ldr	r2, [pc, #472]	; (8006e10 <HAL_DMA_IRQHandler+0xc8c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d02c      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a74      	ldr	r2, [pc, #464]	; (8006e14 <HAL_DMA_IRQHandler+0xc90>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d027      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a73      	ldr	r2, [pc, #460]	; (8006e18 <HAL_DMA_IRQHandler+0xc94>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d022      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a71      	ldr	r2, [pc, #452]	; (8006e1c <HAL_DMA_IRQHandler+0xc98>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01d      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a70      	ldr	r2, [pc, #448]	; (8006e20 <HAL_DMA_IRQHandler+0xc9c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d018      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a6e      	ldr	r2, [pc, #440]	; (8006e24 <HAL_DMA_IRQHandler+0xca0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d013      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a6d      	ldr	r2, [pc, #436]	; (8006e28 <HAL_DMA_IRQHandler+0xca4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00e      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a6b      	ldr	r2, [pc, #428]	; (8006e2c <HAL_DMA_IRQHandler+0xca8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d009      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6a      	ldr	r2, [pc, #424]	; (8006e30 <HAL_DMA_IRQHandler+0xcac>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d004      	beq.n	8006c96 <HAL_DMA_IRQHandler+0xb12>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a68      	ldr	r2, [pc, #416]	; (8006e34 <HAL_DMA_IRQHandler+0xcb0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d108      	bne.n	8006ca8 <HAL_DMA_IRQHandler+0xb24>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0208 	bic.w	r2, r2, #8
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e007      	b.n	8006cb8 <HAL_DMA_IRQHandler+0xb34>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0204 	bic.w	r2, r2, #4
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8165 	beq.w	8006f8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cca:	e15f      	b.n	8006f8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80c5 	beq.w	8006e6c <HAL_DMA_IRQHandler+0xce8>
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80bf 	beq.w	8006e6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d018      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 813a 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d24:	e134      	b.n	8006f90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8130 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d38:	e12a      	b.n	8006f90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8089 	bne.w	8006e58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2b      	ldr	r2, [pc, #172]	; (8006df8 <HAL_DMA_IRQHandler+0xc74>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d04a      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a29      	ldr	r2, [pc, #164]	; (8006dfc <HAL_DMA_IRQHandler+0xc78>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d045      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <HAL_DMA_IRQHandler+0xc7c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d040      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <HAL_DMA_IRQHandler+0xc80>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d03b      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <HAL_DMA_IRQHandler+0xc84>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d036      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a23      	ldr	r2, [pc, #140]	; (8006e0c <HAL_DMA_IRQHandler+0xc88>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d031      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a22      	ldr	r2, [pc, #136]	; (8006e10 <HAL_DMA_IRQHandler+0xc8c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d02c      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a20      	ldr	r2, [pc, #128]	; (8006e14 <HAL_DMA_IRQHandler+0xc90>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d027      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1f      	ldr	r2, [pc, #124]	; (8006e18 <HAL_DMA_IRQHandler+0xc94>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d022      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <HAL_DMA_IRQHandler+0xc98>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01d      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <HAL_DMA_IRQHandler+0xc9c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d018      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <HAL_DMA_IRQHandler+0xca0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <HAL_DMA_IRQHandler+0xca4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <HAL_DMA_IRQHandler+0xca8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <HAL_DMA_IRQHandler+0xcac>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xc62>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <HAL_DMA_IRQHandler+0xcb0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d128      	bne.n	8006e38 <HAL_DMA_IRQHandler+0xcb4>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0214 	bic.w	r2, r2, #20
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e027      	b.n	8006e48 <HAL_DMA_IRQHandler+0xcc4>
 8006df8:	40020010 	.word	0x40020010
 8006dfc:	40020028 	.word	0x40020028
 8006e00:	40020040 	.word	0x40020040
 8006e04:	40020058 	.word	0x40020058
 8006e08:	40020070 	.word	0x40020070
 8006e0c:	40020088 	.word	0x40020088
 8006e10:	400200a0 	.word	0x400200a0
 8006e14:	400200b8 	.word	0x400200b8
 8006e18:	40020410 	.word	0x40020410
 8006e1c:	40020428 	.word	0x40020428
 8006e20:	40020440 	.word	0x40020440
 8006e24:	40020458 	.word	0x40020458
 8006e28:	40020470 	.word	0x40020470
 8006e2c:	40020488 	.word	0x40020488
 8006e30:	400204a0 	.word	0x400204a0
 8006e34:	400204b8 	.word	0x400204b8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 020a 	bic.w	r2, r2, #10
 8006e46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8097 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e6a:	e091      	b.n	8006f90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	2208      	movs	r2, #8
 8006e76:	409a      	lsls	r2, r3
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8088 	beq.w	8006f92 <HAL_DMA_IRQHandler+0xe0e>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8082 	beq.w	8006f92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a41      	ldr	r2, [pc, #260]	; (8006f98 <HAL_DMA_IRQHandler+0xe14>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d04a      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a3f      	ldr	r2, [pc, #252]	; (8006f9c <HAL_DMA_IRQHandler+0xe18>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d045      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <HAL_DMA_IRQHandler+0xe1c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d040      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a3c      	ldr	r2, [pc, #240]	; (8006fa4 <HAL_DMA_IRQHandler+0xe20>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d03b      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3b      	ldr	r2, [pc, #236]	; (8006fa8 <HAL_DMA_IRQHandler+0xe24>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d036      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a39      	ldr	r2, [pc, #228]	; (8006fac <HAL_DMA_IRQHandler+0xe28>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d031      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a38      	ldr	r2, [pc, #224]	; (8006fb0 <HAL_DMA_IRQHandler+0xe2c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d02c      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <HAL_DMA_IRQHandler+0xe30>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d027      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a35      	ldr	r2, [pc, #212]	; (8006fb8 <HAL_DMA_IRQHandler+0xe34>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <HAL_DMA_IRQHandler+0xe38>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01d      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a32      	ldr	r2, [pc, #200]	; (8006fc0 <HAL_DMA_IRQHandler+0xe3c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a30      	ldr	r2, [pc, #192]	; (8006fc4 <HAL_DMA_IRQHandler+0xe40>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2f      	ldr	r2, [pc, #188]	; (8006fc8 <HAL_DMA_IRQHandler+0xe44>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	; (8006fcc <HAL_DMA_IRQHandler+0xe48>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2c      	ldr	r2, [pc, #176]	; (8006fd0 <HAL_DMA_IRQHandler+0xe4c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xdaa>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <HAL_DMA_IRQHandler+0xe50>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d108      	bne.n	8006f40 <HAL_DMA_IRQHandler+0xdbc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 021c 	bic.w	r2, r2, #28
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e007      	b.n	8006f50 <HAL_DMA_IRQHandler+0xdcc>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 020e 	bic.w	r2, r2, #14
 8006f4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f54:	f003 031f 	and.w	r3, r3, #31
 8006f58:	2201      	movs	r2, #1
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
 8006f86:	e004      	b.n	8006f92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f88:	bf00      	nop
 8006f8a:	e002      	b.n	8006f92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f8c:	bf00      	nop
 8006f8e:	e000      	b.n	8006f92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f92:	3728      	adds	r7, #40	; 0x28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40020010 	.word	0x40020010
 8006f9c:	40020028 	.word	0x40020028
 8006fa0:	40020040 	.word	0x40020040
 8006fa4:	40020058 	.word	0x40020058
 8006fa8:	40020070 	.word	0x40020070
 8006fac:	40020088 	.word	0x40020088
 8006fb0:	400200a0 	.word	0x400200a0
 8006fb4:	400200b8 	.word	0x400200b8
 8006fb8:	40020410 	.word	0x40020410
 8006fbc:	40020428 	.word	0x40020428
 8006fc0:	40020440 	.word	0x40020440
 8006fc4:	40020458 	.word	0x40020458
 8006fc8:	40020470 	.word	0x40020470
 8006fcc:	40020488 	.word	0x40020488
 8006fd0:	400204a0 	.word	0x400204a0
 8006fd4:	400204b8 	.word	0x400204b8

08006fd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a7f      	ldr	r2, [pc, #508]	; (80071f4 <DMA_SetConfig+0x21c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d072      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a7d      	ldr	r2, [pc, #500]	; (80071f8 <DMA_SetConfig+0x220>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d06d      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a7c      	ldr	r2, [pc, #496]	; (80071fc <DMA_SetConfig+0x224>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d068      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a7a      	ldr	r2, [pc, #488]	; (8007200 <DMA_SetConfig+0x228>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d063      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a79      	ldr	r2, [pc, #484]	; (8007204 <DMA_SetConfig+0x22c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d05e      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a77      	ldr	r2, [pc, #476]	; (8007208 <DMA_SetConfig+0x230>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d059      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a76      	ldr	r2, [pc, #472]	; (800720c <DMA_SetConfig+0x234>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d054      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a74      	ldr	r2, [pc, #464]	; (8007210 <DMA_SetConfig+0x238>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d04f      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a73      	ldr	r2, [pc, #460]	; (8007214 <DMA_SetConfig+0x23c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d04a      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a71      	ldr	r2, [pc, #452]	; (8007218 <DMA_SetConfig+0x240>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d045      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a70      	ldr	r2, [pc, #448]	; (800721c <DMA_SetConfig+0x244>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d040      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a6e      	ldr	r2, [pc, #440]	; (8007220 <DMA_SetConfig+0x248>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d03b      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a6d      	ldr	r2, [pc, #436]	; (8007224 <DMA_SetConfig+0x24c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d036      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6b      	ldr	r2, [pc, #428]	; (8007228 <DMA_SetConfig+0x250>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d031      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a6a      	ldr	r2, [pc, #424]	; (800722c <DMA_SetConfig+0x254>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d02c      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a68      	ldr	r2, [pc, #416]	; (8007230 <DMA_SetConfig+0x258>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d027      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a67      	ldr	r2, [pc, #412]	; (8007234 <DMA_SetConfig+0x25c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d022      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a65      	ldr	r2, [pc, #404]	; (8007238 <DMA_SetConfig+0x260>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01d      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a64      	ldr	r2, [pc, #400]	; (800723c <DMA_SetConfig+0x264>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d018      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a62      	ldr	r2, [pc, #392]	; (8007240 <DMA_SetConfig+0x268>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a61      	ldr	r2, [pc, #388]	; (8007244 <DMA_SetConfig+0x26c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00e      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a5f      	ldr	r2, [pc, #380]	; (8007248 <DMA_SetConfig+0x270>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d009      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a5e      	ldr	r2, [pc, #376]	; (800724c <DMA_SetConfig+0x274>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d004      	beq.n	80070e2 <DMA_SetConfig+0x10a>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a5c      	ldr	r2, [pc, #368]	; (8007250 <DMA_SetConfig+0x278>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d101      	bne.n	80070e6 <DMA_SetConfig+0x10e>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <DMA_SetConfig+0x110>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007106:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a39      	ldr	r2, [pc, #228]	; (80071f4 <DMA_SetConfig+0x21c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d04a      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a38      	ldr	r2, [pc, #224]	; (80071f8 <DMA_SetConfig+0x220>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d045      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a36      	ldr	r2, [pc, #216]	; (80071fc <DMA_SetConfig+0x224>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d040      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a35      	ldr	r2, [pc, #212]	; (8007200 <DMA_SetConfig+0x228>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d03b      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a33      	ldr	r2, [pc, #204]	; (8007204 <DMA_SetConfig+0x22c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d036      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a32      	ldr	r2, [pc, #200]	; (8007208 <DMA_SetConfig+0x230>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d031      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <DMA_SetConfig+0x234>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d02c      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <DMA_SetConfig+0x238>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d027      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a2d      	ldr	r2, [pc, #180]	; (8007214 <DMA_SetConfig+0x23c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d022      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <DMA_SetConfig+0x240>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d01d      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a2a      	ldr	r2, [pc, #168]	; (800721c <DMA_SetConfig+0x244>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d018      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a29      	ldr	r2, [pc, #164]	; (8007220 <DMA_SetConfig+0x248>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a27      	ldr	r2, [pc, #156]	; (8007224 <DMA_SetConfig+0x24c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00e      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a26      	ldr	r2, [pc, #152]	; (8007228 <DMA_SetConfig+0x250>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d009      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a24      	ldr	r2, [pc, #144]	; (800722c <DMA_SetConfig+0x254>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <DMA_SetConfig+0x1d0>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a23      	ldr	r2, [pc, #140]	; (8007230 <DMA_SetConfig+0x258>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d101      	bne.n	80071ac <DMA_SetConfig+0x1d4>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <DMA_SetConfig+0x1d6>
 80071ac:	2300      	movs	r3, #0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d059      	beq.n	8007266 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	223f      	movs	r2, #63	; 0x3f
 80071bc:	409a      	lsls	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d138      	bne.n	8007254 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071f2:	e086      	b.n	8007302 <DMA_SetConfig+0x32a>
 80071f4:	40020010 	.word	0x40020010
 80071f8:	40020028 	.word	0x40020028
 80071fc:	40020040 	.word	0x40020040
 8007200:	40020058 	.word	0x40020058
 8007204:	40020070 	.word	0x40020070
 8007208:	40020088 	.word	0x40020088
 800720c:	400200a0 	.word	0x400200a0
 8007210:	400200b8 	.word	0x400200b8
 8007214:	40020410 	.word	0x40020410
 8007218:	40020428 	.word	0x40020428
 800721c:	40020440 	.word	0x40020440
 8007220:	40020458 	.word	0x40020458
 8007224:	40020470 	.word	0x40020470
 8007228:	40020488 	.word	0x40020488
 800722c:	400204a0 	.word	0x400204a0
 8007230:	400204b8 	.word	0x400204b8
 8007234:	58025408 	.word	0x58025408
 8007238:	5802541c 	.word	0x5802541c
 800723c:	58025430 	.word	0x58025430
 8007240:	58025444 	.word	0x58025444
 8007244:	58025458 	.word	0x58025458
 8007248:	5802546c 	.word	0x5802546c
 800724c:	58025480 	.word	0x58025480
 8007250:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]
}
 8007264:	e04d      	b.n	8007302 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a29      	ldr	r2, [pc, #164]	; (8007310 <DMA_SetConfig+0x338>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a27      	ldr	r2, [pc, #156]	; (8007314 <DMA_SetConfig+0x33c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a26      	ldr	r2, [pc, #152]	; (8007318 <DMA_SetConfig+0x340>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a24      	ldr	r2, [pc, #144]	; (800731c <DMA_SetConfig+0x344>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a23      	ldr	r2, [pc, #140]	; (8007320 <DMA_SetConfig+0x348>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a21      	ldr	r2, [pc, #132]	; (8007324 <DMA_SetConfig+0x34c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a20      	ldr	r2, [pc, #128]	; (8007328 <DMA_SetConfig+0x350>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <DMA_SetConfig+0x2de>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <DMA_SetConfig+0x354>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d101      	bne.n	80072ba <DMA_SetConfig+0x2e2>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <DMA_SetConfig+0x2e4>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d020      	beq.n	8007302 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2201      	movs	r2, #1
 80072ca:	409a      	lsls	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	d108      	bne.n	80072f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	60da      	str	r2, [r3, #12]
}
 80072f0:	e007      	b.n	8007302 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	60da      	str	r2, [r3, #12]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	58025408 	.word	0x58025408
 8007314:	5802541c 	.word	0x5802541c
 8007318:	58025430 	.word	0x58025430
 800731c:	58025444 	.word	0x58025444
 8007320:	58025458 	.word	0x58025458
 8007324:	5802546c 	.word	0x5802546c
 8007328:	58025480 	.word	0x58025480
 800732c:	58025494 	.word	0x58025494

08007330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a42      	ldr	r2, [pc, #264]	; (8007448 <DMA_CalcBaseAndBitshift+0x118>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d04a      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a41      	ldr	r2, [pc, #260]	; (800744c <DMA_CalcBaseAndBitshift+0x11c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d045      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3f      	ldr	r2, [pc, #252]	; (8007450 <DMA_CalcBaseAndBitshift+0x120>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d040      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a3e      	ldr	r2, [pc, #248]	; (8007454 <DMA_CalcBaseAndBitshift+0x124>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d03b      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a3c      	ldr	r2, [pc, #240]	; (8007458 <DMA_CalcBaseAndBitshift+0x128>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d036      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a3b      	ldr	r2, [pc, #236]	; (800745c <DMA_CalcBaseAndBitshift+0x12c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d031      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a39      	ldr	r2, [pc, #228]	; (8007460 <DMA_CalcBaseAndBitshift+0x130>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d02c      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a38      	ldr	r2, [pc, #224]	; (8007464 <DMA_CalcBaseAndBitshift+0x134>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d027      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a36      	ldr	r2, [pc, #216]	; (8007468 <DMA_CalcBaseAndBitshift+0x138>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d022      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a35      	ldr	r2, [pc, #212]	; (800746c <DMA_CalcBaseAndBitshift+0x13c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d01d      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a33      	ldr	r2, [pc, #204]	; (8007470 <DMA_CalcBaseAndBitshift+0x140>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d018      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a32      	ldr	r2, [pc, #200]	; (8007474 <DMA_CalcBaseAndBitshift+0x144>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d013      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a30      	ldr	r2, [pc, #192]	; (8007478 <DMA_CalcBaseAndBitshift+0x148>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00e      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2f      	ldr	r2, [pc, #188]	; (800747c <DMA_CalcBaseAndBitshift+0x14c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d009      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2d      	ldr	r2, [pc, #180]	; (8007480 <DMA_CalcBaseAndBitshift+0x150>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d004      	beq.n	80073d8 <DMA_CalcBaseAndBitshift+0xa8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2c      	ldr	r2, [pc, #176]	; (8007484 <DMA_CalcBaseAndBitshift+0x154>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d101      	bne.n	80073dc <DMA_CalcBaseAndBitshift+0xac>
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <DMA_CalcBaseAndBitshift+0xae>
 80073dc:	2300      	movs	r3, #0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d024      	beq.n	800742c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	3b10      	subs	r3, #16
 80073ea:	4a27      	ldr	r2, [pc, #156]	; (8007488 <DMA_CalcBaseAndBitshift+0x158>)
 80073ec:	fba2 2303 	umull	r2, r3, r2, r3
 80073f0:	091b      	lsrs	r3, r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	4a24      	ldr	r2, [pc, #144]	; (800748c <DMA_CalcBaseAndBitshift+0x15c>)
 80073fc:	5cd3      	ldrb	r3, [r2, r3]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d908      	bls.n	800741c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <DMA_CalcBaseAndBitshift+0x160>)
 8007412:	4013      	ands	r3, r2
 8007414:	1d1a      	adds	r2, r3, #4
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	659a      	str	r2, [r3, #88]	; 0x58
 800741a:	e00d      	b.n	8007438 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <DMA_CalcBaseAndBitshift+0x160>)
 8007424:	4013      	ands	r3, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6593      	str	r3, [r2, #88]	; 0x58
 800742a:	e005      	b.n	8007438 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	40020010 	.word	0x40020010
 800744c:	40020028 	.word	0x40020028
 8007450:	40020040 	.word	0x40020040
 8007454:	40020058 	.word	0x40020058
 8007458:	40020070 	.word	0x40020070
 800745c:	40020088 	.word	0x40020088
 8007460:	400200a0 	.word	0x400200a0
 8007464:	400200b8 	.word	0x400200b8
 8007468:	40020410 	.word	0x40020410
 800746c:	40020428 	.word	0x40020428
 8007470:	40020440 	.word	0x40020440
 8007474:	40020458 	.word	0x40020458
 8007478:	40020470 	.word	0x40020470
 800747c:	40020488 	.word	0x40020488
 8007480:	400204a0 	.word	0x400204a0
 8007484:	400204b8 	.word	0x400204b8
 8007488:	aaaaaaab 	.word	0xaaaaaaab
 800748c:	0801103c 	.word	0x0801103c
 8007490:	fffffc00 	.word	0xfffffc00

08007494 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d120      	bne.n	80074ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d858      	bhi.n	8007562 <DMA_CheckFifoParam+0xce>
 80074b0:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <DMA_CheckFifoParam+0x24>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	080074db 	.word	0x080074db
 80074c0:	080074c9 	.word	0x080074c9
 80074c4:	08007563 	.word	0x08007563
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d048      	beq.n	8007566 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074d8:	e045      	b.n	8007566 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074e2:	d142      	bne.n	800756a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074e8:	e03f      	b.n	800756a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f2:	d123      	bne.n	800753c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d838      	bhi.n	800756e <DMA_CheckFifoParam+0xda>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <DMA_CheckFifoParam+0x70>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	08007515 	.word	0x08007515
 8007508:	0800751b 	.word	0x0800751b
 800750c:	08007515 	.word	0x08007515
 8007510:	0800752d 	.word	0x0800752d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
        break;
 8007518:	e030      	b.n	800757c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d025      	beq.n	8007572 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800752a:	e022      	b.n	8007572 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007534:	d11f      	bne.n	8007576 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800753a:	e01c      	b.n	8007576 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	2b02      	cmp	r3, #2
 8007542:	d902      	bls.n	800754a <DMA_CheckFifoParam+0xb6>
 8007544:	2b03      	cmp	r3, #3
 8007546:	d003      	beq.n	8007550 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007548:	e018      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	73fb      	strb	r3, [r7, #15]
        break;
 800754e:	e015      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
    break;
 8007560:	e00b      	b.n	800757a <DMA_CheckFifoParam+0xe6>
        break;
 8007562:	bf00      	nop
 8007564:	e00a      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        break;
 8007566:	bf00      	nop
 8007568:	e008      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        break;
 800756a:	bf00      	nop
 800756c:	e006      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        break;
 800756e:	bf00      	nop
 8007570:	e004      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        break;
 8007572:	bf00      	nop
 8007574:	e002      	b.n	800757c <DMA_CheckFifoParam+0xe8>
        break;
 8007576:	bf00      	nop
 8007578:	e000      	b.n	800757c <DMA_CheckFifoParam+0xe8>
    break;
 800757a:	bf00      	nop
    }
  }

  return status;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop

0800758c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a38      	ldr	r2, [pc, #224]	; (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d022      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a36      	ldr	r2, [pc, #216]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01d      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a35      	ldr	r2, [pc, #212]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d018      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a33      	ldr	r2, [pc, #204]	; (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a32      	ldr	r2, [pc, #200]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00e      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a30      	ldr	r2, [pc, #192]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d009      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d004      	beq.n	80075ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2d      	ldr	r2, [pc, #180]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d101      	bne.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01a      	beq.n	800762a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	3b08      	subs	r3, #8
 80075fc:	4a28      	ldr	r2, [pc, #160]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	091b      	lsrs	r3, r3, #4
 8007604:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4b26      	ldr	r3, [pc, #152]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	461a      	mov	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a24      	ldr	r2, [pc, #144]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007618:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	2201      	movs	r2, #1
 8007622:	409a      	lsls	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007628:	e024      	b.n	8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	3b10      	subs	r3, #16
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d806      	bhi.n	8007652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d902      	bls.n	8007652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3308      	adds	r3, #8
 8007650:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a16      	ldr	r2, [pc, #88]	; (80076bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007664:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f003 031f 	and.w	r3, r3, #31
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	58025408 	.word	0x58025408
 8007684:	5802541c 	.word	0x5802541c
 8007688:	58025430 	.word	0x58025430
 800768c:	58025444 	.word	0x58025444
 8007690:	58025458 	.word	0x58025458
 8007694:	5802546c 	.word	0x5802546c
 8007698:	58025480 	.word	0x58025480
 800769c:	58025494 	.word	0x58025494
 80076a0:	cccccccd 	.word	0xcccccccd
 80076a4:	16009600 	.word	0x16009600
 80076a8:	58025880 	.word	0x58025880
 80076ac:	aaaaaaab 	.word	0xaaaaaaab
 80076b0:	400204b8 	.word	0x400204b8
 80076b4:	4002040f 	.word	0x4002040f
 80076b8:	10008200 	.word	0x10008200
 80076bc:	40020880 	.word	0x40020880

080076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d04a      	beq.n	800776c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d847      	bhi.n	800776c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a25      	ldr	r2, [pc, #148]	; (8007778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d022      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a24      	ldr	r2, [pc, #144]	; (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d01d      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a22      	ldr	r2, [pc, #136]	; (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d018      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a21      	ldr	r2, [pc, #132]	; (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1f      	ldr	r2, [pc, #124]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1e      	ldr	r2, [pc, #120]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1c      	ldr	r2, [pc, #112]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d101      	bne.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4b17      	ldr	r3, [pc, #92]	; (8007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a15      	ldr	r2, [pc, #84]	; (800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007748:	671a      	str	r2, [r3, #112]	; 0x70
 800774a:	e009      	b.n	8007760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	461a      	mov	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a11      	ldr	r2, [pc, #68]	; (80077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800775e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3b01      	subs	r3, #1
 8007764:	2201      	movs	r2, #1
 8007766:	409a      	lsls	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800776c:	bf00      	nop
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	58025408 	.word	0x58025408
 800777c:	5802541c 	.word	0x5802541c
 8007780:	58025430 	.word	0x58025430
 8007784:	58025444 	.word	0x58025444
 8007788:	58025458 	.word	0x58025458
 800778c:	5802546c 	.word	0x5802546c
 8007790:	58025480 	.word	0x58025480
 8007794:	58025494 	.word	0x58025494
 8007798:	1600963f 	.word	0x1600963f
 800779c:	58025940 	.word	0x58025940
 80077a0:	1000823f 	.word	0x1000823f
 80077a4:	40020940 	.word	0x40020940

080077a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80077b6:	4b89      	ldr	r3, [pc, #548]	; (80079dc <HAL_GPIO_Init+0x234>)
 80077b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077ba:	e194      	b.n	8007ae6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	2101      	movs	r1, #1
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	fa01 f303 	lsl.w	r3, r1, r3
 80077c8:	4013      	ands	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8186 	beq.w	8007ae0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d005      	beq.n	80077ec <HAL_GPIO_Init+0x44>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d130      	bne.n	800784e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	2203      	movs	r2, #3
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4013      	ands	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4313      	orrs	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007822:	2201      	movs	r2, #1
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	43db      	mvns	r3, r3
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	4013      	ands	r3, r2
 8007830:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	091b      	lsrs	r3, r3, #4
 8007838:	f003 0201 	and.w	r2, r3, #1
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4313      	orrs	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d017      	beq.n	800788a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	2203      	movs	r2, #3
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	43db      	mvns	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4313      	orrs	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d123      	bne.n	80078de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	08da      	lsrs	r2, r3, #3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3208      	adds	r2, #8
 800789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	220f      	movs	r2, #15
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4013      	ands	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	08da      	lsrs	r2, r3, #3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3208      	adds	r2, #8
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	2203      	movs	r2, #3
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43db      	mvns	r3, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	4013      	ands	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f003 0203 	and.w	r2, r3, #3
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4313      	orrs	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80e0 	beq.w	8007ae0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007920:	4b2f      	ldr	r3, [pc, #188]	; (80079e0 <HAL_GPIO_Init+0x238>)
 8007922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007926:	4a2e      	ldr	r2, [pc, #184]	; (80079e0 <HAL_GPIO_Init+0x238>)
 8007928:	f043 0302 	orr.w	r3, r3, #2
 800792c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007930:	4b2b      	ldr	r3, [pc, #172]	; (80079e0 <HAL_GPIO_Init+0x238>)
 8007932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800793e:	4a29      	ldr	r2, [pc, #164]	; (80079e4 <HAL_GPIO_Init+0x23c>)
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	089b      	lsrs	r3, r3, #2
 8007944:	3302      	adds	r3, #2
 8007946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800794a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	220f      	movs	r2, #15
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	43db      	mvns	r3, r3
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	4013      	ands	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a20      	ldr	r2, [pc, #128]	; (80079e8 <HAL_GPIO_Init+0x240>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d052      	beq.n	8007a10 <HAL_GPIO_Init+0x268>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <HAL_GPIO_Init+0x244>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d031      	beq.n	80079d6 <HAL_GPIO_Init+0x22e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <HAL_GPIO_Init+0x248>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d02b      	beq.n	80079d2 <HAL_GPIO_Init+0x22a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <HAL_GPIO_Init+0x24c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d025      	beq.n	80079ce <HAL_GPIO_Init+0x226>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <HAL_GPIO_Init+0x250>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d01f      	beq.n	80079ca <HAL_GPIO_Init+0x222>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <HAL_GPIO_Init+0x254>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d019      	beq.n	80079c6 <HAL_GPIO_Init+0x21e>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1a      	ldr	r2, [pc, #104]	; (8007a00 <HAL_GPIO_Init+0x258>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <HAL_GPIO_Init+0x21a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a19      	ldr	r2, [pc, #100]	; (8007a04 <HAL_GPIO_Init+0x25c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00d      	beq.n	80079be <HAL_GPIO_Init+0x216>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <HAL_GPIO_Init+0x260>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <HAL_GPIO_Init+0x212>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <HAL_GPIO_Init+0x264>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d101      	bne.n	80079b6 <HAL_GPIO_Init+0x20e>
 80079b2:	2309      	movs	r3, #9
 80079b4:	e02d      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079b6:	230a      	movs	r3, #10
 80079b8:	e02b      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079ba:	2308      	movs	r3, #8
 80079bc:	e029      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079be:	2307      	movs	r3, #7
 80079c0:	e027      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079c2:	2306      	movs	r3, #6
 80079c4:	e025      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079c6:	2305      	movs	r3, #5
 80079c8:	e023      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079ca:	2304      	movs	r3, #4
 80079cc:	e021      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079ce:	2303      	movs	r3, #3
 80079d0:	e01f      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e01d      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e01b      	b.n	8007a12 <HAL_GPIO_Init+0x26a>
 80079da:	bf00      	nop
 80079dc:	58000080 	.word	0x58000080
 80079e0:	58024400 	.word	0x58024400
 80079e4:	58000400 	.word	0x58000400
 80079e8:	58020000 	.word	0x58020000
 80079ec:	58020400 	.word	0x58020400
 80079f0:	58020800 	.word	0x58020800
 80079f4:	58020c00 	.word	0x58020c00
 80079f8:	58021000 	.word	0x58021000
 80079fc:	58021400 	.word	0x58021400
 8007a00:	58021800 	.word	0x58021800
 8007a04:	58021c00 	.word	0x58021c00
 8007a08:	58022000 	.word	0x58022000
 8007a0c:	58022400 	.word	0x58022400
 8007a10:	2300      	movs	r3, #0
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	f002 0203 	and.w	r2, r2, #3
 8007a18:	0092      	lsls	r2, r2, #2
 8007a1a:	4093      	lsls	r3, r2
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a22:	4938      	ldr	r1, [pc, #224]	; (8007b04 <HAL_GPIO_Init+0x35c>)
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	089b      	lsrs	r3, r3, #2
 8007a28:	3302      	adds	r3, #2
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	43db      	mvns	r3, r3
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f ae63 	bne.w	80077bc <HAL_GPIO_Init+0x14>
  }
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	3724      	adds	r7, #36	; 0x24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	58000400 	.word	0x58000400

08007b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	887b      	ldrh	r3, [r7, #2]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
 8007b24:	e001      	b.n	8007b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
 8007b44:	4613      	mov	r3, r2
 8007b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b48:	787b      	ldrb	r3, [r7, #1]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b4e:	887a      	ldrh	r2, [r7, #2]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b54:	e003      	b.n	8007b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b56:	887b      	ldrh	r3, [r7, #2]
 8007b58:	041a      	lsls	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	619a      	str	r2, [r3, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e08b      	b.n	8007c96 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fa fa58 	bl	8002048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2224      	movs	r2, #36	; 0x24
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d107      	bne.n	8007be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007be2:	609a      	str	r2, [r3, #8]
 8007be4:	e006      	b.n	8007bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d108      	bne.n	8007c0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c0a:	605a      	str	r2, [r3, #4]
 8007c0c:	e007      	b.n	8007c1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6859      	ldr	r1, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <HAL_I2C_Init+0x134>)
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691a      	ldr	r2, [r3, #16]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	02008000 	.word	0x02008000

08007ca4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	817b      	strh	r3, [r7, #10]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	f040 80fd 	bne.w	8007ec0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_I2C_Master_Transmit+0x30>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e0f6      	b.n	8007ec2 <HAL_I2C_Master_Transmit+0x21e>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cdc:	f7fa fe2c 	bl	8002938 <HAL_GetTick>
 8007ce0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2319      	movs	r3, #25
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fa0a 	bl	8008108 <I2C_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e0e1      	b.n	8007ec2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2221      	movs	r2, #33	; 0x21
 8007d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2210      	movs	r2, #16
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	893a      	ldrh	r2, [r7, #8]
 8007d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2bff      	cmp	r3, #255	; 0xff
 8007d2e:	d906      	bls.n	8007d3e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22ff      	movs	r2, #255	; 0xff
 8007d34:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e007      	b.n	8007d4e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d4c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d024      	beq.n	8007da0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	781a      	ldrb	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	8979      	ldrh	r1, [r7, #10]
 8007d92:	4b4e      	ldr	r3, [pc, #312]	; (8007ecc <HAL_I2C_Master_Transmit+0x228>)
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fc05 	bl	80085a8 <I2C_TransferConfig>
 8007d9e:	e066      	b.n	8007e6e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	8979      	ldrh	r1, [r7, #10]
 8007da8:	4b48      	ldr	r3, [pc, #288]	; (8007ecc <HAL_I2C_Master_Transmit+0x228>)
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fbfa 	bl	80085a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007db4:	e05b      	b.n	8007e6e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	6a39      	ldr	r1, [r7, #32]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f9fd 	bl	80081ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e07b      	b.n	8007ec2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d034      	beq.n	8007e6e <HAL_I2C_Master_Transmit+0x1ca>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d130      	bne.n	8007e6e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	2200      	movs	r2, #0
 8007e14:	2180      	movs	r1, #128	; 0x80
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f976 	bl	8008108 <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e04d      	b.n	8007ec2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	2bff      	cmp	r3, #255	; 0xff
 8007e2e:	d90e      	bls.n	8007e4e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	22ff      	movs	r2, #255	; 0xff
 8007e34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	8979      	ldrh	r1, [r7, #10]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fbae 	bl	80085a8 <I2C_TransferConfig>
 8007e4c:	e00f      	b.n	8007e6e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	8979      	ldrh	r1, [r7, #10]
 8007e60:	2300      	movs	r3, #0
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fb9d 	bl	80085a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d19e      	bne.n	8007db6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	6a39      	ldr	r1, [r7, #32]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f9e3 	bl	8008248 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e01a      	b.n	8007ec2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2220      	movs	r2, #32
 8007e92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6859      	ldr	r1, [r3, #4]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <HAL_I2C_Master_Transmit+0x22c>)
 8007ea0:	400b      	ands	r3, r1
 8007ea2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e000      	b.n	8007ec2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007ec0:	2302      	movs	r3, #2
  }
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	80002000 	.word	0x80002000
 8007ed0:	fe00e800 	.word	0xfe00e800

08007ed4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	817b      	strh	r3, [r7, #10]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	f040 80db 	bne.w	80080ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_I2C_Master_Receive+0x30>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0d4      	b.n	80080ae <HAL_I2C_Master_Receive+0x1da>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f0c:	f7fa fd14 	bl	8002938 <HAL_GetTick>
 8007f10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2319      	movs	r3, #25
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f8f2 	bl	8008108 <I2C_WaitOnFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e0bf      	b.n	80080ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2222      	movs	r2, #34	; 0x22
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2210      	movs	r2, #16
 8007f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	893a      	ldrh	r2, [r7, #8]
 8007f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	2bff      	cmp	r3, #255	; 0xff
 8007f5e:	d90e      	bls.n	8007f7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	22ff      	movs	r2, #255	; 0xff
 8007f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	8979      	ldrh	r1, [r7, #10]
 8007f6e:	4b52      	ldr	r3, [pc, #328]	; (80080b8 <HAL_I2C_Master_Receive+0x1e4>)
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fb16 	bl	80085a8 <I2C_TransferConfig>
 8007f7c:	e06d      	b.n	800805a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	8979      	ldrh	r1, [r7, #10]
 8007f90:	4b49      	ldr	r3, [pc, #292]	; (80080b8 <HAL_I2C_Master_Receive+0x1e4>)
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 fb05 	bl	80085a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007f9e:	e05c      	b.n	800805a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	6a39      	ldr	r1, [r7, #32]
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f993 	bl	80082d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e07c      	b.n	80080ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d034      	beq.n	800805a <HAL_I2C_Master_Receive+0x186>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d130      	bne.n	800805a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 f880 	bl	8008108 <I2C_WaitOnFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e04d      	b.n	80080ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008016:	b29b      	uxth	r3, r3
 8008018:	2bff      	cmp	r3, #255	; 0xff
 800801a:	d90e      	bls.n	800803a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	22ff      	movs	r2, #255	; 0xff
 8008020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008026:	b2da      	uxtb	r2, r3
 8008028:	8979      	ldrh	r1, [r7, #10]
 800802a:	2300      	movs	r3, #0
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fab8 	bl	80085a8 <I2C_TransferConfig>
 8008038:	e00f      	b.n	800805a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008048:	b2da      	uxtb	r2, r3
 800804a:	8979      	ldrh	r1, [r7, #10]
 800804c:	2300      	movs	r3, #0
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 faa7 	bl	80085a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d19d      	bne.n	8007fa0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	6a39      	ldr	r1, [r7, #32]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f8ed 	bl	8008248 <I2C_WaitOnSTOPFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e01a      	b.n	80080ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2220      	movs	r2, #32
 800807e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <HAL_I2C_Master_Receive+0x1e8>)
 800808c:	400b      	ands	r3, r1
 800808e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	e000      	b.n	80080ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80080ac:	2302      	movs	r3, #2
  }
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	80002400 	.word	0x80002400
 80080bc:	fe00e800 	.word	0xfe00e800

080080c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d103      	bne.n	80080de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2200      	movs	r2, #0
 80080dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d007      	beq.n	80080fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	619a      	str	r2, [r3, #24]
  }
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	4613      	mov	r3, r2
 8008116:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008118:	e03b      	b.n	8008192 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f962 	bl	80083e8 <I2C_IsErrorOccurred>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e041      	b.n	80081b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008134:	d02d      	beq.n	8008192 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008136:	f7fa fbff 	bl	8002938 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d122      	bne.n	8008192 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4013      	ands	r3, r2
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	429a      	cmp	r2, r3
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	461a      	mov	r2, r3
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	429a      	cmp	r2, r3
 8008168:	d113      	bne.n	8008192 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816e:	f043 0220 	orr.w	r2, r3, #32
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e00f      	b.n	80081b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4013      	ands	r3, r2
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d0b4      	beq.n	800811a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081c6:	e033      	b.n	8008230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f90b 	bl	80083e8 <I2C_IsErrorOccurred>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e031      	b.n	8008240 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e2:	d025      	beq.n	8008230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e4:	f7fa fba8 	bl	8002938 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d302      	bcc.n	80081fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11a      	bne.n	8008230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d013      	beq.n	8008230 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820c:	f043 0220 	orr.w	r2, r3, #32
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e007      	b.n	8008240 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b02      	cmp	r3, #2
 800823c:	d1c4      	bne.n	80081c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008254:	e02f      	b.n	80082b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f8c4 	bl	80083e8 <I2C_IsErrorOccurred>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e02d      	b.n	80082c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7fa fb65 	bl	8002938 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d11a      	bne.n	80082b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b20      	cmp	r3, #32
 800828c:	d013      	beq.n	80082b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e007      	b.n	80082c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d1c8      	bne.n	8008256 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80082e0:	e071      	b.n	80083c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 f87e 	bl	80083e8 <I2C_IsErrorOccurred>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b20      	cmp	r3, #32
 8008302:	d13b      	bne.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d138      	bne.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d105      	bne.n	8008324 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	f003 0310 	and.w	r3, r3, #16
 800832e:	2b10      	cmp	r3, #16
 8008330:	d121      	bne.n	8008376 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2210      	movs	r2, #16
 8008338:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2204      	movs	r2, #4
 800833e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2220      	movs	r2, #32
 8008346:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6859      	ldr	r1, [r3, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b24      	ldr	r3, [pc, #144]	; (80083e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008354:	400b      	ands	r3, r1
 8008356:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
 8008374:	e002      	b.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800837c:	f7fa fadc 	bl	8002938 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	429a      	cmp	r2, r3
 800838a:	d302      	bcc.n	8008392 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d119      	bne.n	80083c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d116      	bne.n	80083c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d00f      	beq.n	80083c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	f043 0220 	orr.w	r2, r3, #32
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d002      	beq.n	80083da <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d083      	beq.n	80082e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	fe00e800 	.word	0xfe00e800

080083e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	d068      	beq.n	80084e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2210      	movs	r2, #16
 800841a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800841c:	e049      	b.n	80084b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008424:	d045      	beq.n	80084b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008426:	f7fa fa87 	bl	8002938 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <I2C_IsErrorOccurred+0x54>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d13a      	bne.n	80084b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008446:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800844e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800845a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845e:	d121      	bne.n	80084a4 <I2C_IsErrorOccurred+0xbc>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008466:	d01d      	beq.n	80084a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008468:	7cfb      	ldrb	r3, [r7, #19]
 800846a:	2b20      	cmp	r3, #32
 800846c:	d01a      	beq.n	80084a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800847c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800847e:	f7fa fa5b 	bl	8002938 <HAL_GetTick>
 8008482:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008484:	e00e      	b.n	80084a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008486:	f7fa fa57 	bl	8002938 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b19      	cmp	r3, #25
 8008492:	d907      	bls.n	80084a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	f043 0320 	orr.w	r3, r3, #32
 800849a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80084a2:	e006      	b.n	80084b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d1e9      	bne.n	8008486 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f003 0320 	and.w	r3, r3, #32
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d003      	beq.n	80084c8 <I2C_IsErrorOccurred+0xe0>
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0aa      	beq.n	800841e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80084c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2220      	movs	r2, #32
 80084d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f043 0304 	orr.w	r3, r3, #4
 80084de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	f043 0301 	orr.w	r3, r3, #1
 80084fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f043 0308 	orr.w	r3, r3, #8
 8008520:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800852a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	f043 0302 	orr.w	r3, r3, #2
 8008542:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800854c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01c      	beq.n	8008596 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff fdaf 	bl	80080c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6859      	ldr	r1, [r3, #4]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <I2C_IsErrorOccurred+0x1bc>)
 800856e:	400b      	ands	r3, r1
 8008570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	431a      	orrs	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800859a:	4618      	mov	r0, r3
 800859c:	3728      	adds	r7, #40	; 0x28
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	fe00e800 	.word	0xfe00e800

080085a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	817b      	strh	r3, [r7, #10]
 80085b6:	4613      	mov	r3, r2
 80085b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085ba:	897b      	ldrh	r3, [r7, #10]
 80085bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085c0:	7a7b      	ldrb	r3, [r7, #9]
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	0d5b      	lsrs	r3, r3, #21
 80085e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80085e6:	4b08      	ldr	r3, [pc, #32]	; (8008608 <I2C_TransferConfig+0x60>)
 80085e8:	430b      	orrs	r3, r1
 80085ea:	43db      	mvns	r3, r3
 80085ec:	ea02 0103 	and.w	r1, r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	03ff63ff 	.word	0x03ff63ff

0800860c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b20      	cmp	r3, #32
 8008620:	d138      	bne.n	8008694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800862c:	2302      	movs	r3, #2
 800862e:	e032      	b.n	8008696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2224      	movs	r2, #36	; 0x24
 800863c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0201 	bic.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800865e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6819      	ldr	r1, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	e000      	b.n	8008696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008694:	2302      	movs	r3, #2
  }
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d139      	bne.n	800872c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e033      	b.n	800872e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2224      	movs	r2, #36	; 0x24
 80086d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80086f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	e000      	b.n	800872e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800872c:	2302      	movs	r3, #2
  }
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
	...

0800873c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008748:	4b18      	ldr	r3, [pc, #96]	; (80087ac <HAL_PWR_EnterSTOPMode+0x70>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f023 0201 	bic.w	r2, r3, #1
 8008750:	4916      	ldr	r1, [pc, #88]	; (80087ac <HAL_PWR_EnterSTOPMode+0x70>)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4313      	orrs	r3, r2
 8008756:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008758:	4b14      	ldr	r3, [pc, #80]	; (80087ac <HAL_PWR_EnterSTOPMode+0x70>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	4a13      	ldr	r2, [pc, #76]	; (80087ac <HAL_PWR_EnterSTOPMode+0x70>)
 800875e:	f023 0305 	bic.w	r3, r3, #5
 8008762:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008764:	4b11      	ldr	r3, [pc, #68]	; (80087ac <HAL_PWR_EnterSTOPMode+0x70>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	4a10      	ldr	r2, [pc, #64]	; (80087ac <HAL_PWR_EnterSTOPMode+0x70>)
 800876a:	f023 0302 	bic.w	r3, r3, #2
 800876e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008770:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <HAL_PWR_EnterSTOPMode+0x74>)
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <HAL_PWR_EnterSTOPMode+0x74>)
 8008776:	f043 0304 	orr.w	r3, r3, #4
 800877a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800877c:	f3bf 8f4f 	dsb	sy
}
 8008780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008782:	f3bf 8f6f 	isb	sy
}
 8008786:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800878e:	bf30      	wfi
 8008790:	e000      	b.n	8008794 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008792:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008794:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <HAL_PWR_EnterSTOPMode+0x74>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4a05      	ldr	r2, [pc, #20]	; (80087b0 <HAL_PWR_EnterSTOPMode+0x74>)
 800879a:	f023 0304 	bic.w	r3, r3, #4
 800879e:	6113      	str	r3, [r2, #16]
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	58024800 	.word	0x58024800
 80087b0:	e000ed00 	.word	0xe000ed00

080087b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80087bc:	4b19      	ldr	r3, [pc, #100]	; (8008824 <HAL_PWREx_ConfigSupply+0x70>)
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d00a      	beq.n	80087de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087c8:	4b16      	ldr	r3, [pc, #88]	; (8008824 <HAL_PWREx_ConfigSupply+0x70>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d001      	beq.n	80087da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e01f      	b.n	800881a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	e01d      	b.n	800881a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <HAL_PWREx_ConfigSupply+0x70>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f023 0207 	bic.w	r2, r3, #7
 80087e6:	490f      	ldr	r1, [pc, #60]	; (8008824 <HAL_PWREx_ConfigSupply+0x70>)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087ee:	f7fa f8a3 	bl	8002938 <HAL_GetTick>
 80087f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087f4:	e009      	b.n	800880a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087f6:	f7fa f89f 	bl	8002938 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008804:	d901      	bls.n	800880a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e007      	b.n	800881a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800880a:	4b06      	ldr	r3, [pc, #24]	; (8008824 <HAL_PWREx_ConfigSupply+0x70>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008816:	d1ee      	bne.n	80087f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	58024800 	.word	0x58024800

08008828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08c      	sub	sp, #48	; 0x30
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f000 bc48 	b.w	80090cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8088 	beq.w	800895a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800884a:	4b99      	ldr	r3, [pc, #612]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008854:	4b96      	ldr	r3, [pc, #600]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	2b10      	cmp	r3, #16
 800885e:	d007      	beq.n	8008870 <HAL_RCC_OscConfig+0x48>
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	2b18      	cmp	r3, #24
 8008864:	d111      	bne.n	800888a <HAL_RCC_OscConfig+0x62>
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d10c      	bne.n	800888a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008870:	4b8f      	ldr	r3, [pc, #572]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d06d      	beq.n	8008958 <HAL_RCC_OscConfig+0x130>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d169      	bne.n	8008958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f000 bc21 	b.w	80090cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008892:	d106      	bne.n	80088a2 <HAL_RCC_OscConfig+0x7a>
 8008894:	4b86      	ldr	r3, [pc, #536]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a85      	ldr	r2, [pc, #532]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 800889a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	e02e      	b.n	8008900 <HAL_RCC_OscConfig+0xd8>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10c      	bne.n	80088c4 <HAL_RCC_OscConfig+0x9c>
 80088aa:	4b81      	ldr	r3, [pc, #516]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a80      	ldr	r2, [pc, #512]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	4b7e      	ldr	r3, [pc, #504]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a7d      	ldr	r2, [pc, #500]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	e01d      	b.n	8008900 <HAL_RCC_OscConfig+0xd8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088cc:	d10c      	bne.n	80088e8 <HAL_RCC_OscConfig+0xc0>
 80088ce:	4b78      	ldr	r3, [pc, #480]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a77      	ldr	r2, [pc, #476]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	4b75      	ldr	r3, [pc, #468]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a74      	ldr	r2, [pc, #464]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	e00b      	b.n	8008900 <HAL_RCC_OscConfig+0xd8>
 80088e8:	4b71      	ldr	r3, [pc, #452]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a70      	ldr	r2, [pc, #448]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	4b6e      	ldr	r3, [pc, #440]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a6d      	ldr	r2, [pc, #436]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80088fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d013      	beq.n	8008930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008908:	f7fa f816 	bl	8002938 <HAL_GetTick>
 800890c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008910:	f7fa f812 	bl	8002938 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b64      	cmp	r3, #100	; 0x64
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e3d4      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008922:	4b63      	ldr	r3, [pc, #396]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0f0      	beq.n	8008910 <HAL_RCC_OscConfig+0xe8>
 800892e:	e014      	b.n	800895a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008930:	f7fa f802 	bl	8002938 <HAL_GetTick>
 8008934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008938:	f7f9 fffe 	bl	8002938 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b64      	cmp	r3, #100	; 0x64
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e3c0      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800894a:	4b59      	ldr	r3, [pc, #356]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1f0      	bne.n	8008938 <HAL_RCC_OscConfig+0x110>
 8008956:	e000      	b.n	800895a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 80ca 	beq.w	8008afc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008968:	4b51      	ldr	r3, [pc, #324]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008970:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008972:	4b4f      	ldr	r3, [pc, #316]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <HAL_RCC_OscConfig+0x166>
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	2b18      	cmp	r3, #24
 8008982:	d156      	bne.n	8008a32 <HAL_RCC_OscConfig+0x20a>
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d151      	bne.n	8008a32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800898e:	4b48      	ldr	r3, [pc, #288]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_RCC_OscConfig+0x17e>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e392      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089a6:	4b42      	ldr	r3, [pc, #264]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f023 0219 	bic.w	r2, r3, #25
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	493f      	ldr	r1, [pc, #252]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b8:	f7f9 ffbe 	bl	8002938 <HAL_GetTick>
 80089bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089c0:	f7f9 ffba 	bl	8002938 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e37c      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089d2:	4b37      	ldr	r3, [pc, #220]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089de:	f7f9 ffc7 	bl	8002970 <HAL_GetREVID>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d817      	bhi.n	8008a1c <HAL_RCC_OscConfig+0x1f4>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b40      	cmp	r3, #64	; 0x40
 80089f2:	d108      	bne.n	8008a06 <HAL_RCC_OscConfig+0x1de>
 80089f4:	4b2e      	ldr	r3, [pc, #184]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089fc:	4a2c      	ldr	r2, [pc, #176]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 80089fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a04:	e07a      	b.n	8008afc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a06:	4b2a      	ldr	r3, [pc, #168]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	031b      	lsls	r3, r3, #12
 8008a14:	4926      	ldr	r1, [pc, #152]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a1a:	e06f      	b.n	8008afc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1c:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	061b      	lsls	r3, r3, #24
 8008a2a:	4921      	ldr	r1, [pc, #132]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a30:	e064      	b.n	8008afc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d047      	beq.n	8008aca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a3a:	4b1d      	ldr	r3, [pc, #116]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f023 0219 	bic.w	r2, r3, #25
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	491a      	ldr	r1, [pc, #104]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4c:	f7f9 ff74 	bl	8002938 <HAL_GetTick>
 8008a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a52:	e008      	b.n	8008a66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a54:	f7f9 ff70 	bl	8002938 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e332      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a66:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f0      	beq.n	8008a54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a72:	f7f9 ff7d 	bl	8002970 <HAL_GetREVID>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d819      	bhi.n	8008ab4 <HAL_RCC_OscConfig+0x28c>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d108      	bne.n	8008a9a <HAL_RCC_OscConfig+0x272>
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a90:	4a07      	ldr	r2, [pc, #28]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a96:	6053      	str	r3, [r2, #4]
 8008a98:	e030      	b.n	8008afc <HAL_RCC_OscConfig+0x2d4>
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	031b      	lsls	r3, r3, #12
 8008aa8:	4901      	ldr	r1, [pc, #4]	; (8008ab0 <HAL_RCC_OscConfig+0x288>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	604b      	str	r3, [r1, #4]
 8008aae:	e025      	b.n	8008afc <HAL_RCC_OscConfig+0x2d4>
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	4b9a      	ldr	r3, [pc, #616]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	061b      	lsls	r3, r3, #24
 8008ac2:	4997      	ldr	r1, [pc, #604]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	604b      	str	r3, [r1, #4]
 8008ac8:	e018      	b.n	8008afc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aca:	4b95      	ldr	r3, [pc, #596]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a94      	ldr	r2, [pc, #592]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad6:	f7f9 ff2f 	bl	8002938 <HAL_GetTick>
 8008ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008adc:	e008      	b.n	8008af0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ade:	f7f9 ff2b 	bl	8002938 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e2ed      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008af0:	4b8b      	ldr	r3, [pc, #556]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f0      	bne.n	8008ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80a9 	beq.w	8008c5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b0a:	4b85      	ldr	r3, [pc, #532]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b14:	4b82      	ldr	r3, [pc, #520]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d007      	beq.n	8008b30 <HAL_RCC_OscConfig+0x308>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b18      	cmp	r3, #24
 8008b24:	d13a      	bne.n	8008b9c <HAL_RCC_OscConfig+0x374>
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d135      	bne.n	8008b9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b30:	4b7b      	ldr	r3, [pc, #492]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_RCC_OscConfig+0x320>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	2b80      	cmp	r3, #128	; 0x80
 8008b42:	d001      	beq.n	8008b48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e2c1      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b48:	f7f9 ff12 	bl	8002970 <HAL_GetREVID>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d817      	bhi.n	8008b86 <HAL_RCC_OscConfig+0x35e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d108      	bne.n	8008b70 <HAL_RCC_OscConfig+0x348>
 8008b5e:	4b70      	ldr	r3, [pc, #448]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b66:	4a6e      	ldr	r2, [pc, #440]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b6e:	e075      	b.n	8008c5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b70:	4b6b      	ldr	r3, [pc, #428]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	069b      	lsls	r3, r3, #26
 8008b7e:	4968      	ldr	r1, [pc, #416]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b84:	e06a      	b.n	8008c5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b86:	4b66      	ldr	r3, [pc, #408]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	4962      	ldr	r1, [pc, #392]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b9a:	e05f      	b.n	8008c5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d042      	beq.n	8008c2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ba4:	4b5e      	ldr	r3, [pc, #376]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a5d      	ldr	r2, [pc, #372]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb0:	f7f9 fec2 	bl	8002938 <HAL_GetTick>
 8008bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bb8:	f7f9 febe 	bl	8002938 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e280      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bca:	4b55      	ldr	r3, [pc, #340]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f0      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bd6:	f7f9 fecb 	bl	8002970 <HAL_GetREVID>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d817      	bhi.n	8008c14 <HAL_RCC_OscConfig+0x3ec>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d108      	bne.n	8008bfe <HAL_RCC_OscConfig+0x3d6>
 8008bec:	4b4c      	ldr	r3, [pc, #304]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008bf4:	4a4a      	ldr	r2, [pc, #296]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bfa:	6053      	str	r3, [r2, #4]
 8008bfc:	e02e      	b.n	8008c5c <HAL_RCC_OscConfig+0x434>
 8008bfe:	4b48      	ldr	r3, [pc, #288]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	069b      	lsls	r3, r3, #26
 8008c0c:	4944      	ldr	r1, [pc, #272]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	604b      	str	r3, [r1, #4]
 8008c12:	e023      	b.n	8008c5c <HAL_RCC_OscConfig+0x434>
 8008c14:	4b42      	ldr	r3, [pc, #264]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	061b      	lsls	r3, r3, #24
 8008c22:	493f      	ldr	r1, [pc, #252]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60cb      	str	r3, [r1, #12]
 8008c28:	e018      	b.n	8008c5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c2a:	4b3d      	ldr	r3, [pc, #244]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3c      	ldr	r2, [pc, #240]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c36:	f7f9 fe7f 	bl	8002938 <HAL_GetTick>
 8008c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c3c:	e008      	b.n	8008c50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c3e:	f7f9 fe7b 	bl	8002938 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e23d      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c50:	4b33      	ldr	r3, [pc, #204]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1f0      	bne.n	8008c3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d036      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d019      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c70:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c74:	4a2a      	ldr	r2, [pc, #168]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c7c:	f7f9 fe5c 	bl	8002938 <HAL_GetTick>
 8008c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c84:	f7f9 fe58 	bl	8002938 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e21a      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c96:	4b22      	ldr	r3, [pc, #136]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0x45c>
 8008ca2:	e018      	b.n	8008cd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb0:	f7f9 fe42 	bl	8002938 <HAL_GetTick>
 8008cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cb8:	f7f9 fe3e 	bl	8002938 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e200      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cca:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f0      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d039      	beq.n	8008d56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d01c      	beq.n	8008d24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cea:	4b0d      	ldr	r3, [pc, #52]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a0c      	ldr	r2, [pc, #48]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cf6:	f7f9 fe1f 	bl	8002938 <HAL_GetTick>
 8008cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cfc:	e008      	b.n	8008d10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cfe:	f7f9 fe1b 	bl	8002938 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d901      	bls.n	8008d10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e1dd      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d10:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <HAL_RCC_OscConfig+0x4f8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0f0      	beq.n	8008cfe <HAL_RCC_OscConfig+0x4d6>
 8008d1c:	e01b      	b.n	8008d56 <HAL_RCC_OscConfig+0x52e>
 8008d1e:	bf00      	nop
 8008d20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d24:	4b9b      	ldr	r3, [pc, #620]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a9a      	ldr	r2, [pc, #616]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d30:	f7f9 fe02 	bl	8002938 <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d38:	f7f9 fdfe 	bl	8002938 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e1c0      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d4a:	4b92      	ldr	r3, [pc, #584]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f0      	bne.n	8008d38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8081 	beq.w	8008e66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d64:	4b8c      	ldr	r3, [pc, #560]	; (8008f98 <HAL_RCC_OscConfig+0x770>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a8b      	ldr	r2, [pc, #556]	; (8008f98 <HAL_RCC_OscConfig+0x770>)
 8008d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d70:	f7f9 fde2 	bl	8002938 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d78:	f7f9 fdde 	bl	8002938 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b64      	cmp	r3, #100	; 0x64
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e1a0      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d8a:	4b83      	ldr	r3, [pc, #524]	; (8008f98 <HAL_RCC_OscConfig+0x770>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0f0      	beq.n	8008d78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d106      	bne.n	8008dac <HAL_RCC_OscConfig+0x584>
 8008d9e:	4b7d      	ldr	r3, [pc, #500]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	4a7c      	ldr	r2, [pc, #496]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	6713      	str	r3, [r2, #112]	; 0x70
 8008daa:	e02d      	b.n	8008e08 <HAL_RCC_OscConfig+0x5e0>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10c      	bne.n	8008dce <HAL_RCC_OscConfig+0x5a6>
 8008db4:	4b77      	ldr	r3, [pc, #476]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a76      	ldr	r2, [pc, #472]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc0:	4b74      	ldr	r3, [pc, #464]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc4:	4a73      	ldr	r2, [pc, #460]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008dc6:	f023 0304 	bic.w	r3, r3, #4
 8008dca:	6713      	str	r3, [r2, #112]	; 0x70
 8008dcc:	e01c      	b.n	8008e08 <HAL_RCC_OscConfig+0x5e0>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	d10c      	bne.n	8008df0 <HAL_RCC_OscConfig+0x5c8>
 8008dd6:	4b6f      	ldr	r3, [pc, #444]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	4a6e      	ldr	r2, [pc, #440]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008ddc:	f043 0304 	orr.w	r3, r3, #4
 8008de0:	6713      	str	r3, [r2, #112]	; 0x70
 8008de2:	4b6c      	ldr	r3, [pc, #432]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de6:	4a6b      	ldr	r2, [pc, #428]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008de8:	f043 0301 	orr.w	r3, r3, #1
 8008dec:	6713      	str	r3, [r2, #112]	; 0x70
 8008dee:	e00b      	b.n	8008e08 <HAL_RCC_OscConfig+0x5e0>
 8008df0:	4b68      	ldr	r3, [pc, #416]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df4:	4a67      	ldr	r2, [pc, #412]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8008dfc:	4b65      	ldr	r3, [pc, #404]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e00:	4a64      	ldr	r2, [pc, #400]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008e02:	f023 0304 	bic.w	r3, r3, #4
 8008e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d015      	beq.n	8008e3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e10:	f7f9 fd92 	bl	8002938 <HAL_GetTick>
 8008e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e16:	e00a      	b.n	8008e2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e18:	f7f9 fd8e 	bl	8002938 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e14e      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e2e:	4b59      	ldr	r3, [pc, #356]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0ee      	beq.n	8008e18 <HAL_RCC_OscConfig+0x5f0>
 8008e3a:	e014      	b.n	8008e66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3c:	f7f9 fd7c 	bl	8002938 <HAL_GetTick>
 8008e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e42:	e00a      	b.n	8008e5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e44:	f7f9 fd78 	bl	8002938 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e138      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e5a:	4b4e      	ldr	r3, [pc, #312]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1ee      	bne.n	8008e44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 812d 	beq.w	80090ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e70:	4b48      	ldr	r3, [pc, #288]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e78:	2b18      	cmp	r3, #24
 8008e7a:	f000 80bd 	beq.w	8008ff8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	f040 809e 	bne.w	8008fc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a41      	ldr	r2, [pc, #260]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e94:	f7f9 fd50 	bl	8002938 <HAL_GetTick>
 8008e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e9a:	e008      	b.n	8008eae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e9c:	f7f9 fd4c 	bl	8002938 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e10e      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eae:	4b39      	ldr	r3, [pc, #228]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f0      	bne.n	8008e9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eba:	4b36      	ldr	r3, [pc, #216]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ebe:	4b37      	ldr	r3, [pc, #220]	; (8008f9c <HAL_RCC_OscConfig+0x774>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008eca:	0112      	lsls	r2, r2, #4
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	4931      	ldr	r1, [pc, #196]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	025b      	lsls	r3, r3, #9
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efc:	3b01      	subs	r3, #1
 8008efe:	061b      	lsls	r3, r3, #24
 8008f00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f04:	4923      	ldr	r1, [pc, #140]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f0a:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	4a21      	ldr	r2, [pc, #132]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f10:	f023 0301 	bic.w	r3, r3, #1
 8008f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f16:	4b1f      	ldr	r3, [pc, #124]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f1a:	4b21      	ldr	r3, [pc, #132]	; (8008fa0 <HAL_RCC_OscConfig+0x778>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f22:	00d2      	lsls	r2, r2, #3
 8008f24:	491b      	ldr	r1, [pc, #108]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f2a:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2e:	f023 020c 	bic.w	r2, r3, #12
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	4917      	ldr	r1, [pc, #92]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f3c:	4b15      	ldr	r3, [pc, #84]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	f023 0202 	bic.w	r2, r3, #2
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f48:	4912      	ldr	r1, [pc, #72]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f4e:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	4a10      	ldr	r2, [pc, #64]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5a:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f66:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f72:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a07      	ldr	r2, [pc, #28]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f78:	f043 0301 	orr.w	r3, r3, #1
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a04      	ldr	r2, [pc, #16]	; (8008f94 <HAL_RCC_OscConfig+0x76c>)
 8008f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8a:	f7f9 fcd5 	bl	8002938 <HAL_GetTick>
 8008f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f90:	e011      	b.n	8008fb6 <HAL_RCC_OscConfig+0x78e>
 8008f92:	bf00      	nop
 8008f94:	58024400 	.word	0x58024400
 8008f98:	58024800 	.word	0x58024800
 8008f9c:	fffffc0c 	.word	0xfffffc0c
 8008fa0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa4:	f7f9 fcc8 	bl	8002938 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e08a      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fb6:	4b47      	ldr	r3, [pc, #284]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0f0      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x77c>
 8008fc2:	e082      	b.n	80090ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc4:	4b43      	ldr	r3, [pc, #268]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a42      	ldr	r2, [pc, #264]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8008fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd0:	f7f9 fcb2 	bl	8002938 <HAL_GetTick>
 8008fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fd6:	e008      	b.n	8008fea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fd8:	f7f9 fcae 	bl	8002938 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e070      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fea:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f0      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x7b0>
 8008ff6:	e068      	b.n	80090ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ff8:	4b36      	ldr	r3, [pc, #216]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ffe:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8009000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009002:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b01      	cmp	r3, #1
 800900a:	d031      	beq.n	8009070 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f003 0203 	and.w	r2, r3, #3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009016:	429a      	cmp	r2, r3
 8009018:	d12a      	bne.n	8009070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009026:	429a      	cmp	r2, r3
 8009028:	d122      	bne.n	8009070 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009034:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009036:	429a      	cmp	r2, r3
 8009038:	d11a      	bne.n	8009070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	0a5b      	lsrs	r3, r3, #9
 800903e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009048:	429a      	cmp	r2, r3
 800904a:	d111      	bne.n	8009070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0c1b      	lsrs	r3, r3, #16
 8009050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800905a:	429a      	cmp	r2, r3
 800905c:	d108      	bne.n	8009070 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	0e1b      	lsrs	r3, r3, #24
 8009062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800906c:	429a      	cmp	r2, r3
 800906e:	d001      	beq.n	8009074 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e02b      	b.n	80090cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009074:	4b17      	ldr	r3, [pc, #92]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	08db      	lsrs	r3, r3, #3
 800907a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800907e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	429a      	cmp	r2, r3
 8009088:	d01f      	beq.n	80090ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800908a:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	4a11      	ldr	r2, [pc, #68]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 8009090:	f023 0301 	bic.w	r3, r3, #1
 8009094:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009096:	f7f9 fc4f 	bl	8002938 <HAL_GetTick>
 800909a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800909c:	bf00      	nop
 800909e:	f7f9 fc4b 	bl	8002938 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d0f9      	beq.n	800909e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 80090ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ae:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <HAL_RCC_OscConfig+0x8b0>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090b6:	00d2      	lsls	r2, r2, #3
 80090b8:	4906      	ldr	r1, [pc, #24]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	4a04      	ldr	r2, [pc, #16]	; (80090d4 <HAL_RCC_OscConfig+0x8ac>)
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3730      	adds	r7, #48	; 0x30
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	58024400 	.word	0x58024400
 80090d8:	ffff0007 	.word	0xffff0007

080090dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e19c      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090f0:	4b8a      	ldr	r3, [pc, #552]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 030f 	and.w	r3, r3, #15
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d910      	bls.n	8009120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fe:	4b87      	ldr	r3, [pc, #540]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f023 020f 	bic.w	r2, r3, #15
 8009106:	4985      	ldr	r1, [pc, #532]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	4313      	orrs	r3, r2
 800910c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800910e:	4b83      	ldr	r3, [pc, #524]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d001      	beq.n	8009120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e184      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d010      	beq.n	800914e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691a      	ldr	r2, [r3, #16]
 8009130:	4b7b      	ldr	r3, [pc, #492]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009138:	429a      	cmp	r2, r3
 800913a:	d908      	bls.n	800914e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800913c:	4b78      	ldr	r3, [pc, #480]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	4975      	ldr	r1, [pc, #468]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800914a:	4313      	orrs	r3, r2
 800914c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d010      	beq.n	800917c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695a      	ldr	r2, [r3, #20]
 800915e:	4b70      	ldr	r3, [pc, #448]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009166:	429a      	cmp	r2, r3
 8009168:	d908      	bls.n	800917c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800916a:	4b6d      	ldr	r3, [pc, #436]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	496a      	ldr	r1, [pc, #424]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009178:	4313      	orrs	r3, r2
 800917a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0310 	and.w	r3, r3, #16
 8009184:	2b00      	cmp	r3, #0
 8009186:	d010      	beq.n	80091aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	4b64      	ldr	r3, [pc, #400]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009194:	429a      	cmp	r2, r3
 8009196:	d908      	bls.n	80091aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009198:	4b61      	ldr	r3, [pc, #388]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	495e      	ldr	r1, [pc, #376]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d010      	beq.n	80091d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	69da      	ldr	r2, [r3, #28]
 80091ba:	4b59      	ldr	r3, [pc, #356]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d908      	bls.n	80091d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091c6:	4b56      	ldr	r3, [pc, #344]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	4953      	ldr	r1, [pc, #332]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d010      	beq.n	8009206 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	4b4d      	ldr	r3, [pc, #308]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d908      	bls.n	8009206 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091f4:	4b4a      	ldr	r3, [pc, #296]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	f023 020f 	bic.w	r2, r3, #15
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	4947      	ldr	r1, [pc, #284]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009202:	4313      	orrs	r3, r2
 8009204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	d055      	beq.n	80092be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009212:	4b43      	ldr	r3, [pc, #268]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	4940      	ldr	r1, [pc, #256]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009220:	4313      	orrs	r3, r2
 8009222:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d107      	bne.n	800923c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800922c:	4b3c      	ldr	r3, [pc, #240]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d121      	bne.n	800927c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e0f6      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	2b03      	cmp	r3, #3
 8009242:	d107      	bne.n	8009254 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009244:	4b36      	ldr	r3, [pc, #216]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d115      	bne.n	800927c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e0ea      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d107      	bne.n	800926c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800925c:	4b30      	ldr	r3, [pc, #192]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e0de      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800926c:	4b2c      	ldr	r3, [pc, #176]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0d6      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800927c:	4b28      	ldr	r3, [pc, #160]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f023 0207 	bic.w	r2, r3, #7
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	4925      	ldr	r1, [pc, #148]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 800928a:	4313      	orrs	r3, r2
 800928c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800928e:	f7f9 fb53 	bl	8002938 <HAL_GetTick>
 8009292:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009294:	e00a      	b.n	80092ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009296:	f7f9 fb4f 	bl	8002938 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d901      	bls.n	80092ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e0be      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ac:	4b1c      	ldr	r3, [pc, #112]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d1eb      	bne.n	8009296 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d010      	beq.n	80092ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d208      	bcs.n	80092ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f023 020f 	bic.w	r2, r3, #15
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	490e      	ldr	r1, [pc, #56]	; (8009320 <HAL_RCC_ClockConfig+0x244>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092ec:	4b0b      	ldr	r3, [pc, #44]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d214      	bcs.n	8009324 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092fa:	4b08      	ldr	r3, [pc, #32]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f023 020f 	bic.w	r2, r3, #15
 8009302:	4906      	ldr	r1, [pc, #24]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	4313      	orrs	r3, r2
 8009308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800930a:	4b04      	ldr	r3, [pc, #16]	; (800931c <HAL_RCC_ClockConfig+0x240>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	429a      	cmp	r2, r3
 8009316:	d005      	beq.n	8009324 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e086      	b.n	800942a <HAL_RCC_ClockConfig+0x34e>
 800931c:	52002000 	.word	0x52002000
 8009320:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	4b3f      	ldr	r3, [pc, #252]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800933c:	429a      	cmp	r2, r3
 800933e:	d208      	bcs.n	8009352 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009340:	4b3c      	ldr	r3, [pc, #240]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	4939      	ldr	r1, [pc, #228]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 800934e:	4313      	orrs	r3, r2
 8009350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d010      	beq.n	8009380 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695a      	ldr	r2, [r3, #20]
 8009362:	4b34      	ldr	r3, [pc, #208]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800936a:	429a      	cmp	r2, r3
 800936c:	d208      	bcs.n	8009380 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	492e      	ldr	r1, [pc, #184]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 800937c:	4313      	orrs	r3, r2
 800937e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0310 	and.w	r3, r3, #16
 8009388:	2b00      	cmp	r3, #0
 800938a:	d010      	beq.n	80093ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699a      	ldr	r2, [r3, #24]
 8009390:	4b28      	ldr	r3, [pc, #160]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009398:	429a      	cmp	r2, r3
 800939a:	d208      	bcs.n	80093ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800939c:	4b25      	ldr	r3, [pc, #148]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	4922      	ldr	r1, [pc, #136]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d010      	beq.n	80093dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69da      	ldr	r2, [r3, #28]
 80093be:	4b1d      	ldr	r3, [pc, #116]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d208      	bcs.n	80093dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80093ca:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	4917      	ldr	r1, [pc, #92]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093dc:	f000 f834 	bl	8009448 <HAL_RCC_GetSysClockFreq>
 80093e0:	4602      	mov	r2, r0
 80093e2:	4b14      	ldr	r3, [pc, #80]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	f003 030f 	and.w	r3, r3, #15
 80093ec:	4912      	ldr	r1, [pc, #72]	; (8009438 <HAL_RCC_ClockConfig+0x35c>)
 80093ee:	5ccb      	ldrb	r3, [r1, r3]
 80093f0:	f003 031f 	and.w	r3, r3, #31
 80093f4:	fa22 f303 	lsr.w	r3, r2, r3
 80093f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093fa:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <HAL_RCC_ClockConfig+0x358>)
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	4a0d      	ldr	r2, [pc, #52]	; (8009438 <HAL_RCC_ClockConfig+0x35c>)
 8009404:	5cd3      	ldrb	r3, [r2, r3]
 8009406:	f003 031f 	and.w	r3, r3, #31
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	fa22 f303 	lsr.w	r3, r2, r3
 8009410:	4a0a      	ldr	r2, [pc, #40]	; (800943c <HAL_RCC_ClockConfig+0x360>)
 8009412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009414:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <HAL_RCC_ClockConfig+0x364>)
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <HAL_RCC_ClockConfig+0x368>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f7f9 fa40 	bl	80028a4 <HAL_InitTick>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	58024400 	.word	0x58024400
 8009438:	0801102c 	.word	0x0801102c
 800943c:	2400008c 	.word	0x2400008c
 8009440:	24000088 	.word	0x24000088
 8009444:	24000090 	.word	0x24000090

08009448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009448:	b480      	push	{r7}
 800944a:	b089      	sub	sp, #36	; 0x24
 800944c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800944e:	4bb3      	ldr	r3, [pc, #716]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009456:	2b18      	cmp	r3, #24
 8009458:	f200 8155 	bhi.w	8009706 <HAL_RCC_GetSysClockFreq+0x2be>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <HAL_RCC_GetSysClockFreq+0x1c>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	080094c9 	.word	0x080094c9
 8009468:	08009707 	.word	0x08009707
 800946c:	08009707 	.word	0x08009707
 8009470:	08009707 	.word	0x08009707
 8009474:	08009707 	.word	0x08009707
 8009478:	08009707 	.word	0x08009707
 800947c:	08009707 	.word	0x08009707
 8009480:	08009707 	.word	0x08009707
 8009484:	080094ef 	.word	0x080094ef
 8009488:	08009707 	.word	0x08009707
 800948c:	08009707 	.word	0x08009707
 8009490:	08009707 	.word	0x08009707
 8009494:	08009707 	.word	0x08009707
 8009498:	08009707 	.word	0x08009707
 800949c:	08009707 	.word	0x08009707
 80094a0:	08009707 	.word	0x08009707
 80094a4:	080094f5 	.word	0x080094f5
 80094a8:	08009707 	.word	0x08009707
 80094ac:	08009707 	.word	0x08009707
 80094b0:	08009707 	.word	0x08009707
 80094b4:	08009707 	.word	0x08009707
 80094b8:	08009707 	.word	0x08009707
 80094bc:	08009707 	.word	0x08009707
 80094c0:	08009707 	.word	0x08009707
 80094c4:	080094fb 	.word	0x080094fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094c8:	4b94      	ldr	r3, [pc, #592]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094d4:	4b91      	ldr	r3, [pc, #580]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	08db      	lsrs	r3, r3, #3
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	4a90      	ldr	r2, [pc, #576]	; (8009720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094e0:	fa22 f303 	lsr.w	r3, r2, r3
 80094e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094e6:	e111      	b.n	800970c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094e8:	4b8d      	ldr	r3, [pc, #564]	; (8009720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094ea:	61bb      	str	r3, [r7, #24]
      break;
 80094ec:	e10e      	b.n	800970c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094ee:	4b8d      	ldr	r3, [pc, #564]	; (8009724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094f0:	61bb      	str	r3, [r7, #24]
      break;
 80094f2:	e10b      	b.n	800970c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094f4:	4b8c      	ldr	r3, [pc, #560]	; (8009728 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094f6:	61bb      	str	r3, [r7, #24]
      break;
 80094f8:	e108      	b.n	800970c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094fa:	4b88      	ldr	r3, [pc, #544]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fe:	f003 0303 	and.w	r3, r3, #3
 8009502:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009504:	4b85      	ldr	r3, [pc, #532]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	091b      	lsrs	r3, r3, #4
 800950a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800950e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009510:	4b82      	ldr	r3, [pc, #520]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800951a:	4b80      	ldr	r3, [pc, #512]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800951c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951e:	08db      	lsrs	r3, r3, #3
 8009520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	fb02 f303 	mul.w	r3, r2, r3
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009532:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80e1 	beq.w	8009700 <HAL_RCC_GetSysClockFreq+0x2b8>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b02      	cmp	r3, #2
 8009542:	f000 8083 	beq.w	800964c <HAL_RCC_GetSysClockFreq+0x204>
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b02      	cmp	r3, #2
 800954a:	f200 80a1 	bhi.w	8009690 <HAL_RCC_GetSysClockFreq+0x248>
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <HAL_RCC_GetSysClockFreq+0x114>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d056      	beq.n	8009608 <HAL_RCC_GetSysClockFreq+0x1c0>
 800955a:	e099      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800955c:	4b6f      	ldr	r3, [pc, #444]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d02d      	beq.n	80095c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009568:	4b6c      	ldr	r3, [pc, #432]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	08db      	lsrs	r3, r3, #3
 800956e:	f003 0303 	and.w	r3, r3, #3
 8009572:	4a6b      	ldr	r2, [pc, #428]	; (8009720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009574:	fa22 f303 	lsr.w	r3, r2, r3
 8009578:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	ee07 3a90 	vmov	s15, r3
 8009580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009592:	4b62      	ldr	r3, [pc, #392]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800972c <HAL_RCC_GetSysClockFreq+0x2e4>
 80095aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80095c2:	e087      	b.n	80096d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009730 <HAL_RCC_GetSysClockFreq+0x2e8>
 80095d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d6:	4b51      	ldr	r3, [pc, #324]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800972c <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009606:	e065      	b.n	80096d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009734 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b40      	ldr	r3, [pc, #256]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a02 	vldr	s12, [r7, #8]
 800962e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800972c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800964a:	e043      	b.n	80096d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009738 <HAL_RCC_GetSysClockFreq+0x2f0>
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b2f      	ldr	r3, [pc, #188]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009672:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800972c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968e:	e021      	b.n	80096d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009734 <HAL_RCC_GetSysClockFreq+0x2ec>
 800969e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a2:	4b1e      	ldr	r3, [pc, #120]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800972c <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80096d4:	4b11      	ldr	r3, [pc, #68]	; (800971c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	0a5b      	lsrs	r3, r3, #9
 80096da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096de:	3301      	adds	r3, #1
 80096e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80096f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f8:	ee17 3a90 	vmov	r3, s15
 80096fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096fe:	e005      	b.n	800970c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	61bb      	str	r3, [r7, #24]
      break;
 8009704:	e002      	b.n	800970c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009706:	4b07      	ldr	r3, [pc, #28]	; (8009724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009708:	61bb      	str	r3, [r7, #24]
      break;
 800970a:	bf00      	nop
  }

  return sysclockfreq;
 800970c:	69bb      	ldr	r3, [r7, #24]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3724      	adds	r7, #36	; 0x24
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
 8009720:	03d09000 	.word	0x03d09000
 8009724:	003d0900 	.word	0x003d0900
 8009728:	017d7840 	.word	0x017d7840
 800972c:	46000000 	.word	0x46000000
 8009730:	4c742400 	.word	0x4c742400
 8009734:	4a742400 	.word	0x4a742400
 8009738:	4bbebc20 	.word	0x4bbebc20

0800973c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009742:	f7ff fe81 	bl	8009448 <HAL_RCC_GetSysClockFreq>
 8009746:	4602      	mov	r2, r0
 8009748:	4b10      	ldr	r3, [pc, #64]	; (800978c <HAL_RCC_GetHCLKFreq+0x50>)
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	490f      	ldr	r1, [pc, #60]	; (8009790 <HAL_RCC_GetHCLKFreq+0x54>)
 8009754:	5ccb      	ldrb	r3, [r1, r3]
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	fa22 f303 	lsr.w	r3, r2, r3
 800975e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <HAL_RCC_GetHCLKFreq+0x50>)
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	4a09      	ldr	r2, [pc, #36]	; (8009790 <HAL_RCC_GetHCLKFreq+0x54>)
 800976a:	5cd3      	ldrb	r3, [r2, r3]
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	fa22 f303 	lsr.w	r3, r2, r3
 8009776:	4a07      	ldr	r2, [pc, #28]	; (8009794 <HAL_RCC_GetHCLKFreq+0x58>)
 8009778:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800977a:	4a07      	ldr	r2, [pc, #28]	; (8009798 <HAL_RCC_GetHCLKFreq+0x5c>)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <HAL_RCC_GetHCLKFreq+0x58>)
 8009782:	681b      	ldr	r3, [r3, #0]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	58024400 	.word	0x58024400
 8009790:	0801102c 	.word	0x0801102c
 8009794:	2400008c 	.word	0x2400008c
 8009798:	24000088 	.word	0x24000088

0800979c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097a0:	f7ff ffcc 	bl	800973c <HAL_RCC_GetHCLKFreq>
 80097a4:	4602      	mov	r2, r0
 80097a6:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	091b      	lsrs	r3, r3, #4
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	4904      	ldr	r1, [pc, #16]	; (80097c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097b2:	5ccb      	ldrb	r3, [r1, r3]
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097bc:	4618      	mov	r0, r3
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	58024400 	.word	0x58024400
 80097c4:	0801102c 	.word	0x0801102c

080097c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097cc:	f7ff ffb6 	bl	800973c <HAL_RCC_GetHCLKFreq>
 80097d0:	4602      	mov	r2, r0
 80097d2:	4b06      	ldr	r3, [pc, #24]	; (80097ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097de:	5ccb      	ldrb	r3, [r1, r3]
 80097e0:	f003 031f 	and.w	r3, r3, #31
 80097e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	58024400 	.word	0x58024400
 80097f0:	0801102c 	.word	0x0801102c

080097f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097f8:	b0ca      	sub	sp, #296	; 0x128
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009800:	2300      	movs	r3, #0
 8009802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009806:	2300      	movs	r3, #0
 8009808:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009818:	2500      	movs	r5, #0
 800981a:	ea54 0305 	orrs.w	r3, r4, r5
 800981e:	d049      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009826:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800982a:	d02f      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800982c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009830:	d828      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009836:	d01a      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800983c:	d822      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009846:	d007      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009848:	e01c      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984a:	4bb8      	ldr	r3, [pc, #736]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	4ab7      	ldr	r2, [pc, #732]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009856:	e01a      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985c:	3308      	adds	r3, #8
 800985e:	2102      	movs	r1, #2
 8009860:	4618      	mov	r0, r3
 8009862:	f002 fb61 	bl	800bf28 <RCCEx_PLL2_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800986c:	e00f      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009872:	3328      	adds	r3, #40	; 0x28
 8009874:	2102      	movs	r1, #2
 8009876:	4618      	mov	r0, r3
 8009878:	f002 fc08 	bl	800c08c <RCCEx_PLL3_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009882:	e004      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800988a:	e000      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800988c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800988e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009896:	4ba5      	ldr	r3, [pc, #660]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a4:	4aa1      	ldr	r2, [pc, #644]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098a6:	430b      	orrs	r3, r1
 80098a8:	6513      	str	r3, [r2, #80]	; 0x50
 80098aa:	e003      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80098c0:	f04f 0900 	mov.w	r9, #0
 80098c4:	ea58 0309 	orrs.w	r3, r8, r9
 80098c8:	d047      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80098ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d82a      	bhi.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80098d4:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	080098ff 	.word	0x080098ff
 80098e4:	08009915 	.word	0x08009915
 80098e8:	08009933 	.word	0x08009933
 80098ec:	08009933 	.word	0x08009933
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098f0:	4b8e      	ldr	r3, [pc, #568]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4a8d      	ldr	r2, [pc, #564]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098fc:	e01a      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009902:	3308      	adds	r3, #8
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f002 fb0e 	bl	800bf28 <RCCEx_PLL2_Config>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009912:	e00f      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009918:	3328      	adds	r3, #40	; 0x28
 800991a:	2100      	movs	r1, #0
 800991c:	4618      	mov	r0, r3
 800991e:	f002 fbb5 	bl	800c08c <RCCEx_PLL3_Config>
 8009922:	4603      	mov	r3, r0
 8009924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009928:	e004      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009930:	e000      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800993c:	4b7b      	ldr	r3, [pc, #492]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800993e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009940:	f023 0107 	bic.w	r1, r3, #7
 8009944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994a:	4a78      	ldr	r2, [pc, #480]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800994c:	430b      	orrs	r3, r1
 800994e:	6513      	str	r3, [r2, #80]	; 0x50
 8009950:	e003      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009966:	f04f 0b00 	mov.w	fp, #0
 800996a:	ea5a 030b 	orrs.w	r3, sl, fp
 800996e:	d04c      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997a:	d030      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800997c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009980:	d829      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009982:	2bc0      	cmp	r3, #192	; 0xc0
 8009984:	d02d      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009986:	2bc0      	cmp	r3, #192	; 0xc0
 8009988:	d825      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800998a:	2b80      	cmp	r3, #128	; 0x80
 800998c:	d018      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800998e:	2b80      	cmp	r3, #128	; 0x80
 8009990:	d821      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d007      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800999a:	e01c      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999c:	4b63      	ldr	r3, [pc, #396]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	4a62      	ldr	r2, [pc, #392]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099a8:	e01c      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ae:	3308      	adds	r3, #8
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f002 fab8 	bl	800bf28 <RCCEx_PLL2_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099be:	e011      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c4:	3328      	adds	r3, #40	; 0x28
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f002 fb5f 	bl	800c08c <RCCEx_PLL3_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099d4:	e006      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099dc:	e002      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80099e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10a      	bne.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80099ec:	4b4f      	ldr	r3, [pc, #316]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fa:	4a4c      	ldr	r2, [pc, #304]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099fc:	430b      	orrs	r3, r1
 80099fe:	6513      	str	r3, [r2, #80]	; 0x50
 8009a00:	e003      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a24:	460b      	mov	r3, r1
 8009a26:	4313      	orrs	r3, r2
 8009a28:	d053      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a36:	d035      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a3c:	d82e      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a42:	d031      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a48:	d828      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a4e:	d01a      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a54:	d822      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a5e:	d007      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009a60:	e01c      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a62:	4b32      	ldr	r3, [pc, #200]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	4a31      	ldr	r2, [pc, #196]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a6e:	e01c      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a74:	3308      	adds	r3, #8
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f002 fa55 	bl	800bf28 <RCCEx_PLL2_Config>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a84:	e011      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8a:	3328      	adds	r3, #40	; 0x28
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 fafc 	bl	800c08c <RCCEx_PLL3_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a9a:	e006      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa2:	e002      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009aa4:	bf00      	nop
 8009aa6:	e000      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10b      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ab2:	4b1e      	ldr	r3, [pc, #120]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ac2:	4a1a      	ldr	r2, [pc, #104]	; (8009b2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ac8:	e003      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ae8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009aec:	460b      	mov	r3, r1
 8009aee:	4313      	orrs	r3, r2
 8009af0:	d056      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009afe:	d038      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b04:	d831      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b0a:	d034      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b10:	d82b      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b16:	d01d      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b1c:	d825      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d006      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b26:	d00a      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b28:	e01f      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b2a:	bf00      	nop
 8009b2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b30:	4ba2      	ldr	r3, [pc, #648]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	4aa1      	ldr	r2, [pc, #644]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b3c:	e01c      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b42:	3308      	adds	r3, #8
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f002 f9ee 	bl	800bf28 <RCCEx_PLL2_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b52:	e011      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b58:	3328      	adds	r3, #40	; 0x28
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 fa95 	bl	800c08c <RCCEx_PLL3_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b68:	e006      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b70:	e002      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009b72:	bf00      	nop
 8009b74:	e000      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b80:	4b8e      	ldr	r3, [pc, #568]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b90:	4a8a      	ldr	r2, [pc, #552]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b92:	430b      	orrs	r3, r1
 8009b94:	6593      	str	r3, [r2, #88]	; 0x58
 8009b96:	e003      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009bac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009bb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	d03a      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	2b30      	cmp	r3, #48	; 0x30
 8009bc8:	d01f      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009bca:	2b30      	cmp	r3, #48	; 0x30
 8009bcc:	d819      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d00c      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	d815      	bhi.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d019      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d111      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bde:	4b77      	ldr	r3, [pc, #476]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4a76      	ldr	r2, [pc, #472]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009bea:	e011      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	2102      	movs	r1, #2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f002 f997 	bl	800bf28 <RCCEx_PLL2_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c00:	e006      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c08:	e002      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e000      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c18:	4b68      	ldr	r3, [pc, #416]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c26:	4a65      	ldr	r2, [pc, #404]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c2c:	e003      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4313      	orrs	r3, r2
 8009c54:	d051      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c60:	d035      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c66:	d82e      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c6c:	d031      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009c6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c72:	d828      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c78:	d01a      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7e:	d822      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c88:	d007      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009c8a:	e01c      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c8c:	4b4b      	ldr	r3, [pc, #300]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	4a4a      	ldr	r2, [pc, #296]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c98:	e01c      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f002 f940 	bl	800bf28 <RCCEx_PLL2_Config>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cae:	e011      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb4:	3328      	adds	r3, #40	; 0x28
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f002 f9e7 	bl	800c08c <RCCEx_PLL3_Config>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009cdc:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cea:	4a34      	ldr	r2, [pc, #208]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6513      	str	r3, [r2, #80]	; 0x50
 8009cf0:	e003      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d14:	460b      	mov	r3, r1
 8009d16:	4313      	orrs	r3, r2
 8009d18:	d056      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d24:	d033      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d2a:	d82c      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d30:	d02f      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d36:	d826      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d3c:	d02b      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d42:	d820      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d48:	d012      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d4e:	d81a      	bhi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d022      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d58:	d115      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5e:	3308      	adds	r3, #8
 8009d60:	2101      	movs	r1, #1
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 f8e0 	bl	800bf28 <RCCEx_PLL2_Config>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d6e:	e015      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d74:	3328      	adds	r3, #40	; 0x28
 8009d76:	2101      	movs	r1, #1
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f002 f987 	bl	800c08c <RCCEx_PLL3_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d84:	e00a      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d8c:	e006      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d8e:	bf00      	nop
 8009d90:	e004      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d92:	bf00      	nop
 8009d94:	e002      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d96:	bf00      	nop
 8009d98:	e000      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10d      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009db2:	4a02      	ldr	r2, [pc, #8]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6513      	str	r3, [r2, #80]	; 0x50
 8009db8:	e006      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009dba:	bf00      	nop
 8009dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009dde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4313      	orrs	r3, r2
 8009de6:	d055      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009df4:	d033      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dfa:	d82c      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e00:	d02f      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e06:	d826      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e0c:	d02b      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e12:	d820      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e18:	d012      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e1e:	d81a      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d022      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e28:	d115      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2e:	3308      	adds	r3, #8
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f002 f878 	bl	800bf28 <RCCEx_PLL2_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e3e:	e015      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	3328      	adds	r3, #40	; 0x28
 8009e46:	2101      	movs	r1, #1
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f002 f91f 	bl	800c08c <RCCEx_PLL3_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e54:	e00a      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e5c:	e006      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e5e:	bf00      	nop
 8009e60:	e004      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e62:	bf00      	nop
 8009e64:	e002      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e66:	bf00      	nop
 8009e68:	e000      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10b      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e74:	4ba3      	ldr	r3, [pc, #652]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e84:	4a9f      	ldr	r2, [pc, #636]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e86:	430b      	orrs	r3, r1
 8009e88:	6593      	str	r3, [r2, #88]	; 0x58
 8009e8a:	e003      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	d037      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ebe:	d00e      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec4:	d816      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d018      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ece:	d111      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed0:	4b8c      	ldr	r3, [pc, #560]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	4a8b      	ldr	r2, [pc, #556]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009edc:	e00f      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f002 f81e 	bl	800bf28 <RCCEx_PLL2_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ef2:	e004      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009efa:	e000      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10a      	bne.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f06:	4b7f      	ldr	r3, [pc, #508]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f14:	4a7b      	ldr	r2, [pc, #492]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f16:	430b      	orrs	r3, r1
 8009f18:	6513      	str	r3, [r2, #80]	; 0x50
 8009f1a:	e003      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f34:	2300      	movs	r3, #0
 8009f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4313      	orrs	r3, r2
 8009f42:	d039      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d81c      	bhi.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f91 	.word	0x08009f91
 8009f58:	08009f65 	.word	0x08009f65
 8009f5c:	08009f73 	.word	0x08009f73
 8009f60:	08009f91 	.word	0x08009f91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f64:	4b67      	ldr	r3, [pc, #412]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a66      	ldr	r2, [pc, #408]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f70:	e00f      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f76:	3308      	adds	r3, #8
 8009f78:	2102      	movs	r1, #2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 ffd4 	bl	800bf28 <RCCEx_PLL2_Config>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f86:	e004      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f8e:	e000      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f9a:	4b5a      	ldr	r3, [pc, #360]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9e:	f023 0103 	bic.w	r1, r3, #3
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fa8:	4a56      	ldr	r2, [pc, #344]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009faa:	430b      	orrs	r3, r1
 8009fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fae:	e003      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f000 809f 	beq.w	800a118 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fda:	4b4b      	ldr	r3, [pc, #300]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a4a      	ldr	r2, [pc, #296]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fe6:	f7f8 fca7 	bl	8002938 <HAL_GetTick>
 8009fea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fee:	e00b      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ff0:	f7f8 fca2 	bl	8002938 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	2b64      	cmp	r3, #100	; 0x64
 8009ffe:	d903      	bls.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a006:	e005      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a008:	4b3f      	ldr	r3, [pc, #252]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0ed      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d179      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a01c:	4b39      	ldr	r3, [pc, #228]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a01e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a028:	4053      	eors	r3, r2
 800a02a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d015      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a032:	4b34      	ldr	r3, [pc, #208]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a03a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a03e:	4b31      	ldr	r3, [pc, #196]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a042:	4a30      	ldr	r2, [pc, #192]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a048:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a04a:	4b2e      	ldr	r3, [pc, #184]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04e:	4a2d      	ldr	r2, [pc, #180]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a054:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a056:	4a2b      	ldr	r2, [pc, #172]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a05c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a06a:	d118      	bne.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a06c:	f7f8 fc64 	bl	8002938 <HAL_GetTick>
 800a070:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a074:	e00d      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a076:	f7f8 fc5f 	bl	8002938 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a080:	1ad2      	subs	r2, r2, r3
 800a082:	f241 3388 	movw	r3, #5000	; 0x1388
 800a086:	429a      	cmp	r2, r3
 800a088:	d903      	bls.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a090:	e005      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a092:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a096:	f003 0302 	and.w	r3, r3, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0eb      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a09e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d129      	bne.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0b6:	d10e      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a0b8:	4b12      	ldr	r3, [pc, #72]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0c8:	091a      	lsrs	r2, r3, #4
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	4a0d      	ldr	r2, [pc, #52]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	6113      	str	r3, [r2, #16]
 800a0d4:	e005      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	4a0a      	ldr	r2, [pc, #40]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a0e0:	6113      	str	r3, [r2, #16]
 800a0e2:	4b08      	ldr	r3, [pc, #32]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0f2:	4a04      	ldr	r2, [pc, #16]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0f4:	430b      	orrs	r3, r1
 800a0f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f8:	e00e      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a102:	e009      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a104:	58024400 	.word	0x58024400
 800a108:	58024800 	.word	0x58024800
 800a10c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a114:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 0301 	and.w	r3, r2, #1
 800a124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a128:	2300      	movs	r3, #0
 800a12a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a12e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	f000 8089 	beq.w	800a24c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a140:	2b28      	cmp	r3, #40	; 0x28
 800a142:	d86b      	bhi.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a144:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14a:	bf00      	nop
 800a14c:	0800a225 	.word	0x0800a225
 800a150:	0800a21d 	.word	0x0800a21d
 800a154:	0800a21d 	.word	0x0800a21d
 800a158:	0800a21d 	.word	0x0800a21d
 800a15c:	0800a21d 	.word	0x0800a21d
 800a160:	0800a21d 	.word	0x0800a21d
 800a164:	0800a21d 	.word	0x0800a21d
 800a168:	0800a21d 	.word	0x0800a21d
 800a16c:	0800a1f1 	.word	0x0800a1f1
 800a170:	0800a21d 	.word	0x0800a21d
 800a174:	0800a21d 	.word	0x0800a21d
 800a178:	0800a21d 	.word	0x0800a21d
 800a17c:	0800a21d 	.word	0x0800a21d
 800a180:	0800a21d 	.word	0x0800a21d
 800a184:	0800a21d 	.word	0x0800a21d
 800a188:	0800a21d 	.word	0x0800a21d
 800a18c:	0800a207 	.word	0x0800a207
 800a190:	0800a21d 	.word	0x0800a21d
 800a194:	0800a21d 	.word	0x0800a21d
 800a198:	0800a21d 	.word	0x0800a21d
 800a19c:	0800a21d 	.word	0x0800a21d
 800a1a0:	0800a21d 	.word	0x0800a21d
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a21d 	.word	0x0800a21d
 800a1ac:	0800a225 	.word	0x0800a225
 800a1b0:	0800a21d 	.word	0x0800a21d
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a21d 	.word	0x0800a21d
 800a1bc:	0800a21d 	.word	0x0800a21d
 800a1c0:	0800a21d 	.word	0x0800a21d
 800a1c4:	0800a21d 	.word	0x0800a21d
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a225 	.word	0x0800a225
 800a1d0:	0800a21d 	.word	0x0800a21d
 800a1d4:	0800a21d 	.word	0x0800a21d
 800a1d8:	0800a21d 	.word	0x0800a21d
 800a1dc:	0800a21d 	.word	0x0800a21d
 800a1e0:	0800a21d 	.word	0x0800a21d
 800a1e4:	0800a21d 	.word	0x0800a21d
 800a1e8:	0800a21d 	.word	0x0800a21d
 800a1ec:	0800a225 	.word	0x0800a225
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 fe95 	bl	800bf28 <RCCEx_PLL2_Config>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a204:	e00f      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20a:	3328      	adds	r3, #40	; 0x28
 800a20c:	2101      	movs	r1, #1
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 ff3c 	bl	800c08c <RCCEx_PLL3_Config>
 800a214:	4603      	mov	r3, r0
 800a216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a21a:	e004      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a222:	e000      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a224:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a22e:	4bbf      	ldr	r3, [pc, #764]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a232:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23c:	4abb      	ldr	r2, [pc, #748]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a23e:	430b      	orrs	r3, r1
 800a240:	6553      	str	r3, [r2, #84]	; 0x54
 800a242:	e003      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f002 0302 	and.w	r3, r2, #2
 800a258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a25c:	2300      	movs	r3, #0
 800a25e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a262:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a266:	460b      	mov	r3, r1
 800a268:	4313      	orrs	r3, r2
 800a26a:	d041      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a272:	2b05      	cmp	r3, #5
 800a274:	d824      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a276:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a2c9 	.word	0x0800a2c9
 800a280:	0800a295 	.word	0x0800a295
 800a284:	0800a2ab 	.word	0x0800a2ab
 800a288:	0800a2c9 	.word	0x0800a2c9
 800a28c:	0800a2c9 	.word	0x0800a2c9
 800a290:	0800a2c9 	.word	0x0800a2c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a298:	3308      	adds	r3, #8
 800a29a:	2101      	movs	r1, #1
 800a29c:	4618      	mov	r0, r3
 800a29e:	f001 fe43 	bl	800bf28 <RCCEx_PLL2_Config>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2a8:	e00f      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ae:	3328      	adds	r3, #40	; 0x28
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 feea 	bl	800c08c <RCCEx_PLL3_Config>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2be:	e004      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a2d2:	4b96      	ldr	r3, [pc, #600]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d6:	f023 0107 	bic.w	r1, r3, #7
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2e0:	4a92      	ldr	r2, [pc, #584]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	6553      	str	r3, [r2, #84]	; 0x54
 800a2e6:	e003      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f002 0304 	and.w	r3, r2, #4
 800a2fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a300:	2300      	movs	r3, #0
 800a302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a306:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4313      	orrs	r3, r2
 800a30e:	d044      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a318:	2b05      	cmp	r3, #5
 800a31a:	d825      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a31c:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a33d 	.word	0x0800a33d
 800a32c:	0800a353 	.word	0x0800a353
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a371 	.word	0x0800a371
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a340:	3308      	adds	r3, #8
 800a342:	2101      	movs	r1, #1
 800a344:	4618      	mov	r0, r3
 800a346:	f001 fdef 	bl	800bf28 <RCCEx_PLL2_Config>
 800a34a:	4603      	mov	r3, r0
 800a34c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a350:	e00f      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a356:	3328      	adds	r3, #40	; 0x28
 800a358:	2101      	movs	r1, #1
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 fe96 	bl	800c08c <RCCEx_PLL3_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a366:	e004      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a36e:	e000      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a370:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a37a:	4b6c      	ldr	r3, [pc, #432]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37e:	f023 0107 	bic.w	r1, r3, #7
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a38a:	4a68      	ldr	r2, [pc, #416]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6593      	str	r3, [r2, #88]	; 0x58
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f002 0320 	and.w	r3, r2, #32
 800a3a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d055      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3c6:	d033      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3cc:	d82c      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d2:	d02f      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d8:	d826      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3de:	d02b      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a3e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3e4:	d820      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3ea:	d012      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f0:	d81a      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d022      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a3f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fa:	d115      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a400:	3308      	adds	r3, #8
 800a402:	2100      	movs	r1, #0
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fd8f 	bl	800bf28 <RCCEx_PLL2_Config>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a410:	e015      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a416:	3328      	adds	r3, #40	; 0x28
 800a418:	2102      	movs	r1, #2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 fe36 	bl	800c08c <RCCEx_PLL3_Config>
 800a420:	4603      	mov	r3, r0
 800a422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a426:	e00a      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a42e:	e006      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a430:	bf00      	nop
 800a432:	e004      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a434:	bf00      	nop
 800a436:	e002      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a438:	bf00      	nop
 800a43a:	e000      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a43c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10b      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a446:	4b39      	ldr	r3, [pc, #228]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a456:	4a35      	ldr	r2, [pc, #212]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a458:	430b      	orrs	r3, r1
 800a45a:	6553      	str	r3, [r2, #84]	; 0x54
 800a45c:	e003      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a476:	2300      	movs	r3, #0
 800a478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a47c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a480:	460b      	mov	r3, r1
 800a482:	4313      	orrs	r3, r2
 800a484:	d058      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a48e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a492:	d033      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a494:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a498:	d82c      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a49e:	d02f      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a4:	d826      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4aa:	d02b      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a4ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4b0:	d820      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4b6:	d012      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4bc:	d81a      	bhi.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d022      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c6:	d115      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f001 fd29 	bl	800bf28 <RCCEx_PLL2_Config>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a4dc:	e015      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e2:	3328      	adds	r3, #40	; 0x28
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f001 fdd0 	bl	800c08c <RCCEx_PLL3_Config>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a4f2:	e00a      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4fa:	e006      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a4fc:	bf00      	nop
 800a4fe:	e004      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a500:	bf00      	nop
 800a502:	e002      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a504:	bf00      	nop
 800a506:	e000      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a50a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10e      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a512:	4b06      	ldr	r3, [pc, #24]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a516:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a522:	4a02      	ldr	r2, [pc, #8]	; (800a52c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a524:	430b      	orrs	r3, r1
 800a526:	6593      	str	r3, [r2, #88]	; 0x58
 800a528:	e006      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a52a:	bf00      	nop
 800a52c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a548:	2300      	movs	r3, #0
 800a54a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a54e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a552:	460b      	mov	r3, r1
 800a554:	4313      	orrs	r3, r2
 800a556:	d055      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a560:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a564:	d033      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a566:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a56a:	d82c      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a56c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a570:	d02f      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a576:	d826      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a578:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a57c:	d02b      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a57e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a582:	d820      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a588:	d012      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a58a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a58e:	d81a      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d022      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a598:	d115      	bne.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59e:	3308      	adds	r3, #8
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 fcc0 	bl	800bf28 <RCCEx_PLL2_Config>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5ae:	e015      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b4:	3328      	adds	r3, #40	; 0x28
 800a5b6:	2102      	movs	r1, #2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 fd67 	bl	800c08c <RCCEx_PLL3_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5c4:	e00a      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5cc:	e006      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5ce:	bf00      	nop
 800a5d0:	e004      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5d2:	bf00      	nop
 800a5d4:	e002      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5d6:	bf00      	nop
 800a5d8:	e000      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10b      	bne.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5e4:	4ba1      	ldr	r3, [pc, #644]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5f4:	4a9d      	ldr	r2, [pc, #628]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5f6:	430b      	orrs	r3, r1
 800a5f8:	6593      	str	r3, [r2, #88]	; 0x58
 800a5fa:	e003      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f002 0308 	and.w	r3, r2, #8
 800a610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a614:	2300      	movs	r3, #0
 800a616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a61a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a61e:	460b      	mov	r3, r1
 800a620:	4313      	orrs	r3, r2
 800a622:	d01e      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a62c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a630:	d10c      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a636:	3328      	adds	r3, #40	; 0x28
 800a638:	2102      	movs	r1, #2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 fd26 	bl	800c08c <RCCEx_PLL3_Config>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a64c:	4b87      	ldr	r3, [pc, #540]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a650:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a65c:	4a83      	ldr	r2, [pc, #524]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a65e:	430b      	orrs	r3, r1
 800a660:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f002 0310 	and.w	r3, r2, #16
 800a66e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a672:	2300      	movs	r3, #0
 800a674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a678:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a67c:	460b      	mov	r3, r1
 800a67e:	4313      	orrs	r3, r2
 800a680:	d01e      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68e:	d10c      	bne.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a694:	3328      	adds	r3, #40	; 0x28
 800a696:	2102      	movs	r1, #2
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 fcf7 	bl	800c08c <RCCEx_PLL3_Config>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6aa:	4b70      	ldr	r3, [pc, #448]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ba:	4a6c      	ldr	r2, [pc, #432]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a6cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	d03e      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ec:	d022      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a6ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f2:	d81b      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6fc:	d00b      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a6fe:	e015      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a704:	3308      	adds	r3, #8
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 fc0d 	bl	800bf28 <RCCEx_PLL2_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a714:	e00f      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71a:	3328      	adds	r3, #40	; 0x28
 800a71c:	2102      	movs	r1, #2
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 fcb4 	bl	800c08c <RCCEx_PLL3_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a72a:	e004      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a732:	e000      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a73e:	4b4b      	ldr	r3, [pc, #300]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a742:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a74e:	4a47      	ldr	r2, [pc, #284]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a750:	430b      	orrs	r3, r1
 800a752:	6593      	str	r3, [r2, #88]	; 0x58
 800a754:	e003      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a75a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a76a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a76c:	2300      	movs	r3, #0
 800a76e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a770:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a774:	460b      	mov	r3, r1
 800a776:	4313      	orrs	r3, r2
 800a778:	d03b      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a786:	d01f      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a78c:	d818      	bhi.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a78e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a792:	d003      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a798:	d007      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a79a:	e011      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a79c:	4b33      	ldr	r3, [pc, #204]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	4a32      	ldr	r2, [pc, #200]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7a8:	e00f      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ae:	3328      	adds	r3, #40	; 0x28
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 fc6a 	bl	800c08c <RCCEx_PLL3_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7be:	e004      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7c6:	e000      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10b      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a7d2:	4b26      	ldr	r3, [pc, #152]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e2:	4a22      	ldr	r2, [pc, #136]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6553      	str	r3, [r2, #84]	; 0x54
 800a7e8:	e003      	b.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a7fe:	673b      	str	r3, [r7, #112]	; 0x70
 800a800:	2300      	movs	r3, #0
 800a802:	677b      	str	r3, [r7, #116]	; 0x74
 800a804:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a808:	460b      	mov	r3, r1
 800a80a:	4313      	orrs	r3, r2
 800a80c:	d034      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a814:	2b00      	cmp	r3, #0
 800a816:	d003      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81c:	d007      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a81e:	e011      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a820:	4b12      	ldr	r3, [pc, #72]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	4a11      	ldr	r2, [pc, #68]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a82c:	e00e      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	3308      	adds	r3, #8
 800a834:	2102      	movs	r1, #2
 800a836:	4618      	mov	r0, r3
 800a838:	f001 fb76 	bl	800bf28 <RCCEx_PLL2_Config>
 800a83c:	4603      	mov	r3, r0
 800a83e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a842:	e003      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10d      	bne.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a862:	4a02      	ldr	r2, [pc, #8]	; (800a86c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a864:	430b      	orrs	r3, r1
 800a866:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a868:	e006      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a86a:	bf00      	nop
 800a86c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a884:	66bb      	str	r3, [r7, #104]	; 0x68
 800a886:	2300      	movs	r3, #0
 800a888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a88a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a88e:	460b      	mov	r3, r1
 800a890:	4313      	orrs	r3, r2
 800a892:	d00c      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a898:	3328      	adds	r3, #40	; 0x28
 800a89a:	2102      	movs	r1, #2
 800a89c:	4618      	mov	r0, r3
 800a89e:	f001 fbf5 	bl	800c08c <RCCEx_PLL3_Config>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a8ba:	663b      	str	r3, [r7, #96]	; 0x60
 800a8bc:	2300      	movs	r3, #0
 800a8be:	667b      	str	r3, [r7, #100]	; 0x64
 800a8c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	d038      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8d6:	d018      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8dc:	d811      	bhi.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a8de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e2:	d014      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e8:	d80b      	bhi.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d011      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f2:	d106      	bne.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f4:	4bc3      	ldr	r3, [pc, #780]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	4ac2      	ldr	r2, [pc, #776]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a900:	e008      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a908:	e004      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a90a:	bf00      	nop
 800a90c:	e002      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a90e:	bf00      	nop
 800a910:	e000      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a912:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10b      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a91c:	4bb9      	ldr	r3, [pc, #740]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a920:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a92c:	4ab5      	ldr	r2, [pc, #724]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a92e:	430b      	orrs	r3, r1
 800a930:	6553      	str	r3, [r2, #84]	; 0x54
 800a932:	e003      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a948:	65bb      	str	r3, [r7, #88]	; 0x58
 800a94a:	2300      	movs	r3, #0
 800a94c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a94e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a952:	460b      	mov	r3, r1
 800a954:	4313      	orrs	r3, r2
 800a956:	d009      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a958:	4baa      	ldr	r3, [pc, #680]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a95c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a966:	4aa7      	ldr	r2, [pc, #668]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a968:	430b      	orrs	r3, r1
 800a96a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a978:	653b      	str	r3, [r7, #80]	; 0x50
 800a97a:	2300      	movs	r3, #0
 800a97c:	657b      	str	r3, [r7, #84]	; 0x54
 800a97e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a982:	460b      	mov	r3, r1
 800a984:	4313      	orrs	r3, r2
 800a986:	d00a      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a988:	4b9e      	ldr	r3, [pc, #632]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a994:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a998:	4a9a      	ldr	r2, [pc, #616]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a99a:	430b      	orrs	r3, r1
 800a99c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a9aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	d009      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9ba:	4b92      	ldr	r3, [pc, #584]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c8:	4a8e      	ldr	r2, [pc, #568]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a9da:	643b      	str	r3, [r7, #64]	; 0x40
 800a9dc:	2300      	movs	r3, #0
 800a9de:	647b      	str	r3, [r7, #68]	; 0x44
 800a9e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	d00e      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a9ea:	4b86      	ldr	r3, [pc, #536]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	4a85      	ldr	r2, [pc, #532]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9f4:	6113      	str	r3, [r2, #16]
 800a9f6:	4b83      	ldr	r3, [pc, #524]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f8:	6919      	ldr	r1, [r3, #16]
 800a9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aa02:	4a80      	ldr	r2, [pc, #512]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa04:	430b      	orrs	r3, r1
 800aa06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa14:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa16:	2300      	movs	r3, #0
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4313      	orrs	r3, r2
 800aa22:	d009      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa24:	4b77      	ldr	r3, [pc, #476]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa28:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa32:	4a74      	ldr	r2, [pc, #464]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa34:	430b      	orrs	r3, r1
 800aa36:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa44:	633b      	str	r3, [r7, #48]	; 0x30
 800aa46:	2300      	movs	r3, #0
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34
 800aa4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4313      	orrs	r3, r2
 800aa52:	d00a      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa54:	4b6b      	ldr	r3, [pc, #428]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa58:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa64:	4a67      	ldr	r2, [pc, #412]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa66:	430b      	orrs	r3, r1
 800aa68:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	2100      	movs	r1, #0
 800aa74:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aa80:	460b      	mov	r3, r1
 800aa82:	4313      	orrs	r3, r2
 800aa84:	d011      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8a:	3308      	adds	r3, #8
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 fa4a 	bl	800bf28 <RCCEx_PLL2_Config>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	2100      	movs	r1, #0
 800aab4:	6239      	str	r1, [r7, #32]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	627b      	str	r3, [r7, #36]	; 0x24
 800aabc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aac0:	460b      	mov	r3, r1
 800aac2:	4313      	orrs	r3, r2
 800aac4:	d011      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaca:	3308      	adds	r3, #8
 800aacc:	2101      	movs	r1, #1
 800aace:	4618      	mov	r0, r3
 800aad0:	f001 fa2a 	bl	800bf28 <RCCEx_PLL2_Config>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	61b9      	str	r1, [r7, #24]
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	61fb      	str	r3, [r7, #28]
 800aafc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab00:	460b      	mov	r3, r1
 800ab02:	4313      	orrs	r3, r2
 800ab04:	d011      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	2102      	movs	r1, #2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 fa0a 	bl	800bf28 <RCCEx_PLL2_Config>
 800ab14:	4603      	mov	r3, r0
 800ab16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	2100      	movs	r1, #0
 800ab34:	6139      	str	r1, [r7, #16]
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab40:	460b      	mov	r3, r1
 800ab42:	4313      	orrs	r3, r2
 800ab44:	d011      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4a:	3328      	adds	r3, #40	; 0x28
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 fa9c 	bl	800c08c <RCCEx_PLL3_Config>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ab5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ab6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	2100      	movs	r1, #0
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ab80:	460b      	mov	r3, r1
 800ab82:	4313      	orrs	r3, r2
 800ab84:	d011      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab8a:	3328      	adds	r3, #40	; 0x28
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 fa7c 	bl	800c08c <RCCEx_PLL3_Config>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800abaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	2100      	movs	r1, #0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abc0:	460b      	mov	r3, r1
 800abc2:	4313      	orrs	r3, r2
 800abc4:	d011      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abca:	3328      	adds	r3, #40	; 0x28
 800abcc:	2102      	movs	r1, #2
 800abce:	4618      	mov	r0, r3
 800abd0:	f001 fa5c 	bl	800c08c <RCCEx_PLL3_Config>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800abea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	e000      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800abfe:	46bd      	mov	sp, r7
 800ac00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac04:	58024400 	.word	0x58024400

0800ac08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b090      	sub	sp, #64	; 0x40
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ac1a:	430b      	orrs	r3, r1
 800ac1c:	f040 8094 	bne.w	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ac20:	4b9e      	ldr	r3, [pc, #632]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac24:	f003 0307 	and.w	r3, r3, #7
 800ac28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	f200 8087 	bhi.w	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac4d 	.word	0x0800ac4d
 800ac3c:	0800ac75 	.word	0x0800ac75
 800ac40:	0800ac9d 	.word	0x0800ac9d
 800ac44:	0800ad39 	.word	0x0800ad39
 800ac48:	0800acc5 	.word	0x0800acc5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac4c:	4b93      	ldr	r3, [pc, #588]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac58:	d108      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f001 f810 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac68:	f000 bd45 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac70:	f000 bd41 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac74:	4b89      	ldr	r3, [pc, #548]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac80:	d108      	bne.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac82:	f107 0318 	add.w	r3, r7, #24
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 fd54 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac90:	f000 bd31 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac98:	f000 bd2d 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac9c:	4b7f      	ldr	r3, [pc, #508]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aca8:	d108      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acaa:	f107 030c 	add.w	r3, r7, #12
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 fe94 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb8:	f000 bd1d 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc0:	f000 bd19 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acc4:	4b75      	ldr	r3, [pc, #468]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800accc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acce:	4b73      	ldr	r3, [pc, #460]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0304 	and.w	r3, r3, #4
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d10c      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800acda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d109      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace0:	4b6e      	ldr	r3, [pc, #440]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	08db      	lsrs	r3, r3, #3
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	4a6d      	ldr	r2, [pc, #436]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800acec:	fa22 f303 	lsr.w	r3, r2, r3
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf2:	e01f      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acf4:	4b69      	ldr	r3, [pc, #420]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad00:	d106      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad08:	d102      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad0a:	4b66      	ldr	r3, [pc, #408]	; (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad0e:	e011      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad10:	4b62      	ldr	r3, [pc, #392]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1c:	d106      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad24:	d102      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad26:	4b60      	ldr	r3, [pc, #384]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2a:	e003      	b.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad30:	f000 bce1 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad34:	f000 bcdf 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad38:	4b5c      	ldr	r3, [pc, #368]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad3c:	f000 bcdb 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad44:	f000 bcd7 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad4c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ad50:	430b      	orrs	r3, r1
 800ad52:	f040 80ad 	bne.w	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ad56:	4b51      	ldr	r3, [pc, #324]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad5a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad66:	d056      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad6e:	f200 8090 	bhi.w	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	2bc0      	cmp	r3, #192	; 0xc0
 800ad76:	f000 8088 	beq.w	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	2bc0      	cmp	r3, #192	; 0xc0
 800ad7e:	f200 8088 	bhi.w	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	2b80      	cmp	r3, #128	; 0x80
 800ad86:	d032      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	2b80      	cmp	r3, #128	; 0x80
 800ad8c:	f200 8081 	bhi.w	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2b40      	cmp	r3, #64	; 0x40
 800ad9a:	d014      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ad9c:	e079      	b.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad9e:	4b3f      	ldr	r3, [pc, #252]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ada6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adaa:	d108      	bne.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 ff67 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adba:	f000 bc9c 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc2:	f000 bc98 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adc6:	4b35      	ldr	r3, [pc, #212]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800add2:	d108      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add4:	f107 0318 	add.w	r3, r7, #24
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fcab 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade2:	f000 bc88 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adea:	f000 bc84 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adee:	4b2b      	ldr	r3, [pc, #172]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adfa:	d108      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fdeb 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0a:	f000 bc74 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae12:	f000 bc70 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae16:	4b21      	ldr	r3, [pc, #132]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae20:	4b1e      	ldr	r3, [pc, #120]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	d10c      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ae2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d109      	bne.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae32:	4b1a      	ldr	r3, [pc, #104]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	08db      	lsrs	r3, r3, #3
 800ae38:	f003 0303 	and.w	r3, r3, #3
 800ae3c:	4a18      	ldr	r2, [pc, #96]	; (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ae3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae44:	e01f      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae46:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae52:	d106      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ae54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae5a:	d102      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae5c:	4b11      	ldr	r3, [pc, #68]	; (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae60:	e011      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae62:	4b0e      	ldr	r3, [pc, #56]	; (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae6e:	d106      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae76:	d102      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7c:	e003      	b.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae82:	f000 bc38 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae86:	f000 bc36 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae8a:	4b08      	ldr	r3, [pc, #32]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ae8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae8e:	f000 bc32 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae96:	f000 bc2e 	b.w	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae9a:	bf00      	nop
 800ae9c:	58024400 	.word	0x58024400
 800aea0:	03d09000 	.word	0x03d09000
 800aea4:	003d0900 	.word	0x003d0900
 800aea8:	017d7840 	.word	0x017d7840
 800aeac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aeb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	f040 809c 	bne.w	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aebe:	4b9e      	ldr	r3, [pc, #632]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aec6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aece:	d054      	beq.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aed6:	f200 808b 	bhi.w	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aee0:	f000 8083 	beq.w	800afea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aeea:	f200 8081 	bhi.w	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aef4:	d02f      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aefc:	d878      	bhi.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af0a:	d012      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800af0c:	e070      	b.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af0e:	4b8a      	ldr	r3, [pc, #552]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af1a:	d107      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af20:	4618      	mov	r0, r3
 800af22:	f000 feaf 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2a:	e3e4      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af30:	e3e1      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af32:	4b81      	ldr	r3, [pc, #516]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af40:	f107 0318 	add.w	r3, r7, #24
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fbf5 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4e:	e3d2      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af54:	e3cf      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af56:	4b78      	ldr	r3, [pc, #480]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af62:	d107      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af64:	f107 030c 	add.w	r3, r7, #12
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fd37 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af72:	e3c0      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af78:	e3bd      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af7a:	4b6f      	ldr	r3, [pc, #444]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af84:	4b6c      	ldr	r3, [pc, #432]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d10c      	bne.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800af90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af96:	4b68      	ldr	r3, [pc, #416]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	08db      	lsrs	r3, r3, #3
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	4a66      	ldr	r2, [pc, #408]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afa2:	fa22 f303 	lsr.w	r3, r2, r3
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afa8:	e01e      	b.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afaa:	4b63      	ldr	r3, [pc, #396]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afb6:	d106      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800afb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afbe:	d102      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afc0:	4b5f      	ldr	r3, [pc, #380]	; (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afc4:	e010      	b.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afc6:	4b5c      	ldr	r3, [pc, #368]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afd2:	d106      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800afd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afda:	d102      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afdc:	4b59      	ldr	r3, [pc, #356]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800afde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe0:	e002      	b.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afe6:	e386      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afe8:	e385      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afea:	4b57      	ldr	r3, [pc, #348]	; (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afee:	e382      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff4:	e37f      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800affa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800affe:	430b      	orrs	r3, r1
 800b000:	f040 80a7 	bne.w	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b004:	4b4c      	ldr	r3, [pc, #304]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b008:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b00c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b014:	d055      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b01c:	f200 8096 	bhi.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b026:	f000 8084 	beq.w	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b030:	f200 808c 	bhi.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b03a:	d030      	beq.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b042:	f200 8083 	bhi.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b052:	d012      	beq.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b054:	e07a      	b.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b056:	4b38      	ldr	r3, [pc, #224]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b05e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b062:	d107      	bne.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fe0b 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b072:	e340      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b078:	e33d      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b07a:	4b2f      	ldr	r3, [pc, #188]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b086:	d107      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b088:	f107 0318 	add.w	r3, r7, #24
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 fb51 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b096:	e32e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b09c:	e32b      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b09e:	4b26      	ldr	r3, [pc, #152]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0aa:	d107      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0ac:	f107 030c 	add.w	r3, r7, #12
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fc93 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ba:	e31c      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e319      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0cc:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d10c      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d109      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0de:	4b16      	ldr	r3, [pc, #88]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	08db      	lsrs	r3, r3, #3
 800b0e4:	f003 0303 	and.w	r3, r3, #3
 800b0e8:	4a14      	ldr	r2, [pc, #80]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f0:	e01e      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0f2:	4b11      	ldr	r3, [pc, #68]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fe:	d106      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b106:	d102      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b108:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b10c:	e010      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b10e:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b11a:	d106      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b122:	d102      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b124:	4b07      	ldr	r3, [pc, #28]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b128:	e002      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b12e:	e2e2      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b130:	e2e1      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b132:	4b05      	ldr	r3, [pc, #20]	; (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b136:	e2de      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b138:	58024400 	.word	0x58024400
 800b13c:	03d09000 	.word	0x03d09000
 800b140:	003d0900 	.word	0x003d0900
 800b144:	017d7840 	.word	0x017d7840
 800b148:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b150:	e2d1      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b156:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b15a:	430b      	orrs	r3, r1
 800b15c:	f040 809c 	bne.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b160:	4b93      	ldr	r3, [pc, #588]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b164:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b168:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b170:	d054      	beq.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b178:	f200 808b 	bhi.w	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b182:	f000 8083 	beq.w	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b18c:	f200 8081 	bhi.w	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b196:	d02f      	beq.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b19e:	d878      	bhi.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ac:	d012      	beq.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b1ae:	e070      	b.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1b0:	4b7f      	ldr	r3, [pc, #508]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1bc:	d107      	bne.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fd5e 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1cc:	e293      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1d2:	e290      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1d4:	4b76      	ldr	r3, [pc, #472]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1e0:	d107      	bne.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e2:	f107 0318 	add.w	r3, r7, #24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 faa4 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f0:	e281      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1f6:	e27e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1f8:	4b6d      	ldr	r3, [pc, #436]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b204:	d107      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b206:	f107 030c 	add.w	r3, r7, #12
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 fbe6 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b214:	e26f      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21a:	e26c      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b21c:	4b64      	ldr	r3, [pc, #400]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b21e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b224:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b226:	4b62      	ldr	r3, [pc, #392]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d10c      	bne.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b234:	2b00      	cmp	r3, #0
 800b236:	d109      	bne.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b238:	4b5d      	ldr	r3, [pc, #372]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	08db      	lsrs	r3, r3, #3
 800b23e:	f003 0303 	and.w	r3, r3, #3
 800b242:	4a5c      	ldr	r2, [pc, #368]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b244:	fa22 f303 	lsr.w	r3, r2, r3
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b24a:	e01e      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b24c:	4b58      	ldr	r3, [pc, #352]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b258:	d106      	bne.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b260:	d102      	bne.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b262:	4b55      	ldr	r3, [pc, #340]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b266:	e010      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b268:	4b51      	ldr	r3, [pc, #324]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b274:	d106      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b27c:	d102      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b27e:	4b4f      	ldr	r3, [pc, #316]	; (800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b282:	e002      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b288:	e235      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b28a:	e234      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b28c:	4b4c      	ldr	r3, [pc, #304]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b290:	e231      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b296:	e22e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b29c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b2a0:	430b      	orrs	r3, r1
 800b2a2:	f040 808f 	bne.w	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b2a6:	4b42      	ldr	r3, [pc, #264]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b2ae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2b6:	d06b      	beq.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2be:	d874      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2c6:	d056      	beq.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2ce:	d86c      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2d6:	d03b      	beq.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b2de:	d864      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2e6:	d021      	beq.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2ee:	d85c      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2fc:	d004      	beq.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b2fe:	e054      	b.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b300:	f7fe fa4c 	bl	800979c <HAL_RCC_GetPCLK1Freq>
 800b304:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b306:	e1f6      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b308:	4b29      	ldr	r3, [pc, #164]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b314:	d107      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b316:	f107 0318 	add.w	r3, r7, #24
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fa0a 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b324:	e1e7      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32a:	e1e4      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b32c:	4b20      	ldr	r3, [pc, #128]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b338:	d107      	bne.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b33a:	f107 030c 	add.w	r3, r7, #12
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fb4c 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b348:	e1d5      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b34e:	e1d2      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b350:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d109      	bne.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b35c:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	08db      	lsrs	r3, r3, #3
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	4a13      	ldr	r2, [pc, #76]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b368:	fa22 f303 	lsr.w	r3, r2, r3
 800b36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b36e:	e1c2      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b374:	e1bf      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b376:	4b0e      	ldr	r3, [pc, #56]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b382:	d102      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b388:	e1b5      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38e:	e1b2      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b390:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b39c:	d102      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b39e:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3a2:	e1a8      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3a8:	e1a5      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ae:	e1a2      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3b0:	58024400 	.word	0x58024400
 800b3b4:	03d09000 	.word	0x03d09000
 800b3b8:	003d0900 	.word	0x003d0900
 800b3bc:	017d7840 	.word	0x017d7840
 800b3c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3c8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	d173      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b3d0:	4b9c      	ldr	r3, [pc, #624]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b3d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3e0:	d02f      	beq.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3e8:	d863      	bhi.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d004      	beq.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f6:	d012      	beq.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b3f8:	e05b      	b.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3fa:	4b92      	ldr	r3, [pc, #584]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b406:	d107      	bne.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b408:	f107 0318 	add.w	r3, r7, #24
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f991 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b416:	e16e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b41c:	e16b      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b41e:	4b89      	ldr	r3, [pc, #548]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b42a:	d107      	bne.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b42c:	f107 030c 	add.w	r3, r7, #12
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fad3 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b43a:	e15c      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b440:	e159      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b442:	4b80      	ldr	r3, [pc, #512]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b446:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b44a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b44c:	4b7d      	ldr	r3, [pc, #500]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b04      	cmp	r3, #4
 800b456:	d10c      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b45e:	4b79      	ldr	r3, [pc, #484]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	08db      	lsrs	r3, r3, #3
 800b464:	f003 0303 	and.w	r3, r3, #3
 800b468:	4a77      	ldr	r2, [pc, #476]	; (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b46a:	fa22 f303 	lsr.w	r3, r2, r3
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b470:	e01e      	b.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b472:	4b74      	ldr	r3, [pc, #464]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b47e:	d106      	bne.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b486:	d102      	bne.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b488:	4b70      	ldr	r3, [pc, #448]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b48c:	e010      	b.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b48e:	4b6d      	ldr	r3, [pc, #436]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b49a:	d106      	bne.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b49e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a2:	d102      	bne.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4a4:	4b6a      	ldr	r3, [pc, #424]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4a8:	e002      	b.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4ae:	e122      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4b0:	e121      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4b6:	e11e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4bc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b4c0:	430b      	orrs	r3, r1
 800b4c2:	d133      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b4c4:	4b5f      	ldr	r3, [pc, #380]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d004      	beq.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4da:	d012      	beq.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b4dc:	e023      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4de:	4b59      	ldr	r3, [pc, #356]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ea:	d107      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 fbc7 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4fa:	e0fc      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b500:	e0f9      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b502:	4b50      	ldr	r3, [pc, #320]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b50a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b50e:	d107      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b510:	f107 0318 	add.w	r3, r7, #24
 800b514:	4618      	mov	r0, r3
 800b516:	f000 f90d 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b51e:	e0ea      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b524:	e0e7      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b52a:	e0e4      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b52c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b530:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b534:	430b      	orrs	r3, r1
 800b536:	f040 808d 	bne.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b53a:	4b42      	ldr	r3, [pc, #264]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b53e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b542:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b54a:	d06b      	beq.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b552:	d874      	bhi.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b55a:	d056      	beq.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b562:	d86c      	bhi.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b56a:	d03b      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b572:	d864      	bhi.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b57a:	d021      	beq.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b582:	d85c      	bhi.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b586:	2b00      	cmp	r3, #0
 800b588:	d004      	beq.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b590:	d004      	beq.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b592:	e054      	b.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b594:	f000 f8b8 	bl	800b708 <HAL_RCCEx_GetD3PCLK1Freq>
 800b598:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b59a:	e0ac      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b59c:	4b29      	ldr	r3, [pc, #164]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a8:	d107      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5aa:	f107 0318 	add.w	r3, r7, #24
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f8c0 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b8:	e09d      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5be:	e09a      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5c0:	4b20      	ldr	r3, [pc, #128]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5cc:	d107      	bne.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fa02 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5dc:	e08b      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e2:	e088      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5e4:	4b17      	ldr	r3, [pc, #92]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d109      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5f0:	4b14      	ldr	r3, [pc, #80]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	08db      	lsrs	r3, r3, #3
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	4a13      	ldr	r2, [pc, #76]	; (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b602:	e078      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b608:	e075      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b60a:	4b0e      	ldr	r3, [pc, #56]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b616:	d102      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b618:	4b0c      	ldr	r3, [pc, #48]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b61c:	e06b      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b622:	e068      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b62c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b630:	d102      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b632:	4b07      	ldr	r3, [pc, #28]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b636:	e05e      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b63c:	e05b      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b642:	e058      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b644:	58024400 	.word	0x58024400
 800b648:	03d09000 	.word	0x03d09000
 800b64c:	003d0900 	.word	0x003d0900
 800b650:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b658:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b65c:	430b      	orrs	r3, r1
 800b65e:	d148      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b660:	4b27      	ldr	r3, [pc, #156]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b668:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b670:	d02a      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b678:	d838      	bhi.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d004      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b686:	d00d      	beq.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b688:	e030      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b68a:	4b1d      	ldr	r3, [pc, #116]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b696:	d102      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b698:	4b1a      	ldr	r3, [pc, #104]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b69c:	e02b      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a2:	e028      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6a4:	4b16      	ldr	r3, [pc, #88]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6b0:	d107      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fae4 	bl	800bc84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6c0:	e019      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6c6:	e016      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6c8:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6d4:	d107      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6d6:	f107 0318 	add.w	r3, r7, #24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 f82a 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e4:	e007      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ea:	e004      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f0:	e001      	b.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3740      	adds	r7, #64	; 0x40
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	58024400 	.word	0x58024400
 800b704:	017d7840 	.word	0x017d7840

0800b708 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b70c:	f7fe f816 	bl	800973c <HAL_RCC_GetHCLKFreq>
 800b710:	4602      	mov	r2, r0
 800b712:	4b06      	ldr	r3, [pc, #24]	; (800b72c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	091b      	lsrs	r3, r3, #4
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	4904      	ldr	r1, [pc, #16]	; (800b730 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b71e:	5ccb      	ldrb	r3, [r1, r3]
 800b720:	f003 031f 	and.w	r3, r3, #31
 800b724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b728:	4618      	mov	r0, r3
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	58024400 	.word	0x58024400
 800b730:	0801102c 	.word	0x0801102c

0800b734 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b734:	b480      	push	{r7}
 800b736:	b089      	sub	sp, #36	; 0x24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b73c:	4ba1      	ldr	r3, [pc, #644]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b740:	f003 0303 	and.w	r3, r3, #3
 800b744:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b746:	4b9f      	ldr	r3, [pc, #636]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74a:	0b1b      	lsrs	r3, r3, #12
 800b74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b750:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b752:	4b9c      	ldr	r3, [pc, #624]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	091b      	lsrs	r3, r3, #4
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b75e:	4b99      	ldr	r3, [pc, #612]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b762:	08db      	lsrs	r3, r3, #3
 800b764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	fb02 f303 	mul.w	r3, r2, r3
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 8111 	beq.w	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b02      	cmp	r3, #2
 800b786:	f000 8083 	beq.w	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	f200 80a1 	bhi.w	800b8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d003      	beq.n	800b7a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d056      	beq.n	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b79e:	e099      	b.n	800b8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7a0:	4b88      	ldr	r3, [pc, #544]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0320 	and.w	r3, r3, #32
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d02d      	beq.n	800b808 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ac:	4b85      	ldr	r3, [pc, #532]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	08db      	lsrs	r3, r3, #3
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	4a84      	ldr	r2, [pc, #528]	; (800b9c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	ee07 3a90 	vmov	s15, r3
 800b7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7d6:	4b7b      	ldr	r3, [pc, #492]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b806:	e087      	b.n	800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	ee07 3a90 	vmov	s15, r3
 800b80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b812:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81a:	4b6a      	ldr	r3, [pc, #424]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b82e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b84a:	e065      	b.n	800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b856:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b85e:	4b59      	ldr	r3, [pc, #356]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b872:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b88e:	e043      	b.n	800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	ee07 3a90 	vmov	s15, r3
 800b896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8a2:	4b48      	ldr	r3, [pc, #288]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8d2:	e021      	b.n	800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	ee07 3a90 	vmov	s15, r3
 800b8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8e6:	4b37      	ldr	r3, [pc, #220]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b916:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b918:	4b2a      	ldr	r3, [pc, #168]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91c:	0a5b      	lsrs	r3, r3, #9
 800b91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b92e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b932:	edd7 6a07 	vldr	s13, [r7, #28]
 800b936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b93a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b93e:	ee17 2a90 	vmov	r2, s15
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b946:	4b1f      	ldr	r3, [pc, #124]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	0c1b      	lsrs	r3, r3, #16
 800b94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b95c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b960:	edd7 6a07 	vldr	s13, [r7, #28]
 800b964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b96c:	ee17 2a90 	vmov	r2, s15
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b974:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	0e1b      	lsrs	r3, r3, #24
 800b97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b98a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b98e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99a:	ee17 2a90 	vmov	r2, s15
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	609a      	str	r2, [r3, #8]
}
 800b9b6:	bf00      	nop
 800b9b8:	3724      	adds	r7, #36	; 0x24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	58024400 	.word	0x58024400
 800b9c8:	03d09000 	.word	0x03d09000
 800b9cc:	46000000 	.word	0x46000000
 800b9d0:	4c742400 	.word	0x4c742400
 800b9d4:	4a742400 	.word	0x4a742400
 800b9d8:	4bbebc20 	.word	0x4bbebc20

0800b9dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b089      	sub	sp, #36	; 0x24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9e4:	4ba1      	ldr	r3, [pc, #644]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e8:	f003 0303 	and.w	r3, r3, #3
 800b9ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b9ee:	4b9f      	ldr	r3, [pc, #636]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	0d1b      	lsrs	r3, r3, #20
 800b9f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b9fa:	4b9c      	ldr	r3, [pc, #624]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fe:	0a1b      	lsrs	r3, r3, #8
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba06:	4b99      	ldr	r3, [pc, #612]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba0a:	08db      	lsrs	r3, r3, #3
 800ba0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	fb02 f303 	mul.w	r3, r2, r3
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 8111 	beq.w	800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	f000 8083 	beq.w	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	f200 80a1 	bhi.w	800bb7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d056      	beq.n	800baf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba46:	e099      	b.n	800bb7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba48:	4b88      	ldr	r3, [pc, #544]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0320 	and.w	r3, r3, #32
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d02d      	beq.n	800bab0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba54:	4b85      	ldr	r3, [pc, #532]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	08db      	lsrs	r3, r3, #3
 800ba5a:	f003 0303 	and.w	r3, r3, #3
 800ba5e:	4a84      	ldr	r2, [pc, #528]	; (800bc70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba60:	fa22 f303 	lsr.w	r3, r2, r3
 800ba64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	ee07 3a90 	vmov	s15, r3
 800ba6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba7e:	4b7b      	ldr	r3, [pc, #492]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba92:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800baae:	e087      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800babe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac2:	4b6a      	ldr	r3, [pc, #424]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baf2:	e065      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb06:	4b59      	ldr	r3, [pc, #356]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb36:	e043      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb4a:	4b48      	ldr	r3, [pc, #288]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb52:	ee07 3a90 	vmov	s15, r3
 800bb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb7a:	e021      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb8e:	4b37      	ldr	r3, [pc, #220]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bba2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bbc0:	4b2a      	ldr	r3, [pc, #168]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc4:	0a5b      	lsrs	r3, r3, #9
 800bbc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbca:	ee07 3a90 	vmov	s15, r3
 800bbce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbda:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe6:	ee17 2a90 	vmov	r2, s15
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bbee:	4b1f      	ldr	r3, [pc, #124]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf2:	0c1b      	lsrs	r3, r3, #16
 800bbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf8:	ee07 3a90 	vmov	s15, r3
 800bbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc08:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc14:	ee17 2a90 	vmov	r2, s15
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc1c:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc20:	0e1b      	lsrs	r3, r3, #24
 800bc22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc26:	ee07 3a90 	vmov	s15, r3
 800bc2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc36:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc42:	ee17 2a90 	vmov	r2, s15
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc4a:	e008      	b.n	800bc5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	609a      	str	r2, [r3, #8]
}
 800bc5e:	bf00      	nop
 800bc60:	3724      	adds	r7, #36	; 0x24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	03d09000 	.word	0x03d09000
 800bc74:	46000000 	.word	0x46000000
 800bc78:	4c742400 	.word	0x4c742400
 800bc7c:	4a742400 	.word	0x4a742400
 800bc80:	4bbebc20 	.word	0x4bbebc20

0800bc84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b089      	sub	sp, #36	; 0x24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc8c:	4ba0      	ldr	r3, [pc, #640]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	f003 0303 	and.w	r3, r3, #3
 800bc94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bc96:	4b9e      	ldr	r3, [pc, #632]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	091b      	lsrs	r3, r3, #4
 800bc9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bca0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bca2:	4b9b      	ldr	r3, [pc, #620]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bcac:	4b98      	ldr	r3, [pc, #608]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb0:	08db      	lsrs	r3, r3, #3
 800bcb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	fb02 f303 	mul.w	r3, r2, r3
 800bcbc:	ee07 3a90 	vmov	s15, r3
 800bcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 8111 	beq.w	800bef2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	f000 8083 	beq.w	800bdde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	f200 80a1 	bhi.w	800be22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d056      	beq.n	800bd9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bcec:	e099      	b.n	800be22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcee:	4b88      	ldr	r3, [pc, #544]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0320 	and.w	r3, r3, #32
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d02d      	beq.n	800bd56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcfa:	4b85      	ldr	r3, [pc, #532]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	08db      	lsrs	r3, r3, #3
 800bd00:	f003 0303 	and.w	r3, r3, #3
 800bd04:	4a83      	ldr	r2, [pc, #524]	; (800bf14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bd06:	fa22 f303 	lsr.w	r3, r2, r3
 800bd0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd24:	4b7a      	ldr	r3, [pc, #488]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2c:	ee07 3a90 	vmov	s15, r3
 800bd30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd34:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd38:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd54:	e087      	b.n	800be66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	ee07 3a90 	vmov	s15, r3
 800bd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd68:	4b69      	ldr	r3, [pc, #420]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd78:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd98:	e065      	b.n	800be66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	ee07 3a90 	vmov	s15, r3
 800bda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bda8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdac:	4b58      	ldr	r3, [pc, #352]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb4:	ee07 3a90 	vmov	s15, r3
 800bdb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bddc:	e043      	b.n	800be66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	ee07 3a90 	vmov	s15, r3
 800bde4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bdec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdf0:	4b47      	ldr	r3, [pc, #284]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf8:	ee07 3a90 	vmov	s15, r3
 800bdfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be00:	ed97 6a03 	vldr	s12, [r7, #12]
 800be04:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be20:	e021      	b.n	800be66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	ee07 3a90 	vmov	s15, r3
 800be28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bf1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be34:	4b36      	ldr	r3, [pc, #216]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3c:	ee07 3a90 	vmov	s15, r3
 800be40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be44:	ed97 6a03 	vldr	s12, [r7, #12]
 800be48:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be64:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800be66:	4b2a      	ldr	r3, [pc, #168]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6a:	0a5b      	lsrs	r3, r3, #9
 800be6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be70:	ee07 3a90 	vmov	s15, r3
 800be74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be80:	edd7 6a07 	vldr	s13, [r7, #28]
 800be84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be8c:	ee17 2a90 	vmov	r2, s15
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800be94:	4b1e      	ldr	r3, [pc, #120]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be98:	0c1b      	lsrs	r3, r3, #16
 800be9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beae:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beba:	ee17 2a90 	vmov	r2, s15
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bec2:	4b13      	ldr	r3, [pc, #76]	; (800bf10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec6:	0e1b      	lsrs	r3, r3, #24
 800bec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800becc:	ee07 3a90 	vmov	s15, r3
 800bed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bedc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee8:	ee17 2a90 	vmov	r2, s15
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bef0:	e008      	b.n	800bf04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	609a      	str	r2, [r3, #8]
}
 800bf04:	bf00      	nop
 800bf06:	3724      	adds	r7, #36	; 0x24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	58024400 	.word	0x58024400
 800bf14:	03d09000 	.word	0x03d09000
 800bf18:	46000000 	.word	0x46000000
 800bf1c:	4c742400 	.word	0x4c742400
 800bf20:	4a742400 	.word	0x4a742400
 800bf24:	4bbebc20 	.word	0x4bbebc20

0800bf28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf36:	4b53      	ldr	r3, [pc, #332]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d101      	bne.n	800bf46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e099      	b.n	800c07a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bf46:	4b4f      	ldr	r3, [pc, #316]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a4e      	ldr	r2, [pc, #312]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bf4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf52:	f7f6 fcf1 	bl	8002938 <HAL_GetTick>
 800bf56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf58:	e008      	b.n	800bf6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf5a:	f7f6 fced 	bl	8002938 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d901      	bls.n	800bf6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e086      	b.n	800c07a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf6c:	4b45      	ldr	r3, [pc, #276]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1f0      	bne.n	800bf5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bf78:	4b42      	ldr	r3, [pc, #264]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	031b      	lsls	r3, r3, #12
 800bf86:	493f      	ldr	r1, [pc, #252]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	628b      	str	r3, [r1, #40]	; 0x28
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	025b      	lsls	r3, r3, #9
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	041b      	lsls	r3, r3, #16
 800bfaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	061b      	lsls	r3, r3, #24
 800bfb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfbc:	4931      	ldr	r1, [pc, #196]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bfc2:	4b30      	ldr	r3, [pc, #192]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	492d      	ldr	r1, [pc, #180]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bfd4:	4b2b      	ldr	r3, [pc, #172]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	f023 0220 	bic.w	r2, r3, #32
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	4928      	ldr	r1, [pc, #160]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bfe6:	4b27      	ldr	r3, [pc, #156]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	4a26      	ldr	r2, [pc, #152]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bfec:	f023 0310 	bic.w	r3, r3, #16
 800bff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bff2:	4b24      	ldr	r3, [pc, #144]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800bff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <RCCEx_PLL2_Config+0x160>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	69d2      	ldr	r2, [r2, #28]
 800bffe:	00d2      	lsls	r2, r2, #3
 800c000:	4920      	ldr	r1, [pc, #128]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c002:	4313      	orrs	r3, r2
 800c004:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c006:	4b1f      	ldr	r3, [pc, #124]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	4a1e      	ldr	r2, [pc, #120]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c00c:	f043 0310 	orr.w	r3, r3, #16
 800c010:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d106      	bne.n	800c026 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c018:	4b1a      	ldr	r3, [pc, #104]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	4a19      	ldr	r2, [pc, #100]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c01e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c022:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c024:	e00f      	b.n	800c046 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d106      	bne.n	800c03a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c02c:	4b15      	ldr	r3, [pc, #84]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	4a14      	ldr	r2, [pc, #80]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c036:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c038:	e005      	b.n	800c046 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c03a:	4b12      	ldr	r3, [pc, #72]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	4a11      	ldr	r2, [pc, #68]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c044:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c046:	4b0f      	ldr	r3, [pc, #60]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a0e      	ldr	r2, [pc, #56]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c04c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c052:	f7f6 fc71 	bl	8002938 <HAL_GetTick>
 800c056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c058:	e008      	b.n	800c06c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c05a:	f7f6 fc6d 	bl	8002938 <HAL_GetTick>
 800c05e:	4602      	mov	r2, r0
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	2b02      	cmp	r3, #2
 800c066:	d901      	bls.n	800c06c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e006      	b.n	800c07a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c06c:	4b05      	ldr	r3, [pc, #20]	; (800c084 <RCCEx_PLL2_Config+0x15c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0f0      	beq.n	800c05a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	58024400 	.word	0x58024400
 800c088:	ffff0007 	.word	0xffff0007

0800c08c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c09a:	4b53      	ldr	r3, [pc, #332]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	f003 0303 	and.w	r3, r3, #3
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d101      	bne.n	800c0aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e099      	b.n	800c1de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c0aa:	4b4f      	ldr	r3, [pc, #316]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a4e      	ldr	r2, [pc, #312]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c0b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0b6:	f7f6 fc3f 	bl	8002938 <HAL_GetTick>
 800c0ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0bc:	e008      	b.n	800c0d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0be:	f7f6 fc3b 	bl	8002938 <HAL_GetTick>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d901      	bls.n	800c0d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e086      	b.n	800c1de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0d0:	4b45      	ldr	r3, [pc, #276]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1f0      	bne.n	800c0be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c0dc:	4b42      	ldr	r3, [pc, #264]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	051b      	lsls	r3, r3, #20
 800c0ea:	493f      	ldr	r1, [pc, #252]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	628b      	str	r3, [r1, #40]	; 0x28
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	025b      	lsls	r3, r3, #9
 800c102:	b29b      	uxth	r3, r3
 800c104:	431a      	orrs	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	041b      	lsls	r3, r3, #16
 800c10e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c112:	431a      	orrs	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	3b01      	subs	r3, #1
 800c11a:	061b      	lsls	r3, r3, #24
 800c11c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c120:	4931      	ldr	r1, [pc, #196]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c122:	4313      	orrs	r3, r2
 800c124:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c126:	4b30      	ldr	r3, [pc, #192]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	492d      	ldr	r1, [pc, #180]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c134:	4313      	orrs	r3, r2
 800c136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c138:	4b2b      	ldr	r3, [pc, #172]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	699b      	ldr	r3, [r3, #24]
 800c144:	4928      	ldr	r1, [pc, #160]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c146:	4313      	orrs	r3, r2
 800c148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c14a:	4b27      	ldr	r3, [pc, #156]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14e:	4a26      	ldr	r2, [pc, #152]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c156:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c15a:	4b24      	ldr	r3, [pc, #144]	; (800c1ec <RCCEx_PLL3_Config+0x160>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	69d2      	ldr	r2, [r2, #28]
 800c162:	00d2      	lsls	r2, r2, #3
 800c164:	4920      	ldr	r1, [pc, #128]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c166:	4313      	orrs	r3, r2
 800c168:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c16a:	4b1f      	ldr	r3, [pc, #124]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	4a1e      	ldr	r2, [pc, #120]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c17c:	4b1a      	ldr	r3, [pc, #104]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c180:	4a19      	ldr	r2, [pc, #100]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c182:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c186:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c188:	e00f      	b.n	800c1aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d106      	bne.n	800c19e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c190:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c194:	4a14      	ldr	r2, [pc, #80]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c19a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c19c:	e005      	b.n	800c1aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c19e:	4b12      	ldr	r3, [pc, #72]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a2:	4a11      	ldr	r2, [pc, #68]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c1a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c1aa:	4b0f      	ldr	r3, [pc, #60]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a0e      	ldr	r2, [pc, #56]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c1b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1b6:	f7f6 fbbf 	bl	8002938 <HAL_GetTick>
 800c1ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1bc:	e008      	b.n	800c1d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c1be:	f7f6 fbbb 	bl	8002938 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d901      	bls.n	800c1d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e006      	b.n	800c1de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1d0:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <RCCEx_PLL3_Config+0x15c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0f0      	beq.n	800c1be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	58024400 	.word	0x58024400
 800c1ec:	ffff0007 	.word	0xffff0007

0800c1f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e10f      	b.n	800c422 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a87      	ldr	r2, [pc, #540]	; (800c42c <HAL_SPI_Init+0x23c>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d00f      	beq.n	800c232 <HAL_SPI_Init+0x42>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a86      	ldr	r2, [pc, #536]	; (800c430 <HAL_SPI_Init+0x240>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d00a      	beq.n	800c232 <HAL_SPI_Init+0x42>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a84      	ldr	r2, [pc, #528]	; (800c434 <HAL_SPI_Init+0x244>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d005      	beq.n	800c232 <HAL_SPI_Init+0x42>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	2b0f      	cmp	r3, #15
 800c22c:	d901      	bls.n	800c232 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e0f7      	b.n	800c422 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fc12 	bl	800ca5c <SPI_GetPacketSize>
 800c238:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a7b      	ldr	r2, [pc, #492]	; (800c42c <HAL_SPI_Init+0x23c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00c      	beq.n	800c25e <HAL_SPI_Init+0x6e>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a79      	ldr	r2, [pc, #484]	; (800c430 <HAL_SPI_Init+0x240>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d007      	beq.n	800c25e <HAL_SPI_Init+0x6e>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a78      	ldr	r2, [pc, #480]	; (800c434 <HAL_SPI_Init+0x244>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d002      	beq.n	800c25e <HAL_SPI_Init+0x6e>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b08      	cmp	r3, #8
 800c25c:	d811      	bhi.n	800c282 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c262:	4a72      	ldr	r2, [pc, #456]	; (800c42c <HAL_SPI_Init+0x23c>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d009      	beq.n	800c27c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a70      	ldr	r2, [pc, #448]	; (800c430 <HAL_SPI_Init+0x240>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d004      	beq.n	800c27c <HAL_SPI_Init+0x8c>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a6f      	ldr	r2, [pc, #444]	; (800c434 <HAL_SPI_Init+0x244>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d104      	bne.n	800c286 <HAL_SPI_Init+0x96>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2b10      	cmp	r3, #16
 800c280:	d901      	bls.n	800c286 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e0cd      	b.n	800c422 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d106      	bne.n	800c2a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7f5 ff3e 	bl	800211c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f022 0201 	bic.w	r2, r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c2c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2cc:	d119      	bne.n	800c302 <HAL_SPI_Init+0x112>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2d6:	d103      	bne.n	800c2e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10c      	bne.n	800c302 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2f0:	d107      	bne.n	800c302 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c300:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00f      	beq.n	800c32e <HAL_SPI_Init+0x13e>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	2b06      	cmp	r3, #6
 800c314:	d90b      	bls.n	800c32e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	430a      	orrs	r2, r1
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	e007      	b.n	800c33e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c33c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	69da      	ldr	r2, [r3, #28]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c346:	431a      	orrs	r2, r3
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c350:	ea42 0103 	orr.w	r1, r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68da      	ldr	r2, [r3, #12]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	430a      	orrs	r2, r1
 800c35e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	431a      	orrs	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36e:	431a      	orrs	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	431a      	orrs	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	431a      	orrs	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	695b      	ldr	r3, [r3, #20]
 800c380:	431a      	orrs	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	431a      	orrs	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	431a      	orrs	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c392:	431a      	orrs	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	431a      	orrs	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c39e:	ea42 0103 	orr.w	r1, r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d113      	bne.n	800c3de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c3dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 0201 	bic.w	r2, r2, #1
 800c3ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	40013000 	.word	0x40013000
 800c430:	40003800 	.word	0x40003800
 800c434:	40003c00 	.word	0x40003c00

0800c438 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b088      	sub	sp, #32
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	4613      	mov	r3, r2
 800c446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44c:	095b      	lsrs	r3, r3, #5
 800c44e:	b29b      	uxth	r3, r3
 800c450:	3301      	adds	r3, #1
 800c452:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	3330      	adds	r3, #48	; 0x30
 800c45a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c45c:	f7f6 fa6c 	bl	8002938 <HAL_GetTick>
 800c460:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d001      	beq.n	800c472 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c46e:	2302      	movs	r3, #2
 800c470:	e250      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <HAL_SPI_Receive+0x46>
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	e248      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d101      	bne.n	800c490 <HAL_SPI_Receive+0x58>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e241      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2204      	movs	r2, #4
 800c49c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	88fa      	ldrh	r2, [r7, #6]
 800c4b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	88fa      	ldrh	r2, [r7, #6]
 800c4ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c4e8:	d108      	bne.n	800c4fc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	e009      	b.n	800c510 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c50e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	4b95      	ldr	r3, [pc, #596]	; (800c76c <HAL_SPI_Receive+0x334>)
 800c518:	4013      	ands	r3, r2
 800c51a:	88f9      	ldrh	r1, [r7, #6]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	6812      	ldr	r2, [r2, #0]
 800c520:	430b      	orrs	r3, r1
 800c522:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f042 0201 	orr.w	r2, r2, #1
 800c532:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c53c:	d107      	bne.n	800c54e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c54c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	2b0f      	cmp	r3, #15
 800c554:	d96c      	bls.n	800c630 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c556:	e064      	b.n	800c622 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	695b      	ldr	r3, [r3, #20]
 800c55e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d114      	bne.n	800c598 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c576:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c578:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c57e:	1d1a      	adds	r2, r3, #4
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	3b01      	subs	r3, #1
 800c58e:	b29a      	uxth	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c596:	e044      	b.n	800c622 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	8bfa      	ldrh	r2, [r7, #30]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d919      	bls.n	800c5da <HAL_SPI_Receive+0x1a2>
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d014      	beq.n	800c5da <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c5ba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5c0:	1d1a      	adds	r2, r3, #4
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5d8:	e023      	b.n	800c622 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5da:	f7f6 f9ad 	bl	8002938 <HAL_GetTick>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d803      	bhi.n	800c5f2 <HAL_SPI_Receive+0x1ba>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f0:	d102      	bne.n	800c5f8 <HAL_SPI_Receive+0x1c0>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d114      	bne.n	800c622 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 f98f 	bl	800c91c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e178      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c628:	b29b      	uxth	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d194      	bne.n	800c558 <HAL_SPI_Receive+0x120>
 800c62e:	e15e      	b.n	800c8ee <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	2b07      	cmp	r3, #7
 800c636:	f240 8153 	bls.w	800c8e0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c63a:	e08f      	b.n	800c75c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d114      	bne.n	800c67c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c656:	69ba      	ldr	r2, [r7, #24]
 800c658:	8812      	ldrh	r2, [r2, #0]
 800c65a:	b292      	uxth	r2, r2
 800c65c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c662:	1c9a      	adds	r2, r3, #2
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c66e:	b29b      	uxth	r3, r3
 800c670:	3b01      	subs	r3, #1
 800c672:	b29a      	uxth	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c67a:	e06f      	b.n	800c75c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c682:	b29b      	uxth	r3, r3
 800c684:	8bfa      	ldrh	r2, [r7, #30]
 800c686:	429a      	cmp	r2, r3
 800c688:	d924      	bls.n	800c6d4 <HAL_SPI_Receive+0x29c>
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d01f      	beq.n	800c6d4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	8812      	ldrh	r2, [r2, #0]
 800c69c:	b292      	uxth	r2, r2
 800c69e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6a4:	1c9a      	adds	r2, r3, #2
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6ae:	69ba      	ldr	r2, [r7, #24]
 800c6b0:	8812      	ldrh	r2, [r2, #0]
 800c6b2:	b292      	uxth	r2, r2
 800c6b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6ba:	1c9a      	adds	r2, r3, #2
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	3b02      	subs	r3, #2
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c6d2:	e043      	b.n	800c75c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d119      	bne.n	800c714 <HAL_SPI_Receive+0x2dc>
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d014      	beq.n	800c714 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6ee:	69ba      	ldr	r2, [r7, #24]
 800c6f0:	8812      	ldrh	r2, [r2, #0]
 800c6f2:	b292      	uxth	r2, r2
 800c6f4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6fa:	1c9a      	adds	r2, r3, #2
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c706:	b29b      	uxth	r3, r3
 800c708:	3b01      	subs	r3, #1
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c712:	e023      	b.n	800c75c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c714:	f7f6 f910 	bl	8002938 <HAL_GetTick>
 800c718:	4602      	mov	r2, r0
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d803      	bhi.n	800c72c <HAL_SPI_Receive+0x2f4>
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c72a:	d102      	bne.n	800c732 <HAL_SPI_Receive+0x2fa>
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d114      	bne.n	800c75c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 f8f2 	bl	800c91c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c73e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c758:	2303      	movs	r3, #3
 800c75a:	e0db      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c762:	b29b      	uxth	r3, r3
 800c764:	2b00      	cmp	r3, #0
 800c766:	f47f af69 	bne.w	800c63c <HAL_SPI_Receive+0x204>
 800c76a:	e0c0      	b.n	800c8ee <HAL_SPI_Receive+0x4b6>
 800c76c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	2b01      	cmp	r3, #1
 800c784:	d117      	bne.n	800c7b6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c792:	7812      	ldrb	r2, [r2, #0]
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c7b4:	e094      	b.n	800c8e0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	8bfa      	ldrh	r2, [r7, #30]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d946      	bls.n	800c852 <HAL_SPI_Receive+0x41a>
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d041      	beq.n	800c852 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7da:	7812      	ldrb	r2, [r2, #0]
 800c7dc:	b2d2      	uxtb	r2, r2
 800c7de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7f6:	7812      	ldrb	r2, [r2, #0]
 800c7f8:	b2d2      	uxtb	r2, r2
 800c7fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c800:	1c5a      	adds	r2, r3, #1
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c812:	7812      	ldrb	r2, [r2, #0]
 800c814:	b2d2      	uxtb	r2, r2
 800c816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c82e:	7812      	ldrb	r2, [r2, #0]
 800c830:	b2d2      	uxtb	r2, r2
 800c832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c838:	1c5a      	adds	r2, r3, #1
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c844:	b29b      	uxth	r3, r3
 800c846:	3b04      	subs	r3, #4
 800c848:	b29a      	uxth	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c850:	e046      	b.n	800c8e0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c858:	b29b      	uxth	r3, r3
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	d81c      	bhi.n	800c898 <HAL_SPI_Receive+0x460>
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d017      	beq.n	800c898 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c87e:	1c5a      	adds	r2, r3, #1
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	3b01      	subs	r3, #1
 800c88e:	b29a      	uxth	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c896:	e023      	b.n	800c8e0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c898:	f7f6 f84e 	bl	8002938 <HAL_GetTick>
 800c89c:	4602      	mov	r2, r0
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d803      	bhi.n	800c8b0 <HAL_SPI_Receive+0x478>
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ae:	d102      	bne.n	800c8b6 <HAL_SPI_Receive+0x47e>
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d114      	bne.n	800c8e0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f000 f830 	bl	800c91c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e019      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f47f af41 	bne.w	800c770 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 f814 	bl	800c91c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e000      	b.n	800c914 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c912:	2300      	movs	r3, #0
  }
}
 800c914:	4618      	mov	r0, r3
 800c916:	3720      	adds	r7, #32
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	695b      	ldr	r3, [r3, #20]
 800c92a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	699a      	ldr	r2, [r3, #24]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f042 0208 	orr.w	r2, r2, #8
 800c93a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	699a      	ldr	r2, [r3, #24]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f042 0210 	orr.w	r2, r2, #16
 800c94a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f022 0201 	bic.w	r2, r2, #1
 800c95a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6919      	ldr	r1, [r3, #16]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	4b3c      	ldr	r3, [pc, #240]	; (800ca58 <SPI_CloseTransfer+0x13c>)
 800c968:	400b      	ands	r3, r1
 800c96a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	689a      	ldr	r2, [r3, #8]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c97a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b04      	cmp	r3, #4
 800c986:	d014      	beq.n	800c9b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0320 	and.w	r3, r3, #32
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00f      	beq.n	800c9b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	699a      	ldr	r2, [r3, #24]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f042 0220 	orr.w	r2, r2, #32
 800c9b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d014      	beq.n	800c9e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00f      	beq.n	800c9e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ce:	f043 0204 	orr.w	r2, r3, #4
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	699a      	ldr	r2, [r3, #24]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00f      	beq.n	800ca12 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9f8:	f043 0201 	orr.w	r2, r3, #1
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	699a      	ldr	r2, [r3, #24]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca10:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00f      	beq.n	800ca3c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca22:	f043 0208 	orr.w	r2, r3, #8
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	699a      	ldr	r2, [r3, #24]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca3a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ca4c:	bf00      	nop
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	fffffc90 	.word	0xfffffc90

0800ca5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b085      	sub	sp, #20
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca68:	095b      	lsrs	r3, r3, #5
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	3301      	adds	r3, #1
 800ca74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	3307      	adds	r3, #7
 800ca7a:	08db      	lsrs	r3, r3, #3
 800ca7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	fb02 f303 	mul.w	r3, r2, r3
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e049      	b.n	800cb38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b00      	cmp	r3, #0
 800caae:	d106      	bne.n	800cabe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7f5 fc25 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2202      	movs	r2, #2
 800cac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3304      	adds	r3, #4
 800cace:	4619      	mov	r1, r3
 800cad0:	4610      	mov	r0, r2
 800cad2:	f000 ffad 	bl	800da30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d001      	beq.n	800cb58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e04c      	b.n	800cbf2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a26      	ldr	r2, [pc, #152]	; (800cc00 <HAL_TIM_Base_Start+0xc0>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d022      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb72:	d01d      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a22      	ldr	r2, [pc, #136]	; (800cc04 <HAL_TIM_Base_Start+0xc4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d018      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a21      	ldr	r2, [pc, #132]	; (800cc08 <HAL_TIM_Base_Start+0xc8>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d013      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a1f      	ldr	r2, [pc, #124]	; (800cc0c <HAL_TIM_Base_Start+0xcc>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d00e      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a1e      	ldr	r2, [pc, #120]	; (800cc10 <HAL_TIM_Base_Start+0xd0>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d009      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a1c      	ldr	r2, [pc, #112]	; (800cc14 <HAL_TIM_Base_Start+0xd4>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d004      	beq.n	800cbb0 <HAL_TIM_Base_Start+0x70>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a1b      	ldr	r2, [pc, #108]	; (800cc18 <HAL_TIM_Base_Start+0xd8>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d115      	bne.n	800cbdc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689a      	ldr	r2, [r3, #8]
 800cbb6:	4b19      	ldr	r3, [pc, #100]	; (800cc1c <HAL_TIM_Base_Start+0xdc>)
 800cbb8:	4013      	ands	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b06      	cmp	r3, #6
 800cbc0:	d015      	beq.n	800cbee <HAL_TIM_Base_Start+0xae>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc8:	d011      	beq.n	800cbee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f042 0201 	orr.w	r2, r2, #1
 800cbd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbda:	e008      	b.n	800cbee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f042 0201 	orr.w	r2, r2, #1
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	e000      	b.n	800cbf0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	40010000 	.word	0x40010000
 800cc04:	40000400 	.word	0x40000400
 800cc08:	40000800 	.word	0x40000800
 800cc0c:	40000c00 	.word	0x40000c00
 800cc10:	40010400 	.word	0x40010400
 800cc14:	40001800 	.word	0x40001800
 800cc18:	40014000 	.word	0x40014000
 800cc1c:	00010007 	.word	0x00010007

0800cc20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6a1a      	ldr	r2, [r3, #32]
 800cc2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc32:	4013      	ands	r3, r2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10f      	bne.n	800cc58 <HAL_TIM_Base_Stop+0x38>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6a1a      	ldr	r2, [r3, #32]
 800cc3e:	f240 4344 	movw	r3, #1092	; 0x444
 800cc42:	4013      	ands	r3, r2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d107      	bne.n	800cc58 <HAL_TIM_Base_Stop+0x38>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f022 0201 	bic.w	r2, r2, #1
 800cc56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
	...

0800cc70 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d109      	bne.n	800cc98 <HAL_TIM_OC_Start_IT+0x28>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	bf14      	ite	ne
 800cc90:	2301      	movne	r3, #1
 800cc92:	2300      	moveq	r3, #0
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	e03c      	b.n	800cd12 <HAL_TIM_OC_Start_IT+0xa2>
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	d109      	bne.n	800ccb2 <HAL_TIM_OC_Start_IT+0x42>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	bf14      	ite	ne
 800ccaa:	2301      	movne	r3, #1
 800ccac:	2300      	moveq	r3, #0
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	e02f      	b.n	800cd12 <HAL_TIM_OC_Start_IT+0xa2>
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	2b08      	cmp	r3, #8
 800ccb6:	d109      	bne.n	800cccc <HAL_TIM_OC_Start_IT+0x5c>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	bf14      	ite	ne
 800ccc4:	2301      	movne	r3, #1
 800ccc6:	2300      	moveq	r3, #0
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	e022      	b.n	800cd12 <HAL_TIM_OC_Start_IT+0xa2>
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2b0c      	cmp	r3, #12
 800ccd0:	d109      	bne.n	800cce6 <HAL_TIM_OC_Start_IT+0x76>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	bf14      	ite	ne
 800ccde:	2301      	movne	r3, #1
 800cce0:	2300      	moveq	r3, #0
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	e015      	b.n	800cd12 <HAL_TIM_OC_Start_IT+0xa2>
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	d109      	bne.n	800cd00 <HAL_TIM_OC_Start_IT+0x90>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	bf14      	ite	ne
 800ccf8:	2301      	movne	r3, #1
 800ccfa:	2300      	moveq	r3, #0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	e008      	b.n	800cd12 <HAL_TIM_OC_Start_IT+0xa2>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	bf14      	ite	ne
 800cd0c:	2301      	movne	r3, #1
 800cd0e:	2300      	moveq	r3, #0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e0ec      	b.n	800cef4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <HAL_TIM_OC_Start_IT+0xba>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2202      	movs	r2, #2
 800cd24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd28:	e023      	b.n	800cd72 <HAL_TIM_OC_Start_IT+0x102>
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	d104      	bne.n	800cd3a <HAL_TIM_OC_Start_IT+0xca>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2202      	movs	r2, #2
 800cd34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd38:	e01b      	b.n	800cd72 <HAL_TIM_OC_Start_IT+0x102>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d104      	bne.n	800cd4a <HAL_TIM_OC_Start_IT+0xda>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd48:	e013      	b.n	800cd72 <HAL_TIM_OC_Start_IT+0x102>
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b0c      	cmp	r3, #12
 800cd4e:	d104      	bne.n	800cd5a <HAL_TIM_OC_Start_IT+0xea>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd58:	e00b      	b.n	800cd72 <HAL_TIM_OC_Start_IT+0x102>
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b10      	cmp	r3, #16
 800cd5e:	d104      	bne.n	800cd6a <HAL_TIM_OC_Start_IT+0xfa>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd68:	e003      	b.n	800cd72 <HAL_TIM_OC_Start_IT+0x102>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b0c      	cmp	r3, #12
 800cd76:	d841      	bhi.n	800cdfc <HAL_TIM_OC_Start_IT+0x18c>
 800cd78:	a201      	add	r2, pc, #4	; (adr r2, 800cd80 <HAL_TIM_OC_Start_IT+0x110>)
 800cd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7e:	bf00      	nop
 800cd80:	0800cdb5 	.word	0x0800cdb5
 800cd84:	0800cdfd 	.word	0x0800cdfd
 800cd88:	0800cdfd 	.word	0x0800cdfd
 800cd8c:	0800cdfd 	.word	0x0800cdfd
 800cd90:	0800cdc7 	.word	0x0800cdc7
 800cd94:	0800cdfd 	.word	0x0800cdfd
 800cd98:	0800cdfd 	.word	0x0800cdfd
 800cd9c:	0800cdfd 	.word	0x0800cdfd
 800cda0:	0800cdd9 	.word	0x0800cdd9
 800cda4:	0800cdfd 	.word	0x0800cdfd
 800cda8:	0800cdfd 	.word	0x0800cdfd
 800cdac:	0800cdfd 	.word	0x0800cdfd
 800cdb0:	0800cdeb 	.word	0x0800cdeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68da      	ldr	r2, [r3, #12]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0202 	orr.w	r2, r2, #2
 800cdc2:	60da      	str	r2, [r3, #12]
      break;
 800cdc4:	e01d      	b.n	800ce02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68da      	ldr	r2, [r3, #12]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f042 0204 	orr.w	r2, r2, #4
 800cdd4:	60da      	str	r2, [r3, #12]
      break;
 800cdd6:	e014      	b.n	800ce02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68da      	ldr	r2, [r3, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f042 0208 	orr.w	r2, r2, #8
 800cde6:	60da      	str	r2, [r3, #12]
      break;
 800cde8:	e00b      	b.n	800ce02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68da      	ldr	r2, [r3, #12]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f042 0210 	orr.w	r2, r2, #16
 800cdf8:	60da      	str	r2, [r3, #12]
      break;
 800cdfa:	e002      	b.n	800ce02 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ce00:	bf00      	nop
  }

  if (status == HAL_OK)
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d174      	bne.n	800cef2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f001 fa27 	bl	800e264 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a38      	ldr	r2, [pc, #224]	; (800cefc <HAL_TIM_OC_Start_IT+0x28c>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d013      	beq.n	800ce48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a36      	ldr	r2, [pc, #216]	; (800cf00 <HAL_TIM_OC_Start_IT+0x290>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d00e      	beq.n	800ce48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a35      	ldr	r2, [pc, #212]	; (800cf04 <HAL_TIM_OC_Start_IT+0x294>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d009      	beq.n	800ce48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a33      	ldr	r2, [pc, #204]	; (800cf08 <HAL_TIM_OC_Start_IT+0x298>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d004      	beq.n	800ce48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a32      	ldr	r2, [pc, #200]	; (800cf0c <HAL_TIM_OC_Start_IT+0x29c>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d101      	bne.n	800ce4c <HAL_TIM_OC_Start_IT+0x1dc>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e000      	b.n	800ce4e <HAL_TIM_OC_Start_IT+0x1de>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d007      	beq.n	800ce62 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a25      	ldr	r2, [pc, #148]	; (800cefc <HAL_TIM_OC_Start_IT+0x28c>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d022      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce74:	d01d      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a25      	ldr	r2, [pc, #148]	; (800cf10 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d018      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a23      	ldr	r2, [pc, #140]	; (800cf14 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d013      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a22      	ldr	r2, [pc, #136]	; (800cf18 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d00e      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a19      	ldr	r2, [pc, #100]	; (800cf00 <HAL_TIM_OC_Start_IT+0x290>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d009      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a1e      	ldr	r2, [pc, #120]	; (800cf1c <HAL_TIM_OC_Start_IT+0x2ac>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d004      	beq.n	800ceb2 <HAL_TIM_OC_Start_IT+0x242>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a15      	ldr	r2, [pc, #84]	; (800cf04 <HAL_TIM_OC_Start_IT+0x294>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d115      	bne.n	800cede <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689a      	ldr	r2, [r3, #8]
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ceba:	4013      	ands	r3, r2
 800cebc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b06      	cmp	r3, #6
 800cec2:	d015      	beq.n	800cef0 <HAL_TIM_OC_Start_IT+0x280>
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceca:	d011      	beq.n	800cef0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f042 0201 	orr.w	r2, r2, #1
 800ceda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cedc:	e008      	b.n	800cef0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f042 0201 	orr.w	r2, r2, #1
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	e000      	b.n	800cef2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	40010000 	.word	0x40010000
 800cf00:	40010400 	.word	0x40010400
 800cf04:	40014000 	.word	0x40014000
 800cf08:	40014400 	.word	0x40014400
 800cf0c:	40014800 	.word	0x40014800
 800cf10:	40000400 	.word	0x40000400
 800cf14:	40000800 	.word	0x40000800
 800cf18:	40000c00 	.word	0x40000c00
 800cf1c:	40001800 	.word	0x40001800
 800cf20:	00010007 	.word	0x00010007

0800cf24 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b0c      	cmp	r3, #12
 800cf36:	d841      	bhi.n	800cfbc <HAL_TIM_OC_Stop_IT+0x98>
 800cf38:	a201      	add	r2, pc, #4	; (adr r2, 800cf40 <HAL_TIM_OC_Stop_IT+0x1c>)
 800cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3e:	bf00      	nop
 800cf40:	0800cf75 	.word	0x0800cf75
 800cf44:	0800cfbd 	.word	0x0800cfbd
 800cf48:	0800cfbd 	.word	0x0800cfbd
 800cf4c:	0800cfbd 	.word	0x0800cfbd
 800cf50:	0800cf87 	.word	0x0800cf87
 800cf54:	0800cfbd 	.word	0x0800cfbd
 800cf58:	0800cfbd 	.word	0x0800cfbd
 800cf5c:	0800cfbd 	.word	0x0800cfbd
 800cf60:	0800cf99 	.word	0x0800cf99
 800cf64:	0800cfbd 	.word	0x0800cfbd
 800cf68:	0800cfbd 	.word	0x0800cfbd
 800cf6c:	0800cfbd 	.word	0x0800cfbd
 800cf70:	0800cfab 	.word	0x0800cfab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0202 	bic.w	r2, r2, #2
 800cf82:	60da      	str	r2, [r3, #12]
      break;
 800cf84:	e01d      	b.n	800cfc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f022 0204 	bic.w	r2, r2, #4
 800cf94:	60da      	str	r2, [r3, #12]
      break;
 800cf96:	e014      	b.n	800cfc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f022 0208 	bic.w	r2, r2, #8
 800cfa6:	60da      	str	r2, [r3, #12]
      break;
 800cfa8:	e00b      	b.n	800cfc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68da      	ldr	r2, [r3, #12]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f022 0210 	bic.w	r2, r2, #16
 800cfb8:	60da      	str	r2, [r3, #12]
      break;
 800cfba:	e002      	b.n	800cfc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	73fb      	strb	r3, [r7, #15]
      break;
 800cfc0:	bf00      	nop
  }

  if (status == HAL_OK)
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f040 8081 	bne.w	800d0cc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f001 f946 	bl	800e264 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a3e      	ldr	r2, [pc, #248]	; (800d0d8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d013      	beq.n	800d00a <HAL_TIM_OC_Stop_IT+0xe6>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a3d      	ldr	r2, [pc, #244]	; (800d0dc <HAL_TIM_OC_Stop_IT+0x1b8>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d00e      	beq.n	800d00a <HAL_TIM_OC_Stop_IT+0xe6>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a3b      	ldr	r2, [pc, #236]	; (800d0e0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d009      	beq.n	800d00a <HAL_TIM_OC_Stop_IT+0xe6>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a3a      	ldr	r2, [pc, #232]	; (800d0e4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d004      	beq.n	800d00a <HAL_TIM_OC_Stop_IT+0xe6>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a38      	ldr	r2, [pc, #224]	; (800d0e8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d101      	bne.n	800d00e <HAL_TIM_OC_Stop_IT+0xea>
 800d00a:	2301      	movs	r3, #1
 800d00c:	e000      	b.n	800d010 <HAL_TIM_OC_Stop_IT+0xec>
 800d00e:	2300      	movs	r3, #0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d017      	beq.n	800d044 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6a1a      	ldr	r2, [r3, #32]
 800d01a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d01e:	4013      	ands	r3, r2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10f      	bne.n	800d044 <HAL_TIM_OC_Stop_IT+0x120>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6a1a      	ldr	r2, [r3, #32]
 800d02a:	f240 4344 	movw	r3, #1092	; 0x444
 800d02e:	4013      	ands	r3, r2
 800d030:	2b00      	cmp	r3, #0
 800d032:	d107      	bne.n	800d044 <HAL_TIM_OC_Stop_IT+0x120>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d042:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6a1a      	ldr	r2, [r3, #32]
 800d04a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d04e:	4013      	ands	r3, r2
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10f      	bne.n	800d074 <HAL_TIM_OC_Stop_IT+0x150>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6a1a      	ldr	r2, [r3, #32]
 800d05a:	f240 4344 	movw	r3, #1092	; 0x444
 800d05e:	4013      	ands	r3, r2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d107      	bne.n	800d074 <HAL_TIM_OC_Stop_IT+0x150>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f022 0201 	bic.w	r2, r2, #1
 800d072:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d104      	bne.n	800d084 <HAL_TIM_OC_Stop_IT+0x160>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d082:	e023      	b.n	800d0cc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	2b04      	cmp	r3, #4
 800d088:	d104      	bne.n	800d094 <HAL_TIM_OC_Stop_IT+0x170>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d092:	e01b      	b.n	800d0cc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2b08      	cmp	r3, #8
 800d098:	d104      	bne.n	800d0a4 <HAL_TIM_OC_Stop_IT+0x180>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0a2:	e013      	b.n	800d0cc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b0c      	cmp	r3, #12
 800d0a8:	d104      	bne.n	800d0b4 <HAL_TIM_OC_Stop_IT+0x190>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0b2:	e00b      	b.n	800d0cc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b10      	cmp	r3, #16
 800d0b8:	d104      	bne.n	800d0c4 <HAL_TIM_OC_Stop_IT+0x1a0>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0c2:	e003      	b.n	800d0cc <HAL_TIM_OC_Stop_IT+0x1a8>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	40010000 	.word	0x40010000
 800d0dc:	40010400 	.word	0x40010400
 800d0e0:	40014000 	.word	0x40014000
 800d0e4:	40014400 	.word	0x40014400
 800d0e8:	40014800 	.word	0x40014800

0800d0ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e049      	b.n	800d192 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7f5 f8b8 	bl	8002288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2202      	movs	r2, #2
 800d11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3304      	adds	r3, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f000 fc80 	bl	800da30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
	...

0800d19c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d109      	bne.n	800d1c0 <HAL_TIM_PWM_Start+0x24>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	bf14      	ite	ne
 800d1b8:	2301      	movne	r3, #1
 800d1ba:	2300      	moveq	r3, #0
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	e03c      	b.n	800d23a <HAL_TIM_PWM_Start+0x9e>
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d109      	bne.n	800d1da <HAL_TIM_PWM_Start+0x3e>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	bf14      	ite	ne
 800d1d2:	2301      	movne	r3, #1
 800d1d4:	2300      	moveq	r3, #0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	e02f      	b.n	800d23a <HAL_TIM_PWM_Start+0x9e>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2b08      	cmp	r3, #8
 800d1de:	d109      	bne.n	800d1f4 <HAL_TIM_PWM_Start+0x58>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	bf14      	ite	ne
 800d1ec:	2301      	movne	r3, #1
 800d1ee:	2300      	moveq	r3, #0
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	e022      	b.n	800d23a <HAL_TIM_PWM_Start+0x9e>
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b0c      	cmp	r3, #12
 800d1f8:	d109      	bne.n	800d20e <HAL_TIM_PWM_Start+0x72>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d200:	b2db      	uxtb	r3, r3
 800d202:	2b01      	cmp	r3, #1
 800d204:	bf14      	ite	ne
 800d206:	2301      	movne	r3, #1
 800d208:	2300      	moveq	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	e015      	b.n	800d23a <HAL_TIM_PWM_Start+0x9e>
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b10      	cmp	r3, #16
 800d212:	d109      	bne.n	800d228 <HAL_TIM_PWM_Start+0x8c>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	bf14      	ite	ne
 800d220:	2301      	movne	r3, #1
 800d222:	2300      	moveq	r3, #0
 800d224:	b2db      	uxtb	r3, r3
 800d226:	e008      	b.n	800d23a <HAL_TIM_PWM_Start+0x9e>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b01      	cmp	r3, #1
 800d232:	bf14      	ite	ne
 800d234:	2301      	movne	r3, #1
 800d236:	2300      	moveq	r3, #0
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	e0a1      	b.n	800d386 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d104      	bne.n	800d252 <HAL_TIM_PWM_Start+0xb6>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2202      	movs	r2, #2
 800d24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d250:	e023      	b.n	800d29a <HAL_TIM_PWM_Start+0xfe>
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b04      	cmp	r3, #4
 800d256:	d104      	bne.n	800d262 <HAL_TIM_PWM_Start+0xc6>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2202      	movs	r2, #2
 800d25c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d260:	e01b      	b.n	800d29a <HAL_TIM_PWM_Start+0xfe>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b08      	cmp	r3, #8
 800d266:	d104      	bne.n	800d272 <HAL_TIM_PWM_Start+0xd6>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2202      	movs	r2, #2
 800d26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d270:	e013      	b.n	800d29a <HAL_TIM_PWM_Start+0xfe>
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b0c      	cmp	r3, #12
 800d276:	d104      	bne.n	800d282 <HAL_TIM_PWM_Start+0xe6>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2202      	movs	r2, #2
 800d27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d280:	e00b      	b.n	800d29a <HAL_TIM_PWM_Start+0xfe>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b10      	cmp	r3, #16
 800d286:	d104      	bne.n	800d292 <HAL_TIM_PWM_Start+0xf6>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d290:	e003      	b.n	800d29a <HAL_TIM_PWM_Start+0xfe>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2202      	movs	r2, #2
 800d296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 ffde 	bl	800e264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a38      	ldr	r2, [pc, #224]	; (800d390 <HAL_TIM_PWM_Start+0x1f4>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d013      	beq.n	800d2da <HAL_TIM_PWM_Start+0x13e>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a37      	ldr	r2, [pc, #220]	; (800d394 <HAL_TIM_PWM_Start+0x1f8>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d00e      	beq.n	800d2da <HAL_TIM_PWM_Start+0x13e>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a35      	ldr	r2, [pc, #212]	; (800d398 <HAL_TIM_PWM_Start+0x1fc>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d009      	beq.n	800d2da <HAL_TIM_PWM_Start+0x13e>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a34      	ldr	r2, [pc, #208]	; (800d39c <HAL_TIM_PWM_Start+0x200>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d004      	beq.n	800d2da <HAL_TIM_PWM_Start+0x13e>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a32      	ldr	r2, [pc, #200]	; (800d3a0 <HAL_TIM_PWM_Start+0x204>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d101      	bne.n	800d2de <HAL_TIM_PWM_Start+0x142>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e000      	b.n	800d2e0 <HAL_TIM_PWM_Start+0x144>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d007      	beq.n	800d2f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a25      	ldr	r2, [pc, #148]	; (800d390 <HAL_TIM_PWM_Start+0x1f4>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d022      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d306:	d01d      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a25      	ldr	r2, [pc, #148]	; (800d3a4 <HAL_TIM_PWM_Start+0x208>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d018      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a24      	ldr	r2, [pc, #144]	; (800d3a8 <HAL_TIM_PWM_Start+0x20c>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d013      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a22      	ldr	r2, [pc, #136]	; (800d3ac <HAL_TIM_PWM_Start+0x210>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d00e      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a1a      	ldr	r2, [pc, #104]	; (800d394 <HAL_TIM_PWM_Start+0x1f8>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d009      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a1e      	ldr	r2, [pc, #120]	; (800d3b0 <HAL_TIM_PWM_Start+0x214>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d004      	beq.n	800d344 <HAL_TIM_PWM_Start+0x1a8>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a16      	ldr	r2, [pc, #88]	; (800d398 <HAL_TIM_PWM_Start+0x1fc>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d115      	bne.n	800d370 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	4b1a      	ldr	r3, [pc, #104]	; (800d3b4 <HAL_TIM_PWM_Start+0x218>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b06      	cmp	r3, #6
 800d354:	d015      	beq.n	800d382 <HAL_TIM_PWM_Start+0x1e6>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d35c:	d011      	beq.n	800d382 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f042 0201 	orr.w	r2, r2, #1
 800d36c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d36e:	e008      	b.n	800d382 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f042 0201 	orr.w	r2, r2, #1
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	e000      	b.n	800d384 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d382:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	40010000 	.word	0x40010000
 800d394:	40010400 	.word	0x40010400
 800d398:	40014000 	.word	0x40014000
 800d39c:	40014400 	.word	0x40014400
 800d3a0:	40014800 	.word	0x40014800
 800d3a4:	40000400 	.word	0x40000400
 800d3a8:	40000800 	.word	0x40000800
 800d3ac:	40000c00 	.word	0x40000c00
 800d3b0:	40001800 	.word	0x40001800
 800d3b4:	00010007 	.word	0x00010007

0800d3b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	f003 0302 	and.w	r3, r3, #2
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d020      	beq.n	800d41c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f003 0302 	and.w	r3, r3, #2
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01b      	beq.n	800d41c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f06f 0202 	mvn.w	r2, #2
 800d3ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	699b      	ldr	r3, [r3, #24]
 800d3fa:	f003 0303 	and.w	r3, r3, #3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 faf6 	bl	800d9f4 <HAL_TIM_IC_CaptureCallback>
 800d408:	e005      	b.n	800d416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7f3 fbe0 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 faf9 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f003 0304 	and.w	r3, r3, #4
 800d422:	2b00      	cmp	r3, #0
 800d424:	d020      	beq.n	800d468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f003 0304 	and.w	r3, r3, #4
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01b      	beq.n	800d468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f06f 0204 	mvn.w	r2, #4
 800d438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2202      	movs	r2, #2
 800d43e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d003      	beq.n	800d456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fad0 	bl	800d9f4 <HAL_TIM_IC_CaptureCallback>
 800d454:	e005      	b.n	800d462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7f3 fbba 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fad3 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f003 0308 	and.w	r3, r3, #8
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d020      	beq.n	800d4b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f003 0308 	and.w	r3, r3, #8
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01b      	beq.n	800d4b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f06f 0208 	mvn.w	r2, #8
 800d484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2204      	movs	r2, #4
 800d48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	f003 0303 	and.w	r3, r3, #3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 faaa 	bl	800d9f4 <HAL_TIM_IC_CaptureCallback>
 800d4a0:	e005      	b.n	800d4ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7f3 fb94 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 faad 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	f003 0310 	and.w	r3, r3, #16
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d020      	beq.n	800d500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f003 0310 	and.w	r3, r3, #16
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01b      	beq.n	800d500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f06f 0210 	mvn.w	r2, #16
 800d4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2208      	movs	r2, #8
 800d4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fa84 	bl	800d9f4 <HAL_TIM_IC_CaptureCallback>
 800d4ec:	e005      	b.n	800d4fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7f3 fb6e 	bl	8000bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 fa87 	bl	800da08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00c      	beq.n	800d524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f06f 0201 	mvn.w	r2, #1
 800d51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fa5e 	bl	800d9e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d104      	bne.n	800d538 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00c      	beq.n	800d552 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d007      	beq.n	800d552 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d54a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 ffc5 	bl	800e4dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00c      	beq.n	800d576 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d562:	2b00      	cmp	r3, #0
 800d564:	d007      	beq.n	800d576 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d56e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 ffbd 	bl	800e4f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00c      	beq.n	800d59a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d586:	2b00      	cmp	r3, #0
 800d588:	d007      	beq.n	800d59a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fa41 	bl	800da1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f003 0320 	and.w	r3, r3, #32
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00c      	beq.n	800d5be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f003 0320 	and.w	r3, r3, #32
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d007      	beq.n	800d5be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f06f 0220 	mvn.w	r2, #32
 800d5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 ff85 	bl	800e4c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b086      	sub	sp, #24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d101      	bne.n	800d5e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	e0ff      	b.n	800d7e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b14      	cmp	r3, #20
 800d5f2:	f200 80f0 	bhi.w	800d7d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d651 	.word	0x0800d651
 800d600:	0800d7d7 	.word	0x0800d7d7
 800d604:	0800d7d7 	.word	0x0800d7d7
 800d608:	0800d7d7 	.word	0x0800d7d7
 800d60c:	0800d691 	.word	0x0800d691
 800d610:	0800d7d7 	.word	0x0800d7d7
 800d614:	0800d7d7 	.word	0x0800d7d7
 800d618:	0800d7d7 	.word	0x0800d7d7
 800d61c:	0800d6d3 	.word	0x0800d6d3
 800d620:	0800d7d7 	.word	0x0800d7d7
 800d624:	0800d7d7 	.word	0x0800d7d7
 800d628:	0800d7d7 	.word	0x0800d7d7
 800d62c:	0800d713 	.word	0x0800d713
 800d630:	0800d7d7 	.word	0x0800d7d7
 800d634:	0800d7d7 	.word	0x0800d7d7
 800d638:	0800d7d7 	.word	0x0800d7d7
 800d63c:	0800d755 	.word	0x0800d755
 800d640:	0800d7d7 	.word	0x0800d7d7
 800d644:	0800d7d7 	.word	0x0800d7d7
 800d648:	0800d7d7 	.word	0x0800d7d7
 800d64c:	0800d795 	.word	0x0800d795
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fa90 	bl	800db7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	699a      	ldr	r2, [r3, #24]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f042 0208 	orr.w	r2, r2, #8
 800d66a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	699a      	ldr	r2, [r3, #24]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f022 0204 	bic.w	r2, r2, #4
 800d67a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6999      	ldr	r1, [r3, #24]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	691a      	ldr	r2, [r3, #16]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	619a      	str	r2, [r3, #24]
      break;
 800d68e:	e0a5      	b.n	800d7dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	4618      	mov	r0, r3
 800d698:	f000 fb00 	bl	800dc9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	699a      	ldr	r2, [r3, #24]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	699a      	ldr	r2, [r3, #24]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6999      	ldr	r1, [r3, #24]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	021a      	lsls	r2, r3, #8
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	619a      	str	r2, [r3, #24]
      break;
 800d6d0:	e084      	b.n	800d7dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68b9      	ldr	r1, [r7, #8]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 fb69 	bl	800ddb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	69da      	ldr	r2, [r3, #28]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f042 0208 	orr.w	r2, r2, #8
 800d6ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	69da      	ldr	r2, [r3, #28]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f022 0204 	bic.w	r2, r2, #4
 800d6fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	69d9      	ldr	r1, [r3, #28]
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	691a      	ldr	r2, [r3, #16]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	430a      	orrs	r2, r1
 800d70e:	61da      	str	r2, [r3, #28]
      break;
 800d710:	e064      	b.n	800d7dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68b9      	ldr	r1, [r7, #8]
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 fbd1 	bl	800dec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	69da      	ldr	r2, [r3, #28]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d72c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	69da      	ldr	r2, [r3, #28]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d73c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	69d9      	ldr	r1, [r3, #28]
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	021a      	lsls	r2, r3, #8
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	430a      	orrs	r2, r1
 800d750:	61da      	str	r2, [r3, #28]
      break;
 800d752:	e043      	b.n	800d7dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fc1a 	bl	800df94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f042 0208 	orr.w	r2, r2, #8
 800d76e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f022 0204 	bic.w	r2, r2, #4
 800d77e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	691a      	ldr	r2, [r3, #16]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	430a      	orrs	r2, r1
 800d790:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d792:	e023      	b.n	800d7dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68b9      	ldr	r1, [r7, #8]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fc5e 	bl	800e05c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	021a      	lsls	r2, r3, #8
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	430a      	orrs	r2, r1
 800d7d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d7d4:	e002      	b.n	800d7dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	75fb      	strb	r3, [r7, #23]
      break;
 800d7da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop

0800d7f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d804:	2b01      	cmp	r3, #1
 800d806:	d101      	bne.n	800d80c <HAL_TIM_ConfigClockSource+0x1c>
 800d808:	2302      	movs	r3, #2
 800d80a:	e0dc      	b.n	800d9c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2202      	movs	r2, #2
 800d818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	4b6a      	ldr	r3, [pc, #424]	; (800d9d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d828:	4013      	ands	r3, r2
 800d82a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a64      	ldr	r2, [pc, #400]	; (800d9d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d842:	4293      	cmp	r3, r2
 800d844:	f000 80a9 	beq.w	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d848:	4a62      	ldr	r2, [pc, #392]	; (800d9d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	f200 80ae 	bhi.w	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d850:	4a61      	ldr	r2, [pc, #388]	; (800d9d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d852:	4293      	cmp	r3, r2
 800d854:	f000 80a1 	beq.w	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d858:	4a5f      	ldr	r2, [pc, #380]	; (800d9d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	f200 80a6 	bhi.w	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d860:	4a5e      	ldr	r2, [pc, #376]	; (800d9dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800d862:	4293      	cmp	r3, r2
 800d864:	f000 8099 	beq.w	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d868:	4a5c      	ldr	r2, [pc, #368]	; (800d9dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	f200 809e 	bhi.w	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d870:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d874:	f000 8091 	beq.w	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d878:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d87c:	f200 8096 	bhi.w	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d884:	f000 8089 	beq.w	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d88c:	f200 808e 	bhi.w	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d894:	d03e      	beq.n	800d914 <HAL_TIM_ConfigClockSource+0x124>
 800d896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d89a:	f200 8087 	bhi.w	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8a2:	f000 8086 	beq.w	800d9b2 <HAL_TIM_ConfigClockSource+0x1c2>
 800d8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8aa:	d87f      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8ac:	2b70      	cmp	r3, #112	; 0x70
 800d8ae:	d01a      	beq.n	800d8e6 <HAL_TIM_ConfigClockSource+0xf6>
 800d8b0:	2b70      	cmp	r3, #112	; 0x70
 800d8b2:	d87b      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8b4:	2b60      	cmp	r3, #96	; 0x60
 800d8b6:	d050      	beq.n	800d95a <HAL_TIM_ConfigClockSource+0x16a>
 800d8b8:	2b60      	cmp	r3, #96	; 0x60
 800d8ba:	d877      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8bc:	2b50      	cmp	r3, #80	; 0x50
 800d8be:	d03c      	beq.n	800d93a <HAL_TIM_ConfigClockSource+0x14a>
 800d8c0:	2b50      	cmp	r3, #80	; 0x50
 800d8c2:	d873      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8c4:	2b40      	cmp	r3, #64	; 0x40
 800d8c6:	d058      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0x18a>
 800d8c8:	2b40      	cmp	r3, #64	; 0x40
 800d8ca:	d86f      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8cc:	2b30      	cmp	r3, #48	; 0x30
 800d8ce:	d064      	beq.n	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8d0:	2b30      	cmp	r3, #48	; 0x30
 800d8d2:	d86b      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8d4:	2b20      	cmp	r3, #32
 800d8d6:	d060      	beq.n	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8d8:	2b20      	cmp	r3, #32
 800d8da:	d867      	bhi.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d05c      	beq.n	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8e0:	2b10      	cmp	r3, #16
 800d8e2:	d05a      	beq.n	800d99a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8e4:	e062      	b.n	800d9ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	6899      	ldr	r1, [r3, #8]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	f000 fc95 	bl	800e224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	609a      	str	r2, [r3, #8]
      break;
 800d912:	e04f      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	6899      	ldr	r1, [r3, #8]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	f000 fc7e 	bl	800e224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	689a      	ldr	r2, [r3, #8]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d936:	609a      	str	r2, [r3, #8]
      break;
 800d938:	e03c      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6818      	ldr	r0, [r3, #0]
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	6859      	ldr	r1, [r3, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	461a      	mov	r2, r3
 800d948:	f000 fbee 	bl	800e128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2150      	movs	r1, #80	; 0x50
 800d952:	4618      	mov	r0, r3
 800d954:	f000 fc48 	bl	800e1e8 <TIM_ITRx_SetConfig>
      break;
 800d958:	e02c      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	6859      	ldr	r1, [r3, #4]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	461a      	mov	r2, r3
 800d968:	f000 fc0d 	bl	800e186 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2160      	movs	r1, #96	; 0x60
 800d972:	4618      	mov	r0, r3
 800d974:	f000 fc38 	bl	800e1e8 <TIM_ITRx_SetConfig>
      break;
 800d978:	e01c      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	6859      	ldr	r1, [r3, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	461a      	mov	r2, r3
 800d988:	f000 fbce 	bl	800e128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2140      	movs	r1, #64	; 0x40
 800d992:	4618      	mov	r0, r3
 800d994:	f000 fc28 	bl	800e1e8 <TIM_ITRx_SetConfig>
      break;
 800d998:	e00c      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	f000 fc1f 	bl	800e1e8 <TIM_ITRx_SetConfig>
      break;
 800d9aa:	e003      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d9b0:	e000      	b.n	800d9b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d9b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	ffceff88 	.word	0xffceff88
 800d9d4:	00100040 	.word	0x00100040
 800d9d8:	00100030 	.word	0x00100030
 800d9dc:	00100020 	.word	0x00100020

0800d9e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a46      	ldr	r2, [pc, #280]	; (800db5c <TIM_Base_SetConfig+0x12c>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d013      	beq.n	800da70 <TIM_Base_SetConfig+0x40>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da4e:	d00f      	beq.n	800da70 <TIM_Base_SetConfig+0x40>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4a43      	ldr	r2, [pc, #268]	; (800db60 <TIM_Base_SetConfig+0x130>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d00b      	beq.n	800da70 <TIM_Base_SetConfig+0x40>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a42      	ldr	r2, [pc, #264]	; (800db64 <TIM_Base_SetConfig+0x134>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d007      	beq.n	800da70 <TIM_Base_SetConfig+0x40>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a41      	ldr	r2, [pc, #260]	; (800db68 <TIM_Base_SetConfig+0x138>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d003      	beq.n	800da70 <TIM_Base_SetConfig+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	4a40      	ldr	r2, [pc, #256]	; (800db6c <TIM_Base_SetConfig+0x13c>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d108      	bne.n	800da82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a35      	ldr	r2, [pc, #212]	; (800db5c <TIM_Base_SetConfig+0x12c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d01f      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da90:	d01b      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a32      	ldr	r2, [pc, #200]	; (800db60 <TIM_Base_SetConfig+0x130>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d017      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a31      	ldr	r2, [pc, #196]	; (800db64 <TIM_Base_SetConfig+0x134>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d013      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a30      	ldr	r2, [pc, #192]	; (800db68 <TIM_Base_SetConfig+0x138>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d00f      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a2f      	ldr	r2, [pc, #188]	; (800db6c <TIM_Base_SetConfig+0x13c>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d00b      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a2e      	ldr	r2, [pc, #184]	; (800db70 <TIM_Base_SetConfig+0x140>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d007      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a2d      	ldr	r2, [pc, #180]	; (800db74 <TIM_Base_SetConfig+0x144>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d003      	beq.n	800daca <TIM_Base_SetConfig+0x9a>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a2c      	ldr	r2, [pc, #176]	; (800db78 <TIM_Base_SetConfig+0x148>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d108      	bne.n	800dadc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	4313      	orrs	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	695b      	ldr	r3, [r3, #20]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	689a      	ldr	r2, [r3, #8]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a16      	ldr	r2, [pc, #88]	; (800db5c <TIM_Base_SetConfig+0x12c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d00f      	beq.n	800db28 <TIM_Base_SetConfig+0xf8>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a18      	ldr	r2, [pc, #96]	; (800db6c <TIM_Base_SetConfig+0x13c>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d00b      	beq.n	800db28 <TIM_Base_SetConfig+0xf8>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a17      	ldr	r2, [pc, #92]	; (800db70 <TIM_Base_SetConfig+0x140>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d007      	beq.n	800db28 <TIM_Base_SetConfig+0xf8>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a16      	ldr	r2, [pc, #88]	; (800db74 <TIM_Base_SetConfig+0x144>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d003      	beq.n	800db28 <TIM_Base_SetConfig+0xf8>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a15      	ldr	r2, [pc, #84]	; (800db78 <TIM_Base_SetConfig+0x148>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d103      	bne.n	800db30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	691a      	ldr	r2, [r3, #16]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d105      	bne.n	800db4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	f023 0201 	bic.w	r2, r3, #1
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	611a      	str	r2, [r3, #16]
  }
}
 800db4e:	bf00      	nop
 800db50:	3714      	adds	r7, #20
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	40010000 	.word	0x40010000
 800db60:	40000400 	.word	0x40000400
 800db64:	40000800 	.word	0x40000800
 800db68:	40000c00 	.word	0x40000c00
 800db6c:	40010400 	.word	0x40010400
 800db70:	40014000 	.word	0x40014000
 800db74:	40014400 	.word	0x40014400
 800db78:	40014800 	.word	0x40014800

0800db7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b087      	sub	sp, #28
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a1b      	ldr	r3, [r3, #32]
 800db8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a1b      	ldr	r3, [r3, #32]
 800db90:	f023 0201 	bic.w	r2, r3, #1
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	699b      	ldr	r3, [r3, #24]
 800dba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4b37      	ldr	r3, [pc, #220]	; (800dc84 <TIM_OC1_SetConfig+0x108>)
 800dba8:	4013      	ands	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f023 0303 	bic.w	r3, r3, #3
 800dbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f023 0302 	bic.w	r3, r3, #2
 800dbc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	697a      	ldr	r2, [r7, #20]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a2d      	ldr	r2, [pc, #180]	; (800dc88 <TIM_OC1_SetConfig+0x10c>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d00f      	beq.n	800dbf8 <TIM_OC1_SetConfig+0x7c>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a2c      	ldr	r2, [pc, #176]	; (800dc8c <TIM_OC1_SetConfig+0x110>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d00b      	beq.n	800dbf8 <TIM_OC1_SetConfig+0x7c>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a2b      	ldr	r2, [pc, #172]	; (800dc90 <TIM_OC1_SetConfig+0x114>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d007      	beq.n	800dbf8 <TIM_OC1_SetConfig+0x7c>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a2a      	ldr	r2, [pc, #168]	; (800dc94 <TIM_OC1_SetConfig+0x118>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d003      	beq.n	800dbf8 <TIM_OC1_SetConfig+0x7c>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a29      	ldr	r2, [pc, #164]	; (800dc98 <TIM_OC1_SetConfig+0x11c>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d10c      	bne.n	800dc12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	f023 0308 	bic.w	r3, r3, #8
 800dbfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	697a      	ldr	r2, [r7, #20]
 800dc06:	4313      	orrs	r3, r2
 800dc08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f023 0304 	bic.w	r3, r3, #4
 800dc10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a1c      	ldr	r2, [pc, #112]	; (800dc88 <TIM_OC1_SetConfig+0x10c>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00f      	beq.n	800dc3a <TIM_OC1_SetConfig+0xbe>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a1b      	ldr	r2, [pc, #108]	; (800dc8c <TIM_OC1_SetConfig+0x110>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d00b      	beq.n	800dc3a <TIM_OC1_SetConfig+0xbe>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a1a      	ldr	r2, [pc, #104]	; (800dc90 <TIM_OC1_SetConfig+0x114>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d007      	beq.n	800dc3a <TIM_OC1_SetConfig+0xbe>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a19      	ldr	r2, [pc, #100]	; (800dc94 <TIM_OC1_SetConfig+0x118>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d003      	beq.n	800dc3a <TIM_OC1_SetConfig+0xbe>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a18      	ldr	r2, [pc, #96]	; (800dc98 <TIM_OC1_SetConfig+0x11c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d111      	bne.n	800dc5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	621a      	str	r2, [r3, #32]
}
 800dc78:	bf00      	nop
 800dc7a:	371c      	adds	r7, #28
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	fffeff8f 	.word	0xfffeff8f
 800dc88:	40010000 	.word	0x40010000
 800dc8c:	40010400 	.word	0x40010400
 800dc90:	40014000 	.word	0x40014000
 800dc94:	40014400 	.word	0x40014400
 800dc98:	40014800 	.word	0x40014800

0800dc9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b087      	sub	sp, #28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a1b      	ldr	r3, [r3, #32]
 800dcb0:	f023 0210 	bic.w	r2, r3, #16
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dcc4:	68fa      	ldr	r2, [r7, #12]
 800dcc6:	4b34      	ldr	r3, [pc, #208]	; (800dd98 <TIM_OC2_SetConfig+0xfc>)
 800dcc8:	4013      	ands	r3, r2
 800dcca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	021b      	lsls	r3, r3, #8
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	f023 0320 	bic.w	r3, r3, #32
 800dce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	011b      	lsls	r3, r3, #4
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4a29      	ldr	r2, [pc, #164]	; (800dd9c <TIM_OC2_SetConfig+0x100>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d003      	beq.n	800dd04 <TIM_OC2_SetConfig+0x68>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a28      	ldr	r2, [pc, #160]	; (800dda0 <TIM_OC2_SetConfig+0x104>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d10d      	bne.n	800dd20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	011b      	lsls	r3, r3, #4
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a1e      	ldr	r2, [pc, #120]	; (800dd9c <TIM_OC2_SetConfig+0x100>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d00f      	beq.n	800dd48 <TIM_OC2_SetConfig+0xac>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a1d      	ldr	r2, [pc, #116]	; (800dda0 <TIM_OC2_SetConfig+0x104>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d00b      	beq.n	800dd48 <TIM_OC2_SetConfig+0xac>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a1c      	ldr	r2, [pc, #112]	; (800dda4 <TIM_OC2_SetConfig+0x108>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d007      	beq.n	800dd48 <TIM_OC2_SetConfig+0xac>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a1b      	ldr	r2, [pc, #108]	; (800dda8 <TIM_OC2_SetConfig+0x10c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d003      	beq.n	800dd48 <TIM_OC2_SetConfig+0xac>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a1a      	ldr	r2, [pc, #104]	; (800ddac <TIM_OC2_SetConfig+0x110>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d113      	bne.n	800dd70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	699b      	ldr	r3, [r3, #24]
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	621a      	str	r2, [r3, #32]
}
 800dd8a:	bf00      	nop
 800dd8c:	371c      	adds	r7, #28
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	feff8fff 	.word	0xfeff8fff
 800dd9c:	40010000 	.word	0x40010000
 800dda0:	40010400 	.word	0x40010400
 800dda4:	40014000 	.word	0x40014000
 800dda8:	40014400 	.word	0x40014400
 800ddac:	40014800 	.word	0x40014800

0800ddb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b087      	sub	sp, #28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a1b      	ldr	r3, [r3, #32]
 800ddbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a1b      	ldr	r3, [r3, #32]
 800ddc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	4b33      	ldr	r3, [pc, #204]	; (800dea8 <TIM_OC3_SetConfig+0xf8>)
 800dddc:	4013      	ands	r3, r2
 800ddde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f023 0303 	bic.w	r3, r3, #3
 800dde6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	021b      	lsls	r3, r3, #8
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	4313      	orrs	r3, r2
 800de04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4a28      	ldr	r2, [pc, #160]	; (800deac <TIM_OC3_SetConfig+0xfc>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d003      	beq.n	800de16 <TIM_OC3_SetConfig+0x66>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a27      	ldr	r2, [pc, #156]	; (800deb0 <TIM_OC3_SetConfig+0x100>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d10d      	bne.n	800de32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	4313      	orrs	r3, r2
 800de28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a1d      	ldr	r2, [pc, #116]	; (800deac <TIM_OC3_SetConfig+0xfc>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d00f      	beq.n	800de5a <TIM_OC3_SetConfig+0xaa>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a1c      	ldr	r2, [pc, #112]	; (800deb0 <TIM_OC3_SetConfig+0x100>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d00b      	beq.n	800de5a <TIM_OC3_SetConfig+0xaa>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a1b      	ldr	r2, [pc, #108]	; (800deb4 <TIM_OC3_SetConfig+0x104>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d007      	beq.n	800de5a <TIM_OC3_SetConfig+0xaa>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a1a      	ldr	r2, [pc, #104]	; (800deb8 <TIM_OC3_SetConfig+0x108>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d003      	beq.n	800de5a <TIM_OC3_SetConfig+0xaa>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a19      	ldr	r2, [pc, #100]	; (800debc <TIM_OC3_SetConfig+0x10c>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d113      	bne.n	800de82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	011b      	lsls	r3, r3, #4
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	4313      	orrs	r3, r2
 800de74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	011b      	lsls	r3, r3, #4
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	4313      	orrs	r3, r2
 800de80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	693a      	ldr	r2, [r7, #16]
 800de86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	621a      	str	r2, [r3, #32]
}
 800de9c:	bf00      	nop
 800de9e:	371c      	adds	r7, #28
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	fffeff8f 	.word	0xfffeff8f
 800deac:	40010000 	.word	0x40010000
 800deb0:	40010400 	.word	0x40010400
 800deb4:	40014000 	.word	0x40014000
 800deb8:	40014400 	.word	0x40014400
 800debc:	40014800 	.word	0x40014800

0800dec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a1b      	ldr	r3, [r3, #32]
 800ded4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	4b24      	ldr	r3, [pc, #144]	; (800df7c <TIM_OC4_SetConfig+0xbc>)
 800deec:	4013      	ands	r3, r2
 800deee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800def6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	021b      	lsls	r3, r3, #8
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	4313      	orrs	r3, r2
 800df02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	031b      	lsls	r3, r3, #12
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	4313      	orrs	r3, r2
 800df16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4a19      	ldr	r2, [pc, #100]	; (800df80 <TIM_OC4_SetConfig+0xc0>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d00f      	beq.n	800df40 <TIM_OC4_SetConfig+0x80>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a18      	ldr	r2, [pc, #96]	; (800df84 <TIM_OC4_SetConfig+0xc4>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d00b      	beq.n	800df40 <TIM_OC4_SetConfig+0x80>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a17      	ldr	r2, [pc, #92]	; (800df88 <TIM_OC4_SetConfig+0xc8>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d007      	beq.n	800df40 <TIM_OC4_SetConfig+0x80>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a16      	ldr	r2, [pc, #88]	; (800df8c <TIM_OC4_SetConfig+0xcc>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d003      	beq.n	800df40 <TIM_OC4_SetConfig+0x80>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a15      	ldr	r2, [pc, #84]	; (800df90 <TIM_OC4_SetConfig+0xd0>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d109      	bne.n	800df54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	019b      	lsls	r3, r3, #6
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	4313      	orrs	r3, r2
 800df52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	697a      	ldr	r2, [r7, #20]
 800df58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68fa      	ldr	r2, [r7, #12]
 800df5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	693a      	ldr	r2, [r7, #16]
 800df6c:	621a      	str	r2, [r3, #32]
}
 800df6e:	bf00      	nop
 800df70:	371c      	adds	r7, #28
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	feff8fff 	.word	0xfeff8fff
 800df80:	40010000 	.word	0x40010000
 800df84:	40010400 	.word	0x40010400
 800df88:	40014000 	.word	0x40014000
 800df8c:	40014400 	.word	0x40014400
 800df90:	40014800 	.word	0x40014800

0800df94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df94:	b480      	push	{r7}
 800df96:	b087      	sub	sp, #28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a1b      	ldr	r3, [r3, #32]
 800dfa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	4b21      	ldr	r3, [pc, #132]	; (800e044 <TIM_OC5_SetConfig+0xb0>)
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dfd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	041b      	lsls	r3, r3, #16
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4a18      	ldr	r2, [pc, #96]	; (800e048 <TIM_OC5_SetConfig+0xb4>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d00f      	beq.n	800e00a <TIM_OC5_SetConfig+0x76>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4a17      	ldr	r2, [pc, #92]	; (800e04c <TIM_OC5_SetConfig+0xb8>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d00b      	beq.n	800e00a <TIM_OC5_SetConfig+0x76>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4a16      	ldr	r2, [pc, #88]	; (800e050 <TIM_OC5_SetConfig+0xbc>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d007      	beq.n	800e00a <TIM_OC5_SetConfig+0x76>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4a15      	ldr	r2, [pc, #84]	; (800e054 <TIM_OC5_SetConfig+0xc0>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d003      	beq.n	800e00a <TIM_OC5_SetConfig+0x76>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a14      	ldr	r2, [pc, #80]	; (800e058 <TIM_OC5_SetConfig+0xc4>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d109      	bne.n	800e01e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	021b      	lsls	r3, r3, #8
 800e018:	697a      	ldr	r2, [r7, #20]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	621a      	str	r2, [r3, #32]
}
 800e038:	bf00      	nop
 800e03a:	371c      	adds	r7, #28
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	fffeff8f 	.word	0xfffeff8f
 800e048:	40010000 	.word	0x40010000
 800e04c:	40010400 	.word	0x40010400
 800e050:	40014000 	.word	0x40014000
 800e054:	40014400 	.word	0x40014400
 800e058:	40014800 	.word	0x40014800

0800e05c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a1b      	ldr	r3, [r3, #32]
 800e06a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a1b      	ldr	r3, [r3, #32]
 800e070:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	4b22      	ldr	r3, [pc, #136]	; (800e110 <TIM_OC6_SetConfig+0xb4>)
 800e088:	4013      	ands	r3, r2
 800e08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	021b      	lsls	r3, r3, #8
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	4313      	orrs	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	051b      	lsls	r3, r3, #20
 800e0a6:	693a      	ldr	r2, [r7, #16]
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a19      	ldr	r2, [pc, #100]	; (800e114 <TIM_OC6_SetConfig+0xb8>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d00f      	beq.n	800e0d4 <TIM_OC6_SetConfig+0x78>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4a18      	ldr	r2, [pc, #96]	; (800e118 <TIM_OC6_SetConfig+0xbc>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d00b      	beq.n	800e0d4 <TIM_OC6_SetConfig+0x78>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4a17      	ldr	r2, [pc, #92]	; (800e11c <TIM_OC6_SetConfig+0xc0>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d007      	beq.n	800e0d4 <TIM_OC6_SetConfig+0x78>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	4a16      	ldr	r2, [pc, #88]	; (800e120 <TIM_OC6_SetConfig+0xc4>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d003      	beq.n	800e0d4 <TIM_OC6_SetConfig+0x78>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a15      	ldr	r2, [pc, #84]	; (800e124 <TIM_OC6_SetConfig+0xc8>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d109      	bne.n	800e0e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	029b      	lsls	r3, r3, #10
 800e0e2:	697a      	ldr	r2, [r7, #20]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	621a      	str	r2, [r3, #32]
}
 800e102:	bf00      	nop
 800e104:	371c      	adds	r7, #28
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	feff8fff 	.word	0xfeff8fff
 800e114:	40010000 	.word	0x40010000
 800e118:	40010400 	.word	0x40010400
 800e11c:	40014000 	.word	0x40014000
 800e120:	40014400 	.word	0x40014400
 800e124:	40014800 	.word	0x40014800

0800e128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e128:	b480      	push	{r7}
 800e12a:	b087      	sub	sp, #28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6a1b      	ldr	r3, [r3, #32]
 800e138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6a1b      	ldr	r3, [r3, #32]
 800e13e:	f023 0201 	bic.w	r2, r3, #1
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	011b      	lsls	r3, r3, #4
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f023 030a 	bic.w	r3, r3, #10
 800e164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	693a      	ldr	r2, [r7, #16]
 800e172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	621a      	str	r2, [r3, #32]
}
 800e17a:	bf00      	nop
 800e17c:	371c      	adds	r7, #28
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr

0800e186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e186:	b480      	push	{r7}
 800e188:	b087      	sub	sp, #28
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	60f8      	str	r0, [r7, #12]
 800e18e:	60b9      	str	r1, [r7, #8]
 800e190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6a1b      	ldr	r3, [r3, #32]
 800e19c:	f023 0210 	bic.w	r2, r3, #16
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e1b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	031b      	lsls	r3, r3, #12
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e1c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	011b      	lsls	r3, r3, #4
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	693a      	ldr	r2, [r7, #16]
 800e1d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	621a      	str	r2, [r3, #32]
}
 800e1da:	bf00      	nop
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
	...

0800e1e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	4b09      	ldr	r3, [pc, #36]	; (800e220 <TIM_ITRx_SetConfig+0x38>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	4313      	orrs	r3, r2
 800e206:	f043 0307 	orr.w	r3, r3, #7
 800e20a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	609a      	str	r2, [r3, #8]
}
 800e212:	bf00      	nop
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	ffcfff8f 	.word	0xffcfff8f

0800e224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e224:	b480      	push	{r7}
 800e226:	b087      	sub	sp, #28
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e23e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	021a      	lsls	r2, r3, #8
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	431a      	orrs	r2, r3
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	4313      	orrs	r3, r2
 800e250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	609a      	str	r2, [r3, #8]
}
 800e258:	bf00      	nop
 800e25a:	371c      	adds	r7, #28
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e264:	b480      	push	{r7}
 800e266:	b087      	sub	sp, #28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	f003 031f 	and.w	r3, r3, #31
 800e276:	2201      	movs	r2, #1
 800e278:	fa02 f303 	lsl.w	r3, r2, r3
 800e27c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6a1a      	ldr	r2, [r3, #32]
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	43db      	mvns	r3, r3
 800e286:	401a      	ands	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6a1a      	ldr	r2, [r3, #32]
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f003 031f 	and.w	r3, r3, #31
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	fa01 f303 	lsl.w	r3, r1, r3
 800e29c:	431a      	orrs	r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	621a      	str	r2, [r3, #32]
}
 800e2a2:	bf00      	nop
 800e2a4:	371c      	adds	r7, #28
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr
	...

0800e2b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d101      	bne.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	e06d      	b.n	800e3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a30      	ldr	r2, [pc, #192]	; (800e3b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d004      	beq.n	800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a2f      	ldr	r2, [pc, #188]	; (800e3b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d108      	bne.n	800e30e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a20      	ldr	r2, [pc, #128]	; (800e3b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d022      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e33a:	d01d      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a1d      	ldr	r2, [pc, #116]	; (800e3b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d018      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a1c      	ldr	r2, [pc, #112]	; (800e3bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d013      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a1a      	ldr	r2, [pc, #104]	; (800e3c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d00e      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a15      	ldr	r2, [pc, #84]	; (800e3b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d009      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a16      	ldr	r2, [pc, #88]	; (800e3c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d004      	beq.n	800e378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a15      	ldr	r2, [pc, #84]	; (800e3c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d10c      	bne.n	800e392 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e37e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	4313      	orrs	r3, r2
 800e388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	40010000 	.word	0x40010000
 800e3b4:	40010400 	.word	0x40010400
 800e3b8:	40000400 	.word	0x40000400
 800e3bc:	40000800 	.word	0x40000800
 800e3c0:	40000c00 	.word	0x40000c00
 800e3c4:	40001800 	.word	0x40001800
 800e3c8:	40014000 	.word	0x40014000

0800e3cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d101      	bne.n	800e3e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	e065      	b.n	800e4b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	4313      	orrs	r3, r2
 800e40a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	4313      	orrs	r3, r2
 800e418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4313      	orrs	r3, r2
 800e426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	4313      	orrs	r3, r2
 800e434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	4313      	orrs	r3, r2
 800e442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44e:	4313      	orrs	r3, r2
 800e450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	041b      	lsls	r3, r3, #16
 800e45e:	4313      	orrs	r3, r2
 800e460:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a16      	ldr	r2, [pc, #88]	; (800e4c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d004      	beq.n	800e476 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a14      	ldr	r2, [pc, #80]	; (800e4c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d115      	bne.n	800e4a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e480:	051b      	lsls	r3, r3, #20
 800e482:	4313      	orrs	r3, r2
 800e484:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	69db      	ldr	r3, [r3, #28]
 800e490:	4313      	orrs	r3, r2
 800e492:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	40010000 	.word	0x40010000
 800e4c4:	40010400 	.word	0x40010400

0800e4c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d101      	bne.n	800e516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	e042      	b.n	800e59c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d106      	bne.n	800e52e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7f3 ff97 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2224      	movs	r2, #36	; 0x24
 800e532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f022 0201 	bic.w	r2, r2, #1
 800e544:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f001 fa44 	bl	800f9dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fcd9 	bl	800ef0c <UART_SetConfig>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d101      	bne.n	800e564 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	e01b      	b.n	800e59c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	689a      	ldr	r2, [r3, #8]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f042 0201 	orr.w	r2, r2, #1
 800e592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f001 fac3 	bl	800fb20 <UART_CheckIdleState>
 800e59a:	4603      	mov	r3, r0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b08a      	sub	sp, #40	; 0x28
 800e5a8:	af02      	add	r7, sp, #8
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	603b      	str	r3, [r7, #0]
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ba:	2b20      	cmp	r3, #32
 800e5bc:	d17b      	bne.n	800e6b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <HAL_UART_Transmit+0x26>
 800e5c4:	88fb      	ldrh	r3, [r7, #6]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e074      	b.n	800e6b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2221      	movs	r2, #33	; 0x21
 800e5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5de:	f7f4 f9ab 	bl	8002938 <HAL_GetTick>
 800e5e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	88fa      	ldrh	r2, [r7, #6]
 800e5e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	88fa      	ldrh	r2, [r7, #6]
 800e5f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5fc:	d108      	bne.n	800e610 <HAL_UART_Transmit+0x6c>
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	691b      	ldr	r3, [r3, #16]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d104      	bne.n	800e610 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	61bb      	str	r3, [r7, #24]
 800e60e:	e003      	b.n	800e618 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e614:	2300      	movs	r3, #0
 800e616:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e618:	e030      	b.n	800e67c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2200      	movs	r2, #0
 800e622:	2180      	movs	r1, #128	; 0x80
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f001 fb25 	bl	800fc74 <UART_WaitOnFlagUntilTimeout>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d005      	beq.n	800e63c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2220      	movs	r2, #32
 800e634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e638:	2303      	movs	r3, #3
 800e63a:	e03d      	b.n	800e6b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10b      	bne.n	800e65a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e650:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	3302      	adds	r3, #2
 800e656:	61bb      	str	r3, [r7, #24]
 800e658:	e007      	b.n	800e66a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	781a      	ldrb	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	3301      	adds	r3, #1
 800e668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e670:	b29b      	uxth	r3, r3
 800e672:	3b01      	subs	r3, #1
 800e674:	b29a      	uxth	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e682:	b29b      	uxth	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1c8      	bne.n	800e61a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	2200      	movs	r2, #0
 800e690:	2140      	movs	r1, #64	; 0x40
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f001 faee 	bl	800fc74 <UART_WaitOnFlagUntilTimeout>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d005      	beq.n	800e6aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2220      	movs	r2, #32
 800e6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e006      	b.n	800e6b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e000      	b.n	800e6b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e6b6:	2302      	movs	r3, #2
  }
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3720      	adds	r7, #32
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b08a      	sub	sp, #40	; 0x28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6d4:	2b20      	cmp	r3, #32
 800e6d6:	d137      	bne.n	800e748 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <HAL_UART_Receive_IT+0x24>
 800e6de:	88fb      	ldrh	r3, [r7, #6]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e030      	b.n	800e74a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a18      	ldr	r2, [pc, #96]	; (800e754 <HAL_UART_Receive_IT+0x94>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d01f      	beq.n	800e738 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d018      	beq.n	800e738 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	613b      	str	r3, [r7, #16]
   return(result);
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e71a:	627b      	str	r3, [r7, #36]	; 0x24
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	461a      	mov	r2, r3
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	623b      	str	r3, [r7, #32]
 800e726:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e728:	69f9      	ldr	r1, [r7, #28]
 800e72a:	6a3a      	ldr	r2, [r7, #32]
 800e72c:	e841 2300 	strex	r3, r2, [r1]
 800e730:	61bb      	str	r3, [r7, #24]
   return(result);
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e6      	bne.n	800e706 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	461a      	mov	r2, r3
 800e73c:	68b9      	ldr	r1, [r7, #8]
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f001 fb06 	bl	800fd50 <UART_Start_Receive_IT>
 800e744:	4603      	mov	r3, r0
 800e746:	e000      	b.n	800e74a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e748:	2302      	movs	r3, #2
  }
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3728      	adds	r7, #40	; 0x28
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	58000c00 	.word	0x58000c00

0800e758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b0ba      	sub	sp, #232	; 0xe8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	69db      	ldr	r3, [r3, #28]
 800e766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e77e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e782:	f640 030f 	movw	r3, #2063	; 0x80f
 800e786:	4013      	ands	r3, r2
 800e788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e78c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e790:	2b00      	cmp	r3, #0
 800e792:	d11b      	bne.n	800e7cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e798:	f003 0320 	and.w	r3, r3, #32
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d015      	beq.n	800e7cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7a4:	f003 0320 	and.w	r3, r3, #32
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d105      	bne.n	800e7b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d009      	beq.n	800e7cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 8377 	beq.w	800eeb0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	4798      	blx	r3
      }
      return;
 800e7ca:	e371      	b.n	800eeb0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f000 8123 	beq.w	800ea1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e7d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e7da:	4b8d      	ldr	r3, [pc, #564]	; (800ea10 <HAL_UART_IRQHandler+0x2b8>)
 800e7dc:	4013      	ands	r3, r2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d106      	bne.n	800e7f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e7e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e7e6:	4b8b      	ldr	r3, [pc, #556]	; (800ea14 <HAL_UART_IRQHandler+0x2bc>)
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 8116 	beq.w	800ea1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d011      	beq.n	800e820 <HAL_UART_IRQHandler+0xc8>
 800e7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00b      	beq.n	800e820 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2201      	movs	r2, #1
 800e80e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e816:	f043 0201 	orr.w	r2, r3, #1
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d011      	beq.n	800e850 <HAL_UART_IRQHandler+0xf8>
 800e82c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00b      	beq.n	800e850 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2202      	movs	r2, #2
 800e83e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e846:	f043 0204 	orr.w	r2, r3, #4
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e854:	f003 0304 	and.w	r3, r3, #4
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d011      	beq.n	800e880 <HAL_UART_IRQHandler+0x128>
 800e85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e860:	f003 0301 	and.w	r3, r3, #1
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00b      	beq.n	800e880 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2204      	movs	r2, #4
 800e86e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e876:	f043 0202 	orr.w	r2, r3, #2
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e884:	f003 0308 	and.w	r3, r3, #8
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d017      	beq.n	800e8bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	2b00      	cmp	r3, #0
 800e896:	d105      	bne.n	800e8a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e898:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e89c:	4b5c      	ldr	r3, [pc, #368]	; (800ea10 <HAL_UART_IRQHandler+0x2b8>)
 800e89e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00b      	beq.n	800e8bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2208      	movs	r2, #8
 800e8aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b2:	f043 0208 	orr.w	r2, r3, #8
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d012      	beq.n	800e8ee <HAL_UART_IRQHandler+0x196>
 800e8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00c      	beq.n	800e8ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8e4:	f043 0220 	orr.w	r2, r3, #32
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 82dd 	beq.w	800eeb4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fe:	f003 0320 	and.w	r3, r3, #32
 800e902:	2b00      	cmp	r3, #0
 800e904:	d013      	beq.n	800e92e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e90a:	f003 0320 	and.w	r3, r3, #32
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d105      	bne.n	800e91e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d007      	beq.n	800e92e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e942:	2b40      	cmp	r3, #64	; 0x40
 800e944:	d005      	beq.n	800e952 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e94a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d054      	beq.n	800e9fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f001 fb1e 	bl	800ff94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e962:	2b40      	cmp	r3, #64	; 0x40
 800e964:	d146      	bne.n	800e9f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3308      	adds	r3, #8
 800e96c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e974:	e853 3f00 	ldrex	r3, [r3]
 800e978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e97c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	3308      	adds	r3, #8
 800e98e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e99e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e9a2:	e841 2300 	strex	r3, r2, [r1]
 800e9a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e9aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1d9      	bne.n	800e966 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d017      	beq.n	800e9ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c2:	4a15      	ldr	r2, [pc, #84]	; (800ea18 <HAL_UART_IRQHandler+0x2c0>)
 800e9c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f7 f993 	bl	8005cf8 <HAL_DMA_Abort_IT>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d019      	beq.n	800ea0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9ea:	e00f      	b.n	800ea0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 fa77 	bl	800eee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9f2:	e00b      	b.n	800ea0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 fa73 	bl	800eee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9fa:	e007      	b.n	800ea0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 fa6f 	bl	800eee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ea0a:	e253      	b.n	800eeb4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea0c:	bf00      	nop
    return;
 800ea0e:	e251      	b.n	800eeb4 <HAL_UART_IRQHandler+0x75c>
 800ea10:	10000001 	.word	0x10000001
 800ea14:	04000120 	.word	0x04000120
 800ea18:	08010061 	.word	0x08010061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	f040 81e7 	bne.w	800edf4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ea26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea2a:	f003 0310 	and.w	r3, r3, #16
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 81e0 	beq.w	800edf4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ea34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea38:	f003 0310 	and.w	r3, r3, #16
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 81d9 	beq.w	800edf4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2210      	movs	r2, #16
 800ea48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea54:	2b40      	cmp	r3, #64	; 0x40
 800ea56:	f040 8151 	bne.w	800ecfc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a96      	ldr	r2, [pc, #600]	; (800ecbc <HAL_UART_IRQHandler+0x564>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d068      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a93      	ldr	r2, [pc, #588]	; (800ecc0 <HAL_UART_IRQHandler+0x568>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d061      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4a91      	ldr	r2, [pc, #580]	; (800ecc4 <HAL_UART_IRQHandler+0x56c>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d05a      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a8e      	ldr	r2, [pc, #568]	; (800ecc8 <HAL_UART_IRQHandler+0x570>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d053      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a8c      	ldr	r2, [pc, #560]	; (800eccc <HAL_UART_IRQHandler+0x574>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d04c      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a89      	ldr	r2, [pc, #548]	; (800ecd0 <HAL_UART_IRQHandler+0x578>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d045      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a87      	ldr	r2, [pc, #540]	; (800ecd4 <HAL_UART_IRQHandler+0x57c>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d03e      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a84      	ldr	r2, [pc, #528]	; (800ecd8 <HAL_UART_IRQHandler+0x580>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d037      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4a82      	ldr	r2, [pc, #520]	; (800ecdc <HAL_UART_IRQHandler+0x584>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d030      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a7f      	ldr	r2, [pc, #508]	; (800ece0 <HAL_UART_IRQHandler+0x588>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d029      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a7d      	ldr	r2, [pc, #500]	; (800ece4 <HAL_UART_IRQHandler+0x58c>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d022      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a7a      	ldr	r2, [pc, #488]	; (800ece8 <HAL_UART_IRQHandler+0x590>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d01b      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a78      	ldr	r2, [pc, #480]	; (800ecec <HAL_UART_IRQHandler+0x594>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d014      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a75      	ldr	r2, [pc, #468]	; (800ecf0 <HAL_UART_IRQHandler+0x598>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d00d      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a73      	ldr	r2, [pc, #460]	; (800ecf4 <HAL_UART_IRQHandler+0x59c>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d006      	beq.n	800eb3a <HAL_UART_IRQHandler+0x3e2>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a70      	ldr	r2, [pc, #448]	; (800ecf8 <HAL_UART_IRQHandler+0x5a0>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d106      	bne.n	800eb48 <HAL_UART_IRQHandler+0x3f0>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	e005      	b.n	800eb54 <HAL_UART_IRQHandler+0x3fc>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eb58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f000 81ab 	beq.w	800eeb8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	f080 81a3 	bcs.w	800eeb8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eb78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb82:	69db      	ldr	r3, [r3, #28]
 800eb84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb88:	f000 8087 	beq.w	800ec9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eb98:	e853 3f00 	ldrex	r3, [r3]
 800eb9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800eba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ebb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ebba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ebc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ebc6:	e841 2300 	strex	r3, r2, [r1]
 800ebca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ebce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1da      	bne.n	800eb8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	3308      	adds	r3, #8
 800ebdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebe0:	e853 3f00 	ldrex	r3, [r3]
 800ebe4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ebe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebe8:	f023 0301 	bic.w	r3, r3, #1
 800ebec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ebfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ebfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ec02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ec06:	e841 2300 	strex	r3, r2, [r1]
 800ec0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ec0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1e1      	bne.n	800ebd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	3308      	adds	r3, #8
 800ec18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec1c:	e853 3f00 	ldrex	r3, [r3]
 800ec20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ec22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3308      	adds	r3, #8
 800ec32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ec36:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ec38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ec3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ec3e:	e841 2300 	strex	r3, r2, [r1]
 800ec42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ec44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1e3      	bne.n	800ec12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2220      	movs	r2, #32
 800ec4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec60:	e853 3f00 	ldrex	r3, [r3]
 800ec64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ec66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec68:	f023 0310 	bic.w	r3, r3, #16
 800ec6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ec7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec82:	e841 2300 	strex	r3, r2, [r1]
 800ec86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e4      	bne.n	800ec58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f6 fd11 	bl	80056bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 f91d 	bl	800eef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ecba:	e0fd      	b.n	800eeb8 <HAL_UART_IRQHandler+0x760>
 800ecbc:	40020010 	.word	0x40020010
 800ecc0:	40020028 	.word	0x40020028
 800ecc4:	40020040 	.word	0x40020040
 800ecc8:	40020058 	.word	0x40020058
 800eccc:	40020070 	.word	0x40020070
 800ecd0:	40020088 	.word	0x40020088
 800ecd4:	400200a0 	.word	0x400200a0
 800ecd8:	400200b8 	.word	0x400200b8
 800ecdc:	40020410 	.word	0x40020410
 800ece0:	40020428 	.word	0x40020428
 800ece4:	40020440 	.word	0x40020440
 800ece8:	40020458 	.word	0x40020458
 800ecec:	40020470 	.word	0x40020470
 800ecf0:	40020488 	.word	0x40020488
 800ecf4:	400204a0 	.word	0x400204a0
 800ecf8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 80cf 	beq.w	800eebc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ed1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f000 80ca 	beq.w	800eebc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed30:	e853 3f00 	ldrex	r3, [r3]
 800ed34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	461a      	mov	r2, r3
 800ed46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed4a:	647b      	str	r3, [r7, #68]	; 0x44
 800ed4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed52:	e841 2300 	strex	r3, r2, [r1]
 800ed56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1e4      	bne.n	800ed28 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	3308      	adds	r3, #8
 800ed64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed68:	e853 3f00 	ldrex	r3, [r3]
 800ed6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed6e:	6a3a      	ldr	r2, [r7, #32]
 800ed70:	4b55      	ldr	r3, [pc, #340]	; (800eec8 <HAL_UART_IRQHandler+0x770>)
 800ed72:	4013      	ands	r3, r2
 800ed74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	3308      	adds	r3, #8
 800ed7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ed82:	633a      	str	r2, [r7, #48]	; 0x30
 800ed84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed8a:	e841 2300 	strex	r3, r2, [r1]
 800ed8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1e3      	bne.n	800ed5e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2220      	movs	r2, #32
 800ed9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	e853 3f00 	ldrex	r3, [r3]
 800edb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f023 0310 	bic.w	r3, r3, #16
 800edbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	461a      	mov	r2, r3
 800edc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800edcc:	61fb      	str	r3, [r7, #28]
 800edce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd0:	69b9      	ldr	r1, [r7, #24]
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	e841 2300 	strex	r3, r2, [r1]
 800edd8:	617b      	str	r3, [r7, #20]
   return(result);
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d1e4      	bne.n	800edaa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2202      	movs	r2, #2
 800ede4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ede6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800edea:	4619      	mov	r1, r3
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f881 	bl	800eef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800edf2:	e063      	b.n	800eebc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800edf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00e      	beq.n	800ee1e <HAL_UART_IRQHandler+0x6c6>
 800ee00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d008      	beq.n	800ee1e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ee14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f001 fe80 	bl	8010b1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee1c:	e051      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ee1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d014      	beq.n	800ee54 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ee2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d105      	bne.n	800ee42 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ee36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d008      	beq.n	800ee54 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d03a      	beq.n	800eec0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	4798      	blx	r3
    }
    return;
 800ee52:	e035      	b.n	800eec0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ee54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d009      	beq.n	800ee74 <HAL_UART_IRQHandler+0x71c>
 800ee60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d003      	beq.n	800ee74 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f001 f90d 	bl	801008c <UART_EndTransmit_IT>
    return;
 800ee72:	e026      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ee74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d009      	beq.n	800ee94 <HAL_UART_IRQHandler+0x73c>
 800ee80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d003      	beq.n	800ee94 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f001 fe59 	bl	8010b44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee92:	e016      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ee94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d010      	beq.n	800eec2 <HAL_UART_IRQHandler+0x76a>
 800eea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da0c      	bge.n	800eec2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f001 fe41 	bl	8010b30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eeae:	e008      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
      return;
 800eeb0:	bf00      	nop
 800eeb2:	e006      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
    return;
 800eeb4:	bf00      	nop
 800eeb6:	e004      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
      return;
 800eeb8:	bf00      	nop
 800eeba:	e002      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
      return;
 800eebc:	bf00      	nop
 800eebe:	e000      	b.n	800eec2 <HAL_UART_IRQHandler+0x76a>
    return;
 800eec0:	bf00      	nop
  }
}
 800eec2:	37e8      	adds	r7, #232	; 0xe8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	effffffe 	.word	0xeffffffe

0800eecc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ef00:	bf00      	nop
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef10:	b092      	sub	sp, #72	; 0x48
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	689a      	ldr	r2, [r3, #8]
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	431a      	orrs	r2, r3
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	695b      	ldr	r3, [r3, #20]
 800ef2a:	431a      	orrs	r2, r3
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	69db      	ldr	r3, [r3, #28]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	4bbe      	ldr	r3, [pc, #760]	; (800f234 <UART_SetConfig+0x328>)
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	697a      	ldr	r2, [r7, #20]
 800ef40:	6812      	ldr	r2, [r2, #0]
 800ef42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef44:	430b      	orrs	r3, r1
 800ef46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	68da      	ldr	r2, [r3, #12]
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4ab3      	ldr	r2, [pc, #716]	; (800f238 <UART_SetConfig+0x32c>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d004      	beq.n	800ef78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef74:	4313      	orrs	r3, r2
 800ef76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	689a      	ldr	r2, [r3, #8]
 800ef7e:	4baf      	ldr	r3, [pc, #700]	; (800f23c <UART_SetConfig+0x330>)
 800ef80:	4013      	ands	r3, r2
 800ef82:	697a      	ldr	r2, [r7, #20]
 800ef84:	6812      	ldr	r2, [r2, #0]
 800ef86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef88:	430b      	orrs	r3, r1
 800ef8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef92:	f023 010f 	bic.w	r1, r3, #15
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4aa6      	ldr	r2, [pc, #664]	; (800f240 <UART_SetConfig+0x334>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d177      	bne.n	800f09c <UART_SetConfig+0x190>
 800efac:	4ba5      	ldr	r3, [pc, #660]	; (800f244 <UART_SetConfig+0x338>)
 800efae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800efb4:	2b28      	cmp	r3, #40	; 0x28
 800efb6:	d86d      	bhi.n	800f094 <UART_SetConfig+0x188>
 800efb8:	a201      	add	r2, pc, #4	; (adr r2, 800efc0 <UART_SetConfig+0xb4>)
 800efba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbe:	bf00      	nop
 800efc0:	0800f065 	.word	0x0800f065
 800efc4:	0800f095 	.word	0x0800f095
 800efc8:	0800f095 	.word	0x0800f095
 800efcc:	0800f095 	.word	0x0800f095
 800efd0:	0800f095 	.word	0x0800f095
 800efd4:	0800f095 	.word	0x0800f095
 800efd8:	0800f095 	.word	0x0800f095
 800efdc:	0800f095 	.word	0x0800f095
 800efe0:	0800f06d 	.word	0x0800f06d
 800efe4:	0800f095 	.word	0x0800f095
 800efe8:	0800f095 	.word	0x0800f095
 800efec:	0800f095 	.word	0x0800f095
 800eff0:	0800f095 	.word	0x0800f095
 800eff4:	0800f095 	.word	0x0800f095
 800eff8:	0800f095 	.word	0x0800f095
 800effc:	0800f095 	.word	0x0800f095
 800f000:	0800f075 	.word	0x0800f075
 800f004:	0800f095 	.word	0x0800f095
 800f008:	0800f095 	.word	0x0800f095
 800f00c:	0800f095 	.word	0x0800f095
 800f010:	0800f095 	.word	0x0800f095
 800f014:	0800f095 	.word	0x0800f095
 800f018:	0800f095 	.word	0x0800f095
 800f01c:	0800f095 	.word	0x0800f095
 800f020:	0800f07d 	.word	0x0800f07d
 800f024:	0800f095 	.word	0x0800f095
 800f028:	0800f095 	.word	0x0800f095
 800f02c:	0800f095 	.word	0x0800f095
 800f030:	0800f095 	.word	0x0800f095
 800f034:	0800f095 	.word	0x0800f095
 800f038:	0800f095 	.word	0x0800f095
 800f03c:	0800f095 	.word	0x0800f095
 800f040:	0800f085 	.word	0x0800f085
 800f044:	0800f095 	.word	0x0800f095
 800f048:	0800f095 	.word	0x0800f095
 800f04c:	0800f095 	.word	0x0800f095
 800f050:	0800f095 	.word	0x0800f095
 800f054:	0800f095 	.word	0x0800f095
 800f058:	0800f095 	.word	0x0800f095
 800f05c:	0800f095 	.word	0x0800f095
 800f060:	0800f08d 	.word	0x0800f08d
 800f064:	2301      	movs	r3, #1
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e222      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f06c:	2304      	movs	r3, #4
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e21e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f074:	2308      	movs	r3, #8
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e21a      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f07c:	2310      	movs	r3, #16
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f082:	e216      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f084:	2320      	movs	r3, #32
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08a:	e212      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f08c:	2340      	movs	r3, #64	; 0x40
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e20e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f094:	2380      	movs	r3, #128	; 0x80
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e20a      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a69      	ldr	r2, [pc, #420]	; (800f248 <UART_SetConfig+0x33c>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d130      	bne.n	800f108 <UART_SetConfig+0x1fc>
 800f0a6:	4b67      	ldr	r3, [pc, #412]	; (800f244 <UART_SetConfig+0x338>)
 800f0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0aa:	f003 0307 	and.w	r3, r3, #7
 800f0ae:	2b05      	cmp	r3, #5
 800f0b0:	d826      	bhi.n	800f100 <UART_SetConfig+0x1f4>
 800f0b2:	a201      	add	r2, pc, #4	; (adr r2, 800f0b8 <UART_SetConfig+0x1ac>)
 800f0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b8:	0800f0d1 	.word	0x0800f0d1
 800f0bc:	0800f0d9 	.word	0x0800f0d9
 800f0c0:	0800f0e1 	.word	0x0800f0e1
 800f0c4:	0800f0e9 	.word	0x0800f0e9
 800f0c8:	0800f0f1 	.word	0x0800f0f1
 800f0cc:	0800f0f9 	.word	0x0800f0f9
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e1ec      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f0d8:	2304      	movs	r3, #4
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e1e8      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f0e0:	2308      	movs	r3, #8
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e1e4      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f0e8:	2310      	movs	r3, #16
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e1e0      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f0f0:	2320      	movs	r3, #32
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e1dc      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f0f8:	2340      	movs	r3, #64	; 0x40
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e1d8      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f100:	2380      	movs	r3, #128	; 0x80
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e1d4      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a4f      	ldr	r2, [pc, #316]	; (800f24c <UART_SetConfig+0x340>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d130      	bne.n	800f174 <UART_SetConfig+0x268>
 800f112:	4b4c      	ldr	r3, [pc, #304]	; (800f244 <UART_SetConfig+0x338>)
 800f114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f116:	f003 0307 	and.w	r3, r3, #7
 800f11a:	2b05      	cmp	r3, #5
 800f11c:	d826      	bhi.n	800f16c <UART_SetConfig+0x260>
 800f11e:	a201      	add	r2, pc, #4	; (adr r2, 800f124 <UART_SetConfig+0x218>)
 800f120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f124:	0800f13d 	.word	0x0800f13d
 800f128:	0800f145 	.word	0x0800f145
 800f12c:	0800f14d 	.word	0x0800f14d
 800f130:	0800f155 	.word	0x0800f155
 800f134:	0800f15d 	.word	0x0800f15d
 800f138:	0800f165 	.word	0x0800f165
 800f13c:	2300      	movs	r3, #0
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e1b6      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f144:	2304      	movs	r3, #4
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e1b2      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f14c:	2308      	movs	r3, #8
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e1ae      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f154:	2310      	movs	r3, #16
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e1aa      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f15c:	2320      	movs	r3, #32
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e1a6      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f164:	2340      	movs	r3, #64	; 0x40
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e1a2      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f16c:	2380      	movs	r3, #128	; 0x80
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e19e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4a35      	ldr	r2, [pc, #212]	; (800f250 <UART_SetConfig+0x344>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d130      	bne.n	800f1e0 <UART_SetConfig+0x2d4>
 800f17e:	4b31      	ldr	r3, [pc, #196]	; (800f244 <UART_SetConfig+0x338>)
 800f180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	2b05      	cmp	r3, #5
 800f188:	d826      	bhi.n	800f1d8 <UART_SetConfig+0x2cc>
 800f18a:	a201      	add	r2, pc, #4	; (adr r2, 800f190 <UART_SetConfig+0x284>)
 800f18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f190:	0800f1a9 	.word	0x0800f1a9
 800f194:	0800f1b1 	.word	0x0800f1b1
 800f198:	0800f1b9 	.word	0x0800f1b9
 800f19c:	0800f1c1 	.word	0x0800f1c1
 800f1a0:	0800f1c9 	.word	0x0800f1c9
 800f1a4:	0800f1d1 	.word	0x0800f1d1
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ae:	e180      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1b0:	2304      	movs	r3, #4
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b6:	e17c      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1b8:	2308      	movs	r3, #8
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1be:	e178      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1c0:	2310      	movs	r3, #16
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c6:	e174      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1c8:	2320      	movs	r3, #32
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ce:	e170      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1d0:	2340      	movs	r3, #64	; 0x40
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d6:	e16c      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1d8:	2380      	movs	r3, #128	; 0x80
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1de:	e168      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4a1b      	ldr	r2, [pc, #108]	; (800f254 <UART_SetConfig+0x348>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d142      	bne.n	800f270 <UART_SetConfig+0x364>
 800f1ea:	4b16      	ldr	r3, [pc, #88]	; (800f244 <UART_SetConfig+0x338>)
 800f1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	2b05      	cmp	r3, #5
 800f1f4:	d838      	bhi.n	800f268 <UART_SetConfig+0x35c>
 800f1f6:	a201      	add	r2, pc, #4	; (adr r2, 800f1fc <UART_SetConfig+0x2f0>)
 800f1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1fc:	0800f215 	.word	0x0800f215
 800f200:	0800f21d 	.word	0x0800f21d
 800f204:	0800f225 	.word	0x0800f225
 800f208:	0800f22d 	.word	0x0800f22d
 800f20c:	0800f259 	.word	0x0800f259
 800f210:	0800f261 	.word	0x0800f261
 800f214:	2300      	movs	r3, #0
 800f216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21a:	e14a      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f21c:	2304      	movs	r3, #4
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e146      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f224:	2308      	movs	r3, #8
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e142      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f22c:	2310      	movs	r3, #16
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e13e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f234:	cfff69f3 	.word	0xcfff69f3
 800f238:	58000c00 	.word	0x58000c00
 800f23c:	11fff4ff 	.word	0x11fff4ff
 800f240:	40011000 	.word	0x40011000
 800f244:	58024400 	.word	0x58024400
 800f248:	40004400 	.word	0x40004400
 800f24c:	40004800 	.word	0x40004800
 800f250:	40004c00 	.word	0x40004c00
 800f254:	40005000 	.word	0x40005000
 800f258:	2320      	movs	r3, #32
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25e:	e128      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f260:	2340      	movs	r3, #64	; 0x40
 800f262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f266:	e124      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f268:	2380      	movs	r3, #128	; 0x80
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26e:	e120      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4acb      	ldr	r2, [pc, #812]	; (800f5a4 <UART_SetConfig+0x698>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d176      	bne.n	800f368 <UART_SetConfig+0x45c>
 800f27a:	4bcb      	ldr	r3, [pc, #812]	; (800f5a8 <UART_SetConfig+0x69c>)
 800f27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f282:	2b28      	cmp	r3, #40	; 0x28
 800f284:	d86c      	bhi.n	800f360 <UART_SetConfig+0x454>
 800f286:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <UART_SetConfig+0x380>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f331 	.word	0x0800f331
 800f290:	0800f361 	.word	0x0800f361
 800f294:	0800f361 	.word	0x0800f361
 800f298:	0800f361 	.word	0x0800f361
 800f29c:	0800f361 	.word	0x0800f361
 800f2a0:	0800f361 	.word	0x0800f361
 800f2a4:	0800f361 	.word	0x0800f361
 800f2a8:	0800f361 	.word	0x0800f361
 800f2ac:	0800f339 	.word	0x0800f339
 800f2b0:	0800f361 	.word	0x0800f361
 800f2b4:	0800f361 	.word	0x0800f361
 800f2b8:	0800f361 	.word	0x0800f361
 800f2bc:	0800f361 	.word	0x0800f361
 800f2c0:	0800f361 	.word	0x0800f361
 800f2c4:	0800f361 	.word	0x0800f361
 800f2c8:	0800f361 	.word	0x0800f361
 800f2cc:	0800f341 	.word	0x0800f341
 800f2d0:	0800f361 	.word	0x0800f361
 800f2d4:	0800f361 	.word	0x0800f361
 800f2d8:	0800f361 	.word	0x0800f361
 800f2dc:	0800f361 	.word	0x0800f361
 800f2e0:	0800f361 	.word	0x0800f361
 800f2e4:	0800f361 	.word	0x0800f361
 800f2e8:	0800f361 	.word	0x0800f361
 800f2ec:	0800f349 	.word	0x0800f349
 800f2f0:	0800f361 	.word	0x0800f361
 800f2f4:	0800f361 	.word	0x0800f361
 800f2f8:	0800f361 	.word	0x0800f361
 800f2fc:	0800f361 	.word	0x0800f361
 800f300:	0800f361 	.word	0x0800f361
 800f304:	0800f361 	.word	0x0800f361
 800f308:	0800f361 	.word	0x0800f361
 800f30c:	0800f351 	.word	0x0800f351
 800f310:	0800f361 	.word	0x0800f361
 800f314:	0800f361 	.word	0x0800f361
 800f318:	0800f361 	.word	0x0800f361
 800f31c:	0800f361 	.word	0x0800f361
 800f320:	0800f361 	.word	0x0800f361
 800f324:	0800f361 	.word	0x0800f361
 800f328:	0800f361 	.word	0x0800f361
 800f32c:	0800f359 	.word	0x0800f359
 800f330:	2301      	movs	r3, #1
 800f332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f336:	e0bc      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f338:	2304      	movs	r3, #4
 800f33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f33e:	e0b8      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f340:	2308      	movs	r3, #8
 800f342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f346:	e0b4      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f348:	2310      	movs	r3, #16
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34e:	e0b0      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f350:	2320      	movs	r3, #32
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f356:	e0ac      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f358:	2340      	movs	r3, #64	; 0x40
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f35e:	e0a8      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f360:	2380      	movs	r3, #128	; 0x80
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e0a4      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a8f      	ldr	r2, [pc, #572]	; (800f5ac <UART_SetConfig+0x6a0>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d130      	bne.n	800f3d4 <UART_SetConfig+0x4c8>
 800f372:	4b8d      	ldr	r3, [pc, #564]	; (800f5a8 <UART_SetConfig+0x69c>)
 800f374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f376:	f003 0307 	and.w	r3, r3, #7
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	d826      	bhi.n	800f3cc <UART_SetConfig+0x4c0>
 800f37e:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <UART_SetConfig+0x478>)
 800f380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f384:	0800f39d 	.word	0x0800f39d
 800f388:	0800f3a5 	.word	0x0800f3a5
 800f38c:	0800f3ad 	.word	0x0800f3ad
 800f390:	0800f3b5 	.word	0x0800f3b5
 800f394:	0800f3bd 	.word	0x0800f3bd
 800f398:	0800f3c5 	.word	0x0800f3c5
 800f39c:	2300      	movs	r3, #0
 800f39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3a2:	e086      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3a4:	2304      	movs	r3, #4
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3aa:	e082      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3ac:	2308      	movs	r3, #8
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3b2:	e07e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3b4:	2310      	movs	r3, #16
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ba:	e07a      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3bc:	2320      	movs	r3, #32
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c2:	e076      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3c4:	2340      	movs	r3, #64	; 0x40
 800f3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ca:	e072      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3cc:	2380      	movs	r3, #128	; 0x80
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d2:	e06e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a75      	ldr	r2, [pc, #468]	; (800f5b0 <UART_SetConfig+0x6a4>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d130      	bne.n	800f440 <UART_SetConfig+0x534>
 800f3de:	4b72      	ldr	r3, [pc, #456]	; (800f5a8 <UART_SetConfig+0x69c>)
 800f3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3e2:	f003 0307 	and.w	r3, r3, #7
 800f3e6:	2b05      	cmp	r3, #5
 800f3e8:	d826      	bhi.n	800f438 <UART_SetConfig+0x52c>
 800f3ea:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <UART_SetConfig+0x4e4>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f409 	.word	0x0800f409
 800f3f4:	0800f411 	.word	0x0800f411
 800f3f8:	0800f419 	.word	0x0800f419
 800f3fc:	0800f421 	.word	0x0800f421
 800f400:	0800f429 	.word	0x0800f429
 800f404:	0800f431 	.word	0x0800f431
 800f408:	2300      	movs	r3, #0
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40e:	e050      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f410:	2304      	movs	r3, #4
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f416:	e04c      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f418:	2308      	movs	r3, #8
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41e:	e048      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f420:	2310      	movs	r3, #16
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e044      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f428:	2320      	movs	r3, #32
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e040      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f430:	2340      	movs	r3, #64	; 0x40
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f436:	e03c      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f438:	2380      	movs	r3, #128	; 0x80
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e038      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a5b      	ldr	r2, [pc, #364]	; (800f5b4 <UART_SetConfig+0x6a8>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d130      	bne.n	800f4ac <UART_SetConfig+0x5a0>
 800f44a:	4b57      	ldr	r3, [pc, #348]	; (800f5a8 <UART_SetConfig+0x69c>)
 800f44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f44e:	f003 0307 	and.w	r3, r3, #7
 800f452:	2b05      	cmp	r3, #5
 800f454:	d826      	bhi.n	800f4a4 <UART_SetConfig+0x598>
 800f456:	a201      	add	r2, pc, #4	; (adr r2, 800f45c <UART_SetConfig+0x550>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f475 	.word	0x0800f475
 800f460:	0800f47d 	.word	0x0800f47d
 800f464:	0800f485 	.word	0x0800f485
 800f468:	0800f48d 	.word	0x0800f48d
 800f46c:	0800f495 	.word	0x0800f495
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	2302      	movs	r3, #2
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f47a:	e01a      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f47c:	2304      	movs	r3, #4
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f482:	e016      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f484:	2308      	movs	r3, #8
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48a:	e012      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f48c:	2310      	movs	r3, #16
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e00e      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f494:	2320      	movs	r3, #32
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e00a      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f49c:	2340      	movs	r3, #64	; 0x40
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e006      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f4a4:	2380      	movs	r3, #128	; 0x80
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e002      	b.n	800f4b2 <UART_SetConfig+0x5a6>
 800f4ac:	2380      	movs	r3, #128	; 0x80
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a3f      	ldr	r2, [pc, #252]	; (800f5b4 <UART_SetConfig+0x6a8>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	f040 80f8 	bne.w	800f6ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f4be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4c2:	2b20      	cmp	r3, #32
 800f4c4:	dc46      	bgt.n	800f554 <UART_SetConfig+0x648>
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	f2c0 8082 	blt.w	800f5d0 <UART_SetConfig+0x6c4>
 800f4cc:	3b02      	subs	r3, #2
 800f4ce:	2b1e      	cmp	r3, #30
 800f4d0:	d87e      	bhi.n	800f5d0 <UART_SetConfig+0x6c4>
 800f4d2:	a201      	add	r2, pc, #4	; (adr r2, 800f4d8 <UART_SetConfig+0x5cc>)
 800f4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d8:	0800f55b 	.word	0x0800f55b
 800f4dc:	0800f5d1 	.word	0x0800f5d1
 800f4e0:	0800f563 	.word	0x0800f563
 800f4e4:	0800f5d1 	.word	0x0800f5d1
 800f4e8:	0800f5d1 	.word	0x0800f5d1
 800f4ec:	0800f5d1 	.word	0x0800f5d1
 800f4f0:	0800f573 	.word	0x0800f573
 800f4f4:	0800f5d1 	.word	0x0800f5d1
 800f4f8:	0800f5d1 	.word	0x0800f5d1
 800f4fc:	0800f5d1 	.word	0x0800f5d1
 800f500:	0800f5d1 	.word	0x0800f5d1
 800f504:	0800f5d1 	.word	0x0800f5d1
 800f508:	0800f5d1 	.word	0x0800f5d1
 800f50c:	0800f5d1 	.word	0x0800f5d1
 800f510:	0800f583 	.word	0x0800f583
 800f514:	0800f5d1 	.word	0x0800f5d1
 800f518:	0800f5d1 	.word	0x0800f5d1
 800f51c:	0800f5d1 	.word	0x0800f5d1
 800f520:	0800f5d1 	.word	0x0800f5d1
 800f524:	0800f5d1 	.word	0x0800f5d1
 800f528:	0800f5d1 	.word	0x0800f5d1
 800f52c:	0800f5d1 	.word	0x0800f5d1
 800f530:	0800f5d1 	.word	0x0800f5d1
 800f534:	0800f5d1 	.word	0x0800f5d1
 800f538:	0800f5d1 	.word	0x0800f5d1
 800f53c:	0800f5d1 	.word	0x0800f5d1
 800f540:	0800f5d1 	.word	0x0800f5d1
 800f544:	0800f5d1 	.word	0x0800f5d1
 800f548:	0800f5d1 	.word	0x0800f5d1
 800f54c:	0800f5d1 	.word	0x0800f5d1
 800f550:	0800f5c3 	.word	0x0800f5c3
 800f554:	2b40      	cmp	r3, #64	; 0x40
 800f556:	d037      	beq.n	800f5c8 <UART_SetConfig+0x6bc>
 800f558:	e03a      	b.n	800f5d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f55a:	f7fc f8d5 	bl	800b708 <HAL_RCCEx_GetD3PCLK1Freq>
 800f55e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f560:	e03c      	b.n	800f5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f566:	4618      	mov	r0, r3
 800f568:	f7fc f8e4 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f570:	e034      	b.n	800f5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f572:	f107 0318 	add.w	r3, r7, #24
 800f576:	4618      	mov	r0, r3
 800f578:	f7fc fa30 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f580:	e02c      	b.n	800f5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f582:	4b09      	ldr	r3, [pc, #36]	; (800f5a8 <UART_SetConfig+0x69c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f003 0320 	and.w	r3, r3, #32
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d016      	beq.n	800f5bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f58e:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <UART_SetConfig+0x69c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	08db      	lsrs	r3, r3, #3
 800f594:	f003 0303 	and.w	r3, r3, #3
 800f598:	4a07      	ldr	r2, [pc, #28]	; (800f5b8 <UART_SetConfig+0x6ac>)
 800f59a:	fa22 f303 	lsr.w	r3, r2, r3
 800f59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5a0:	e01c      	b.n	800f5dc <UART_SetConfig+0x6d0>
 800f5a2:	bf00      	nop
 800f5a4:	40011400 	.word	0x40011400
 800f5a8:	58024400 	.word	0x58024400
 800f5ac:	40007800 	.word	0x40007800
 800f5b0:	40007c00 	.word	0x40007c00
 800f5b4:	58000c00 	.word	0x58000c00
 800f5b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f5bc:	4b9d      	ldr	r3, [pc, #628]	; (800f834 <UART_SetConfig+0x928>)
 800f5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5c0:	e00c      	b.n	800f5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5c2:	4b9d      	ldr	r3, [pc, #628]	; (800f838 <UART_SetConfig+0x92c>)
 800f5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5c6:	e009      	b.n	800f5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5ce:	e005      	b.n	800f5dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f5da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 81de 	beq.w	800f9a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e8:	4a94      	ldr	r2, [pc, #592]	; (800f83c <UART_SetConfig+0x930>)
 800f5ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	685a      	ldr	r2, [r3, #4]
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	4413      	add	r3, r2
 800f602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f604:	429a      	cmp	r2, r3
 800f606:	d305      	bcc.n	800f614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f610:	429a      	cmp	r2, r3
 800f612:	d903      	bls.n	800f61c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f614:	2301      	movs	r3, #1
 800f616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f61a:	e1c1      	b.n	800f9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f61e:	2200      	movs	r2, #0
 800f620:	60bb      	str	r3, [r7, #8]
 800f622:	60fa      	str	r2, [r7, #12]
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f628:	4a84      	ldr	r2, [pc, #528]	; (800f83c <UART_SetConfig+0x930>)
 800f62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f62e:	b29b      	uxth	r3, r3
 800f630:	2200      	movs	r2, #0
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	607a      	str	r2, [r7, #4]
 800f636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f63a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f63e:	f7f0 fe4b 	bl	80002d8 <__aeabi_uldivmod>
 800f642:	4602      	mov	r2, r0
 800f644:	460b      	mov	r3, r1
 800f646:	4610      	mov	r0, r2
 800f648:	4619      	mov	r1, r3
 800f64a:	f04f 0200 	mov.w	r2, #0
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	020b      	lsls	r3, r1, #8
 800f654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f658:	0202      	lsls	r2, r0, #8
 800f65a:	6979      	ldr	r1, [r7, #20]
 800f65c:	6849      	ldr	r1, [r1, #4]
 800f65e:	0849      	lsrs	r1, r1, #1
 800f660:	2000      	movs	r0, #0
 800f662:	460c      	mov	r4, r1
 800f664:	4605      	mov	r5, r0
 800f666:	eb12 0804 	adds.w	r8, r2, r4
 800f66a:	eb43 0905 	adc.w	r9, r3, r5
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	469a      	mov	sl, r3
 800f676:	4693      	mov	fp, r2
 800f678:	4652      	mov	r2, sl
 800f67a:	465b      	mov	r3, fp
 800f67c:	4640      	mov	r0, r8
 800f67e:	4649      	mov	r1, r9
 800f680:	f7f0 fe2a 	bl	80002d8 <__aeabi_uldivmod>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4613      	mov	r3, r2
 800f68a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f692:	d308      	bcc.n	800f6a6 <UART_SetConfig+0x79a>
 800f694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f69a:	d204      	bcs.n	800f6a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6a2:	60da      	str	r2, [r3, #12]
 800f6a4:	e17c      	b.n	800f9a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f6ac:	e178      	b.n	800f9a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	69db      	ldr	r3, [r3, #28]
 800f6b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6b6:	f040 80c5 	bne.w	800f844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f6ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6be:	2b20      	cmp	r3, #32
 800f6c0:	dc48      	bgt.n	800f754 <UART_SetConfig+0x848>
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	db7b      	blt.n	800f7be <UART_SetConfig+0x8b2>
 800f6c6:	2b20      	cmp	r3, #32
 800f6c8:	d879      	bhi.n	800f7be <UART_SetConfig+0x8b2>
 800f6ca:	a201      	add	r2, pc, #4	; (adr r2, 800f6d0 <UART_SetConfig+0x7c4>)
 800f6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d0:	0800f75b 	.word	0x0800f75b
 800f6d4:	0800f763 	.word	0x0800f763
 800f6d8:	0800f7bf 	.word	0x0800f7bf
 800f6dc:	0800f7bf 	.word	0x0800f7bf
 800f6e0:	0800f76b 	.word	0x0800f76b
 800f6e4:	0800f7bf 	.word	0x0800f7bf
 800f6e8:	0800f7bf 	.word	0x0800f7bf
 800f6ec:	0800f7bf 	.word	0x0800f7bf
 800f6f0:	0800f77b 	.word	0x0800f77b
 800f6f4:	0800f7bf 	.word	0x0800f7bf
 800f6f8:	0800f7bf 	.word	0x0800f7bf
 800f6fc:	0800f7bf 	.word	0x0800f7bf
 800f700:	0800f7bf 	.word	0x0800f7bf
 800f704:	0800f7bf 	.word	0x0800f7bf
 800f708:	0800f7bf 	.word	0x0800f7bf
 800f70c:	0800f7bf 	.word	0x0800f7bf
 800f710:	0800f78b 	.word	0x0800f78b
 800f714:	0800f7bf 	.word	0x0800f7bf
 800f718:	0800f7bf 	.word	0x0800f7bf
 800f71c:	0800f7bf 	.word	0x0800f7bf
 800f720:	0800f7bf 	.word	0x0800f7bf
 800f724:	0800f7bf 	.word	0x0800f7bf
 800f728:	0800f7bf 	.word	0x0800f7bf
 800f72c:	0800f7bf 	.word	0x0800f7bf
 800f730:	0800f7bf 	.word	0x0800f7bf
 800f734:	0800f7bf 	.word	0x0800f7bf
 800f738:	0800f7bf 	.word	0x0800f7bf
 800f73c:	0800f7bf 	.word	0x0800f7bf
 800f740:	0800f7bf 	.word	0x0800f7bf
 800f744:	0800f7bf 	.word	0x0800f7bf
 800f748:	0800f7bf 	.word	0x0800f7bf
 800f74c:	0800f7bf 	.word	0x0800f7bf
 800f750:	0800f7b1 	.word	0x0800f7b1
 800f754:	2b40      	cmp	r3, #64	; 0x40
 800f756:	d02e      	beq.n	800f7b6 <UART_SetConfig+0x8aa>
 800f758:	e031      	b.n	800f7be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f75a:	f7fa f81f 	bl	800979c <HAL_RCC_GetPCLK1Freq>
 800f75e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f760:	e033      	b.n	800f7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f762:	f7fa f831 	bl	80097c8 <HAL_RCC_GetPCLK2Freq>
 800f766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f768:	e02f      	b.n	800f7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fb ffe0 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f778:	e027      	b.n	800f7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f77a:	f107 0318 	add.w	r3, r7, #24
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fc f92c 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f788:	e01f      	b.n	800f7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f78a:	4b2d      	ldr	r3, [pc, #180]	; (800f840 <UART_SetConfig+0x934>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 0320 	and.w	r3, r3, #32
 800f792:	2b00      	cmp	r3, #0
 800f794:	d009      	beq.n	800f7aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f796:	4b2a      	ldr	r3, [pc, #168]	; (800f840 <UART_SetConfig+0x934>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	08db      	lsrs	r3, r3, #3
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	4a24      	ldr	r2, [pc, #144]	; (800f834 <UART_SetConfig+0x928>)
 800f7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7a8:	e00f      	b.n	800f7ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f7aa:	4b22      	ldr	r3, [pc, #136]	; (800f834 <UART_SetConfig+0x928>)
 800f7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7ae:	e00c      	b.n	800f7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7b0:	4b21      	ldr	r3, [pc, #132]	; (800f838 <UART_SetConfig+0x92c>)
 800f7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7b4:	e009      	b.n	800f7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7bc:	e005      	b.n	800f7ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80e7 	beq.w	800f9a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d6:	4a19      	ldr	r2, [pc, #100]	; (800f83c <UART_SetConfig+0x930>)
 800f7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7e4:	005a      	lsls	r2, r3, #1
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	085b      	lsrs	r3, r3, #1
 800f7ec:	441a      	add	r2, r3
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fa:	2b0f      	cmp	r3, #15
 800f7fc:	d916      	bls.n	800f82c <UART_SetConfig+0x920>
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f804:	d212      	bcs.n	800f82c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	b29b      	uxth	r3, r3
 800f80a:	f023 030f 	bic.w	r3, r3, #15
 800f80e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f812:	085b      	lsrs	r3, r3, #1
 800f814:	b29b      	uxth	r3, r3
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f81e:	4313      	orrs	r3, r2
 800f820:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f828:	60da      	str	r2, [r3, #12]
 800f82a:	e0b9      	b.n	800f9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f832:	e0b5      	b.n	800f9a0 <UART_SetConfig+0xa94>
 800f834:	03d09000 	.word	0x03d09000
 800f838:	003d0900 	.word	0x003d0900
 800f83c:	08011044 	.word	0x08011044
 800f840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f848:	2b20      	cmp	r3, #32
 800f84a:	dc49      	bgt.n	800f8e0 <UART_SetConfig+0x9d4>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	db7c      	blt.n	800f94a <UART_SetConfig+0xa3e>
 800f850:	2b20      	cmp	r3, #32
 800f852:	d87a      	bhi.n	800f94a <UART_SetConfig+0xa3e>
 800f854:	a201      	add	r2, pc, #4	; (adr r2, 800f85c <UART_SetConfig+0x950>)
 800f856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85a:	bf00      	nop
 800f85c:	0800f8e7 	.word	0x0800f8e7
 800f860:	0800f8ef 	.word	0x0800f8ef
 800f864:	0800f94b 	.word	0x0800f94b
 800f868:	0800f94b 	.word	0x0800f94b
 800f86c:	0800f8f7 	.word	0x0800f8f7
 800f870:	0800f94b 	.word	0x0800f94b
 800f874:	0800f94b 	.word	0x0800f94b
 800f878:	0800f94b 	.word	0x0800f94b
 800f87c:	0800f907 	.word	0x0800f907
 800f880:	0800f94b 	.word	0x0800f94b
 800f884:	0800f94b 	.word	0x0800f94b
 800f888:	0800f94b 	.word	0x0800f94b
 800f88c:	0800f94b 	.word	0x0800f94b
 800f890:	0800f94b 	.word	0x0800f94b
 800f894:	0800f94b 	.word	0x0800f94b
 800f898:	0800f94b 	.word	0x0800f94b
 800f89c:	0800f917 	.word	0x0800f917
 800f8a0:	0800f94b 	.word	0x0800f94b
 800f8a4:	0800f94b 	.word	0x0800f94b
 800f8a8:	0800f94b 	.word	0x0800f94b
 800f8ac:	0800f94b 	.word	0x0800f94b
 800f8b0:	0800f94b 	.word	0x0800f94b
 800f8b4:	0800f94b 	.word	0x0800f94b
 800f8b8:	0800f94b 	.word	0x0800f94b
 800f8bc:	0800f94b 	.word	0x0800f94b
 800f8c0:	0800f94b 	.word	0x0800f94b
 800f8c4:	0800f94b 	.word	0x0800f94b
 800f8c8:	0800f94b 	.word	0x0800f94b
 800f8cc:	0800f94b 	.word	0x0800f94b
 800f8d0:	0800f94b 	.word	0x0800f94b
 800f8d4:	0800f94b 	.word	0x0800f94b
 800f8d8:	0800f94b 	.word	0x0800f94b
 800f8dc:	0800f93d 	.word	0x0800f93d
 800f8e0:	2b40      	cmp	r3, #64	; 0x40
 800f8e2:	d02e      	beq.n	800f942 <UART_SetConfig+0xa36>
 800f8e4:	e031      	b.n	800f94a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8e6:	f7f9 ff59 	bl	800979c <HAL_RCC_GetPCLK1Freq>
 800f8ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f8ec:	e033      	b.n	800f956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8ee:	f7f9 ff6b 	bl	80097c8 <HAL_RCC_GetPCLK2Freq>
 800f8f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f8f4:	e02f      	b.n	800f956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fb ff1a 	bl	800b734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f904:	e027      	b.n	800f956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f906:	f107 0318 	add.w	r3, r7, #24
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fc f866 	bl	800b9dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f914:	e01f      	b.n	800f956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f916:	4b2d      	ldr	r3, [pc, #180]	; (800f9cc <UART_SetConfig+0xac0>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f003 0320 	and.w	r3, r3, #32
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d009      	beq.n	800f936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f922:	4b2a      	ldr	r3, [pc, #168]	; (800f9cc <UART_SetConfig+0xac0>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	08db      	lsrs	r3, r3, #3
 800f928:	f003 0303 	and.w	r3, r3, #3
 800f92c:	4a28      	ldr	r2, [pc, #160]	; (800f9d0 <UART_SetConfig+0xac4>)
 800f92e:	fa22 f303 	lsr.w	r3, r2, r3
 800f932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f934:	e00f      	b.n	800f956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f936:	4b26      	ldr	r3, [pc, #152]	; (800f9d0 <UART_SetConfig+0xac4>)
 800f938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f93a:	e00c      	b.n	800f956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f93c:	4b25      	ldr	r3, [pc, #148]	; (800f9d4 <UART_SetConfig+0xac8>)
 800f93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f940:	e009      	b.n	800f956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f948:	e005      	b.n	800f956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f94a:	2300      	movs	r3, #0
 800f94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f954:	bf00      	nop
    }

    if (pclk != 0U)
 800f956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d021      	beq.n	800f9a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f960:	4a1d      	ldr	r2, [pc, #116]	; (800f9d8 <UART_SetConfig+0xacc>)
 800f962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f966:	461a      	mov	r2, r3
 800f968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	085b      	lsrs	r3, r3, #1
 800f974:	441a      	add	r2, r3
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f97e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f982:	2b0f      	cmp	r3, #15
 800f984:	d909      	bls.n	800f99a <UART_SetConfig+0xa8e>
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f98c:	d205      	bcs.n	800f99a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	b29a      	uxth	r2, r3
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	60da      	str	r2, [r3, #12]
 800f998:	e002      	b.n	800f9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f99a:	2301      	movs	r3, #1
 800f99c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f9bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3748      	adds	r7, #72	; 0x48
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f9ca:	bf00      	nop
 800f9cc:	58024400 	.word	0x58024400
 800f9d0:	03d09000 	.word	0x03d09000
 800f9d4:	003d0900 	.word	0x003d0900
 800f9d8:	08011044 	.word	0x08011044

0800f9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e8:	f003 0308 	and.w	r3, r3, #8
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00a      	beq.n	800fa06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	430a      	orrs	r2, r1
 800fa04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00a      	beq.n	800fa28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	430a      	orrs	r2, r1
 800fa26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa2c:	f003 0302 	and.w	r3, r3, #2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00a      	beq.n	800fa4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	430a      	orrs	r2, r1
 800fa48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa4e:	f003 0304 	and.w	r3, r3, #4
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00a      	beq.n	800fa6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	430a      	orrs	r2, r1
 800fa6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa70:	f003 0310 	and.w	r3, r3, #16
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00a      	beq.n	800fa8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	430a      	orrs	r2, r1
 800fa8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa92:	f003 0320 	and.w	r3, r3, #32
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00a      	beq.n	800fab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	430a      	orrs	r2, r1
 800faae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d01a      	beq.n	800faf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	430a      	orrs	r2, r1
 800fad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fada:	d10a      	bne.n	800faf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	430a      	orrs	r2, r1
 800faf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	430a      	orrs	r2, r1
 800fb12:	605a      	str	r2, [r3, #4]
  }
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b098      	sub	sp, #96	; 0x60
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb30:	f7f2 ff02 	bl	8002938 <HAL_GetTick>
 800fb34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b08      	cmp	r3, #8
 800fb42:	d12f      	bne.n	800fba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f88e 	bl	800fc74 <UART_WaitOnFlagUntilTimeout>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d022      	beq.n	800fba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb66:	e853 3f00 	ldrex	r3, [r3]
 800fb6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb72:	653b      	str	r3, [r7, #80]	; 0x50
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb7c:	647b      	str	r3, [r7, #68]	; 0x44
 800fb7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb84:	e841 2300 	strex	r3, r2, [r1]
 800fb88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e6      	bne.n	800fb5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2220      	movs	r2, #32
 800fb94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fba0:	2303      	movs	r3, #3
 800fba2:	e063      	b.n	800fc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d149      	bne.n	800fc46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 f857 	bl	800fc74 <UART_WaitOnFlagUntilTimeout>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d03c      	beq.n	800fc46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd4:	e853 3f00 	ldrex	r3, [r3]
 800fbd8:	623b      	str	r3, [r7, #32]
   return(result);
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbea:	633b      	str	r3, [r7, #48]	; 0x30
 800fbec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1e6      	bne.n	800fbcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	3308      	adds	r3, #8
 800fc04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	e853 3f00 	ldrex	r3, [r3]
 800fc0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f023 0301 	bic.w	r3, r3, #1
 800fc14:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc1e:	61fa      	str	r2, [r7, #28]
 800fc20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc22:	69b9      	ldr	r1, [r7, #24]
 800fc24:	69fa      	ldr	r2, [r7, #28]
 800fc26:	e841 2300 	strex	r3, r2, [r1]
 800fc2a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1e5      	bne.n	800fbfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2220      	movs	r2, #32
 800fc36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc42:	2303      	movs	r3, #3
 800fc44:	e012      	b.n	800fc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2220      	movs	r2, #32
 800fc4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2220      	movs	r2, #32
 800fc52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3758      	adds	r7, #88	; 0x58
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	4613      	mov	r3, r2
 800fc82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc84:	e04f      	b.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc8c:	d04b      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc8e:	f7f2 fe53 	bl	8002938 <HAL_GetTick>
 800fc92:	4602      	mov	r2, r0
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	69ba      	ldr	r2, [r7, #24]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d302      	bcc.n	800fca4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d101      	bne.n	800fca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fca4:	2303      	movs	r3, #3
 800fca6:	e04e      	b.n	800fd46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f003 0304 	and.w	r3, r3, #4
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d037      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2b80      	cmp	r3, #128	; 0x80
 800fcba:	d034      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2b40      	cmp	r3, #64	; 0x40
 800fcc0:	d031      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	f003 0308 	and.w	r3, r3, #8
 800fccc:	2b08      	cmp	r3, #8
 800fcce:	d110      	bne.n	800fcf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2208      	movs	r2, #8
 800fcd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f000 f95b 	bl	800ff94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2208      	movs	r2, #8
 800fce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e029      	b.n	800fd46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	69db      	ldr	r3, [r3, #28]
 800fcf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd00:	d111      	bne.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f000 f941 	bl	800ff94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2220      	movs	r2, #32
 800fd16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fd22:	2303      	movs	r3, #3
 800fd24:	e00f      	b.n	800fd46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	69da      	ldr	r2, [r3, #28]
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	4013      	ands	r3, r2
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	bf0c      	ite	eq
 800fd36:	2301      	moveq	r3, #1
 800fd38:	2300      	movne	r3, #0
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d0a0      	beq.n	800fc86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
	...

0800fd50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b0a3      	sub	sp, #140	; 0x8c
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	68ba      	ldr	r2, [r7, #8]
 800fd62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	88fa      	ldrh	r2, [r7, #6]
 800fd68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	88fa      	ldrh	r2, [r7, #6]
 800fd70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2200      	movs	r2, #0
 800fd78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd82:	d10e      	bne.n	800fda2 <UART_Start_Receive_IT+0x52>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d105      	bne.n	800fd98 <UART_Start_Receive_IT+0x48>
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fd92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd96:	e02d      	b.n	800fdf4 <UART_Start_Receive_IT+0xa4>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	22ff      	movs	r2, #255	; 0xff
 800fd9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fda0:	e028      	b.n	800fdf4 <UART_Start_Receive_IT+0xa4>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10d      	bne.n	800fdc6 <UART_Start_Receive_IT+0x76>
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d104      	bne.n	800fdbc <UART_Start_Receive_IT+0x6c>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	22ff      	movs	r2, #255	; 0xff
 800fdb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdba:	e01b      	b.n	800fdf4 <UART_Start_Receive_IT+0xa4>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	227f      	movs	r2, #127	; 0x7f
 800fdc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdc4:	e016      	b.n	800fdf4 <UART_Start_Receive_IT+0xa4>
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fdce:	d10d      	bne.n	800fdec <UART_Start_Receive_IT+0x9c>
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d104      	bne.n	800fde2 <UART_Start_Receive_IT+0x92>
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	227f      	movs	r2, #127	; 0x7f
 800fddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fde0:	e008      	b.n	800fdf4 <UART_Start_Receive_IT+0xa4>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	223f      	movs	r2, #63	; 0x3f
 800fde6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdea:	e003      	b.n	800fdf4 <UART_Start_Receive_IT+0xa4>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2222      	movs	r2, #34	; 0x22
 800fe00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	3308      	adds	r3, #8
 800fe0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe0e:	e853 3f00 	ldrex	r3, [r3]
 800fe12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fe14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe16:	f043 0301 	orr.w	r3, r3, #1
 800fe1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	3308      	adds	r3, #8
 800fe24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fe28:	673a      	str	r2, [r7, #112]	; 0x70
 800fe2a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fe2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe30:	e841 2300 	strex	r3, r2, [r1]
 800fe34:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fe36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1e3      	bne.n	800fe04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe44:	d14f      	bne.n	800fee6 <UART_Start_Receive_IT+0x196>
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe4c:	88fa      	ldrh	r2, [r7, #6]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d349      	bcc.n	800fee6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe5a:	d107      	bne.n	800fe6c <UART_Start_Receive_IT+0x11c>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d103      	bne.n	800fe6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	4a47      	ldr	r2, [pc, #284]	; (800ff84 <UART_Start_Receive_IT+0x234>)
 800fe68:	675a      	str	r2, [r3, #116]	; 0x74
 800fe6a:	e002      	b.n	800fe72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	4a46      	ldr	r2, [pc, #280]	; (800ff88 <UART_Start_Receive_IT+0x238>)
 800fe70:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d01a      	beq.n	800feb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe82:	e853 3f00 	ldrex	r3, [r3]
 800fe86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fe88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	461a      	mov	r2, r3
 800fe98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe9e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fea2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fea4:	e841 2300 	strex	r3, r2, [r1]
 800fea8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800feaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1e4      	bne.n	800fe7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	3308      	adds	r3, #8
 800feb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feba:	e853 3f00 	ldrex	r3, [r3]
 800febe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	3308      	adds	r3, #8
 800fece:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fed0:	64ba      	str	r2, [r7, #72]	; 0x48
 800fed2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fed8:	e841 2300 	strex	r3, r2, [r1]
 800fedc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d1e5      	bne.n	800feb0 <UART_Start_Receive_IT+0x160>
 800fee4:	e046      	b.n	800ff74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feee:	d107      	bne.n	800ff00 <UART_Start_Receive_IT+0x1b0>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d103      	bne.n	800ff00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4a24      	ldr	r2, [pc, #144]	; (800ff8c <UART_Start_Receive_IT+0x23c>)
 800fefc:	675a      	str	r2, [r3, #116]	; 0x74
 800fefe:	e002      	b.n	800ff06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4a23      	ldr	r2, [pc, #140]	; (800ff90 <UART_Start_Receive_IT+0x240>)
 800ff04:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d019      	beq.n	800ff42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff16:	e853 3f00 	ldrex	r3, [r3]
 800ff1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ff22:	677b      	str	r3, [r7, #116]	; 0x74
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff34:	e841 2300 	strex	r3, r2, [r1]
 800ff38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d1e6      	bne.n	800ff0e <UART_Start_Receive_IT+0x1be>
 800ff40:	e018      	b.n	800ff74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	e853 3f00 	ldrex	r3, [r3]
 800ff4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	f043 0320 	orr.w	r3, r3, #32
 800ff56:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff60:	623b      	str	r3, [r7, #32]
 800ff62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff64:	69f9      	ldr	r1, [r7, #28]
 800ff66:	6a3a      	ldr	r2, [r7, #32]
 800ff68:	e841 2300 	strex	r3, r2, [r1]
 800ff6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1e6      	bne.n	800ff42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	378c      	adds	r7, #140	; 0x8c
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	080107b5 	.word	0x080107b5
 800ff88:	08010455 	.word	0x08010455
 800ff8c:	0801029d 	.word	0x0801029d
 800ff90:	080100e5 	.word	0x080100e5

0800ff94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b095      	sub	sp, #84	; 0x54
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa4:	e853 3f00 	ldrex	r3, [r3]
 800ffa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffba:	643b      	str	r3, [r7, #64]	; 0x40
 800ffbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ffc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffc2:	e841 2300 	strex	r3, r2, [r1]
 800ffc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ffc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d1e6      	bne.n	800ff9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3308      	adds	r3, #8
 800ffd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	e853 3f00 	ldrex	r3, [r3]
 800ffdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800ffde:	69fa      	ldr	r2, [r7, #28]
 800ffe0:	4b1e      	ldr	r3, [pc, #120]	; (801005c <UART_EndRxTransfer+0xc8>)
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	3308      	adds	r3, #8
 800ffec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fff6:	e841 2300 	strex	r3, r2, [r1]
 800fffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d1e5      	bne.n	800ffce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010006:	2b01      	cmp	r3, #1
 8010008:	d118      	bne.n	801003c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	e853 3f00 	ldrex	r3, [r3]
 8010016:	60bb      	str	r3, [r7, #8]
   return(result);
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	f023 0310 	bic.w	r3, r3, #16
 801001e:	647b      	str	r3, [r7, #68]	; 0x44
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	461a      	mov	r2, r3
 8010026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010028:	61bb      	str	r3, [r7, #24]
 801002a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801002c:	6979      	ldr	r1, [r7, #20]
 801002e:	69ba      	ldr	r2, [r7, #24]
 8010030:	e841 2300 	strex	r3, r2, [r1]
 8010034:	613b      	str	r3, [r7, #16]
   return(result);
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1e6      	bne.n	801000a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2220      	movs	r2, #32
 8010040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010050:	bf00      	nop
 8010052:	3754      	adds	r7, #84	; 0x54
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	effffffe 	.word	0xeffffffe

08010060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801006c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2200      	movs	r2, #0
 8010072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2200      	movs	r2, #0
 801007a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f7fe ff2e 	bl	800eee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010084:	bf00      	nop
 8010086:	3710      	adds	r7, #16
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b088      	sub	sp, #32
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	e853 3f00 	ldrex	r3, [r3]
 80100a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100a8:	61fb      	str	r3, [r7, #28]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	461a      	mov	r2, r3
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	61bb      	str	r3, [r7, #24]
 80100b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b6:	6979      	ldr	r1, [r7, #20]
 80100b8:	69ba      	ldr	r2, [r7, #24]
 80100ba:	e841 2300 	strex	r3, r2, [r1]
 80100be:	613b      	str	r3, [r7, #16]
   return(result);
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d1e6      	bne.n	8010094 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2220      	movs	r2, #32
 80100ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fe fef9 	bl	800eecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100da:	bf00      	nop
 80100dc:	3720      	adds	r7, #32
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
	...

080100e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b09c      	sub	sp, #112	; 0x70
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100fc:	2b22      	cmp	r3, #34	; 0x22
 80100fe:	f040 80be 	bne.w	801027e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801010c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010110:	b2d9      	uxtb	r1, r3
 8010112:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010116:	b2da      	uxtb	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801011c:	400a      	ands	r2, r1
 801011e:	b2d2      	uxtb	r2, r2
 8010120:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010132:	b29b      	uxth	r3, r3
 8010134:	3b01      	subs	r3, #1
 8010136:	b29a      	uxth	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010144:	b29b      	uxth	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	f040 80a1 	bne.w	801028e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010154:	e853 3f00 	ldrex	r3, [r3]
 8010158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801015a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801015c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010160:	66bb      	str	r3, [r7, #104]	; 0x68
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	461a      	mov	r2, r3
 8010168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801016a:	65bb      	str	r3, [r7, #88]	; 0x58
 801016c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1e6      	bne.n	801014c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3308      	adds	r3, #8
 8010184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	e853 3f00 	ldrex	r3, [r3]
 801018c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801018e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010190:	f023 0301 	bic.w	r3, r3, #1
 8010194:	667b      	str	r3, [r7, #100]	; 0x64
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	3308      	adds	r3, #8
 801019c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801019e:	647a      	str	r2, [r7, #68]	; 0x44
 80101a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80101a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101a6:	e841 2300 	strex	r3, r2, [r1]
 80101aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d1e5      	bne.n	801017e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2220      	movs	r2, #32
 80101b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a33      	ldr	r2, [pc, #204]	; (8010298 <UART_RxISR_8BIT+0x1b4>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d01f      	beq.n	8010210 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d018      	beq.n	8010210 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e6:	e853 3f00 	ldrex	r3, [r3]
 80101ea:	623b      	str	r3, [r7, #32]
   return(result);
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80101f2:	663b      	str	r3, [r7, #96]	; 0x60
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	461a      	mov	r2, r3
 80101fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101fc:	633b      	str	r3, [r7, #48]	; 0x30
 80101fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010204:	e841 2300 	strex	r3, r2, [r1]
 8010208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801020a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1e6      	bne.n	80101de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010214:	2b01      	cmp	r3, #1
 8010216:	d12e      	bne.n	8010276 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	e853 3f00 	ldrex	r3, [r3]
 801022a:	60fb      	str	r3, [r7, #12]
   return(result);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f023 0310 	bic.w	r3, r3, #16
 8010232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	461a      	mov	r2, r3
 801023a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801023c:	61fb      	str	r3, [r7, #28]
 801023e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010240:	69b9      	ldr	r1, [r7, #24]
 8010242:	69fa      	ldr	r2, [r7, #28]
 8010244:	e841 2300 	strex	r3, r2, [r1]
 8010248:	617b      	str	r3, [r7, #20]
   return(result);
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d1e6      	bne.n	801021e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	69db      	ldr	r3, [r3, #28]
 8010256:	f003 0310 	and.w	r3, r3, #16
 801025a:	2b10      	cmp	r3, #16
 801025c:	d103      	bne.n	8010266 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2210      	movs	r2, #16
 8010264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7fe fe40 	bl	800eef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010274:	e00b      	b.n	801028e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7f0 fd3e 	bl	8000cf8 <HAL_UART_RxCpltCallback>
}
 801027c:	e007      	b.n	801028e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	699a      	ldr	r2, [r3, #24]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f042 0208 	orr.w	r2, r2, #8
 801028c:	619a      	str	r2, [r3, #24]
}
 801028e:	bf00      	nop
 8010290:	3770      	adds	r7, #112	; 0x70
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	58000c00 	.word	0x58000c00

0801029c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b09c      	sub	sp, #112	; 0x70
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102b4:	2b22      	cmp	r3, #34	; 0x22
 80102b6:	f040 80be 	bne.w	8010436 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80102ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80102ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80102d2:	4013      	ands	r3, r2
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102de:	1c9a      	adds	r2, r3, #2
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	3b01      	subs	r3, #1
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f040 80a1 	bne.w	8010446 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801030c:	e853 3f00 	ldrex	r3, [r3]
 8010310:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010318:	667b      	str	r3, [r7, #100]	; 0x64
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	461a      	mov	r2, r3
 8010320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010322:	657b      	str	r3, [r7, #84]	; 0x54
 8010324:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010326:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801032a:	e841 2300 	strex	r3, r2, [r1]
 801032e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010332:	2b00      	cmp	r3, #0
 8010334:	d1e6      	bne.n	8010304 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	3308      	adds	r3, #8
 801033c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801033e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010340:	e853 3f00 	ldrex	r3, [r3]
 8010344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010348:	f023 0301 	bic.w	r3, r3, #1
 801034c:	663b      	str	r3, [r7, #96]	; 0x60
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	3308      	adds	r3, #8
 8010354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010356:	643a      	str	r2, [r7, #64]	; 0x40
 8010358:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801035c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801035e:	e841 2300 	strex	r3, r2, [r1]
 8010362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1e5      	bne.n	8010336 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2220      	movs	r2, #32
 801036e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a33      	ldr	r2, [pc, #204]	; (8010450 <UART_RxISR_16BIT+0x1b4>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d01f      	beq.n	80103c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010392:	2b00      	cmp	r3, #0
 8010394:	d018      	beq.n	80103c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	e853 3f00 	ldrex	r3, [r3]
 80103a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80103aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	461a      	mov	r2, r3
 80103b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103bc:	e841 2300 	strex	r3, r2, [r1]
 80103c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1e6      	bne.n	8010396 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d12e      	bne.n	801042e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	e853 3f00 	ldrex	r3, [r3]
 80103e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	f023 0310 	bic.w	r3, r3, #16
 80103ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	461a      	mov	r2, r3
 80103f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103f4:	61bb      	str	r3, [r7, #24]
 80103f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f8:	6979      	ldr	r1, [r7, #20]
 80103fa:	69ba      	ldr	r2, [r7, #24]
 80103fc:	e841 2300 	strex	r3, r2, [r1]
 8010400:	613b      	str	r3, [r7, #16]
   return(result);
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1e6      	bne.n	80103d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	69db      	ldr	r3, [r3, #28]
 801040e:	f003 0310 	and.w	r3, r3, #16
 8010412:	2b10      	cmp	r3, #16
 8010414:	d103      	bne.n	801041e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2210      	movs	r2, #16
 801041c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010424:	4619      	mov	r1, r3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7fe fd64 	bl	800eef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801042c:	e00b      	b.n	8010446 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f7f0 fc62 	bl	8000cf8 <HAL_UART_RxCpltCallback>
}
 8010434:	e007      	b.n	8010446 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	699a      	ldr	r2, [r3, #24]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f042 0208 	orr.w	r2, r2, #8
 8010444:	619a      	str	r2, [r3, #24]
}
 8010446:	bf00      	nop
 8010448:	3770      	adds	r7, #112	; 0x70
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	58000c00 	.word	0x58000c00

08010454 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b0ac      	sub	sp, #176	; 0xb0
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010462:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	69db      	ldr	r3, [r3, #28]
 801046c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801048a:	2b22      	cmp	r3, #34	; 0x22
 801048c:	f040 8180 	bne.w	8010790 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010496:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801049a:	e123      	b.n	80106e4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80104a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80104aa:	b2d9      	uxtb	r1, r3
 80104ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104b6:	400a      	ands	r2, r1
 80104b8:	b2d2      	uxtb	r2, r2
 80104ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	3b01      	subs	r3, #1
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	69db      	ldr	r3, [r3, #28]
 80104de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80104e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d053      	beq.n	8010596 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80104ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104f2:	f003 0301 	and.w	r3, r3, #1
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d011      	beq.n	801051e <UART_RxISR_8BIT_FIFOEN+0xca>
 80104fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80104fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00b      	beq.n	801051e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2201      	movs	r2, #1
 801050c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010514:	f043 0201 	orr.w	r2, r3, #1
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801051e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010522:	f003 0302 	and.w	r3, r3, #2
 8010526:	2b00      	cmp	r3, #0
 8010528:	d011      	beq.n	801054e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801052a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	2b00      	cmp	r3, #0
 8010534:	d00b      	beq.n	801054e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2202      	movs	r2, #2
 801053c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010544:	f043 0204 	orr.w	r2, r3, #4
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801054e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010552:	f003 0304 	and.w	r3, r3, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	d011      	beq.n	801057e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801055a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801055e:	f003 0301 	and.w	r3, r3, #1
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00b      	beq.n	801057e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2204      	movs	r2, #4
 801056c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010574:	f043 0202 	orr.w	r2, r3, #2
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010584:	2b00      	cmp	r3, #0
 8010586:	d006      	beq.n	8010596 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7fe fca9 	bl	800eee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801059c:	b29b      	uxth	r3, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f040 80a0 	bne.w	80106e4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105ac:	e853 3f00 	ldrex	r3, [r3]
 80105b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80105b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	461a      	mov	r2, r3
 80105c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80105c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80105cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80105ce:	e841 2300 	strex	r3, r2, [r1]
 80105d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80105d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1e4      	bne.n	80105a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3308      	adds	r3, #8
 80105e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105e4:	e853 3f00 	ldrex	r3, [r3]
 80105e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80105ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105ec:	4b6e      	ldr	r3, [pc, #440]	; (80107a8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80105ee:	4013      	ands	r3, r2
 80105f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3308      	adds	r3, #8
 80105fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80105fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8010600:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010602:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010606:	e841 2300 	strex	r3, r2, [r1]
 801060a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801060c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1e3      	bne.n	80105da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2220      	movs	r2, #32
 8010616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4a60      	ldr	r2, [pc, #384]	; (80107ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d021      	beq.n	8010674 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d01a      	beq.n	8010674 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010646:	e853 3f00 	ldrex	r3, [r3]
 801064a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801064c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801064e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	461a      	mov	r2, r3
 801065c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010660:	657b      	str	r3, [r7, #84]	; 0x54
 8010662:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010664:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010668:	e841 2300 	strex	r3, r2, [r1]
 801066c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801066e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1e4      	bne.n	801063e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010678:	2b01      	cmp	r3, #1
 801067a:	d130      	bne.n	80106de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2200      	movs	r2, #0
 8010680:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010692:	f023 0310 	bic.w	r3, r3, #16
 8010696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	461a      	mov	r2, r3
 80106a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106a4:	643b      	str	r3, [r7, #64]	; 0x40
 80106a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106ac:	e841 2300 	strex	r3, r2, [r1]
 80106b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1e4      	bne.n	8010682 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	69db      	ldr	r3, [r3, #28]
 80106be:	f003 0310 	and.w	r3, r3, #16
 80106c2:	2b10      	cmp	r3, #16
 80106c4:	d103      	bne.n	80106ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	2210      	movs	r2, #16
 80106cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106d4:	4619      	mov	r1, r3
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7fe fc0c 	bl	800eef4 <HAL_UARTEx_RxEventCallback>
 80106dc:	e002      	b.n	80106e4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7f0 fb0a 	bl	8000cf8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d006      	beq.n	80106fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80106ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106f0:	f003 0320 	and.w	r3, r3, #32
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f47f aed1 	bne.w	801049c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010704:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010708:	2b00      	cmp	r3, #0
 801070a:	d049      	beq.n	80107a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010712:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010716:	429a      	cmp	r2, r3
 8010718:	d242      	bcs.n	80107a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3308      	adds	r3, #8
 8010720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010722:	6a3b      	ldr	r3, [r7, #32]
 8010724:	e853 3f00 	ldrex	r3, [r3]
 8010728:	61fb      	str	r3, [r7, #28]
   return(result);
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	3308      	adds	r3, #8
 801073a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801073e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010746:	e841 2300 	strex	r3, r2, [r1]
 801074a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074e:	2b00      	cmp	r3, #0
 8010750:	d1e3      	bne.n	801071a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4a16      	ldr	r2, [pc, #88]	; (80107b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010756:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	e853 3f00 	ldrex	r3, [r3]
 8010764:	60bb      	str	r3, [r7, #8]
   return(result);
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	f043 0320 	orr.w	r3, r3, #32
 801076c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	461a      	mov	r2, r3
 8010776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801077a:	61bb      	str	r3, [r7, #24]
 801077c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801077e:	6979      	ldr	r1, [r7, #20]
 8010780:	69ba      	ldr	r2, [r7, #24]
 8010782:	e841 2300 	strex	r3, r2, [r1]
 8010786:	613b      	str	r3, [r7, #16]
   return(result);
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1e4      	bne.n	8010758 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801078e:	e007      	b.n	80107a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	699a      	ldr	r2, [r3, #24]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f042 0208 	orr.w	r2, r2, #8
 801079e:	619a      	str	r2, [r3, #24]
}
 80107a0:	bf00      	nop
 80107a2:	37b0      	adds	r7, #176	; 0xb0
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	effffffe 	.word	0xeffffffe
 80107ac:	58000c00 	.word	0x58000c00
 80107b0:	080100e5 	.word	0x080100e5

080107b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b0ae      	sub	sp, #184	; 0xb8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	69db      	ldr	r3, [r3, #28]
 80107cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107ea:	2b22      	cmp	r3, #34	; 0x22
 80107ec:	f040 8184 	bne.w	8010af8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80107f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80107fa:	e127      	b.n	8010a4c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010802:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801080a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801080e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010812:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010816:	4013      	ands	r3, r2
 8010818:	b29a      	uxth	r2, r3
 801081a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801081e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010824:	1c9a      	adds	r2, r3, #2
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010830:	b29b      	uxth	r3, r3
 8010832:	3b01      	subs	r3, #1
 8010834:	b29a      	uxth	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	69db      	ldr	r3, [r3, #28]
 8010842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	2b00      	cmp	r3, #0
 8010850:	d053      	beq.n	80108fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010856:	f003 0301 	and.w	r3, r3, #1
 801085a:	2b00      	cmp	r3, #0
 801085c:	d011      	beq.n	8010882 <UART_RxISR_16BIT_FIFOEN+0xce>
 801085e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00b      	beq.n	8010882 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2201      	movs	r2, #1
 8010870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010878:	f043 0201 	orr.w	r2, r3, #1
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010886:	f003 0302 	and.w	r3, r3, #2
 801088a:	2b00      	cmp	r3, #0
 801088c:	d011      	beq.n	80108b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801088e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010892:	f003 0301 	and.w	r3, r3, #1
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00b      	beq.n	80108b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2202      	movs	r2, #2
 80108a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108a8:	f043 0204 	orr.w	r2, r3, #4
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108b6:	f003 0304 	and.w	r3, r3, #4
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d011      	beq.n	80108e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80108be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108c2:	f003 0301 	and.w	r3, r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00b      	beq.n	80108e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2204      	movs	r2, #4
 80108d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108d8:	f043 0202 	orr.w	r2, r3, #2
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d006      	beq.n	80108fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7fe faf7 	bl	800eee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010900:	b29b      	uxth	r3, r3
 8010902:	2b00      	cmp	r3, #0
 8010904:	f040 80a2 	bne.w	8010a4c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010910:	e853 3f00 	ldrex	r3, [r3]
 8010914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801091c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	461a      	mov	r2, r3
 8010926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801092a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801092e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010936:	e841 2300 	strex	r3, r2, [r1]
 801093a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801093c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1e2      	bne.n	8010908 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	3308      	adds	r3, #8
 8010948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801094a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801094c:	e853 3f00 	ldrex	r3, [r3]
 8010950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010952:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010954:	4b6e      	ldr	r3, [pc, #440]	; (8010b10 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010956:	4013      	ands	r3, r2
 8010958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3308      	adds	r3, #8
 8010962:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801096c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801096e:	e841 2300 	strex	r3, r2, [r1]
 8010972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e3      	bne.n	8010942 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2220      	movs	r2, #32
 801097e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2200      	movs	r2, #0
 8010986:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4a60      	ldr	r2, [pc, #384]	; (8010b14 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d021      	beq.n	80109dc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d01a      	beq.n	80109dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ae:	e853 3f00 	ldrex	r3, [r3]
 80109b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80109b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80109ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	461a      	mov	r2, r3
 80109c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80109ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109d0:	e841 2300 	strex	r3, r2, [r1]
 80109d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80109d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1e4      	bne.n	80109a6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d130      	bne.n	8010a46 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f2:	e853 3f00 	ldrex	r3, [r3]
 80109f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80109f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109fa:	f023 0310 	bic.w	r3, r3, #16
 80109fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	461a      	mov	r2, r3
 8010a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8010a0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a14:	e841 2300 	strex	r3, r2, [r1]
 8010a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1e4      	bne.n	80109ea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	69db      	ldr	r3, [r3, #28]
 8010a26:	f003 0310 	and.w	r3, r3, #16
 8010a2a:	2b10      	cmp	r3, #16
 8010a2c:	d103      	bne.n	8010a36 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2210      	movs	r2, #16
 8010a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7fe fa58 	bl	800eef4 <HAL_UARTEx_RxEventCallback>
 8010a44:	e002      	b.n	8010a4c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7f0 f956 	bl	8000cf8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d006      	beq.n	8010a62 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a58:	f003 0320 	and.w	r3, r3, #32
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f47f aecd 	bne.w	80107fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010a6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d049      	beq.n	8010b08 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010a7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d242      	bcs.n	8010b08 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3308      	adds	r3, #8
 8010a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	e853 3f00 	ldrex	r3, [r3]
 8010a90:	623b      	str	r3, [r7, #32]
   return(result);
 8010a92:	6a3b      	ldr	r3, [r7, #32]
 8010a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	3308      	adds	r3, #8
 8010aa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8010aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aae:	e841 2300 	strex	r3, r2, [r1]
 8010ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1e3      	bne.n	8010a82 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4a16      	ldr	r2, [pc, #88]	; (8010b18 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010abe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	e853 3f00 	ldrex	r3, [r3]
 8010acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f043 0320 	orr.w	r3, r3, #32
 8010ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ae2:	61fb      	str	r3, [r7, #28]
 8010ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae6:	69b9      	ldr	r1, [r7, #24]
 8010ae8:	69fa      	ldr	r2, [r7, #28]
 8010aea:	e841 2300 	strex	r3, r2, [r1]
 8010aee:	617b      	str	r3, [r7, #20]
   return(result);
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1e4      	bne.n	8010ac0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010af6:	e007      	b.n	8010b08 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	699a      	ldr	r2, [r3, #24]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f042 0208 	orr.w	r2, r2, #8
 8010b06:	619a      	str	r2, [r3, #24]
}
 8010b08:	bf00      	nop
 8010b0a:	37b8      	adds	r7, #184	; 0xb8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	effffffe 	.word	0xeffffffe
 8010b14:	58000c00 	.word	0x58000c00
 8010b18:	0801029d 	.word	0x0801029d

08010b1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b24:	bf00      	nop
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010b38:	bf00      	nop
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010b4c:	bf00      	nop
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d101      	bne.n	8010b6e <HAL_UARTEx_DisableFifoMode+0x16>
 8010b6a:	2302      	movs	r3, #2
 8010b6c:	e027      	b.n	8010bbe <HAL_UARTEx_DisableFifoMode+0x66>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2201      	movs	r2, #1
 8010b72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2224      	movs	r2, #36	; 0x24
 8010b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f022 0201 	bic.w	r2, r2, #1
 8010b94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010b9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2220      	movs	r2, #32
 8010bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b084      	sub	sp, #16
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d101      	bne.n	8010be2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010bde:	2302      	movs	r3, #2
 8010be0:	e02d      	b.n	8010c3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2201      	movs	r2, #1
 8010be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2224      	movs	r2, #36	; 0x24
 8010bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f022 0201 	bic.w	r2, r2, #1
 8010c08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	430a      	orrs	r2, r1
 8010c1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 f850 	bl	8010cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b084      	sub	sp, #16
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d101      	bne.n	8010c5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c5a:	2302      	movs	r3, #2
 8010c5c:	e02d      	b.n	8010cba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2224      	movs	r2, #36	; 0x24
 8010c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	f022 0201 	bic.w	r2, r2, #1
 8010c84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	683a      	ldr	r2, [r7, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f812 	bl	8010cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2220      	movs	r2, #32
 8010cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
	...

08010cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b085      	sub	sp, #20
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d108      	bne.n	8010ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ce4:	e031      	b.n	8010d4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010ce6:	2310      	movs	r3, #16
 8010ce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010cea:	2310      	movs	r3, #16
 8010cec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	0e5b      	lsrs	r3, r3, #25
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	f003 0307 	and.w	r3, r3, #7
 8010cfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	0f5b      	lsrs	r3, r3, #29
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	f003 0307 	and.w	r3, r3, #7
 8010d0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d0e:	7bbb      	ldrb	r3, [r7, #14]
 8010d10:	7b3a      	ldrb	r2, [r7, #12]
 8010d12:	4911      	ldr	r1, [pc, #68]	; (8010d58 <UARTEx_SetNbDataToProcess+0x94>)
 8010d14:	5c8a      	ldrb	r2, [r1, r2]
 8010d16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d1a:	7b3a      	ldrb	r2, [r7, #12]
 8010d1c:	490f      	ldr	r1, [pc, #60]	; (8010d5c <UARTEx_SetNbDataToProcess+0x98>)
 8010d1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
 8010d2e:	7b7a      	ldrb	r2, [r7, #13]
 8010d30:	4909      	ldr	r1, [pc, #36]	; (8010d58 <UARTEx_SetNbDataToProcess+0x94>)
 8010d32:	5c8a      	ldrb	r2, [r1, r2]
 8010d34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d38:	7b7a      	ldrb	r2, [r7, #13]
 8010d3a:	4908      	ldr	r1, [pc, #32]	; (8010d5c <UARTEx_SetNbDataToProcess+0x98>)
 8010d3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010d4a:	bf00      	nop
 8010d4c:	3714      	adds	r7, #20
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	0801105c 	.word	0x0801105c
 8010d5c:	08011064 	.word	0x08011064

08010d60 <__errno>:
 8010d60:	4b01      	ldr	r3, [pc, #4]	; (8010d68 <__errno+0x8>)
 8010d62:	6818      	ldr	r0, [r3, #0]
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	24000098 	.word	0x24000098

08010d6c <__libc_init_array>:
 8010d6c:	b570      	push	{r4, r5, r6, lr}
 8010d6e:	4d0d      	ldr	r5, [pc, #52]	; (8010da4 <__libc_init_array+0x38>)
 8010d70:	4c0d      	ldr	r4, [pc, #52]	; (8010da8 <__libc_init_array+0x3c>)
 8010d72:	1b64      	subs	r4, r4, r5
 8010d74:	10a4      	asrs	r4, r4, #2
 8010d76:	2600      	movs	r6, #0
 8010d78:	42a6      	cmp	r6, r4
 8010d7a:	d109      	bne.n	8010d90 <__libc_init_array+0x24>
 8010d7c:	4d0b      	ldr	r5, [pc, #44]	; (8010dac <__libc_init_array+0x40>)
 8010d7e:	4c0c      	ldr	r4, [pc, #48]	; (8010db0 <__libc_init_array+0x44>)
 8010d80:	f000 f93c 	bl	8010ffc <_init>
 8010d84:	1b64      	subs	r4, r4, r5
 8010d86:	10a4      	asrs	r4, r4, #2
 8010d88:	2600      	movs	r6, #0
 8010d8a:	42a6      	cmp	r6, r4
 8010d8c:	d105      	bne.n	8010d9a <__libc_init_array+0x2e>
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d94:	4798      	blx	r3
 8010d96:	3601      	adds	r6, #1
 8010d98:	e7ee      	b.n	8010d78 <__libc_init_array+0xc>
 8010d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d9e:	4798      	blx	r3
 8010da0:	3601      	adds	r6, #1
 8010da2:	e7f2      	b.n	8010d8a <__libc_init_array+0x1e>
 8010da4:	08011074 	.word	0x08011074
 8010da8:	08011074 	.word	0x08011074
 8010dac:	08011074 	.word	0x08011074
 8010db0:	08011078 	.word	0x08011078

08010db4 <malloc>:
 8010db4:	4b02      	ldr	r3, [pc, #8]	; (8010dc0 <malloc+0xc>)
 8010db6:	4601      	mov	r1, r0
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	f000 b88d 	b.w	8010ed8 <_malloc_r>
 8010dbe:	bf00      	nop
 8010dc0:	24000098 	.word	0x24000098

08010dc4 <free>:
 8010dc4:	4b02      	ldr	r3, [pc, #8]	; (8010dd0 <free+0xc>)
 8010dc6:	4601      	mov	r1, r0
 8010dc8:	6818      	ldr	r0, [r3, #0]
 8010dca:	f000 b819 	b.w	8010e00 <_free_r>
 8010dce:	bf00      	nop
 8010dd0:	24000098 	.word	0x24000098

08010dd4 <memcpy>:
 8010dd4:	440a      	add	r2, r1
 8010dd6:	4291      	cmp	r1, r2
 8010dd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010ddc:	d100      	bne.n	8010de0 <memcpy+0xc>
 8010dde:	4770      	bx	lr
 8010de0:	b510      	push	{r4, lr}
 8010de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dea:	4291      	cmp	r1, r2
 8010dec:	d1f9      	bne.n	8010de2 <memcpy+0xe>
 8010dee:	bd10      	pop	{r4, pc}

08010df0 <memset>:
 8010df0:	4402      	add	r2, r0
 8010df2:	4603      	mov	r3, r0
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d100      	bne.n	8010dfa <memset+0xa>
 8010df8:	4770      	bx	lr
 8010dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8010dfe:	e7f9      	b.n	8010df4 <memset+0x4>

08010e00 <_free_r>:
 8010e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e02:	2900      	cmp	r1, #0
 8010e04:	d044      	beq.n	8010e90 <_free_r+0x90>
 8010e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e0a:	9001      	str	r0, [sp, #4]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8010e12:	bfb8      	it	lt
 8010e14:	18e4      	addlt	r4, r4, r3
 8010e16:	f000 f8e3 	bl	8010fe0 <__malloc_lock>
 8010e1a:	4a1e      	ldr	r2, [pc, #120]	; (8010e94 <_free_r+0x94>)
 8010e1c:	9801      	ldr	r0, [sp, #4]
 8010e1e:	6813      	ldr	r3, [r2, #0]
 8010e20:	b933      	cbnz	r3, 8010e30 <_free_r+0x30>
 8010e22:	6063      	str	r3, [r4, #4]
 8010e24:	6014      	str	r4, [r2, #0]
 8010e26:	b003      	add	sp, #12
 8010e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e2c:	f000 b8de 	b.w	8010fec <__malloc_unlock>
 8010e30:	42a3      	cmp	r3, r4
 8010e32:	d908      	bls.n	8010e46 <_free_r+0x46>
 8010e34:	6825      	ldr	r5, [r4, #0]
 8010e36:	1961      	adds	r1, r4, r5
 8010e38:	428b      	cmp	r3, r1
 8010e3a:	bf01      	itttt	eq
 8010e3c:	6819      	ldreq	r1, [r3, #0]
 8010e3e:	685b      	ldreq	r3, [r3, #4]
 8010e40:	1949      	addeq	r1, r1, r5
 8010e42:	6021      	streq	r1, [r4, #0]
 8010e44:	e7ed      	b.n	8010e22 <_free_r+0x22>
 8010e46:	461a      	mov	r2, r3
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	b10b      	cbz	r3, 8010e50 <_free_r+0x50>
 8010e4c:	42a3      	cmp	r3, r4
 8010e4e:	d9fa      	bls.n	8010e46 <_free_r+0x46>
 8010e50:	6811      	ldr	r1, [r2, #0]
 8010e52:	1855      	adds	r5, r2, r1
 8010e54:	42a5      	cmp	r5, r4
 8010e56:	d10b      	bne.n	8010e70 <_free_r+0x70>
 8010e58:	6824      	ldr	r4, [r4, #0]
 8010e5a:	4421      	add	r1, r4
 8010e5c:	1854      	adds	r4, r2, r1
 8010e5e:	42a3      	cmp	r3, r4
 8010e60:	6011      	str	r1, [r2, #0]
 8010e62:	d1e0      	bne.n	8010e26 <_free_r+0x26>
 8010e64:	681c      	ldr	r4, [r3, #0]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	6053      	str	r3, [r2, #4]
 8010e6a:	4421      	add	r1, r4
 8010e6c:	6011      	str	r1, [r2, #0]
 8010e6e:	e7da      	b.n	8010e26 <_free_r+0x26>
 8010e70:	d902      	bls.n	8010e78 <_free_r+0x78>
 8010e72:	230c      	movs	r3, #12
 8010e74:	6003      	str	r3, [r0, #0]
 8010e76:	e7d6      	b.n	8010e26 <_free_r+0x26>
 8010e78:	6825      	ldr	r5, [r4, #0]
 8010e7a:	1961      	adds	r1, r4, r5
 8010e7c:	428b      	cmp	r3, r1
 8010e7e:	bf04      	itt	eq
 8010e80:	6819      	ldreq	r1, [r3, #0]
 8010e82:	685b      	ldreq	r3, [r3, #4]
 8010e84:	6063      	str	r3, [r4, #4]
 8010e86:	bf04      	itt	eq
 8010e88:	1949      	addeq	r1, r1, r5
 8010e8a:	6021      	streq	r1, [r4, #0]
 8010e8c:	6054      	str	r4, [r2, #4]
 8010e8e:	e7ca      	b.n	8010e26 <_free_r+0x26>
 8010e90:	b003      	add	sp, #12
 8010e92:	bd30      	pop	{r4, r5, pc}
 8010e94:	240006e0 	.word	0x240006e0

08010e98 <sbrk_aligned>:
 8010e98:	b570      	push	{r4, r5, r6, lr}
 8010e9a:	4e0e      	ldr	r6, [pc, #56]	; (8010ed4 <sbrk_aligned+0x3c>)
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	6831      	ldr	r1, [r6, #0]
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	b911      	cbnz	r1, 8010eaa <sbrk_aligned+0x12>
 8010ea4:	f000 f88c 	bl	8010fc0 <_sbrk_r>
 8010ea8:	6030      	str	r0, [r6, #0]
 8010eaa:	4621      	mov	r1, r4
 8010eac:	4628      	mov	r0, r5
 8010eae:	f000 f887 	bl	8010fc0 <_sbrk_r>
 8010eb2:	1c43      	adds	r3, r0, #1
 8010eb4:	d00a      	beq.n	8010ecc <sbrk_aligned+0x34>
 8010eb6:	1cc4      	adds	r4, r0, #3
 8010eb8:	f024 0403 	bic.w	r4, r4, #3
 8010ebc:	42a0      	cmp	r0, r4
 8010ebe:	d007      	beq.n	8010ed0 <sbrk_aligned+0x38>
 8010ec0:	1a21      	subs	r1, r4, r0
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f000 f87c 	bl	8010fc0 <_sbrk_r>
 8010ec8:	3001      	adds	r0, #1
 8010eca:	d101      	bne.n	8010ed0 <sbrk_aligned+0x38>
 8010ecc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	bd70      	pop	{r4, r5, r6, pc}
 8010ed4:	240006e4 	.word	0x240006e4

08010ed8 <_malloc_r>:
 8010ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010edc:	1ccd      	adds	r5, r1, #3
 8010ede:	f025 0503 	bic.w	r5, r5, #3
 8010ee2:	3508      	adds	r5, #8
 8010ee4:	2d0c      	cmp	r5, #12
 8010ee6:	bf38      	it	cc
 8010ee8:	250c      	movcc	r5, #12
 8010eea:	2d00      	cmp	r5, #0
 8010eec:	4607      	mov	r7, r0
 8010eee:	db01      	blt.n	8010ef4 <_malloc_r+0x1c>
 8010ef0:	42a9      	cmp	r1, r5
 8010ef2:	d905      	bls.n	8010f00 <_malloc_r+0x28>
 8010ef4:	230c      	movs	r3, #12
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	2600      	movs	r6, #0
 8010efa:	4630      	mov	r0, r6
 8010efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f00:	4e2e      	ldr	r6, [pc, #184]	; (8010fbc <_malloc_r+0xe4>)
 8010f02:	f000 f86d 	bl	8010fe0 <__malloc_lock>
 8010f06:	6833      	ldr	r3, [r6, #0]
 8010f08:	461c      	mov	r4, r3
 8010f0a:	bb34      	cbnz	r4, 8010f5a <_malloc_r+0x82>
 8010f0c:	4629      	mov	r1, r5
 8010f0e:	4638      	mov	r0, r7
 8010f10:	f7ff ffc2 	bl	8010e98 <sbrk_aligned>
 8010f14:	1c43      	adds	r3, r0, #1
 8010f16:	4604      	mov	r4, r0
 8010f18:	d14d      	bne.n	8010fb6 <_malloc_r+0xde>
 8010f1a:	6834      	ldr	r4, [r6, #0]
 8010f1c:	4626      	mov	r6, r4
 8010f1e:	2e00      	cmp	r6, #0
 8010f20:	d140      	bne.n	8010fa4 <_malloc_r+0xcc>
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	4631      	mov	r1, r6
 8010f26:	4638      	mov	r0, r7
 8010f28:	eb04 0803 	add.w	r8, r4, r3
 8010f2c:	f000 f848 	bl	8010fc0 <_sbrk_r>
 8010f30:	4580      	cmp	r8, r0
 8010f32:	d13a      	bne.n	8010faa <_malloc_r+0xd2>
 8010f34:	6821      	ldr	r1, [r4, #0]
 8010f36:	3503      	adds	r5, #3
 8010f38:	1a6d      	subs	r5, r5, r1
 8010f3a:	f025 0503 	bic.w	r5, r5, #3
 8010f3e:	3508      	adds	r5, #8
 8010f40:	2d0c      	cmp	r5, #12
 8010f42:	bf38      	it	cc
 8010f44:	250c      	movcc	r5, #12
 8010f46:	4629      	mov	r1, r5
 8010f48:	4638      	mov	r0, r7
 8010f4a:	f7ff ffa5 	bl	8010e98 <sbrk_aligned>
 8010f4e:	3001      	adds	r0, #1
 8010f50:	d02b      	beq.n	8010faa <_malloc_r+0xd2>
 8010f52:	6823      	ldr	r3, [r4, #0]
 8010f54:	442b      	add	r3, r5
 8010f56:	6023      	str	r3, [r4, #0]
 8010f58:	e00e      	b.n	8010f78 <_malloc_r+0xa0>
 8010f5a:	6822      	ldr	r2, [r4, #0]
 8010f5c:	1b52      	subs	r2, r2, r5
 8010f5e:	d41e      	bmi.n	8010f9e <_malloc_r+0xc6>
 8010f60:	2a0b      	cmp	r2, #11
 8010f62:	d916      	bls.n	8010f92 <_malloc_r+0xba>
 8010f64:	1961      	adds	r1, r4, r5
 8010f66:	42a3      	cmp	r3, r4
 8010f68:	6025      	str	r5, [r4, #0]
 8010f6a:	bf18      	it	ne
 8010f6c:	6059      	strne	r1, [r3, #4]
 8010f6e:	6863      	ldr	r3, [r4, #4]
 8010f70:	bf08      	it	eq
 8010f72:	6031      	streq	r1, [r6, #0]
 8010f74:	5162      	str	r2, [r4, r5]
 8010f76:	604b      	str	r3, [r1, #4]
 8010f78:	4638      	mov	r0, r7
 8010f7a:	f104 060b 	add.w	r6, r4, #11
 8010f7e:	f000 f835 	bl	8010fec <__malloc_unlock>
 8010f82:	f026 0607 	bic.w	r6, r6, #7
 8010f86:	1d23      	adds	r3, r4, #4
 8010f88:	1af2      	subs	r2, r6, r3
 8010f8a:	d0b6      	beq.n	8010efa <_malloc_r+0x22>
 8010f8c:	1b9b      	subs	r3, r3, r6
 8010f8e:	50a3      	str	r3, [r4, r2]
 8010f90:	e7b3      	b.n	8010efa <_malloc_r+0x22>
 8010f92:	6862      	ldr	r2, [r4, #4]
 8010f94:	42a3      	cmp	r3, r4
 8010f96:	bf0c      	ite	eq
 8010f98:	6032      	streq	r2, [r6, #0]
 8010f9a:	605a      	strne	r2, [r3, #4]
 8010f9c:	e7ec      	b.n	8010f78 <_malloc_r+0xa0>
 8010f9e:	4623      	mov	r3, r4
 8010fa0:	6864      	ldr	r4, [r4, #4]
 8010fa2:	e7b2      	b.n	8010f0a <_malloc_r+0x32>
 8010fa4:	4634      	mov	r4, r6
 8010fa6:	6876      	ldr	r6, [r6, #4]
 8010fa8:	e7b9      	b.n	8010f1e <_malloc_r+0x46>
 8010faa:	230c      	movs	r3, #12
 8010fac:	603b      	str	r3, [r7, #0]
 8010fae:	4638      	mov	r0, r7
 8010fb0:	f000 f81c 	bl	8010fec <__malloc_unlock>
 8010fb4:	e7a1      	b.n	8010efa <_malloc_r+0x22>
 8010fb6:	6025      	str	r5, [r4, #0]
 8010fb8:	e7de      	b.n	8010f78 <_malloc_r+0xa0>
 8010fba:	bf00      	nop
 8010fbc:	240006e0 	.word	0x240006e0

08010fc0 <_sbrk_r>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4d06      	ldr	r5, [pc, #24]	; (8010fdc <_sbrk_r+0x1c>)
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	4608      	mov	r0, r1
 8010fca:	602b      	str	r3, [r5, #0]
 8010fcc:	f7f1 fb46 	bl	800265c <_sbrk>
 8010fd0:	1c43      	adds	r3, r0, #1
 8010fd2:	d102      	bne.n	8010fda <_sbrk_r+0x1a>
 8010fd4:	682b      	ldr	r3, [r5, #0]
 8010fd6:	b103      	cbz	r3, 8010fda <_sbrk_r+0x1a>
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	bd38      	pop	{r3, r4, r5, pc}
 8010fdc:	240006e8 	.word	0x240006e8

08010fe0 <__malloc_lock>:
 8010fe0:	4801      	ldr	r0, [pc, #4]	; (8010fe8 <__malloc_lock+0x8>)
 8010fe2:	f000 b809 	b.w	8010ff8 <__retarget_lock_acquire_recursive>
 8010fe6:	bf00      	nop
 8010fe8:	240006ec 	.word	0x240006ec

08010fec <__malloc_unlock>:
 8010fec:	4801      	ldr	r0, [pc, #4]	; (8010ff4 <__malloc_unlock+0x8>)
 8010fee:	f000 b804 	b.w	8010ffa <__retarget_lock_release_recursive>
 8010ff2:	bf00      	nop
 8010ff4:	240006ec 	.word	0x240006ec

08010ff8 <__retarget_lock_acquire_recursive>:
 8010ff8:	4770      	bx	lr

08010ffa <__retarget_lock_release_recursive>:
 8010ffa:	4770      	bx	lr

08010ffc <_init>:
 8010ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffe:	bf00      	nop
 8011000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011002:	bc08      	pop	{r3}
 8011004:	469e      	mov	lr, r3
 8011006:	4770      	bx	lr

08011008 <_fini>:
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	bf00      	nop
 801100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801100e:	bc08      	pop	{r3}
 8011010:	469e      	mov	lr, r3
 8011012:	4770      	bx	lr
