
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b3c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08010dd4  08010dd4  00020dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010e2c  08010e2c  00020e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e34  08010e34  00020e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e38  08010e38  00020e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010e3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005bc  240000c0  08010ef4  000300c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400067c  08010ef4  0003067c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024b23  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038e7  00000000  00000000  00054c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c38  00000000  00000000  000584f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ae0  00000000  00000000  0005a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b66a  00000000  00000000  0005bc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002591f  00000000  00000000  00097272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00180a11  00000000  00000000  000bcb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023d5a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d54  00000000  00000000  0023d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010dbc 	.word	0x08010dbc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	08010dbc 	.word	0x08010dbc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <poll_i2c_sensor>:
 * @brief function to poll individual i2c sensor
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8000612:	2300      	movs	r3, #0
 8000614:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b299      	uxth	r1, r3
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <poll_i2c_sensor+0x94>)
 8000628:	f007 fa1c 	bl	8007a64 <HAL_I2C_Master_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <poll_i2c_sensor+0x42>
		strcpy((char*) buf, "Error Tx\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <poll_i2c_sensor+0x98>)
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e022      	b.n	8000690 <poll_i2c_sensor+0x88>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	b299      	uxth	r1, r3
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <poll_i2c_sensor+0x94>)
 800065c:	f007 fb1a 	bl	8007c94 <HAL_I2C_Master_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <poll_i2c_sensor+0x76>
			strcpy((char*) buf, "Error Rx\r\n");
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <poll_i2c_sensor+0x9c>)
 8000670:	ca07      	ldmia	r2, {r0, r1, r2}
 8000672:	c303      	stmia	r3!, {r0, r1}
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	3302      	adds	r3, #2
 8000678:	0c12      	lsrs	r2, r2, #16
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e008      	b.n	8000690 <poll_i2c_sensor+0x88>
		} else {
			output = (int16_t) (buf[0] << 8);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	7a7a      	ldrb	r2, [r7, #9]
 800068a:	4313      	orrs	r3, r2
 800068c:	10db      	asrs	r3, r3, #3
 800068e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8000690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000320 	.word	0x24000320
 80006a0:	08010dd4 	.word	0x08010dd4
 80006a4:	08010de0 	.word	0x08010de0

080006a8 <i2c>:
/**
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t* i2c() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffa9 	bl	8000608 <poll_i2c_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80006ba:	2394      	movs	r3, #148	; 0x94
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa3 	bl	8000608 <poll_i2c_sensor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80006c6:	2392      	movs	r3, #146	; 0x92
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9d 	bl	8000608 <poll_i2c_sensor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80006d2:	2396      	movs	r3, #150	; 0x96
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff97 	bl	8000608 <poll_i2c_sensor>
 80006da:	4603      	mov	r3, r0
 80006dc:	813b      	strh	r3, [r7, #8]

	int16_t *results = malloc(4 * sizeof(int16_t));
 80006de:	2008      	movs	r0, #8
 80006e0:	f010 fa48 	bl	8010b74 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
	results[0] = output1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	89fa      	ldrh	r2, [r7, #14]
 80006ec:	801a      	strh	r2, [r3, #0]
	results[1] = output2;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3302      	adds	r3, #2
 80006f2:	89ba      	ldrh	r2, [r7, #12]
 80006f4:	801a      	strh	r2, [r3, #0]
	results[2] = output3;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3304      	adds	r3, #4
 80006fa:	897a      	ldrh	r2, [r7, #10]
 80006fc:	801a      	strh	r2, [r3, #0]
	results[3] = output4;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3306      	adds	r3, #6
 8000702:	893a      	ldrh	r2, [r7, #8]
 8000704:	801a      	strh	r2, [r3, #0]
	return results;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000710:	b084      	sub	sp, #16
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	f107 0c18 	add.w	ip, r7, #24
 800071c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	2301      	movs	r3, #1
 8000724:	2201      	movs	r2, #1
 8000726:	f107 0018 	add.w	r0, r7, #24
 800072a:	f00b fd65 	bl	800c1f8 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000740:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 8000742:	2002      	movs	r0, #2
 8000744:	f010 fa16 	bl	8010b74 <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3301      	adds	r3, #1
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	701a      	strb	r2, [r3, #0]
	return results;
 800075a:	68bb      	ldr	r3, [r7, #8]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
	...

0800076c <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <erpa_adc+0x34>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <erpa_adc+0x34>)
 800077a:	895b      	ldrh	r3, [r3, #10]
 800077c:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 800077e:	2004      	movs	r0, #4
 8000780:	f010 f9f8 	bl	8010b74 <malloc>
 8000784:	4603      	mov	r3, r0
 8000786:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	88fa      	ldrh	r2, [r7, #6]
 800078c:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	801a      	strh	r2, [r3, #0]

	return results;
 8000796:	683b      	ldr	r3, [r7, #0]

}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000620 	.word	0x24000620

080007a4 <hk_adc1>:

uint16_t* hk_adc1() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

	uint16_t PA1 = ADC1Data[10];// BUSVmon -- verified doesn't need to change
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <hk_adc1+0x98>)
 80007ac:	8a9b      	ldrh	r3, [r3, #20]
 80007ae:	82fb      	strh	r3, [r7, #22]
	uint16_t PA2 = ADC1Data[8];	// BUSImon -- verified doesn't need to change
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <hk_adc1+0x98>)
 80007b2:	8a1b      	ldrh	r3, [r3, #16]
 80007b4:	82bb      	strh	r3, [r7, #20]
	uint16_t PC0 = ADC1Data[6];		// 2v5mon -- verified doesn't need to change
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <hk_adc1+0x98>)
 80007b8:	899b      	ldrh	r3, [r3, #12]
 80007ba:	827b      	strh	r3, [r7, #18]
	uint16_t PA3 = ADC1Data[9];				// n3v3mon --
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <hk_adc1+0x98>)
 80007be:	8a5b      	ldrh	r3, [r3, #18]
 80007c0:	823b      	strh	r3, [r7, #16]
	uint16_t PB1 = ADC1Data[2];		// n200v -- verified doesn't need to change
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <hk_adc1+0x98>)
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	81fb      	strh	r3, [r7, #14]
	uint16_t PA7 = ADC1Data[3];				// n800v --
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <hk_adc1+0x98>)
 80007ca:	88db      	ldrh	r3, [r3, #6]
 80007cc:	81bb      	strh	r3, [r7, #12]
	uint16_t PC1 = ADC1Data[7];				// 5vmon --
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <hk_adc1+0x98>)
 80007d0:	89db      	ldrh	r3, [r3, #14]
 80007d2:	817b      	strh	r3, [r7, #10]
	uint16_t PC5 = ADC1Data[4];		// 15vmon -- verified doesn't need to change
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <hk_adc1+0x98>)
 80007d6:	891b      	ldrh	r3, [r3, #8]
 80007d8:	813b      	strh	r3, [r7, #8]
	uint16_t PA6 = ADC1Data[0];				// 5vrefmon --
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <hk_adc1+0x98>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	80fb      	strh	r3, [r7, #6]

	uint16_t *results = malloc(9 * sizeof(uint16_t));
 80007e0:	2012      	movs	r0, #18
 80007e2:	f010 f9c7 	bl	8010b74 <malloc>
 80007e6:	4603      	mov	r3, r0
 80007e8:	603b      	str	r3, [r7, #0]
	results[0] = PA1;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	8afa      	ldrh	r2, [r7, #22]
 80007ee:	801a      	strh	r2, [r3, #0]
	results[1] = PA2;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	3302      	adds	r3, #2
 80007f4:	8aba      	ldrh	r2, [r7, #20]
 80007f6:	801a      	strh	r2, [r3, #0]
	results[2] = PC0;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3304      	adds	r3, #4
 80007fc:	8a7a      	ldrh	r2, [r7, #18]
 80007fe:	801a      	strh	r2, [r3, #0]
	results[3] = PA3;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	3306      	adds	r3, #6
 8000804:	8a3a      	ldrh	r2, [r7, #16]
 8000806:	801a      	strh	r2, [r3, #0]
	results[4] = PB1;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	3308      	adds	r3, #8
 800080c:	89fa      	ldrh	r2, [r7, #14]
 800080e:	801a      	strh	r2, [r3, #0]
	results[5] = PA7;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	330a      	adds	r3, #10
 8000814:	89ba      	ldrh	r2, [r7, #12]
 8000816:	801a      	strh	r2, [r3, #0]
	results[6] = PC1;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	330c      	adds	r3, #12
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	801a      	strh	r2, [r3, #0]
	results[7] = PC5;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	330e      	adds	r3, #14
 8000824:	893a      	ldrh	r2, [r7, #8]
 8000826:	801a      	strh	r2, [r3, #0]
	results[8] = PA6;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3310      	adds	r3, #16
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	801a      	strh	r2, [r3, #0]

	return results;
 8000830:	683b      	ldr	r3, [r7, #0]

}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000620 	.word	0x24000620

08000840 <hk_adc3>:

uint16_t* hk_adc3() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

	uint16_t vrefint = ADC3Data[0];
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <hk_adc3+0x50>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3Data[1];
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <hk_adc3+0x50>)
 800084e:	885b      	ldrh	r3, [r3, #2]
 8000850:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3Data[2]; 		// n5vmon --
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <hk_adc3+0x50>)
 8000854:	889b      	ldrh	r3, [r3, #4]
 8000856:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3Data[3];			// 3v3mon --
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <hk_adc3+0x50>)
 800085a:	88db      	ldrh	r3, [r3, #6]
 800085c:	813b      	strh	r3, [r7, #8]

	uint16_t *results = malloc(4 * sizeof(uint16_t));
 800085e:	2008      	movs	r0, #8
 8000860:	f010 f988 	bl	8010b74 <malloc>
 8000864:	4603      	mov	r3, r0
 8000866:	607b      	str	r3, [r7, #4]
	results[0] = vrefint;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	89fa      	ldrh	r2, [r7, #14]
 800086c:	801a      	strh	r2, [r3, #0]
	results[1] = vsense;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3302      	adds	r3, #2
 8000872:	89ba      	ldrh	r2, [r7, #12]
 8000874:	801a      	strh	r2, [r3, #0]
	results[2] = PC2;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3304      	adds	r3, #4
 800087a:	897a      	ldrh	r2, [r7, #10]
 800087c:	801a      	strh	r2, [r3, #0]
	results[3] = PC3;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3306      	adds	r3, #6
 8000882:	893a      	ldrh	r2, [r7, #8]
 8000884:	801a      	strh	r2, [r3, #0]

	return results;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24000640 	.word	0x24000640

08000894 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 800089e:	23aa      	movs	r3, #170	; 0xaa
 80008a0:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80008a2:	23aa      	movs	r3, #170	; 0xaa
 80008a4:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <send_erpa_packet+0x90>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <send_erpa_packet+0x90>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80008ba:	2300      	movs	r3, #0
 80008bc:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80008be:	2300      	movs	r3, #0
 80008c0:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3302      	adds	r3, #2
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	3302      	adds	r3, #2
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 80008ee:	2300      	movs	r3, #0
 80008f0:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 80008f2:	2300      	movs	r3, #0
 80008f4:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000902:	f107 0108 	add.w	r1, r7, #8
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	220e      	movs	r2, #14
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <send_erpa_packet+0x94>)
 800090c:	f00d fd2a 	bl	800e364 <HAL_UART_Transmit>
	erpa_seq++;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <send_erpa_packet+0x90>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <send_erpa_packet+0x90>)
 800091a:	801a      	strh	r2, [r3, #0]

}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000658 	.word	0x24000658
 8000928:	2400051c 	.word	0x2400051c

0800092c <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 8000938:	23cc      	movs	r3, #204	; 0xcc
 800093a:	743b      	strb	r3, [r7, #16]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 800093c:	23cc      	movs	r3, #204	; 0xcc
 800093e:	747b      	strb	r3, [r7, #17]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000940:	4b7d      	ldr	r3, [pc, #500]	; (8000b38 <send_hk_packet+0x20c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	74bb      	strb	r3, [r7, #18]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 800094c:	4b7a      	ldr	r3, [pc, #488]	; (8000b38 <send_hk_packet+0x20c>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	74fb      	strb	r3, [r7, #19]
	hk_buf[4] = ((hk_adc3_results[1] & 0xFF00) >> 8);	// HK vsense MSB
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3302      	adds	r3, #2
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	753b      	strb	r3, [r7, #20]
	hk_buf[5] = (hk_adc3_results[1] & 0xFF);			// HK vsense LSB
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	757b      	strb	r3, [r7, #21]
	hk_buf[6] = ((hk_adc3_results[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	b29b      	uxth	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	75bb      	strb	r3, [r7, #22]
	hk_buf[7] = (hk_adc3_results[0] & 0xFF);			// HK vrefint LSB
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	75fb      	strb	r3, [r7, #23]
	hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000986:	121b      	asrs	r3, r3, #8
 8000988:	b2db      	uxtb	r3, r3
 800098a:	763b      	strb	r3, [r7, #24]
	hk_buf[9] = (i2c_values[0] & 0xFF);					// HK TEMP1 LSB
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	767b      	strb	r3, [r7, #25]
	hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3302      	adds	r3, #2
 800099a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099e:	121b      	asrs	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	76bb      	strb	r3, [r7, #26]
	hk_buf[11] = (i2c_values[1] & 0xFF);				// HK TEMP2 LSB
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3302      	adds	r3, #2
 80009a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	76fb      	strb	r3, [r7, #27]
	hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3304      	adds	r3, #4
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	121b      	asrs	r3, r3, #8
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	773b      	strb	r3, [r7, #28]
	hk_buf[13] = (i2c_values[2] & 0xFF);				// HK TEMP3 LSB
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	777b      	strb	r3, [r7, #29]
	hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3306      	adds	r3, #6
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	121b      	asrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	77bb      	strb	r3, [r7, #30]
	hk_buf[15] = (i2c_values[3] & 0xFF);				// HK TEMP4 LSB
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3306      	adds	r3, #6
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	77fb      	strb	r3, [r7, #31]
	hk_buf[16] = ((hk_adc1_results[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f887 3020 	strb.w	r3, [r7, #32]
	hk_buf[17] = (hk_adc1_results[0] & 0xFF);			// HK BUSvmon LSB
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hk_buf[18] = ((hk_adc1_results[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3302      	adds	r3, #2
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hk_buf[19] = (hk_adc1_results[1] & 0xFF);			// HK BUSimon LSB
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3302      	adds	r3, #2
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hk_buf[20] = ((hk_adc1_results[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hk_buf[21] = (hk_adc1_results[2] & 0xFF);			// HK 2v5mon LSB
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hk_buf[22] = ((hk_adc3_results[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3306      	adds	r3, #6
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	hk_buf[23] = (hk_adc3_results[3] & 0xFF);			// HK 3v3mon LSB
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3306      	adds	r3, #6
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hk_buf[24] = ((hk_adc1_results[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	330c      	adds	r3, #12
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hk_buf[25] = (hk_adc1_results[6] & 0xFF);			// HK 5vmon LSB
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	330c      	adds	r3, #12
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hk_buf[26] = ((hk_adc1_results[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3306      	adds	r3, #6
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	hk_buf[27] = (hk_adc1_results[3] & 0xFF);			// HK n3v3mon LSB
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3306      	adds	r3, #6
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	hk_buf[28] = ((hk_adc3_results[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	hk_buf[29] = (hk_adc3_results[2] & 0xFF);			// HK n5vmon LSB
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	hk_buf[30] = ((hk_adc1_results[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	330e      	adds	r3, #14
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	hk_buf[31] = (hk_adc1_results[7] & 0xFF);			// HK 15vmon LSB
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	330e      	adds	r3, #14
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	hk_buf[32] = ((hk_adc1_results[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3310      	adds	r3, #16
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	hk_buf[33] = (hk_adc1_results[8] & 0xFF);			// HK 5vrefmon LSB
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	0a1b      	lsrs	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3308      	adds	r3, #8
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	330a      	adds	r3, #10
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	330a      	adds	r3, #10
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b14:	f107 0110 	add.w	r1, r7, #16
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2226      	movs	r2, #38	; 0x26
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <send_hk_packet+0x210>)
 8000b1e:	f00d fc21 	bl	800e364 <HAL_UART_Transmit>
	hk_seq++;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <send_hk_packet+0x20c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <send_hk_packet+0x20c>)
 8000b2c:	801a      	strh	r2, [r3, #0]

}
 8000b2e:	bf00      	nop
 8000b30:	3738      	adds	r7, #56	; 0x38
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2400065c 	.word	0x2400065c
 8000b3c:	2400051c 	.word	0x2400051c

08000b40 <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 8000b48:	23bb      	movs	r3, #187	; 0xbb
 8000b4a:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 8000b4c:	23bb      	movs	r3, #187	; 0xbb
 8000b4e:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <send_pmt_packet+0x54>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <send_pmt_packet+0x54>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000b70:	f107 0108 	add.w	r1, r7, #8
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2206      	movs	r2, #6
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <send_pmt_packet+0x58>)
 8000b7a:	f00d fbf3 	bl	800e364 <HAL_UART_Transmit>
	pmt_seq++;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <send_pmt_packet+0x54>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <send_pmt_packet+0x54>)
 8000b88:	801a      	strh	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400065a 	.word	0x2400065a
 8000b98:	2400051c 	.word	0x2400051c

08000b9c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b0a7      	sub	sp, #156	; 0x9c
 8000ba0:	af1e      	add	r7, sp, #120	; 0x78
 8000ba2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d147      	bne.n	8000c3c <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		if (ERPA_ON) {
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d027      	beq.n	8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x68>
			SWP_FACTOR_COUNTER++;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000bbc:	6013      	str	r3, [r2, #0]

			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8000bbe:	bf00      	nop
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	4834      	ldr	r0, [pc, #208]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8000bc6:	f006 fe7f 	bl	80078c8 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f7      	bne.n	8000bc0 <HAL_TIM_OC_DelayElapsedCallback+0x24>
			}

			uint8_t *spi2_results = spi(hspi2);
 8000bd0:	4c32      	ldr	r4, [pc, #200]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8000bd2:	4668      	mov	r0, sp
 8000bd4:	f104 0310 	add.w	r3, r4, #16
 8000bd8:	2278      	movs	r2, #120	; 0x78
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f00f ffda 	bl	8010b94 <memcpy>
 8000be0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000be4:	f7ff fd94 	bl	8000710 <spi>
 8000be8:	61b8      	str	r0, [r7, #24]
			uint16_t *erpa_adc_results = erpa_adc();
 8000bea:	f7ff fdbf 	bl	800076c <erpa_adc>
 8000bee:	6178      	str	r0, [r7, #20]
//					set_erpa_sweep();
//				}
//				SWP_FACTOR_COUNTER = 0;
//			}

			send_erpa_packet(spi2_results, erpa_adc_results);
 8000bf0:	6979      	ldr	r1, [r7, #20]
 8000bf2:	69b8      	ldr	r0, [r7, #24]
 8000bf4:	f7ff fe4e 	bl	8000894 <send_erpa_packet>

			free(spi2_results);
 8000bf8:	69b8      	ldr	r0, [r7, #24]
 8000bfa:	f00f ffc3 	bl	8010b84 <free>
			free(erpa_adc_results);
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f00f ffc0 	bl	8010b84 <free>
		}
		if (HK_ON) {
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d03b      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			int16_t *i2c_values = i2c();
 8000c0c:	f7ff fd4c 	bl	80006a8 <i2c>
 8000c10:	6138      	str	r0, [r7, #16]
			uint16_t *hk_adc1_results = hk_adc1();
 8000c12:	f7ff fdc7 	bl	80007a4 <hk_adc1>
 8000c16:	60f8      	str	r0, [r7, #12]
			uint16_t *hk_adc3_results = hk_adc3();
 8000c18:	f7ff fe12 	bl	8000840 <hk_adc3>
 8000c1c:	60b8      	str	r0, [r7, #8]

			send_hk_packet(i2c_values, hk_adc1_results, hk_adc3_results);
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	6938      	ldr	r0, [r7, #16]
 8000c24:	f7ff fe82 	bl	800092c <send_hk_packet>

			free(i2c_values);
 8000c28:	6938      	ldr	r0, [r7, #16]
 8000c2a:	f00f ffab 	bl	8010b84 <free>
			free(hk_adc1_results);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f00f ffa8 	bl	8010b84 <free>
			free(hk_adc3_results);
 8000c34:	68b8      	ldr	r0, [r7, #8]
 8000c36:	f00f ffa5 	bl	8010b84 <free>
			send_pmt_packet(spi1_results);

			free(spi1_results);
		}
	}
}
 8000c3a:	e023      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
	} else if (htim == &htim1) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d11f      	bne.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		if (PMT_ON) {
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d01b      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000c4c:	bf00      	nop
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000c54:	f006 fe38 	bl	80078c8 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f7      	bne.n	8000c4e <HAL_TIM_OC_DelayElapsedCallback+0xb2>
			uint8_t *spi1_results = spi(hspi1);
 8000c5e:	4c14      	ldr	r4, [pc, #80]	; (8000cb0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000c60:	4668      	mov	r0, sp
 8000c62:	f104 0310 	add.w	r3, r4, #16
 8000c66:	2278      	movs	r2, #120	; 0x78
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f00f ff93 	bl	8010b94 <memcpy>
 8000c6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c72:	f7ff fd4d 	bl	8000710 <spi>
 8000c76:	61f8      	str	r0, [r7, #28]
			send_pmt_packet(spi1_results);
 8000c78:	69f8      	ldr	r0, [r7, #28]
 8000c7a:	f7ff ff61 	bl	8000b40 <send_pmt_packet>
			free(spi1_results);
 8000c7e:	69f8      	ldr	r0, [r7, #28]
 8000c80:	f00f ff80 	bl	8010b84 <free>
}
 8000c84:	bf00      	nop
 8000c86:	3724      	adds	r7, #36	; 0x24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	240004d0 	.word	0x240004d0
 8000c90:	2400065f 	.word	0x2400065f
 8000c94:	24000654 	.word	0x24000654
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	240003fc 	.word	0x240003fc
 8000ca0:	24000660 	.word	0x24000660
 8000ca4:	24000484 	.word	0x24000484
 8000ca8:	2400065e 	.word	0x2400065e
 8000cac:	58020000 	.word	0x58020000
 8000cb0:	24000374 	.word	0x24000374

08000cb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	49bc      	ldr	r1, [pc, #752]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000cc0:	48bc      	ldr	r0, [pc, #752]	; (8000fb4 <HAL_UART_RxCpltCallback+0x300>)
 8000cc2:	f00d fbdd 	bl	800e480 <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 8000cc6:	4bba      	ldr	r3, [pc, #744]	; (8000fb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b25      	cmp	r3, #37	; 0x25
 8000cd0:	f200 8169 	bhi.w	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <HAL_UART_RxCpltCallback+0x28>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000e49 	.word	0x08000e49
 8000ce0:	08000e65 	.word	0x08000e65
 8000ce4:	08000e81 	.word	0x08000e81
 8000ce8:	08000ea1 	.word	0x08000ea1
 8000cec:	08000ec1 	.word	0x08000ec1
 8000cf0:	08000edd 	.word	0x08000edd
 8000cf4:	08000efd 	.word	0x08000efd
 8000cf8:	08000f1d 	.word	0x08000f1d
 8000cfc:	08000fa7 	.word	0x08000fa7
 8000d00:	08000fa7 	.word	0x08000fa7
 8000d04:	08000d83 	.word	0x08000d83
 8000d08:	08000d75 	.word	0x08000d75
 8000d0c:	08000f39 	.word	0x08000f39
 8000d10:	08000f49 	.word	0x08000f49
 8000d14:	08000f69 	.word	0x08000f69
 8000d18:	08000f89 	.word	0x08000f89
 8000d1c:	08000f59 	.word	0x08000f59
 8000d20:	08000f79 	.word	0x08000f79
 8000d24:	08000f91 	.word	0x08000f91
 8000d28:	08000e57 	.word	0x08000e57
 8000d2c:	08000e73 	.word	0x08000e73
 8000d30:	08000e91 	.word	0x08000e91
 8000d34:	08000eb1 	.word	0x08000eb1
 8000d38:	08000ecf 	.word	0x08000ecf
 8000d3c:	08000eed 	.word	0x08000eed
 8000d40:	08000f0d 	.word	0x08000f0d
 8000d44:	08000f2b 	.word	0x08000f2b
 8000d48:	08000d91 	.word	0x08000d91
 8000d4c:	08000da9 	.word	0x08000da9
 8000d50:	08000dc1 	.word	0x08000dc1
 8000d54:	08000fa7 	.word	0x08000fa7
 8000d58:	08000fa7 	.word	0x08000fa7
 8000d5c:	08000fa7 	.word	0x08000fa7
 8000d60:	08000fa7 	.word	0x08000fa7
 8000d64:	08000fa7 	.word	0x08000fa7
 8000d68:	08000fa7 	.word	0x08000fa7
 8000d6c:	08000dfd 	.word	0x08000dfd
 8000d70:	08000e1f 	.word	0x08000e1f
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d74:	4b90      	ldr	r3, [pc, #576]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000d76:	2104      	movs	r1, #4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fdbc 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000d80:	e111      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d82:	4b8d      	ldr	r3, [pc, #564]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000d84:	2104      	movs	r1, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f006 fdb5 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000d8e:	e10a      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x1B: {
		if (step < 9) {
 8000d90:	4b8a      	ldr	r3, [pc, #552]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	f200 80ff 	bhi.w	8000f98 <HAL_UART_RxCpltCallback+0x2e4>
			step++;
 8000d9a:	4b88      	ldr	r3, [pc, #544]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b86      	ldr	r3, [pc, #536]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000da4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000da6:	e0f7      	b.n	8000f98 <HAL_UART_RxCpltCallback+0x2e4>
	}
	case 0x1C: {
		if (step > 0) {
 8000da8:	4b84      	ldr	r3, [pc, #528]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80f5 	beq.w	8000f9c <HAL_UART_RxCpltCallback+0x2e8>
			step--;
 8000db2:	4b82      	ldr	r3, [pc, #520]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b80      	ldr	r3, [pc, #512]	; (8000fbc <HAL_UART_RxCpltCallback+0x308>)
 8000dbc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dbe:	e0ed      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x2e8>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000dc0:	4b7f      	ldr	r3, [pc, #508]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10e      	bne.n	8000de6 <HAL_UART_RxCpltCallback+0x132>
			auto_sweep = 1;
 8000dc8:	4b7d      	ldr	r3, [pc, #500]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000dce:	487d      	ldr	r0, [pc, #500]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000dd0:	f00b fd96 	bl	800c900 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2310      	movs	r3, #16
 8000dda:	4a7b      	ldr	r2, [pc, #492]	; (8000fc8 <HAL_UART_RxCpltCallback+0x314>)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	487b      	ldr	r0, [pc, #492]	; (8000fcc <HAL_UART_RxCpltCallback+0x318>)
 8000de0:	f003 fa8e 	bl	8004300 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 8000de4:	e0df      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
			auto_sweep = 0;
 8000de6:	4b76      	ldr	r3, [pc, #472]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000dec:	4875      	ldr	r0, [pc, #468]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000dee:	f00b fdf7 	bl	800c9e0 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	4875      	ldr	r0, [pc, #468]	; (8000fcc <HAL_UART_RxCpltCallback+0x318>)
 8000df6:	f003 fb43 	bl	8004480 <HAL_DAC_Stop_DMA>
		break;
 8000dfa:	e0d4      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x24: {
		if (SAMPLING_FACTOR < 32) {
 8000dfc:	4b74      	ldr	r3, [pc, #464]	; (8000fd0 <HAL_UART_RxCpltCallback+0x31c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b1f      	cmp	r3, #31
 8000e02:	f300 80cd 	bgt.w	8000fa0 <HAL_UART_RxCpltCallback+0x2ec>
			SAMPLING_FACTOR *= 2;
 8000e06:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <HAL_UART_RxCpltCallback+0x31c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a70      	ldr	r2, [pc, #448]	; (8000fd0 <HAL_UART_RxCpltCallback+0x31c>)
 8000e0e:	6013      	str	r3, [r2, #0]
			FACTOR_COUNTER = 0;
 8000e10:	4b70      	ldr	r3, [pc, #448]	; (8000fd4 <HAL_UART_RxCpltCallback+0x320>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000e16:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <HAL_UART_RxCpltCallback+0x324>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e1c:	e0c0      	b.n	8000fa0 <HAL_UART_RxCpltCallback+0x2ec>
	}
	case 0x25: {
		if (SAMPLING_FACTOR > 1) {
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	; (8000fd0 <HAL_UART_RxCpltCallback+0x31c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f340 80be 	ble.w	8000fa4 <HAL_UART_RxCpltCallback+0x2f0>
			SAMPLING_FACTOR /= 2;
 8000e28:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <HAL_UART_RxCpltCallback+0x31c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	da00      	bge.n	8000e32 <HAL_UART_RxCpltCallback+0x17e>
 8000e30:	3301      	adds	r3, #1
 8000e32:	105b      	asrs	r3, r3, #1
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b66      	ldr	r3, [pc, #408]	; (8000fd0 <HAL_UART_RxCpltCallback+0x31c>)
 8000e38:	601a      	str	r2, [r3, #0]
			FACTOR_COUNTER = 0;
 8000e3a:	4b66      	ldr	r3, [pc, #408]	; (8000fd4 <HAL_UART_RxCpltCallback+0x320>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
			SWP_FACTOR_COUNTER = 0;
 8000e40:	4b65      	ldr	r3, [pc, #404]	; (8000fd8 <HAL_UART_RxCpltCallback+0x324>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e46:	e0ad      	b.n	8000fa4 <HAL_UART_RxCpltCallback+0x2f0>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 fd52 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000e54:	e0a7      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000e56:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e58:	2120      	movs	r1, #32
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fd4b 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000e62:	e0a0      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000e64:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e66:	2140      	movs	r1, #64	; 0x40
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f006 fd44 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000e70:	e099      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_UART_RxCpltCallback+0x304>)
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	2200      	movs	r2, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fd3d 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000e7e:	e092      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000e80:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	2201      	movs	r2, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fd35 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000e8e:	e08a      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	2200      	movs	r2, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f006 fd2d 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000e9e:	e082      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fd25 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000eae:	e07a      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 fd1d 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000ebe:	e072      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 fd16 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000ecc:	e06b      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fd0f 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000eda:	e064      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 fd07 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000eea:	e05c      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000eec:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fcff 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000efa:	e054      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000efc:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f02:	2201      	movs	r2, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fcf7 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000f0a:	e04c      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000f0c:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	2200      	movs	r2, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fcef 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000f1a:	e044      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	2201      	movs	r2, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 fce8 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000f28:	e03d      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_RxCpltCallback+0x328>)
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fce1 	bl	80078f8 <HAL_GPIO_WritePin>
		break;
 8000f36:	e036      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000f38:	f001 fc6a 	bl	8002810 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f007 fadc 	bl	80084fc <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000f44:	f7ff fb4a 	bl	80005dc <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <HAL_UART_RxCpltCallback+0x32c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <HAL_UART_RxCpltCallback+0x330>)
 8000f52:	f00b fd6d 	bl	800ca30 <HAL_TIM_OC_Start_IT>
		break;
 8000f56:	e026      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x10: {
		PMT_ON = 0;
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_UART_RxCpltCallback+0x32c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <HAL_UART_RxCpltCallback+0x330>)
 8000f62:	f00b febf 	bl	800cce4 <HAL_TIM_OC_Stop_IT>

		break;
 8000f66:	e01e      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_UART_RxCpltCallback+0x334>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f6e:	210c      	movs	r1, #12
 8000f70:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000f72:	f00b fd5d 	bl	800ca30 <HAL_TIM_OC_Start_IT>
		break;
 8000f76:	e016      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_RxCpltCallback+0x334>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000f7e:	210c      	movs	r1, #12
 8000f80:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <HAL_UART_RxCpltCallback+0x310>)
 8000f82:	f00b feaf 	bl	800cce4 <HAL_TIM_OC_Stop_IT>

		break;
 8000f86:	e00e      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x0F: {
		HK_ON = 1;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_RxCpltCallback+0x338>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		break;
 8000f8e:	e00a      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
	}
	case 0x12: {
		HK_ON = 0;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_UART_RxCpltCallback+0x338>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
		break;
 8000f96:	e006      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
		break;
 8000f98:	bf00      	nop
 8000f9a:	e004      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
		break;
 8000f9c:	bf00      	nop
 8000f9e:	e002      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
		break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0x2f2>
		break;
 8000fa4:	bf00      	nop
	}
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	240005b0 	.word	0x240005b0
 8000fb4:	2400051c 	.word	0x2400051c
 8000fb8:	58020400 	.word	0x58020400
 8000fbc:	24000648 	.word	0x24000648
 8000fc0:	2400064c 	.word	0x2400064c
 8000fc4:	240004d0 	.word	0x240004d0
 8000fc8:	24000000 	.word	0x24000000
 8000fcc:	24000294 	.word	0x24000294
 8000fd0:	24000040 	.word	0x24000040
 8000fd4:	24000650 	.word	0x24000650
 8000fd8:	24000654 	.word	0x24000654
 8000fdc:	58020800 	.word	0x58020800
 8000fe0:	2400065e 	.word	0x2400065e
 8000fe4:	24000484 	.word	0x24000484
 8000fe8:	2400065f 	.word	0x2400065f
 8000fec:	24000660 	.word	0x24000660

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f001 fb7a 	bl	80026ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f874 	bl	80010e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ffc:	f000 f8f8 	bl	80011f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 fd7e 	bl	8001b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8001004:	f000 fd4c 	bl	8001aa0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001008:	f000 fad6 	bl	80015b8 <MX_DAC1_Init>
  MX_ADC1_Init();
 800100c:	f000 f920 	bl	8001250 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001010:	f000 fa40 	bl	8001494 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001014:	f000 fc82 	bl	800191c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001018:	f000 fbf0 	bl	80017fc <MX_TIM1_Init>
  MX_I2C1_Init();
 800101c:	f000 fafe 	bl	800161c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001020:	f000 fb3c 	bl	800169c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001024:	f000 fb92 	bl	800174c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001028:	f000 fcee 	bl	8001a08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001030:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001036:	210c      	movs	r1, #12
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <main+0xd8>)
 800103a:	f00b ff8f 	bl	800cf5c <HAL_TIM_PWM_Start>




  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800103e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001046:	4821      	ldr	r0, [pc, #132]	; (80010cc <main+0xdc>)
 8001048:	f002 fee6 	bl	8003e18 <HAL_ADCEx_Calibration_Start>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <main+0x66>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 8001052:	f000 fdcf 	bl	8001bf4 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 8001056:	220b      	movs	r2, #11
 8001058:	491d      	ldr	r1, [pc, #116]	; (80010d0 <main+0xe0>)
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <main+0xdc>)
 800105c:	f001 ffba 	bl	8002fd4 <HAL_ADC_Start_DMA>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <main+0x7a>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 8001066:	f000 fdc5 	bl	8001bf4 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800106a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800106e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <main+0xe4>)
 8001074:	f002 fed0 	bl	8003e18 <HAL_ADCEx_Calibration_Start>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <main+0x92>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 800107e:	f000 fdb9 	bl	8001bf4 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 8001082:	2204      	movs	r2, #4
 8001084:	4914      	ldr	r1, [pc, #80]	; (80010d8 <main+0xe8>)
 8001086:	4813      	ldr	r0, [pc, #76]	; (80010d4 <main+0xe4>)
 8001088:	f001 ffa4 	bl	8002fd4 <HAL_ADC_Start_DMA>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <main+0xa6>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 8001092:	f000 fdaf 	bl	8001bf4 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8001096:	bf00      	nop
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <main+0xec>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a6:	d0f7      	beq.n	8001098 <main+0xa8>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 80010a8:	bf00      	nop
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <main+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b8:	d1f7      	bne.n	80010aa <main+0xba>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	4908      	ldr	r1, [pc, #32]	; (80010e0 <main+0xf0>)
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <main+0xec>)
 80010c0:	f00d f9de 	bl	800e480 <HAL_UART_Receive_IT>
 80010c4:	e7f9      	b.n	80010ba <main+0xca>
 80010c6:	bf00      	nop
 80010c8:	240004d0 	.word	0x240004d0
 80010cc:	240000dc 	.word	0x240000dc
 80010d0:	24000620 	.word	0x24000620
 80010d4:	24000140 	.word	0x24000140
 80010d8:	24000640 	.word	0x24000640
 80010dc:	2400051c 	.word	0x2400051c
 80010e0:	240005b0 	.word	0x240005b0

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09c      	sub	sp, #112	; 0x70
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	224c      	movs	r2, #76	; 0x4c
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00f fd5c 	bl	8010bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2220      	movs	r2, #32
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00f fd56 	bl	8010bb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001104:	2002      	movs	r0, #2
 8001106:	f007 fa35 	bl	8008574 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <SystemClock_Config+0x100>)
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001112:	4a34      	ldr	r2, [pc, #208]	; (80011e4 <SystemClock_Config+0x100>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	62d3      	str	r3, [r2, #44]	; 0x2c
 800111a:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <SystemClock_Config+0x100>)
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <SystemClock_Config+0x104>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800112c:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <SystemClock_Config+0x104>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <SystemClock_Config+0x104>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001140:	bf00      	nop
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <SystemClock_Config+0x104>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800114a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114e:	d1f8      	bne.n	8001142 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <SystemClock_Config+0x108>)
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	4a25      	ldr	r2, [pc, #148]	; (80011ec <SystemClock_Config+0x108>)
 8001156:	f023 0303 	bic.w	r3, r3, #3
 800115a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001160:	2301      	movs	r3, #1
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001170:	2304      	movs	r3, #4
 8001172:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001174:	230c      	movs	r3, #12
 8001176:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001184:	230c      	movs	r3, #12
 8001186:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001188:	2300      	movs	r3, #0
 800118a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fa27 	bl	80085e8 <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011a0:	f000 fd28 	bl	8001bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	233f      	movs	r3, #63	; 0x3f
 80011a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2303      	movs	r3, #3
 80011aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 fe66 	bl	8008e9c <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011d6:	f000 fd0d 	bl	8001bf4 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3770      	adds	r7, #112	; 0x70
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58000400 	.word	0x58000400
 80011e8:	58024800 	.word	0x58024800
 80011ec:	58024400 	.word	0x58024400

080011f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0b0      	sub	sp, #192	; 0xc0
 80011f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	22c0      	movs	r2, #192	; 0xc0
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00f fcd7 	bl	8010bb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001202:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800120e:	2304      	movs	r3, #4
 8001210:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001212:	2309      	movs	r3, #9
 8001214:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001226:	2320      	movs	r3, #32
 8001228:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800122a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4618      	mov	r0, r3
 800123a:	f008 f9bb 	bl	80095b4 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001244:	f000 fcd6 	bl	8001bf4 <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	37c0      	adds	r7, #192	; 0xc0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001274:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <MX_ADC1_Init+0x210>)
 8001276:	4a7b      	ldr	r2, [pc, #492]	; (8001464 <MX_ADC1_Init+0x214>)
 8001278:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800127a:	4b79      	ldr	r3, [pc, #484]	; (8001460 <MX_ADC1_Init+0x210>)
 800127c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001280:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <MX_ADC1_Init+0x210>)
 8001284:	2208      	movs	r2, #8
 8001286:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001288:	4b75      	ldr	r3, [pc, #468]	; (8001460 <MX_ADC1_Init+0x210>)
 800128a:	2201      	movs	r2, #1
 800128c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128e:	4b74      	ldr	r3, [pc, #464]	; (8001460 <MX_ADC1_Init+0x210>)
 8001290:	2204      	movs	r2, #4
 8001292:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001294:	4b72      	ldr	r3, [pc, #456]	; (8001460 <MX_ADC1_Init+0x210>)
 8001296:	2200      	movs	r2, #0
 8001298:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129a:	4b71      	ldr	r3, [pc, #452]	; (8001460 <MX_ADC1_Init+0x210>)
 800129c:	2201      	movs	r2, #1
 800129e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012a0:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <MX_ADC1_Init+0x210>)
 80012a2:	220b      	movs	r2, #11
 80012a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b6e      	ldr	r3, [pc, #440]	; (8001460 <MX_ADC1_Init+0x210>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b6c      	ldr	r3, [pc, #432]	; (8001460 <MX_ADC1_Init+0x210>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b2:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <MX_ADC1_Init+0x210>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012b8:	4b69      	ldr	r3, [pc, #420]	; (8001460 <MX_ADC1_Init+0x210>)
 80012ba:	2203      	movs	r2, #3
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012be:	4b68      	ldr	r3, [pc, #416]	; (8001460 <MX_ADC1_Init+0x210>)
 80012c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <MX_ADC1_Init+0x210>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <MX_ADC1_Init+0x210>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d4:	4862      	ldr	r0, [pc, #392]	; (8001460 <MX_ADC1_Init+0x210>)
 80012d6:	f001 fcdb 	bl	8002c90 <HAL_ADC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012e0:	f000 fc88 	bl	8001bf4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	485c      	ldr	r0, [pc, #368]	; (8001460 <MX_ADC1_Init+0x210>)
 80012f0:	f002 fdf6 	bl	8003ee0 <HAL_ADCEx_MultiModeConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012fa:	f000 fc7b 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fe:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <MX_ADC1_Init+0x218>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001302:	2306      	movs	r3, #6
 8001304:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001306:	2307      	movs	r3, #7
 8001308:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800130e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001310:	2304      	movs	r3, #4
 8001312:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	484f      	ldr	r0, [pc, #316]	; (8001460 <MX_ADC1_Init+0x210>)
 8001322:	f001 ff39 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800132c:	f000 fc62 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001330:	4b4e      	ldr	r3, [pc, #312]	; (800146c <MX_ADC1_Init+0x21c>)
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001334:	230c      	movs	r3, #12
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4848      	ldr	r0, [pc, #288]	; (8001460 <MX_ADC1_Init+0x210>)
 800133e:	f001 ff2b 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001348:	f000 fc54 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800134c:	4b48      	ldr	r3, [pc, #288]	; (8001470 <MX_ADC1_Init+0x220>)
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001350:	2312      	movs	r3, #18
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4841      	ldr	r0, [pc, #260]	; (8001460 <MX_ADC1_Init+0x210>)
 800135a:	f001 ff1d 	bl	8003198 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001364:	f000 fc46 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <MX_ADC1_Init+0x224>)
 800136a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800136c:	2318      	movs	r3, #24
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	483a      	ldr	r0, [pc, #232]	; (8001460 <MX_ADC1_Init+0x210>)
 8001376:	f001 ff0f 	bl	8003198 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001380:	f000 fc38 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_ADC1_Init+0x228>)
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4833      	ldr	r0, [pc, #204]	; (8001460 <MX_ADC1_Init+0x210>)
 8001394:	f001 ff00 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800139e:	f000 fc29 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <MX_ADC1_Init+0x22c>)
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013a6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	482b      	ldr	r0, [pc, #172]	; (8001460 <MX_ADC1_Init+0x210>)
 80013b2:	f001 fef1 	bl	8003198 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013bc:	f000 fc1a 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <MX_ADC1_Init+0x230>)
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013c4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4824      	ldr	r0, [pc, #144]	; (8001460 <MX_ADC1_Init+0x210>)
 80013d0:	f001 fee2 	bl	8003198 <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013da:	f000 fc0b 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <MX_ADC1_Init+0x234>)
 80013e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013e2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_ADC1_Init+0x210>)
 80013ee:	f001 fed3 	bl	8003198 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013f8:	f000 fbfc 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC1_Init+0x238>)
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001400:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001404:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4815      	ldr	r0, [pc, #84]	; (8001460 <MX_ADC1_Init+0x210>)
 800140c:	f001 fec4 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001416:	f000 fbed 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_ADC1_Init+0x23c>)
 800141c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800141e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001422:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_ADC1_Init+0x210>)
 800142a:	f001 feb5 	bl	8003198 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001434:	f000 fbde 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_ADC1_Init+0x240>)
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800143c:	f240 2306 	movw	r3, #518	; 0x206
 8001440:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_ADC1_Init+0x210>)
 8001448:	f001 fea6 	bl	8003198 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001452:	f000 fbcf 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	240000dc 	.word	0x240000dc
 8001464:	40022000 	.word	0x40022000
 8001468:	0c900008 	.word	0x0c900008
 800146c:	10c00010 	.word	0x10c00010
 8001470:	14f00020 	.word	0x14f00020
 8001474:	1d500080 	.word	0x1d500080
 8001478:	21800100 	.word	0x21800100
 800147c:	25b00200 	.word	0x25b00200
 8001480:	2a000400 	.word	0x2a000400
 8001484:	2e300800 	.word	0x2e300800
 8001488:	3ac04000 	.word	0x3ac04000
 800148c:	3ef08000 	.word	0x3ef08000
 8001490:	47520000 	.word	0x47520000

08001494 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <MX_ADC3_Init+0x114>)
 80014b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014b4:	2208      	movs	r2, #8
 80014b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014d8:	2200      	movs	r2, #0
 80014da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014ea:	2203      	movs	r2, #3
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <MX_ADC3_Init+0x110>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <MX_ADC3_Init+0x110>)
 8001506:	f001 fbc3 	bl	8002c90 <HAL_ADC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001510:	f000 fb70 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <MX_ADC3_Init+0x118>)
 8001516:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001518:	2306      	movs	r3, #6
 800151a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800151c:	2307      	movs	r3, #7
 800151e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001520:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001524:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001526:	2304      	movs	r3, #4
 8001528:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4619      	mov	r1, r3
 8001536:	481b      	ldr	r0, [pc, #108]	; (80015a4 <MX_ADC3_Init+0x110>)
 8001538:	f001 fe2e 	bl	8003198 <HAL_ADC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001542:	f000 fb57 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_ADC3_Init+0x11c>)
 8001548:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800154a:	230c      	movs	r3, #12
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <MX_ADC3_Init+0x110>)
 8001554:	f001 fe20 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800155e:	f000 fb49 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001562:	2301      	movs	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001566:	2312      	movs	r3, #18
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_ADC3_Init+0x110>)
 8001570:	f001 fe12 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800157a:	f000 fb3b 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_ADC3_Init+0x120>)
 8001580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001582:	2318      	movs	r3, #24
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_ADC3_Init+0x110>)
 800158c:	f001 fe04 	bl	8003198 <HAL_ADC_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001596:	f000 fb2d 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	24000140 	.word	0x24000140
 80015a8:	58026000 	.word	0x58026000
 80015ac:	cb840000 	.word	0xcb840000
 80015b0:	cfb80000 	.word	0xcfb80000
 80015b4:	04300002 	.word	0x04300002

080015b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2224      	movs	r2, #36	; 0x24
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00f faf3 	bl	8010bb0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_DAC1_Init+0x5c>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_DAC1_Init+0x60>)
 80015ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d0:	4810      	ldr	r0, [pc, #64]	; (8001614 <MX_DAC1_Init+0x5c>)
 80015d2:	f002 fe72 	bl	80042ba <HAL_DAC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015dc:	f000 fb0a 	bl	8001bf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015e4:	230a      	movs	r3, #10
 80015e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_DAC1_Init+0x5c>)
 80015fc:	f002 ffac 	bl	8004558 <HAL_DAC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001606:	f000 faf5 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24000294 	.word	0x24000294
 8001618:	40007400 	.word	0x40007400

0800161c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C1_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_I2C1_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_I2C1_Init+0x74>)
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <MX_I2C1_Init+0x7c>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_I2C1_Init+0x74>)
 8001634:	2201      	movs	r2, #1
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_I2C1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_I2C1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <MX_I2C1_Init+0x74>)
 8001658:	f006 f968 	bl	800792c <HAL_I2C_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001662:	f000 fac7 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <MX_I2C1_Init+0x74>)
 800166a:	f006 feaf 	bl	80083cc <HAL_I2CEx_ConfigAnalogFilter>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001674:	f000 fabe 	bl	8001bf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_I2C1_Init+0x74>)
 800167c:	f006 fef1 	bl	8008462 <HAL_I2CEx_ConfigDigitalFilter>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001686:	f000 fab5 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	24000320 	.word	0x24000320
 8001694:	40005400 	.word	0x40005400
 8001698:	00506682 	.word	0x00506682

0800169c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <MX_SPI1_Init+0xac>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016b8:	220f      	movs	r2, #15
 80016ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016d2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_SPI1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_SPI1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_SPI1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_SPI1_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_SPI1_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_SPI1_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_SPI1_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_SPI1_Init+0xa8>)
 8001730:	f00a fc3e 	bl	800bfb0 <HAL_SPI_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800173a:	f000 fa5b 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24000374 	.word	0x24000374
 8001748:	40013000 	.word	0x40013000

0800174c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <MX_SPI2_Init+0xac>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800175c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001760:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001764:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001768:	220f      	movs	r2, #15
 800176a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_SPI2_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_SPI2_Init+0xa8>)
 800177a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001782:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001786:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_SPI2_Init+0xa8>)
 80017e0:	f00a fbe6 	bl	800bfb0 <HAL_SPI_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017ea:	f000 fa03 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	240003fc 	.word	0x240003fc
 80017f8:	40003800 	.word	0x40003800

080017fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b096      	sub	sp, #88	; 0x58
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	222c      	movs	r2, #44	; 0x2c
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f00f f9c1 	bl	8010bb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MX_TIM1_Init+0x118>)
 8001830:	4a39      	ldr	r2, [pc, #228]	; (8001918 <MX_TIM1_Init+0x11c>)
 8001832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <MX_TIM1_Init+0x118>)
 8001836:	2263      	movs	r2, #99	; 0x63
 8001838:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <MX_TIM1_Init+0x118>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <MX_TIM1_Init+0x118>)
 8001842:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b32      	ldr	r3, [pc, #200]	; (8001914 <MX_TIM1_Init+0x118>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <MX_TIM1_Init+0x118>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <MX_TIM1_Init+0x118>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800185a:	482e      	ldr	r0, [pc, #184]	; (8001914 <MX_TIM1_Init+0x118>)
 800185c:	f00b fb26 	bl	800ceac <HAL_TIM_PWM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001866:	f000 f9c5 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800187a:	4619      	mov	r1, r3
 800187c:	4825      	ldr	r0, [pc, #148]	; (8001914 <MX_TIM1_Init+0x118>)
 800187e:	f00c fbf7 	bl	800e070 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 f9b4 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188c:	2360      	movs	r3, #96	; 0x60
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001890:	f240 13df 	movw	r3, #479	; 0x1df
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001896:	2300      	movs	r3, #0
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4818      	ldr	r0, [pc, #96]	; (8001914 <MX_TIM1_Init+0x118>)
 80018b4:	f00b fd68 	bl	800d388 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80018be:	f000 f999 	bl	8001bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM1_Init+0x118>)
 80018f8:	f00c fc48 	bl	800e18c <HAL_TIMEx_ConfigBreakDeadTime>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001902:	f000 f977 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM1_Init+0x118>)
 8001908:	f000 fcae 	bl	8002268 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3758      	adds	r7, #88	; 0x58
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	24000484 	.word	0x24000484
 8001918:	40010000 	.word	0x40010000

0800191c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08e      	sub	sp, #56	; 0x38
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800193c:	463b      	mov	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <MX_TIM2_Init+0xe8>)
 8001950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <MX_TIM2_Init+0xe8>)
 8001958:	222f      	movs	r2, #47	; 0x2f
 800195a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <MX_TIM2_Init+0xe8>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <MX_TIM2_Init+0xe8>)
 8001964:	f640 4234 	movw	r2, #3124	; 0xc34
 8001968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <MX_TIM2_Init+0xe8>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <MX_TIM2_Init+0xe8>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001976:	4823      	ldr	r0, [pc, #140]	; (8001a04 <MX_TIM2_Init+0xe8>)
 8001978:	f00a ff6b 	bl	800c852 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001982:	f000 f937 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800198c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001990:	4619      	mov	r1, r3
 8001992:	481c      	ldr	r0, [pc, #112]	; (8001a04 <MX_TIM2_Init+0xe8>)
 8001994:	f00b fe0c 	bl	800d5b0 <HAL_TIM_ConfigClockSource>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800199e:	f000 f929 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a2:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_TIM2_Init+0xe8>)
 80019a4:	f00b fa82 	bl	800ceac <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ae:	f000 f921 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019b2:	2320      	movs	r3, #32
 80019b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4810      	ldr	r0, [pc, #64]	; (8001a04 <MX_TIM2_Init+0xe8>)
 80019c2:	f00c fb55 	bl	800e070 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019cc:	f000 f912 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	220c      	movs	r2, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM2_Init+0xe8>)
 80019e8:	f00b fcce 	bl	800d388 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019f2:	f000 f8ff 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM2_Init+0xe8>)
 80019f8:	f000 fc36 	bl	8002268 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3738      	adds	r7, #56	; 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	240004d0 	.word	0x240004d0

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a0e:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <MX_USART1_UART_Init+0x94>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a52:	f00c fc37 	bl	800e2c4 <HAL_UART_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f000 f8ca 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a64:	f00e ff91 	bl	801098a <HAL_UARTEx_SetTxFifoThreshold>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a6e:	f000 f8c1 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a76:	f00e ffc6 	bl	8010a06 <HAL_UARTEx_SetRxFifoThreshold>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f000 f8b8 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a86:	f00e ff47 	bl	8010918 <HAL_UARTEx_DisableFifoMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f000 f8b0 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2400051c 	.word	0x2400051c
 8001a9c:	40011000 	.word	0x40011000

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_DMA_Init+0x5c>)
 8001aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <MX_DMA_Init+0x5c>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_DMA_Init+0x5c>)
 8001ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	200b      	movs	r0, #11
 8001aca:	f002 fbc2 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ace:	200b      	movs	r0, #11
 8001ad0:	f002 fbd9 	bl	8004286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	200c      	movs	r0, #12
 8001ada:	f002 fbba 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ade:	200c      	movs	r0, #12
 8001ae0:	f002 fbd1 	bl	8004286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2010      	movs	r0, #16
 8001aea:	f002 fbb2 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001aee:	2010      	movs	r0, #16
 8001af0:	f002 fbc9 	bl	8004286 <HAL_NVIC_EnableIRQ>

}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	58024400 	.word	0x58024400

08001b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b26:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b58:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_GPIO_Init+0xe8>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001b94:	4815      	ldr	r0, [pc, #84]	; (8001bec <MX_GPIO_Init+0xec>)
 8001b96:	f005 feaf 	bl	80078f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2164      	movs	r1, #100	; 0x64
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <MX_GPIO_Init+0xf0>)
 8001ba0:	f005 feaa 	bl	80078f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ba4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001ba8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <MX_GPIO_Init+0xec>)
 8001bbe:	f005 fcd3 	bl	8007568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bc2:	2364      	movs	r3, #100	; 0x64
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_GPIO_Init+0xf0>)
 8001bda:	f005 fcc5 	bl	8007568 <HAL_GPIO_Init>

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58020800 	.word	0x58020800
 8001bf0:	58020400 	.word	0x58020400

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <Error_Handler+0x8>
	...

08001c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_MspInit+0x30>)
 8001c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c0c:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x30>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x30>)
 8001c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	58024400 	.word	0x58024400

08001c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08e      	sub	sp, #56	; 0x38
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7b      	ldr	r2, [pc, #492]	; (8001e40 <HAL_ADC_MspInit+0x20c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f040 8091 	bne.w	8001d7a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c58:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c5e:	4a79      	ldr	r2, [pc, #484]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c68:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	4a71      	ldr	r2, [pc, #452]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b6b      	ldr	r3, [pc, #428]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca4:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a62      	ldr	r2, [pc, #392]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b60      	ldr	r3, [pc, #384]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cd0:	2333      	movs	r3, #51	; 0x33
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4859      	ldr	r0, [pc, #356]	; (8001e48 <HAL_ADC_MspInit+0x214>)
 8001ce4:	f005 fc40 	bl	8007568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001ce8:	23ce      	movs	r3, #206	; 0xce
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cec:	2303      	movs	r3, #3
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4854      	ldr	r0, [pc, #336]	; (8001e4c <HAL_ADC_MspInit+0x218>)
 8001cfc:	f005 fc34 	bl	8007568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d00:	2303      	movs	r3, #3
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d04:	2303      	movs	r3, #3
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	4619      	mov	r1, r3
 8001d12:	484f      	ldr	r0, [pc, #316]	; (8001e50 <HAL_ADC_MspInit+0x21c>)
 8001d14:	f005 fc28 	bl	8007568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d18:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d1a:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <HAL_ADC_MspInit+0x224>)
 8001d1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d20:	2209      	movs	r2, #9
 8001d22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d30:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d56:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d5c:	483d      	ldr	r0, [pc, #244]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d5e:	f002 fdc7 	bl	80048f0 <HAL_DMA_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001d68:	f7ff ff44 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d70:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d72:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_ADC_MspInit+0x220>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d78:	e05e      	b.n	8001e38 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a37      	ldr	r2, [pc, #220]	; (8001e5c <HAL_ADC_MspInit+0x228>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d159      	bne.n	8001e38 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_ADC_MspInit+0x210>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001dc0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001dc4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001dc8:	f000 fd3e 	bl	8002848 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001dcc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001dd0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001dd4:	f000 fd38 	bl	8002848 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001dda:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <HAL_ADC_MspInit+0x230>)
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001de0:	2273      	movs	r2, #115	; 0x73
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e06:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e1c:	4810      	ldr	r0, [pc, #64]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e1e:	f002 fd67 	bl	80048f0 <HAL_DMA_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001e28:	f7ff fee4 	bl	8001bf4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_ADC_MspInit+0x22c>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e38:	bf00      	nop
 8001e3a:	3738      	adds	r7, #56	; 0x38
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40022000 	.word	0x40022000
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020800 	.word	0x58020800
 8001e4c:	58020000 	.word	0x58020000
 8001e50:	58020400 	.word	0x58020400
 8001e54:	240001a4 	.word	0x240001a4
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	58026000 	.word	0x58026000
 8001e60:	2400021c 	.word	0x2400021c
 8001e64:	40020028 	.word	0x40020028

08001e68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <HAL_DAC_MspInit+0xe0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d159      	bne.n	8001f3e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_DAC_MspInit+0xe4>)
 8001e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e90:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_DAC_MspInit+0xe4>)
 8001e92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_DAC_MspInit+0xe4>)
 8001e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_DAC_MspInit+0xe4>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eae:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_DAC_MspInit+0xe4>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_DAC_MspInit+0xe4>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481d      	ldr	r0, [pc, #116]	; (8001f50 <HAL_DAC_MspInit+0xe8>)
 8001eda:	f005 fb45 	bl	8007568 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_DAC_MspInit+0xf0>)
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001ee6:	2243      	movs	r2, #67	; 0x43
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f14:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f22:	480c      	ldr	r0, [pc, #48]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f24:	f002 fce4 	bl	80048f0 <HAL_DMA_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001f2e:	f7ff fe61 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <HAL_DAC_MspInit+0xec>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40007400 	.word	0x40007400
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	58020000 	.word	0x58020000
 8001f54:	240002a8 	.word	0x240002a8
 8001f58:	40020088 	.word	0x40020088

08001f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0ba      	sub	sp, #232	; 0xe8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	22c0      	movs	r2, #192	; 0xc0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00e fe17 	bl	8010bb0 <memset>
  if(hi2c->Instance==I2C1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_I2C_MspInit+0xc8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d146      	bne.n	800201a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f8c:	f04f 0208 	mov.w	r2, #8
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f007 fb06 	bl	80095b4 <HAL_RCCEx_PeriphCLKConfig>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fae:	f7ff fe21 	bl	8001bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_I2C_MspInit+0xcc>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_I2C_MspInit+0xcc>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_I2C_MspInit+0xcc>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fea:	2304      	movs	r3, #4
 8001fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <HAL_I2C_MspInit+0xd0>)
 8001ff8:	f005 fab6 	bl	8007568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_I2C_MspInit+0xcc>)
 8001ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_I2C_MspInit+0xcc>)
 8002004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002008:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_I2C_MspInit+0xcc>)
 800200e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	37e8      	adds	r7, #232	; 0xe8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40005400 	.word	0x40005400
 8002028:	58024400 	.word	0x58024400
 800202c:	58020400 	.word	0x58020400

08002030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0bc      	sub	sp, #240	; 0xf0
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002048:	f107 0318 	add.w	r3, r7, #24
 800204c:	22c0      	movs	r2, #192	; 0xc0
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f00e fdad 	bl	8010bb0 <memset>
  if(hspi->Instance==SPI1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a4c      	ldr	r2, [pc, #304]	; (800218c <HAL_SPI_MspInit+0x15c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d145      	bne.n	80020ec <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800206c:	2300      	movs	r3, #0
 800206e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	4618      	mov	r0, r3
 8002076:	f007 fa9d 	bl	80095b4 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002080:	f7ff fdb8 	bl	8001bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002084:	4b42      	ldr	r3, [pc, #264]	; (8002190 <HAL_SPI_MspInit+0x160>)
 8002086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800208a:	4a41      	ldr	r2, [pc, #260]	; (8002190 <HAL_SPI_MspInit+0x160>)
 800208c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002090:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_SPI_MspInit+0x160>)
 8002096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800209a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_SPI_MspInit+0x160>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_SPI_MspInit+0x160>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_SPI_MspInit+0x160>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020c0:	2318      	movs	r3, #24
 80020c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020d8:	2305      	movs	r3, #5
 80020da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020e2:	4619      	mov	r1, r3
 80020e4:	482b      	ldr	r0, [pc, #172]	; (8002194 <HAL_SPI_MspInit+0x164>)
 80020e6:	f005 fa3f 	bl	8007568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020ea:	e04a      	b.n	8002182 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_SPI_MspInit+0x168>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d145      	bne.n	8002182 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002102:	2300      	movs	r3, #0
 8002104:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	4618      	mov	r0, r3
 800210c:	f007 fa52 	bl	80095b4 <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002116:	f7ff fd6d 	bl	8001bf4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_SPI_MspInit+0x160>)
 800211c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_SPI_MspInit+0x160>)
 8002122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_SPI_MspInit+0x160>)
 800212c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_SPI_MspInit+0x160>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_SPI_MspInit+0x160>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_SPI_MspInit+0x160>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002156:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800215a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002170:	2305      	movs	r3, #5
 8002172:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <HAL_SPI_MspInit+0x164>)
 800217e:	f005 f9f3 	bl	8007568 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	37f0      	adds	r7, #240	; 0xf0
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40013000 	.word	0x40013000
 8002190:	58024400 	.word	0x58024400
 8002194:	58020400 	.word	0x58020400
 8002198:	40003800 	.word	0x40003800

0800219c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_TIM_PWM_MspInit+0x78>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12e      	bne.n	800220c <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_TIM_PWM_MspInit+0x7c>)
 80021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b4:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_TIM_PWM_MspInit+0x7c>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_TIM_PWM_MspInit+0x7c>)
 80021c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	2018      	movs	r0, #24
 80021d2:	f002 f83e 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021d6:	2018      	movs	r0, #24
 80021d8:	f002 f855 	bl	8004286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2019      	movs	r0, #25
 80021e2:	f002 f836 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021e6:	2019      	movs	r0, #25
 80021e8:	f002 f84d 	bl	8004286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	201a      	movs	r0, #26
 80021f2:	f002 f82e 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021f6:	201a      	movs	r0, #26
 80021f8:	f002 f845 	bl	8004286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	201b      	movs	r0, #27
 8002202:	f002 f826 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002206:	201b      	movs	r0, #27
 8002208:	f002 f83d 	bl	8004286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40010000 	.word	0x40010000
 8002218:	58024400 	.word	0x58024400

0800221c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d116      	bne.n	800225c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 8002230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2101      	movs	r1, #1
 8002250:	201c      	movs	r0, #28
 8002252:	f001 fffe 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002256:	201c      	movs	r0, #28
 8002258:	f002 f815 	bl	8004286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	58024400 	.word	0x58024400

08002268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <HAL_TIM_MspPostInit+0xb8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d120      	bne.n	80022cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_TIM_MspPostInit+0xbc>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_TIM_MspPostInit+0xbc>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_TIM_MspPostInit+0xbc>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4818      	ldr	r0, [pc, #96]	; (8002328 <HAL_TIM_MspPostInit+0xc0>)
 80022c6:	f005 f94f 	bl	8007568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022ca:	e024      	b.n	8002316 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d4:	d11f      	bne.n	8002316 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_TIM_MspPostInit+0xbc>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_TIM_MspPostInit+0xbc>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_TIM_MspPostInit+0xbc>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002306:	2301      	movs	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4806      	ldr	r0, [pc, #24]	; (800232c <HAL_TIM_MspPostInit+0xc4>)
 8002312:	f005 f929 	bl	8007568 <HAL_GPIO_Init>
}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	; 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	58024400 	.word	0x58024400
 8002328:	58020000 	.word	0x58020000
 800232c:	58020400 	.word	0x58020400

08002330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0ba      	sub	sp, #232	; 0xe8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	22c0      	movs	r2, #192	; 0xc0
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00e fc2d 	bl	8010bb0 <memset>
  if(huart->Instance==USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <HAL_UART_MspInit+0xd8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d14e      	bne.n	80023fe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002360:	f04f 0201 	mov.w	r2, #1
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4618      	mov	r0, r3
 8002378:	f007 f91c 	bl	80095b4 <HAL_RCCEx_PeriphCLKConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002382:	f7ff fc37 	bl	8001bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_UART_MspInit+0xdc>)
 8002388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_UART_MspInit+0xdc>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_UART_MspInit+0xdc>)
 8002398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_UART_MspInit+0xdc>)
 80023a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023aa:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_UART_MspInit+0xdc>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_UART_MspInit+0xdc>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023dc:	2307      	movs	r3, #7
 80023de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023e6:	4619      	mov	r1, r3
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <HAL_UART_MspInit+0xe0>)
 80023ea:	f005 f8bd 	bl	8007568 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2025      	movs	r0, #37	; 0x25
 80023f4:	f001 ff2d 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f8:	2025      	movs	r0, #37	; 0x25
 80023fa:	f001 ff44 	bl	8004286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	37e8      	adds	r7, #232	; 0xe8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40011000 	.word	0x40011000
 800240c:	58024400 	.word	0x58024400
 8002410:	58020000 	.word	0x58020000

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <NMI_Handler+0x4>

0800241a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <HardFault_Handler+0x4>

08002420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <MemManage_Handler+0x4>

08002426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <BusFault_Handler+0x4>

0800242c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <UsageFault_Handler+0x4>

08002432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002460:	f000 f9b6 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA1_Stream0_IRQHandler+0x10>)
 800246e:	f003 fd69 	bl	8005f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	240001a4 	.word	0x240001a4

0800247c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Stream1_IRQHandler+0x10>)
 8002482:	f003 fd5f 	bl	8005f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2400021c 	.word	0x2400021c

08002490 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Stream5_IRQHandler+0x10>)
 8002496:	f003 fd55 	bl	8005f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	240002a8 	.word	0x240002a8

080024a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM1_BRK_IRQHandler+0x10>)
 80024aa:	f00a fe65 	bl	800d178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	24000484 	.word	0x24000484

080024b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM1_UP_IRQHandler+0x10>)
 80024be:	f00a fe5b 	bl	800d178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	24000484 	.word	0x24000484

080024cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80024d2:	f00a fe51 	bl	800d178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	24000484 	.word	0x24000484

080024e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM1_CC_IRQHandler+0x10>)
 80024e6:	f00a fe47 	bl	800d178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	24000484 	.word	0x24000484

080024f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <TIM2_IRQHandler+0x10>)
 80024fa:	f00a fe3d 	bl	800d178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	240004d0 	.word	0x240004d0

08002508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <USART1_IRQHandler+0x10>)
 800250e:	f00c f803 	bl	800e518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2400051c 	.word	0x2400051c

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f00e fae8 	bl	8010b20 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	24080000 	.word	0x24080000
 800257c:	00000400 	.word	0x00000400
 8002580:	24000664 	.word	0x24000664
 8002584:	24000680 	.word	0x24000680

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800258c:	4b37      	ldr	r3, [pc, #220]	; (800266c <SystemInit+0xe4>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a36      	ldr	r2, [pc, #216]	; (800266c <SystemInit+0xe4>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800259c:	4b34      	ldr	r3, [pc, #208]	; (8002670 <SystemInit+0xe8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d807      	bhi.n	80025b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <SystemInit+0xe8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 030f 	bic.w	r3, r3, #15
 80025b0:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <SystemInit+0xe8>)
 80025b2:	f043 0307 	orr.w	r3, r3, #7
 80025b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <SystemInit+0xec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <SystemInit+0xec>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <SystemInit+0xec>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <SystemInit+0xec>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4929      	ldr	r1, [pc, #164]	; (8002674 <SystemInit+0xec>)
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <SystemInit+0xf0>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <SystemInit+0xe8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <SystemInit+0xe8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	4a21      	ldr	r2, [pc, #132]	; (8002670 <SystemInit+0xe8>)
 80025ec:	f043 0307 	orr.w	r3, r3, #7
 80025f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <SystemInit+0xec>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <SystemInit+0xec>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <SystemInit+0xec>)
 8002600:	2200      	movs	r2, #0
 8002602:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <SystemInit+0xec>)
 8002606:	4a1d      	ldr	r2, [pc, #116]	; (800267c <SystemInit+0xf4>)
 8002608:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <SystemInit+0xec>)
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <SystemInit+0xf8>)
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <SystemInit+0xec>)
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <SystemInit+0xfc>)
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <SystemInit+0xec>)
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <SystemInit+0xec>)
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <SystemInit+0xfc>)
 8002620:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <SystemInit+0xec>)
 8002624:	2200      	movs	r2, #0
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <SystemInit+0xec>)
 800262a:	4a16      	ldr	r2, [pc, #88]	; (8002684 <SystemInit+0xfc>)
 800262c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <SystemInit+0xec>)
 8002630:	2200      	movs	r2, #0
 8002632:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <SystemInit+0xec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <SystemInit+0xec>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <SystemInit+0xec>)
 8002642:	2200      	movs	r2, #0
 8002644:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <SystemInit+0x100>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <SystemInit+0x104>)
 800264c:	4013      	ands	r3, r2
 800264e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002652:	d202      	bcs.n	800265a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <SystemInit+0x108>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <SystemInit+0x10c>)
 800265c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002660:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00
 8002670:	52002000 	.word	0x52002000
 8002674:	58024400 	.word	0x58024400
 8002678:	eaf6ed7f 	.word	0xeaf6ed7f
 800267c:	02020200 	.word	0x02020200
 8002680:	01ff0000 	.word	0x01ff0000
 8002684:	01010280 	.word	0x01010280
 8002688:	5c001000 	.word	0x5c001000
 800268c:	ffff0000 	.word	0xffff0000
 8002690:	51008108 	.word	0x51008108
 8002694:	52004000 	.word	0x52004000

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800269c:	f7ff ff74 	bl	8002588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	; (80026d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	; (80026e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026c6:	f00e fa31 	bl	8010b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7fe fc91 	bl	8000ff0 <main>
  bx  lr
 80026ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026d8:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80026dc:	08010e3c 	.word	0x08010e3c
  ldr r2, =_sbss
 80026e0:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 80026e4:	2400067c 	.word	0x2400067c

080026e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC3_IRQHandler>
	...

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f2:	2003      	movs	r0, #3
 80026f4:	f001 fda2 	bl	800423c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f8:	f006 fd86 	bl	8009208 <HAL_RCC_GetSysClockFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_Init+0x68>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	4913      	ldr	r1, [pc, #76]	; (8002758 <HAL_Init+0x6c>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_Init+0x68>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_Init+0x6c>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_Init+0x70>)
 800272e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_Init+0x74>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002736:	200f      	movs	r0, #15
 8002738:	f000 f814 	bl	8002764 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e002      	b.n	800274c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002746:	f7ff fa5b 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400
 8002758:	08010dec 	.word	0x08010dec
 800275c:	24000048 	.word	0x24000048
 8002760:	24000044 	.word	0x24000044

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_InitTick+0x60>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e021      	b.n	80027bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_InitTick+0x64>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_InitTick+0x60>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fd87 	bl	80042a2 <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ac:	f001 fd51 	bl	8004252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_InitTick+0x68>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	24000050 	.word	0x24000050
 80027c8:	24000044 	.word	0x24000044
 80027cc:	2400004c 	.word	0x2400004c

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	24000050 	.word	0x24000050
 80027f4:	24000668 	.word	0x24000668

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	24000668 	.word	0x24000668

08002810 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_SuspendTick+0x1c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_SuspendTick+0x1c>)
 800281a:	f023 0302 	bic.w	r3, r3, #2
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_GetREVID+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0c1b      	lsrs	r3, r3, #16
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	5c001000 	.word	0x5c001000

08002848 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	58000400 	.word	0x58000400

08002874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3360      	adds	r3, #96	; 0x60
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	431a      	orrs	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	611a      	str	r2, [r3, #16]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800294e:	b480      	push	{r7}
 8002950:	b087      	sub	sp, #28
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]
  }
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3330      	adds	r3, #48	; 0x30
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	4413      	add	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	211f      	movs	r1, #31
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	f003 011f 	and.w	r1, r3, #31
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f023 0203 	bic.w	r2, r3, #3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3314      	adds	r3, #20
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0e5b      	lsrs	r3, r3, #25
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	0d1b      	lsrs	r3, r3, #20
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2107      	movs	r1, #7
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0d1b      	lsrs	r3, r3, #20
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0318 	and.w	r3, r3, #24
 8002aa2:	4908      	ldr	r1, [pc, #32]	; (8002ac4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002aa4:	40d9      	lsrs	r1, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	000fffff 	.word	0x000fffff

08002ac8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6093      	str	r3, [r2, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	5fffffc0 	.word	0x5fffffc0

08002b08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	6fffffc0 	.word	0x6fffffc0

08002b58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <LL_ADC_Enable+0x24>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	7fffffc0 	.word	0x7fffffc0

08002ba8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <LL_ADC_Disable+0x24>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	7fffffc0 	.word	0x7fffffc0

08002bd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_IsEnabled+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_IsEnabled+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d101      	bne.n	8002c0e <LL_ADC_IsDisableOngoing+0x18>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <LL_ADC_IsDisableOngoing+0x1a>
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <LL_ADC_REG_StartConversion+0x24>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	7fffffc0 	.word	0x7fffffc0

08002c44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d101      	bne.n	8002c5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d101      	bne.n	8002c82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e18f      	b.n	8002fca <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fe ffbb 	bl	8001c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff19 	bl	8002b08 <LL_ADC_IsDeepPowerDownEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff feff 	bl	8002ae4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff34 	bl	8002b58 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d114      	bne.n	8002d20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff18 	bl	8002b30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d00:	4b87      	ldr	r3, [pc, #540]	; (8002f20 <HAL_ADC_Init+0x290>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	4a87      	ldr	r2, [pc, #540]	; (8002f24 <HAL_ADC_Init+0x294>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d12:	e002      	b.n	8002d1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f9      	bne.n	8002d14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff17 	bl	8002b58 <LL_ADC_IsInternalRegulatorEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff77 	bl	8002c44 <LL_ADC_REG_IsConversionOngoing>
 8002d56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 8129 	bne.w	8002fb8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 8125 	bne.w	8002fb8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff24 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d136      	bne.n	8002dfc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <HAL_ADC_Init+0x298>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_ADC_Init+0x112>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <HAL_ADC_Init+0x29c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10e      	bne.n	8002dc0 <HAL_ADC_Init+0x130>
 8002da2:	4861      	ldr	r0, [pc, #388]	; (8002f28 <HAL_ADC_Init+0x298>)
 8002da4:	f7ff ff14 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002da8:	4604      	mov	r4, r0
 8002daa:	4860      	ldr	r0, [pc, #384]	; (8002f2c <HAL_ADC_Init+0x29c>)
 8002dac:	f7ff ff10 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4323      	orrs	r3, r4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e008      	b.n	8002dd2 <HAL_ADC_Init+0x142>
 8002dc0:	485b      	ldr	r0, [pc, #364]	; (8002f30 <HAL_ADC_Init+0x2a0>)
 8002dc2:	f7ff ff05 	bl	8002bd0 <LL_ADC_IsEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a53      	ldr	r2, [pc, #332]	; (8002f28 <HAL_ADC_Init+0x298>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_ADC_Init+0x15a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_ADC_Init+0x29c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Init+0x15e>
 8002dea:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_ADC_Init+0x2a4>)
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_Init+0x160>
 8002dee:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_ADC_Init+0x2a8>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7ff fd3c 	bl	8002874 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002dfc:	f7ff fd18 	bl	8002830 <HAL_GetREVID>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d914      	bls.n	8002e34 <HAL_ADC_Init+0x1a4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d110      	bne.n	8002e34 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7d5b      	ldrb	r3, [r3, #21]
 8002e16:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e1c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e22:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7f1b      	ldrb	r3, [r3, #28]
 8002e28:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e2a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e2c:	f043 030c 	orr.w	r3, r3, #12
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e00d      	b.n	8002e50 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7d5b      	ldrb	r3, [r3, #21]
 8002e38:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e3e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e44:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7f1b      	ldrb	r3, [r3, #28]
 8002e4a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7f1b      	ldrb	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	045b      	lsls	r3, r3, #17
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_ADC_Init+0x2ac>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	430b      	orrs	r3, r1
 8002e94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fed2 	bl	8002c44 <LL_ADC_REG_IsConversionOngoing>
 8002ea0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fedf 	bl	8002c6a <LL_ADC_INJ_IsConversionOngoing>
 8002eac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d15f      	bne.n	8002f74 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d15c      	bne.n	8002f74 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7d1b      	ldrb	r3, [r3, #20]
 8002ebe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_ADC_Init+0x2b0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d130      	bne.n	8002f48 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_ADC_Init+0x2b4>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002efa:	3a01      	subs	r2, #1
 8002efc:	0411      	lsls	r1, r2, #16
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	e01c      	b.n	8002f58 <HAL_ADC_Init+0x2c8>
 8002f1e:	bf00      	nop
 8002f20:	24000044 	.word	0x24000044
 8002f24:	053e2d63 	.word	0x053e2d63
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40022100 	.word	0x40022100
 8002f30:	58026000 	.word	0x58026000
 8002f34:	40022300 	.word	0x40022300
 8002f38:	58026300 	.word	0x58026300
 8002f3c:	fff0c003 	.word	0xfff0c003
 8002f40:	ffffbffc 	.word	0xffffbffc
 8002f44:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fdec 	bl	8003b4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10c      	bne.n	8002f96 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f023 010f 	bic.w	r1, r3, #15
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
 8002f94:	e007      	b.n	8002fa6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 020f 	bic.w	r2, r2, #15
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8002fb6:	e007      	b.n	8002fc8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0210 	orr.w	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd90      	pop	{r4, r7, pc}
 8002fd2:	bf00      	nop

08002fd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a55      	ldr	r2, [pc, #340]	; (800313c <HAL_ADC_Start_DMA+0x168>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_ADC_Start_DMA+0x20>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a54      	ldr	r2, [pc, #336]	; (8003140 <HAL_ADC_Start_DMA+0x16c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_Start_DMA+0x24>
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_ADC_Start_DMA+0x170>)
 8002ff6:	e000      	b.n	8002ffa <HAL_ADC_Start_DMA+0x26>
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_ADC_Start_DMA+0x174>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fd64 	bl	8002ac8 <LL_ADC_GetMultimode>
 8003000:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fe1c 	bl	8002c44 <LL_ADC_REG_IsConversionOngoing>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 808c 	bne.w	800312c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_ADC_Start_DMA+0x4e>
 800301e:	2302      	movs	r3, #2
 8003020:	e087      	b.n	8003132 <HAL_ADC_Start_DMA+0x15e>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d002      	beq.n	800303c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d170      	bne.n	800311e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fc07 	bl	8003850 <ADC_Enable>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d163      	bne.n	8003114 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_ADC_Start_DMA+0x178>)
 8003052:	4013      	ands	r3, r2
 8003054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a37      	ldr	r2, [pc, #220]	; (8003140 <HAL_ADC_Start_DMA+0x16c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d002      	beq.n	800306c <HAL_ADC_Start_DMA+0x98>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e000      	b.n	800306e <HAL_ADC_Start_DMA+0x9a>
 800306c:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_ADC_Start_DMA+0x168>)
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	4293      	cmp	r3, r2
 8003074:	d002      	beq.n	800307c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f023 0206 	bic.w	r2, r3, #6
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	659a      	str	r2, [r3, #88]	; 0x58
 80030a0:	e002      	b.n	80030a8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	4a28      	ldr	r2, [pc, #160]	; (8003150 <HAL_ADC_Start_DMA+0x17c>)
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <HAL_ADC_Start_DMA+0x180>)
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <HAL_ADC_Start_DMA+0x184>)
 80030be:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	221c      	movs	r2, #28
 80030c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0210 	orr.w	r2, r2, #16
 80030de:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7ff fc89 	bl	8002a02 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3340      	adds	r3, #64	; 0x40
 80030fa:	4619      	mov	r1, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f001 ff52 	bl	8004fa8 <HAL_DMA_Start_IT>
 8003104:	4603      	mov	r3, r0
 8003106:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fd85 	bl	8002c1c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003112:	e00d      	b.n	8003130 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800311c:	e008      	b.n	8003130 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800312a:	e001      	b.n	8003130 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800312c:	2302      	movs	r3, #2
 800312e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000
 8003140:	40022100 	.word	0x40022100
 8003144:	40022300 	.word	0x40022300
 8003148:	58026300 	.word	0x58026300
 800314c:	fffff0fe 	.word	0xfffff0fe
 8003150:	08003a23 	.word	0x08003a23
 8003154:	08003afb 	.word	0x08003afb
 8003158:	08003b17 	.word	0x08003b17

0800315c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b0a1      	sub	sp, #132	; 0x84
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a65      	ldr	r2, [pc, #404]	; (8003348 <HAL_ADC_ConfigChannel+0x1b0>)
 80031b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x2a>
 80031be:	2302      	movs	r3, #2
 80031c0:	e32e      	b.n	8003820 <HAL_ADC_ConfigChannel+0x688>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd38 	bl	8002c44 <LL_ADC_REG_IsConversionOngoing>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 8313 	bne.w	8003802 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db2c      	blt.n	800323e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x6a>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2201      	movs	r2, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	e016      	b.n	8003230 <HAL_ADC_ConfigChannel+0x98>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003212:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e003      	b.n	8003226 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800321e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	69d1      	ldr	r1, [r2, #28]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	430b      	orrs	r3, r1
 800323c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	f7ff fbad 	bl	80029aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fcf5 	bl	8002c44 <LL_ADC_REG_IsConversionOngoing>
 800325a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fd02 	bl	8002c6a <LL_ADC_INJ_IsConversionOngoing>
 8003266:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80b8 	bne.w	80033e0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 80b4 	bne.w	80033e0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	461a      	mov	r2, r3
 8003286:	f7ff fbcf 	bl	8002a28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_ADC_ConfigChannel+0x1b4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003296:	d10b      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x118>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	e01d      	b.n	80032ec <HAL_ADC_ConfigChannel+0x154>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x13e>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	e00a      	b.n	80032ec <HAL_ADC_ConfigChannel+0x154>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d02c      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6919      	ldr	r1, [r3, #16]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003304:	f7ff faea 	bl	80028dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6919      	ldr	r1, [r3, #16]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	7e5b      	ldrb	r3, [r3, #25]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_ADC_ConfigChannel+0x186>
 8003318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800331c:	e000      	b.n	8003320 <HAL_ADC_ConfigChannel+0x188>
 800331e:	2300      	movs	r3, #0
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff fb14 	bl	800294e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6919      	ldr	r1, [r3, #16]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	7e1b      	ldrb	r3, [r3, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1a4>
 8003336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333a:	e000      	b.n	800333e <HAL_ADC_ConfigChannel+0x1a6>
 800333c:	2300      	movs	r3, #0
 800333e:	461a      	mov	r2, r3
 8003340:	f7ff faec 	bl	800291c <LL_ADC_SetDataRightShift>
 8003344:	e04c      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x248>
 8003346:	bf00      	nop
 8003348:	47ff0000 	.word	0x47ff0000
 800334c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	069b      	lsls	r3, r3, #26
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003372:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	069b      	lsls	r3, r3, #26
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003396:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	069b      	lsls	r3, r3, #26
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ba:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	069b      	lsls	r3, r3, #26
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d107      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fbf3 	bl	8002bd0 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 8211 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f7ff fb3e 	bl	8002a80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4aa1      	ldr	r2, [pc, #644]	; (8003690 <HAL_ADC_ConfigChannel+0x4f8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	f040 812e 	bne.w	800366c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x2a0>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	3301      	adds	r3, #1
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2b09      	cmp	r3, #9
 800342e:	bf94      	ite	ls
 8003430:	2301      	movls	r3, #1
 8003432:	2300      	movhi	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e019      	b.n	800346c <HAL_ADC_ConfigChannel+0x2d4>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800344a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2b09      	cmp	r3, #9
 8003464:	bf94      	ite	ls
 8003466:	2301      	movls	r3, #1
 8003468:	2300      	movhi	r3, #0
 800346a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	2b00      	cmp	r3, #0
 800346e:	d079      	beq.n	8003564 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_ADC_ConfigChannel+0x2f4>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	069b      	lsls	r3, r3, #26
 8003486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348a:	e015      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x320>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800349e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80034a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x340>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	e017      	b.n	8003508 <HAL_ADC_ConfigChannel+0x370>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80034f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_ADC_ConfigChannel+0x396>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	051b      	lsls	r3, r3, #20
 800352c:	e018      	b.n	8003560 <HAL_ADC_ConfigChannel+0x3c8>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003560:	430b      	orrs	r3, r1
 8003562:	e07e      	b.n	8003662 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x3e8>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357e:	e015      	b.n	80035ac <HAL_ADC_ConfigChannel+0x414>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e003      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	069b      	lsls	r3, r3, #26
 80035a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x434>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	e017      	b.n	80035fc <HAL_ADC_ConfigChannel+0x464>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	61bb      	str	r3, [r7, #24]
  return result;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x490>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	3b1e      	subs	r3, #30
 8003620:	051b      	lsls	r3, r3, #20
 8003622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003626:	e01b      	b.n	8003660 <HAL_ADC_ConfigChannel+0x4c8>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	60fb      	str	r3, [r7, #12]
  return result;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	3b1e      	subs	r3, #30
 800365a:	051b      	lsls	r3, r3, #20
 800365c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	430b      	orrs	r3, r1
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff f9de 	bl	8002a28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f280 80cf 	bge.w	8003814 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_ADC_ConfigChannel+0x4fc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_ADC_ConfigChannel+0x4f2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_ADC_ConfigChannel+0x500>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10a      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x508>
 800368a:	4b04      	ldr	r3, [pc, #16]	; (800369c <HAL_ADC_ConfigChannel+0x504>)
 800368c:	e009      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x50a>
 800368e:	bf00      	nop
 8003690:	47ff0000 	.word	0x47ff0000
 8003694:	40022000 	.word	0x40022000
 8003698:	40022100 	.word	0x40022100
 800369c:	40022300 	.word	0x40022300
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_ADC_ConfigChannel+0x690>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f90c 	bl	80028c0 <LL_ADC_GetCommonPathInternalCh>
 80036a8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a5f      	ldr	r2, [pc, #380]	; (800382c <HAL_ADC_ConfigChannel+0x694>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_ADC_ConfigChannel+0x526>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a5d      	ldr	r2, [pc, #372]	; (8003830 <HAL_ADC_ConfigChannel+0x698>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10e      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x544>
 80036be:	485b      	ldr	r0, [pc, #364]	; (800382c <HAL_ADC_ConfigChannel+0x694>)
 80036c0:	f7ff fa86 	bl	8002bd0 <LL_ADC_IsEnabled>
 80036c4:	4604      	mov	r4, r0
 80036c6:	485a      	ldr	r0, [pc, #360]	; (8003830 <HAL_ADC_ConfigChannel+0x698>)
 80036c8:	f7ff fa82 	bl	8002bd0 <LL_ADC_IsEnabled>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4323      	orrs	r3, r4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e008      	b.n	80036ee <HAL_ADC_ConfigChannel+0x556>
 80036dc:	4855      	ldr	r0, [pc, #340]	; (8003834 <HAL_ADC_ConfigChannel+0x69c>)
 80036de:	f7ff fa77 	bl	8002bd0 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d07d      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a50      	ldr	r2, [pc, #320]	; (8003838 <HAL_ADC_ConfigChannel+0x6a0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d130      	bne.n	800375e <HAL_ADC_ConfigChannel+0x5c6>
 80036fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d12b      	bne.n	800375e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <HAL_ADC_ConfigChannel+0x69c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	f040 8081 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_ADC_ConfigChannel+0x694>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x58e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a43      	ldr	r2, [pc, #268]	; (8003830 <HAL_ADC_ConfigChannel+0x698>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_ADC_ConfigChannel+0x592>
 8003726:	4a45      	ldr	r2, [pc, #276]	; (800383c <HAL_ADC_ConfigChannel+0x6a4>)
 8003728:	e000      	b.n	800372c <HAL_ADC_ConfigChannel+0x594>
 800372a:	4a3f      	ldr	r2, [pc, #252]	; (8003828 <HAL_ADC_ConfigChannel+0x690>)
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f7ff f8b0 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_ADC_ConfigChannel+0x6a8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_ADC_ConfigChannel+0x6ac>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	3301      	adds	r3, #1
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800374e:	e002      	b.n	8003756 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3b01      	subs	r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f9      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800375c:	e05a      	b.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a39      	ldr	r2, [pc, #228]	; (8003848 <HAL_ADC_ConfigChannel+0x6b0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d11e      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x60e>
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d119      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <HAL_ADC_ConfigChannel+0x69c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d14b      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2a      	ldr	r2, [pc, #168]	; (800382c <HAL_ADC_ConfigChannel+0x694>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_ADC_ConfigChannel+0x5f8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_ADC_ConfigChannel+0x698>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5fc>
 8003790:	4a2a      	ldr	r2, [pc, #168]	; (800383c <HAL_ADC_ConfigChannel+0x6a4>)
 8003792:	e000      	b.n	8003796 <HAL_ADC_ConfigChannel+0x5fe>
 8003794:	4a24      	ldr	r2, [pc, #144]	; (8003828 <HAL_ADC_ConfigChannel+0x690>)
 8003796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7ff f87b 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a4:	e036      	b.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a28      	ldr	r2, [pc, #160]	; (800384c <HAL_ADC_ConfigChannel+0x6b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d131      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d12c      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_ADC_ConfigChannel+0x69c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d127      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_ADC_ConfigChannel+0x694>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_ADC_ConfigChannel+0x640>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <HAL_ADC_ConfigChannel+0x698>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x644>
 80037d8:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_ADC_ConfigChannel+0x6a4>)
 80037da:	e000      	b.n	80037de <HAL_ADC_ConfigChannel+0x646>
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_ADC_ConfigChannel+0x690>)
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7ff f857 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
 80037ec:	e012      	b.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003800:	e008      	b.n	8003814 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800381c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003820:	4618      	mov	r0, r3
 8003822:	3784      	adds	r7, #132	; 0x84
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	58026300 	.word	0x58026300
 800382c:	40022000 	.word	0x40022000
 8003830:	40022100 	.word	0x40022100
 8003834:	58026000 	.word	0x58026000
 8003838:	cb840000 	.word	0xcb840000
 800383c:	40022300 	.word	0x40022300
 8003840:	24000044 	.word	0x24000044
 8003844:	053e2d63 	.word	0x053e2d63
 8003848:	c7520000 	.word	0xc7520000
 800384c:	cfb80000 	.word	0xcfb80000

08003850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff f9b7 	bl	8002bd0 <LL_ADC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d16e      	bne.n	8003946 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <ADC_Enable+0x100>)
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f043 0210 	orr.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e05a      	b.n	8003948 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f972 	bl	8002b80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800389c:	f7fe ffac 	bl	80027f8 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2b      	ldr	r2, [pc, #172]	; (8003954 <ADC_Enable+0x104>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <ADC_Enable+0x66>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a29      	ldr	r2, [pc, #164]	; (8003958 <ADC_Enable+0x108>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <ADC_Enable+0x6a>
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <ADC_Enable+0x10c>)
 80038b8:	e000      	b.n	80038bc <ADC_Enable+0x6c>
 80038ba:	4b29      	ldr	r3, [pc, #164]	; (8003960 <ADC_Enable+0x110>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff f903 	bl	8002ac8 <LL_ADC_GetMultimode>
 80038c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <ADC_Enable+0x108>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d002      	beq.n	80038d4 <ADC_Enable+0x84>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	e000      	b.n	80038d6 <ADC_Enable+0x86>
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <ADC_Enable+0x104>)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02c      	beq.n	8003938 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d130      	bne.n	8003946 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e4:	e028      	b.n	8003938 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f970 	bl	8002bd0 <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f940 	bl	8002b80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003900:	f7fe ff7a 	bl	80027f8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d914      	bls.n	8003938 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d00d      	beq.n	8003938 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d1cf      	bne.n	80038e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	8000003f 	.word	0x8000003f
 8003954:	40022000 	.word	0x40022000
 8003958:	40022100 	.word	0x40022100
 800395c:	40022300 	.word	0x40022300
 8003960:	58026300 	.word	0x58026300

08003964 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f940 	bl	8002bf6 <LL_ADC_IsDisableOngoing>
 8003976:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f927 	bl	8002bd0 <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d047      	beq.n	8003a18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d144      	bne.n	8003a18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030d 	and.w	r3, r3, #13
 8003998:	2b01      	cmp	r3, #1
 800399a:	d10c      	bne.n	80039b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f901 	bl	8002ba8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2203      	movs	r2, #3
 80039ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ae:	f7fe ff23 	bl	80027f8 <HAL_GetTick>
 80039b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039b4:	e029      	b.n	8003a0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e023      	b.n	8003a1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039d2:	f7fe ff11 	bl	80027f8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d914      	bls.n	8003a0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0210 	orr.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1dc      	bne.n	80039d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d14b      	bne.n	8003ad4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d021      	beq.n	8003a9a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe ff92 	bl	8002984 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d032      	beq.n	8003acc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d12b      	bne.n	8003acc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11f      	bne.n	8003acc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
 8003a98:	e018      	b.n	8003acc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d111      	bne.n	8003acc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff fb45 	bl	800315c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ad2:	e00e      	b.n	8003af2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff fb4f 	bl	8003184 <HAL_ADC_ErrorCallback>
}
 8003ae6:	e004      	b.n	8003af2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fb31 	bl	8003170 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fb21 	bl	8003184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7a      	ldr	r2, [pc, #488]	; (8003d44 <ADC_ConfigureBoostMode+0x1f8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <ADC_ConfigureBoostMode+0x1c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a79      	ldr	r2, [pc, #484]	; (8003d48 <ADC_ConfigureBoostMode+0x1fc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d109      	bne.n	8003b7c <ADC_ConfigureBoostMode+0x30>
 8003b68:	4b78      	ldr	r3, [pc, #480]	; (8003d4c <ADC_ConfigureBoostMode+0x200>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e008      	b.n	8003b8e <ADC_ConfigureBoostMode+0x42>
 8003b7c:	4b74      	ldr	r3, [pc, #464]	; (8003d50 <ADC_ConfigureBoostMode+0x204>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01c      	beq.n	8003bcc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b92:	f005 fcb3 	bl	80094fc <HAL_RCC_GetHCLKFreq>
 8003b96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ba0:	d010      	beq.n	8003bc4 <ADC_ConfigureBoostMode+0x78>
 8003ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ba6:	d873      	bhi.n	8003c90 <ADC_ConfigureBoostMode+0x144>
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d002      	beq.n	8003bb4 <ADC_ConfigureBoostMode+0x68>
 8003bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb2:	d16d      	bne.n	8003c90 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
        break;
 8003bc2:	e068      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	60fb      	str	r3, [r7, #12]
        break;
 8003bca:	e064      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bcc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	f006 fef8 	bl	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003be2:	d051      	beq.n	8003c88 <ADC_ConfigureBoostMode+0x13c>
 8003be4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003be8:	d854      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003bea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003bee:	d047      	beq.n	8003c80 <ADC_ConfigureBoostMode+0x134>
 8003bf0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003bf4:	d84e      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003bf6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003bfa:	d03d      	beq.n	8003c78 <ADC_ConfigureBoostMode+0x12c>
 8003bfc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c00:	d848      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c06:	d033      	beq.n	8003c70 <ADC_ConfigureBoostMode+0x124>
 8003c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c0c:	d842      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c12:	d029      	beq.n	8003c68 <ADC_ConfigureBoostMode+0x11c>
 8003c14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c18:	d83c      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c1e:	d01a      	beq.n	8003c56 <ADC_ConfigureBoostMode+0x10a>
 8003c20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c24:	d836      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c2a:	d014      	beq.n	8003c56 <ADC_ConfigureBoostMode+0x10a>
 8003c2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c30:	d830      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d00e      	beq.n	8003c56 <ADC_ConfigureBoostMode+0x10a>
 8003c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3c:	d82a      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c42:	d008      	beq.n	8003c56 <ADC_ConfigureBoostMode+0x10a>
 8003c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c48:	d824      	bhi.n	8003c94 <ADC_ConfigureBoostMode+0x148>
 8003c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c4e:	d002      	beq.n	8003c56 <ADC_ConfigureBoostMode+0x10a>
 8003c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c54:	d11e      	bne.n	8003c94 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	60fb      	str	r3, [r7, #12]
        break;
 8003c66:	e016      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	60fb      	str	r3, [r7, #12]
        break;
 8003c6e:	e012      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	60fb      	str	r3, [r7, #12]
        break;
 8003c76:	e00e      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	60fb      	str	r3, [r7, #12]
        break;
 8003c7e:	e00a      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
        break;
 8003c86:	e006      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	60fb      	str	r3, [r7, #12]
        break;
 8003c8e:	e002      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c90:	bf00      	nop
 8003c92:	e000      	b.n	8003c96 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c94:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c96:	f7fe fdcb 	bl	8002830 <HAL_GetREVID>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d815      	bhi.n	8003cd0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <ADC_ConfigureBoostMode+0x208>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d908      	bls.n	8003cbe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003cbc:	e03e      	b.n	8003d3c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	e035      	b.n	8003d3c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <ADC_ConfigureBoostMode+0x20c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d808      	bhi.n	8003cf0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003cec:	609a      	str	r2, [r3, #8]
}
 8003cee:	e025      	b.n	8003d3c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <ADC_ConfigureBoostMode+0x210>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d80a      	bhi.n	8003d0e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	e016      	b.n	8003d3c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <ADC_ConfigureBoostMode+0x214>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d80a      	bhi.n	8003d2c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d28:	609a      	str	r2, [r3, #8]
}
 8003d2a:	e007      	b.n	8003d3c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40022100 	.word	0x40022100
 8003d4c:	40022300 	.word	0x40022300
 8003d50:	58026300 	.word	0x58026300
 8003d54:	01312d00 	.word	0x01312d00
 8003d58:	005f5e10 	.word	0x005f5e10
 8003d5c:	00bebc20 	.word	0x00bebc20
 8003d60:	017d7840 	.word	0x017d7840

08003d64 <LL_ADC_IsEnabled>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <LL_ADC_IsEnabled+0x18>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <LL_ADC_IsEnabled+0x1a>
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <LL_ADC_StartCalibration>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <LL_ADC_StartCalibration+0x38>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003dac:	430a      	orrs	r2, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	3ffeffc0 	.word	0x3ffeffc0

08003dc8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ddc:	d101      	bne.n	8003de2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_REG_IsConversionOngoing>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d101      	bne.n	8003e08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_ADCEx_Calibration_Start+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e04c      	b.n	8003ed0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fd90 	bl	8003964 <ADC_Disable>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d135      	bne.n	8003eba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e52:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ff90 	bl	8003d8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e6c:	e014      	b.n	8003e98 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3301      	adds	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_ADCEx_Calibration_Start+0xc4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d30d      	bcc.n	8003e98 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f023 0312 	bic.w	r3, r3, #18
 8003e84:	f043 0210 	orr.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e01b      	b.n	8003ed0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff93 	bl	8003dc8 <LL_ADC_IsCalibrationOnGoing>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e2      	bne.n	8003e6e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f023 0303 	bic.w	r3, r3, #3
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb8:	e005      	b.n	8003ec6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	ffffeefd 	.word	0xffffeefd
 8003edc:	25c3f800 	.word	0x25c3f800

08003ee0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b09f      	sub	sp, #124	; 0x7c
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0be      	b.n	800407c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5c      	ldr	r2, [pc, #368]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d102      	bne.n	8003f1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f18:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	e001      	b.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e09d      	b.n	800407c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff54 	bl	8003df0 <LL_ADC_REG_IsConversionOngoing>
 8003f48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff4e 	bl	8003df0 <LL_ADC_REG_IsConversionOngoing>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d17f      	bne.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d17c      	bne.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a47      	ldr	r2, [pc, #284]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a46      	ldr	r2, [pc, #280]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f74:	4b45      	ldr	r3, [pc, #276]	; (800408c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f76:	e000      	b.n	8003f7a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f78:	4b45      	ldr	r3, [pc, #276]	; (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f7a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d039      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3a      	ldr	r2, [pc, #232]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a38      	ldr	r2, [pc, #224]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003faa:	4836      	ldr	r0, [pc, #216]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fac:	f7ff feda 	bl	8003d64 <LL_ADC_IsEnabled>
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4835      	ldr	r0, [pc, #212]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fb4:	f7ff fed6 	bl	8003d64 <LL_ADC_IsEnabled>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4323      	orrs	r3, r4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e008      	b.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003fc8:	4832      	ldr	r0, [pc, #200]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003fca:	f7ff fecb 	bl	8003d64 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d047      	beq.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	6811      	ldr	r1, [r2, #0]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	6892      	ldr	r2, [r2, #8]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ff6:	e03a      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10e      	bne.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004018:	481a      	ldr	r0, [pc, #104]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800401a:	f7ff fea3 	bl	8003d64 <LL_ADC_IsEnabled>
 800401e:	4604      	mov	r4, r0
 8004020:	4819      	ldr	r0, [pc, #100]	; (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004022:	f7ff fe9f 	bl	8003d64 <LL_ADC_IsEnabled>
 8004026:	4603      	mov	r3, r0
 8004028:	4323      	orrs	r3, r4
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e008      	b.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004036:	4817      	ldr	r0, [pc, #92]	; (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004038:	f7ff fe94 	bl	8003d64 <LL_ADC_IsEnabled>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004052:	4013      	ands	r3, r2
 8004054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004056:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004058:	e009      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800406c:	e000      	b.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800406e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004078:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800407c:	4618      	mov	r0, r3
 800407e:	377c      	adds	r7, #124	; 0x7c
 8004080:	46bd      	mov	sp, r7
 8004082:	bd90      	pop	{r4, r7, pc}
 8004084:	40022000 	.word	0x40022000
 8004088:	40022100 	.word	0x40022100
 800408c:	40022300 	.word	0x40022300
 8004090:	58026300 	.word	0x58026300
 8004094:	58026000 	.word	0x58026000
 8004098:	fffff0e0 	.word	0xfffff0e0

0800409c <__NVIC_SetPriorityGrouping>:
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <__NVIC_SetPriorityGrouping+0x40>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040b8:	4013      	ands	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <__NVIC_SetPriorityGrouping+0x40>)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	60d3      	str	r3, [r2, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000ed00 	.word	0xe000ed00
 80040e0:	05fa0000 	.word	0x05fa0000

080040e4 <__NVIC_GetPriorityGrouping>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <__NVIC_GetPriorityGrouping+0x18>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	f003 0307 	and.w	r3, r3, #7
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_EnableIRQ>:
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800410a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800410e:	2b00      	cmp	r3, #0
 8004110:	db0b      	blt.n	800412a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	4907      	ldr	r1, [pc, #28]	; (8004138 <__NVIC_EnableIRQ+0x38>)
 800411a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2001      	movs	r0, #1
 8004122:	fa00 f202 	lsl.w	r2, r0, r2
 8004126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	e000e100 	.word	0xe000e100

0800413c <__NVIC_SetPriority>:
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db0a      	blt.n	8004166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	490c      	ldr	r1, [pc, #48]	; (8004188 <__NVIC_SetPriority+0x4c>)
 8004156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	440b      	add	r3, r1
 8004160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004164:	e00a      	b.n	800417c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4908      	ldr	r1, [pc, #32]	; (800418c <__NVIC_SetPriority+0x50>)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3b04      	subs	r3, #4
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	440b      	add	r3, r1
 800417a:	761a      	strb	r2, [r3, #24]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <NVIC_EncodePriority>:
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf28      	it	cs
 80041ae:	2304      	movcs	r3, #4
 80041b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d902      	bls.n	80041c0 <NVIC_EncodePriority+0x30>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3b03      	subs	r3, #3
 80041be:	e000      	b.n	80041c2 <NVIC_EncodePriority+0x32>
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	43d9      	mvns	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	4313      	orrs	r3, r2
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004208:	d301      	bcc.n	800420e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800420a:	2301      	movs	r3, #1
 800420c:	e00f      	b.n	800422e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <SysTick_Config+0x40>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004216:	210f      	movs	r1, #15
 8004218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800421c:	f7ff ff8e 	bl	800413c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <SysTick_Config+0x40>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <SysTick_Config+0x40>)
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff29 	bl	800409c <__NVIC_SetPriorityGrouping>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004260:	f7ff ff40 	bl	80040e4 <__NVIC_GetPriorityGrouping>
 8004264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	6978      	ldr	r0, [r7, #20]
 800426c:	f7ff ff90 	bl	8004190 <NVIC_EncodePriority>
 8004270:	4602      	mov	r2, r0
 8004272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff5f 	bl	800413c <__NVIC_SetPriority>
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff33 	bl	8004100 <__NVIC_EnableIRQ>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ffa4 	bl	80041f8 <SysTick_Config>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e014      	b.n	80042f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	791b      	ldrb	r3, [r3, #4]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fd fdc3 	bl	8001e68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0a2      	b.n	800445e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	795b      	ldrb	r3, [r3, #5]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_DAC_Start_DMA+0x24>
 8004320:	2302      	movs	r3, #2
 8004322:	e09c      	b.n	800445e <HAL_DAC_Start_DMA+0x15e>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2202      	movs	r2, #2
 800432e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d129      	bne.n	800438a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4a4b      	ldr	r2, [pc, #300]	; (8004468 <HAL_DAC_Start_DMA+0x168>)
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4a4a      	ldr	r2, [pc, #296]	; (800446c <HAL_DAC_Start_DMA+0x16c>)
 8004344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4a49      	ldr	r2, [pc, #292]	; (8004470 <HAL_DAC_Start_DMA+0x170>)
 800434c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800435c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_DAC_Start_DMA+0x6c>
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d005      	beq.n	8004376 <HAL_DAC_Start_DMA+0x76>
 800436a:	e009      	b.n	8004380 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	613b      	str	r3, [r7, #16]
        break;
 8004374:	e033      	b.n	80043de <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	613b      	str	r3, [r7, #16]
        break;
 800437e:	e02e      	b.n	80043de <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3310      	adds	r3, #16
 8004386:	613b      	str	r3, [r7, #16]
        break;
 8004388:	e029      	b.n	80043de <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4a39      	ldr	r2, [pc, #228]	; (8004474 <HAL_DAC_Start_DMA+0x174>)
 8004390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4a38      	ldr	r2, [pc, #224]	; (8004478 <HAL_DAC_Start_DMA+0x178>)
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_DAC_Start_DMA+0x17c>)
 80043a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_DAC_Start_DMA+0xc0>
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d005      	beq.n	80043ca <HAL_DAC_Start_DMA+0xca>
 80043be:	e009      	b.n	80043d4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3314      	adds	r3, #20
 80043c6:	613b      	str	r3, [r7, #16]
        break;
 80043c8:	e009      	b.n	80043de <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3318      	adds	r3, #24
 80043d0:	613b      	str	r3, [r7, #16]
        break;
 80043d2:	e004      	b.n	80043de <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	331c      	adds	r3, #28
 80043da:	613b      	str	r3, [r7, #16]
        break;
 80043dc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d111      	bne.n	8004408 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6898      	ldr	r0, [r3, #8]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	f000 fdd3 	bl	8004fa8 <HAL_DMA_Start_IT>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]
 8004406:	e010      	b.n	800442a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004416:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68d8      	ldr	r0, [r3, #12]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	f000 fdc1 	bl	8004fa8 <HAL_DMA_Start_IT>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10c      	bne.n	8004450 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6819      	ldr	r1, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2201      	movs	r2, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e005      	b.n	800445c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800445c:	7dfb      	ldrb	r3, [r7, #23]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	080047dd 	.word	0x080047dd
 800446c:	080047ff 	.word	0x080047ff
 8004470:	0800481b 	.word	0x0800481b
 8004474:	08004885 	.word	0x08004885
 8004478:	080048a7 	.word	0x080048a7
 800447c:	080048c3 	.word	0x080048c3

08004480 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e03e      	b.n	8004512 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43da      	mvns	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6819      	ldr	r1, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2201      	movs	r2, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43da      	mvns	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	400a      	ands	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10d      	bne.n	80044f0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 ffcf 	bl	800547c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e00c      	b.n	800450a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 ffc1 	bl	800547c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004508:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_DAC_ConfigChannel+0x1e>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e12a      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	795b      	ldrb	r3, [r3, #5]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_DAC_ConfigChannel+0x2e>
 8004582:	2302      	movs	r3, #2
 8004584:	e124      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x278>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2202      	movs	r2, #2
 8004590:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d17a      	bne.n	8004690 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800459a:	f7fe f92d 	bl	80027f8 <HAL_GetTick>
 800459e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d13d      	bne.n	8004622 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045a6:	e018      	b.n	80045da <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045a8:	f7fe f926 	bl	80027f8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d911      	bls.n	80045da <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045bc:	4b86      	ldr	r3, [pc, #536]	; (80047d8 <HAL_DAC_ConfigChannel+0x280>)
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f043 0208 	orr.w	r2, r3, #8
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2203      	movs	r2, #3
 80045d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0fa      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e0:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <HAL_DAC_ConfigChannel+0x280>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1df      	bne.n	80045a8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	6992      	ldr	r2, [r2, #24]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
 80045f2:	e020      	b.n	8004636 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045f4:	f7fe f900 	bl	80027f8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d90f      	bls.n	8004622 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004608:	2b00      	cmp	r3, #0
 800460a:	da0a      	bge.n	8004622 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f043 0208 	orr.w	r2, r3, #8
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2203      	movs	r2, #3
 800461c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e0d6      	b.n	80047d0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004628:	2b00      	cmp	r3, #0
 800462a:	dbe3      	blt.n	80045f4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	6992      	ldr	r2, [r2, #24]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	ea02 0103 	and.w	r1, r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	409a      	lsls	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	21ff      	movs	r1, #255	; 0xff
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	ea02 0103 	and.w	r1, r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	409a      	lsls	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d11d      	bne.n	80046d4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	221f      	movs	r2, #31
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2207      	movs	r2, #7
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	e00f      	b.n	800471e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d102      	bne.n	800470c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004706:	2301      	movs	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	e008      	b.n	800471e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004714:	2301      	movs	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	e001      	b.n	800471e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43da      	mvns	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	400a      	ands	r2, r1
 8004764:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6819      	ldr	r1, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	22c0      	movs	r2, #192	; 0xc0
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	400a      	ands	r2, r1
 80047be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80047cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20008000 	.word	0x20008000

080047dc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff fe95 	bl	800451a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	711a      	strb	r2, [r3, #4]
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff fe8e 	bl	800452e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f043 0204 	orr.w	r2, r3, #4
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff fe84 	bl	8004542 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	711a      	strb	r2, [r3, #4]
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff ffd8 	bl	8004848 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	711a      	strb	r2, [r3, #4]
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff ffd1 	bl	800485c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f043 0204 	orr.w	r2, r3, #4
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff ffc7 	bl	8004870 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	711a      	strb	r2, [r3, #4]
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7fd ff7e 	bl	80027f8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e316      	b.n	8004f36 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a66      	ldr	r2, [pc, #408]	; (8004aa8 <HAL_DMA_Init+0x1b8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d04a      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a65      	ldr	r2, [pc, #404]	; (8004aac <HAL_DMA_Init+0x1bc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d045      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_DMA_Init+0x1c0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d040      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a62      	ldr	r2, [pc, #392]	; (8004ab4 <HAL_DMA_Init+0x1c4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d03b      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a60      	ldr	r2, [pc, #384]	; (8004ab8 <HAL_DMA_Init+0x1c8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d036      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5f      	ldr	r2, [pc, #380]	; (8004abc <HAL_DMA_Init+0x1cc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d031      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5d      	ldr	r2, [pc, #372]	; (8004ac0 <HAL_DMA_Init+0x1d0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02c      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a5c      	ldr	r2, [pc, #368]	; (8004ac4 <HAL_DMA_Init+0x1d4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a5a      	ldr	r2, [pc, #360]	; (8004ac8 <HAL_DMA_Init+0x1d8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a59      	ldr	r2, [pc, #356]	; (8004acc <HAL_DMA_Init+0x1dc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a57      	ldr	r2, [pc, #348]	; (8004ad0 <HAL_DMA_Init+0x1e0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a56      	ldr	r2, [pc, #344]	; (8004ad4 <HAL_DMA_Init+0x1e4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a54      	ldr	r2, [pc, #336]	; (8004ad8 <HAL_DMA_Init+0x1e8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a53      	ldr	r2, [pc, #332]	; (8004adc <HAL_DMA_Init+0x1ec>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a51      	ldr	r2, [pc, #324]	; (8004ae0 <HAL_DMA_Init+0x1f0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_Init+0xb8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a50      	ldr	r2, [pc, #320]	; (8004ae4 <HAL_DMA_Init+0x1f4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_DMA_Init+0xbc>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_DMA_Init+0xbe>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 813b 	beq.w	8004c2a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <HAL_DMA_Init+0x1b8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d04a      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a36      	ldr	r2, [pc, #216]	; (8004aac <HAL_DMA_Init+0x1bc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d045      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <HAL_DMA_Init+0x1c0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d040      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <HAL_DMA_Init+0x1c4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d03b      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a31      	ldr	r2, [pc, #196]	; (8004ab8 <HAL_DMA_Init+0x1c8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d036      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a30      	ldr	r2, [pc, #192]	; (8004abc <HAL_DMA_Init+0x1cc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d031      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <HAL_DMA_Init+0x1d0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02c      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <HAL_DMA_Init+0x1d4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d027      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_DMA_Init+0x1d8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d022      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <HAL_DMA_Init+0x1dc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <HAL_DMA_Init+0x1e0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_DMA_Init+0x1e4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <HAL_DMA_Init+0x1e8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a24      	ldr	r2, [pc, #144]	; (8004adc <HAL_DMA_Init+0x1ec>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_DMA_Init+0x1f0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_DMA_Init+0x174>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a21      	ldr	r2, [pc, #132]	; (8004ae4 <HAL_DMA_Init+0x1f4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <HAL_DMA_Init+0x186>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e007      	b.n	8004a86 <HAL_DMA_Init+0x196>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a86:	e02f      	b.n	8004ae8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a88:	f7fd feb6 	bl	80027f8 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b05      	cmp	r3, #5
 8004a94:	d928      	bls.n	8004ae8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e246      	b.n	8004f36 <HAL_DMA_Init+0x646>
 8004aa8:	40020010 	.word	0x40020010
 8004aac:	40020028 	.word	0x40020028
 8004ab0:	40020040 	.word	0x40020040
 8004ab4:	40020058 	.word	0x40020058
 8004ab8:	40020070 	.word	0x40020070
 8004abc:	40020088 	.word	0x40020088
 8004ac0:	400200a0 	.word	0x400200a0
 8004ac4:	400200b8 	.word	0x400200b8
 8004ac8:	40020410 	.word	0x40020410
 8004acc:	40020428 	.word	0x40020428
 8004ad0:	40020440 	.word	0x40020440
 8004ad4:	40020458 	.word	0x40020458
 8004ad8:	40020470 	.word	0x40020470
 8004adc:	40020488 	.word	0x40020488
 8004ae0:	400204a0 	.word	0x400204a0
 8004ae4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1c8      	bne.n	8004a88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4b83      	ldr	r3, [pc, #524]	; (8004d10 <HAL_DMA_Init+0x420>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b26:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d107      	bne.n	8004b4c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	4313      	orrs	r3, r2
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b4c:	4b71      	ldr	r3, [pc, #452]	; (8004d14 <HAL_DMA_Init+0x424>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b71      	ldr	r3, [pc, #452]	; (8004d18 <HAL_DMA_Init+0x428>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b58:	d328      	bcc.n	8004bac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b28      	cmp	r3, #40	; 0x28
 8004b60:	d903      	bls.n	8004b6a <HAL_DMA_Init+0x27a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b2e      	cmp	r3, #46	; 0x2e
 8004b68:	d917      	bls.n	8004b9a <HAL_DMA_Init+0x2aa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b70:	d903      	bls.n	8004b7a <HAL_DMA_Init+0x28a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b42      	cmp	r3, #66	; 0x42
 8004b78:	d90f      	bls.n	8004b9a <HAL_DMA_Init+0x2aa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b46      	cmp	r3, #70	; 0x46
 8004b80:	d903      	bls.n	8004b8a <HAL_DMA_Init+0x29a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b48      	cmp	r3, #72	; 0x48
 8004b88:	d907      	bls.n	8004b9a <HAL_DMA_Init+0x2aa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b4e      	cmp	r3, #78	; 0x4e
 8004b90:	d905      	bls.n	8004b9e <HAL_DMA_Init+0x2ae>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b52      	cmp	r3, #82	; 0x52
 8004b98:	d801      	bhi.n	8004b9e <HAL_DMA_Init+0x2ae>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_DMA_Init+0x2b0>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d117      	bne.n	8004c06 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f002 fb33 	bl	8007254 <DMA_CheckFifoParam>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2240      	movs	r2, #64	; 0x40
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e197      	b.n	8004f36 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f002 fa6e 	bl	80070f0 <DMA_CalcBaseAndBitshift>
 8004c14:	4603      	mov	r3, r0
 8004c16:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	223f      	movs	r2, #63	; 0x3f
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	e0cd      	b.n	8004dc6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	; (8004d1c <HAL_DMA_Init+0x42c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <HAL_DMA_Init+0x430>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <HAL_DMA_Init+0x434>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a36      	ldr	r2, [pc, #216]	; (8004d28 <HAL_DMA_Init+0x438>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a35      	ldr	r2, [pc, #212]	; (8004d2c <HAL_DMA_Init+0x43c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a33      	ldr	r2, [pc, #204]	; (8004d30 <HAL_DMA_Init+0x440>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a32      	ldr	r2, [pc, #200]	; (8004d34 <HAL_DMA_Init+0x444>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_Init+0x38a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a30      	ldr	r2, [pc, #192]	; (8004d38 <HAL_DMA_Init+0x448>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d101      	bne.n	8004c7e <HAL_DMA_Init+0x38e>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_DMA_Init+0x390>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8097 	beq.w	8004db4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <HAL_DMA_Init+0x42c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d021      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <HAL_DMA_Init+0x430>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01c      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_DMA_Init+0x434>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d017      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <HAL_DMA_Init+0x438>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d012      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_DMA_Init+0x43c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_DMA_Init+0x440>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d008      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_DMA_Init+0x444>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <HAL_DMA_Init+0x3e4>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a19      	ldr	r2, [pc, #100]	; (8004d38 <HAL_DMA_Init+0x448>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_DMA_Init+0x44c>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d020      	beq.n	8004d40 <HAL_DMA_Init+0x450>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d102      	bne.n	8004d0c <HAL_DMA_Init+0x41c>
 8004d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d0a:	e01a      	b.n	8004d42 <HAL_DMA_Init+0x452>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e018      	b.n	8004d42 <HAL_DMA_Init+0x452>
 8004d10:	fe10803f 	.word	0xfe10803f
 8004d14:	5c001000 	.word	0x5c001000
 8004d18:	ffff0000 	.word	0xffff0000
 8004d1c:	58025408 	.word	0x58025408
 8004d20:	5802541c 	.word	0x5802541c
 8004d24:	58025430 	.word	0x58025430
 8004d28:	58025444 	.word	0x58025444
 8004d2c:	58025458 	.word	0x58025458
 8004d30:	5802546c 	.word	0x5802546c
 8004d34:	58025480 	.word	0x58025480
 8004d38:	58025494 	.word	0x58025494
 8004d3c:	fffe000f 	.word	0xfffe000f
 8004d40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68d2      	ldr	r2, [r2, #12]
 8004d46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b6e      	ldr	r3, [pc, #440]	; (8004f40 <HAL_DMA_Init+0x650>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	4a6e      	ldr	r2, [pc, #440]	; (8004f44 <HAL_DMA_Init+0x654>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	009a      	lsls	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f002 f9a9 	bl	80070f0 <DMA_CalcBaseAndBitshift>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2201      	movs	r2, #1
 8004dac:	409a      	lsls	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]
 8004db2:	e008      	b.n	8004dc6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e0b7      	b.n	8004f36 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5f      	ldr	r2, [pc, #380]	; (8004f48 <HAL_DMA_Init+0x658>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d072      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <HAL_DMA_Init+0x65c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d06d      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5c      	ldr	r2, [pc, #368]	; (8004f50 <HAL_DMA_Init+0x660>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d068      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a5a      	ldr	r2, [pc, #360]	; (8004f54 <HAL_DMA_Init+0x664>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d063      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a59      	ldr	r2, [pc, #356]	; (8004f58 <HAL_DMA_Init+0x668>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d05e      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a57      	ldr	r2, [pc, #348]	; (8004f5c <HAL_DMA_Init+0x66c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d059      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a56      	ldr	r2, [pc, #344]	; (8004f60 <HAL_DMA_Init+0x670>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d054      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a54      	ldr	r2, [pc, #336]	; (8004f64 <HAL_DMA_Init+0x674>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04f      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a53      	ldr	r2, [pc, #332]	; (8004f68 <HAL_DMA_Init+0x678>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d04a      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a51      	ldr	r2, [pc, #324]	; (8004f6c <HAL_DMA_Init+0x67c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d045      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a50      	ldr	r2, [pc, #320]	; (8004f70 <HAL_DMA_Init+0x680>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d040      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a4e      	ldr	r2, [pc, #312]	; (8004f74 <HAL_DMA_Init+0x684>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d03b      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4d      	ldr	r2, [pc, #308]	; (8004f78 <HAL_DMA_Init+0x688>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d036      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a4b      	ldr	r2, [pc, #300]	; (8004f7c <HAL_DMA_Init+0x68c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d031      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <HAL_DMA_Init+0x690>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d02c      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a48      	ldr	r2, [pc, #288]	; (8004f84 <HAL_DMA_Init+0x694>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d027      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a47      	ldr	r2, [pc, #284]	; (8004f88 <HAL_DMA_Init+0x698>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d022      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a45      	ldr	r2, [pc, #276]	; (8004f8c <HAL_DMA_Init+0x69c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a44      	ldr	r2, [pc, #272]	; (8004f90 <HAL_DMA_Init+0x6a0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d018      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a42      	ldr	r2, [pc, #264]	; (8004f94 <HAL_DMA_Init+0x6a4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a41      	ldr	r2, [pc, #260]	; (8004f98 <HAL_DMA_Init+0x6a8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3f      	ldr	r2, [pc, #252]	; (8004f9c <HAL_DMA_Init+0x6ac>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a3e      	ldr	r2, [pc, #248]	; (8004fa0 <HAL_DMA_Init+0x6b0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_DMA_Init+0x5c6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a3c      	ldr	r2, [pc, #240]	; (8004fa4 <HAL_DMA_Init+0x6b4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_DMA_Init+0x5ca>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_DMA_Init+0x5cc>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d032      	beq.n	8004f26 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f002 fa43 	bl	800734c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d102      	bne.n	8004ed4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ee8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <HAL_DMA_Init+0x624>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d80c      	bhi.n	8004f14 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f002 fac0 	bl	8007480 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	e008      	b.n	8004f26 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	a7fdabf8 	.word	0xa7fdabf8
 8004f44:	cccccccd 	.word	0xcccccccd
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8
 8004f88:	58025408 	.word	0x58025408
 8004f8c:	5802541c 	.word	0x5802541c
 8004f90:	58025430 	.word	0x58025430
 8004f94:	58025444 	.word	0x58025444
 8004f98:	58025458 	.word	0x58025458
 8004f9c:	5802546c 	.word	0x5802546c
 8004fa0:	58025480 	.word	0x58025480
 8004fa4:	58025494 	.word	0x58025494

08004fa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e226      	b.n	8005412 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_DMA_Start_IT+0x2a>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e21f      	b.n	8005412 <HAL_DMA_Start_IT+0x46a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	f040 820a 	bne.w	80053fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a68      	ldr	r2, [pc, #416]	; (800519c <HAL_DMA_Start_IT+0x1f4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d04a      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a66      	ldr	r2, [pc, #408]	; (80051a0 <HAL_DMA_Start_IT+0x1f8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d045      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a65      	ldr	r2, [pc, #404]	; (80051a4 <HAL_DMA_Start_IT+0x1fc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d040      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a63      	ldr	r2, [pc, #396]	; (80051a8 <HAL_DMA_Start_IT+0x200>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d03b      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a62      	ldr	r2, [pc, #392]	; (80051ac <HAL_DMA_Start_IT+0x204>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d036      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a60      	ldr	r2, [pc, #384]	; (80051b0 <HAL_DMA_Start_IT+0x208>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5f      	ldr	r2, [pc, #380]	; (80051b4 <HAL_DMA_Start_IT+0x20c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d02c      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a5d      	ldr	r2, [pc, #372]	; (80051b8 <HAL_DMA_Start_IT+0x210>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a5c      	ldr	r2, [pc, #368]	; (80051bc <HAL_DMA_Start_IT+0x214>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a5a      	ldr	r2, [pc, #360]	; (80051c0 <HAL_DMA_Start_IT+0x218>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a59      	ldr	r2, [pc, #356]	; (80051c4 <HAL_DMA_Start_IT+0x21c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a57      	ldr	r2, [pc, #348]	; (80051c8 <HAL_DMA_Start_IT+0x220>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_DMA_Start_IT+0x224>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a54      	ldr	r2, [pc, #336]	; (80051d0 <HAL_DMA_Start_IT+0x228>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a53      	ldr	r2, [pc, #332]	; (80051d4 <HAL_DMA_Start_IT+0x22c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_DMA_Start_IT+0xee>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a51      	ldr	r2, [pc, #324]	; (80051d8 <HAL_DMA_Start_IT+0x230>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <HAL_DMA_Start_IT+0x100>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e007      	b.n	80050b8 <HAL_DMA_Start_IT+0x110>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f001 fe6a 	bl	8006d98 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a34      	ldr	r2, [pc, #208]	; (800519c <HAL_DMA_Start_IT+0x1f4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d04a      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <HAL_DMA_Start_IT+0x1f8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d045      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a31      	ldr	r2, [pc, #196]	; (80051a4 <HAL_DMA_Start_IT+0x1fc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d040      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <HAL_DMA_Start_IT+0x200>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03b      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2e      	ldr	r2, [pc, #184]	; (80051ac <HAL_DMA_Start_IT+0x204>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d036      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <HAL_DMA_Start_IT+0x208>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d031      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <HAL_DMA_Start_IT+0x20c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02c      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <HAL_DMA_Start_IT+0x210>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d027      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <HAL_DMA_Start_IT+0x214>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <HAL_DMA_Start_IT+0x218>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <HAL_DMA_Start_IT+0x21c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <HAL_DMA_Start_IT+0x220>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_DMA_Start_IT+0x224>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <HAL_DMA_Start_IT+0x228>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <HAL_DMA_Start_IT+0x22c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_DMA_Start_IT+0x1bc>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <HAL_DMA_Start_IT+0x230>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_DMA_Start_IT+0x1c0>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_DMA_Start_IT+0x1c2>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d036      	beq.n	80051dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f023 021e 	bic.w	r2, r3, #30
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0216 	orr.w	r2, r2, #22
 8005180:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d03e      	beq.n	8005208 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0208 	orr.w	r2, r2, #8
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e035      	b.n	8005208 <HAL_DMA_Start_IT+0x260>
 800519c:	40020010 	.word	0x40020010
 80051a0:	40020028 	.word	0x40020028
 80051a4:	40020040 	.word	0x40020040
 80051a8:	40020058 	.word	0x40020058
 80051ac:	40020070 	.word	0x40020070
 80051b0:	40020088 	.word	0x40020088
 80051b4:	400200a0 	.word	0x400200a0
 80051b8:	400200b8 	.word	0x400200b8
 80051bc:	40020410 	.word	0x40020410
 80051c0:	40020428 	.word	0x40020428
 80051c4:	40020440 	.word	0x40020440
 80051c8:	40020458 	.word	0x40020458
 80051cc:	40020470 	.word	0x40020470
 80051d0:	40020488 	.word	0x40020488
 80051d4:	400204a0 	.word	0x400204a0
 80051d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 020e 	bic.w	r2, r3, #14
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 020a 	orr.w	r2, r2, #10
 80051ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0204 	orr.w	r2, r2, #4
 8005206:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a83      	ldr	r2, [pc, #524]	; (800541c <HAL_DMA_Start_IT+0x474>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d072      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a82      	ldr	r2, [pc, #520]	; (8005420 <HAL_DMA_Start_IT+0x478>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d06d      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a80      	ldr	r2, [pc, #512]	; (8005424 <HAL_DMA_Start_IT+0x47c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d068      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7f      	ldr	r2, [pc, #508]	; (8005428 <HAL_DMA_Start_IT+0x480>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d063      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7d      	ldr	r2, [pc, #500]	; (800542c <HAL_DMA_Start_IT+0x484>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d05e      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <HAL_DMA_Start_IT+0x488>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d059      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a7a      	ldr	r2, [pc, #488]	; (8005434 <HAL_DMA_Start_IT+0x48c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d054      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a79      	ldr	r2, [pc, #484]	; (8005438 <HAL_DMA_Start_IT+0x490>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d04f      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a77      	ldr	r2, [pc, #476]	; (800543c <HAL_DMA_Start_IT+0x494>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a76      	ldr	r2, [pc, #472]	; (8005440 <HAL_DMA_Start_IT+0x498>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a74      	ldr	r2, [pc, #464]	; (8005444 <HAL_DMA_Start_IT+0x49c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a73      	ldr	r2, [pc, #460]	; (8005448 <HAL_DMA_Start_IT+0x4a0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a71      	ldr	r2, [pc, #452]	; (800544c <HAL_DMA_Start_IT+0x4a4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a70      	ldr	r2, [pc, #448]	; (8005450 <HAL_DMA_Start_IT+0x4a8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6e      	ldr	r2, [pc, #440]	; (8005454 <HAL_DMA_Start_IT+0x4ac>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6d      	ldr	r2, [pc, #436]	; (8005458 <HAL_DMA_Start_IT+0x4b0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a6b      	ldr	r2, [pc, #428]	; (800545c <HAL_DMA_Start_IT+0x4b4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6a      	ldr	r2, [pc, #424]	; (8005460 <HAL_DMA_Start_IT+0x4b8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a68      	ldr	r2, [pc, #416]	; (8005464 <HAL_DMA_Start_IT+0x4bc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a67      	ldr	r2, [pc, #412]	; (8005468 <HAL_DMA_Start_IT+0x4c0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a65      	ldr	r2, [pc, #404]	; (800546c <HAL_DMA_Start_IT+0x4c4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a64      	ldr	r2, [pc, #400]	; (8005470 <HAL_DMA_Start_IT+0x4c8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a62      	ldr	r2, [pc, #392]	; (8005474 <HAL_DMA_Start_IT+0x4cc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a61      	ldr	r2, [pc, #388]	; (8005478 <HAL_DMA_Start_IT+0x4d0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_DMA_Start_IT+0x354>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_DMA_Start_IT+0x356>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01a      	beq.n	8005338 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005336:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a37      	ldr	r2, [pc, #220]	; (800541c <HAL_DMA_Start_IT+0x474>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a36      	ldr	r2, [pc, #216]	; (8005420 <HAL_DMA_Start_IT+0x478>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a34      	ldr	r2, [pc, #208]	; (8005424 <HAL_DMA_Start_IT+0x47c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a33      	ldr	r2, [pc, #204]	; (8005428 <HAL_DMA_Start_IT+0x480>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a31      	ldr	r2, [pc, #196]	; (800542c <HAL_DMA_Start_IT+0x484>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a30      	ldr	r2, [pc, #192]	; (8005430 <HAL_DMA_Start_IT+0x488>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <HAL_DMA_Start_IT+0x48c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <HAL_DMA_Start_IT+0x490>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2b      	ldr	r2, [pc, #172]	; (800543c <HAL_DMA_Start_IT+0x494>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <HAL_DMA_Start_IT+0x498>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <HAL_DMA_Start_IT+0x49c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a27      	ldr	r2, [pc, #156]	; (8005448 <HAL_DMA_Start_IT+0x4a0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a25      	ldr	r2, [pc, #148]	; (800544c <HAL_DMA_Start_IT+0x4a4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a24      	ldr	r2, [pc, #144]	; (8005450 <HAL_DMA_Start_IT+0x4a8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <HAL_DMA_Start_IT+0x4ac>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_Start_IT+0x430>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a21      	ldr	r2, [pc, #132]	; (8005458 <HAL_DMA_Start_IT+0x4b0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d108      	bne.n	80053ea <HAL_DMA_Start_IT+0x442>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e012      	b.n	8005410 <HAL_DMA_Start_IT+0x468>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e009      	b.n	8005410 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40020010 	.word	0x40020010
 8005420:	40020028 	.word	0x40020028
 8005424:	40020040 	.word	0x40020040
 8005428:	40020058 	.word	0x40020058
 800542c:	40020070 	.word	0x40020070
 8005430:	40020088 	.word	0x40020088
 8005434:	400200a0 	.word	0x400200a0
 8005438:	400200b8 	.word	0x400200b8
 800543c:	40020410 	.word	0x40020410
 8005440:	40020428 	.word	0x40020428
 8005444:	40020440 	.word	0x40020440
 8005448:	40020458 	.word	0x40020458
 800544c:	40020470 	.word	0x40020470
 8005450:	40020488 	.word	0x40020488
 8005454:	400204a0 	.word	0x400204a0
 8005458:	400204b8 	.word	0x400204b8
 800545c:	58025408 	.word	0x58025408
 8005460:	5802541c 	.word	0x5802541c
 8005464:	58025430 	.word	0x58025430
 8005468:	58025444 	.word	0x58025444
 800546c:	58025458 	.word	0x58025458
 8005470:	5802546c 	.word	0x5802546c
 8005474:	58025480 	.word	0x58025480
 8005478:	58025494 	.word	0x58025494

0800547c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005484:	f7fd f9b8 	bl	80027f8 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e2dc      	b.n	8005a4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d008      	beq.n	80054b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e2cd      	b.n	8005a4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a76      	ldr	r2, [pc, #472]	; (8005690 <HAL_DMA_Abort+0x214>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d04a      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a74      	ldr	r2, [pc, #464]	; (8005694 <HAL_DMA_Abort+0x218>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d045      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a73      	ldr	r2, [pc, #460]	; (8005698 <HAL_DMA_Abort+0x21c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d040      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a71      	ldr	r2, [pc, #452]	; (800569c <HAL_DMA_Abort+0x220>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d03b      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a70      	ldr	r2, [pc, #448]	; (80056a0 <HAL_DMA_Abort+0x224>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d036      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6e      	ldr	r2, [pc, #440]	; (80056a4 <HAL_DMA_Abort+0x228>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d031      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6d      	ldr	r2, [pc, #436]	; (80056a8 <HAL_DMA_Abort+0x22c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d02c      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6b      	ldr	r2, [pc, #428]	; (80056ac <HAL_DMA_Abort+0x230>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d027      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6a      	ldr	r2, [pc, #424]	; (80056b0 <HAL_DMA_Abort+0x234>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_DMA_Abort+0x238>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a67      	ldr	r2, [pc, #412]	; (80056b8 <HAL_DMA_Abort+0x23c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_DMA_Abort+0x240>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a64      	ldr	r2, [pc, #400]	; (80056c0 <HAL_DMA_Abort+0x244>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a62      	ldr	r2, [pc, #392]	; (80056c4 <HAL_DMA_Abort+0x248>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a61      	ldr	r2, [pc, #388]	; (80056c8 <HAL_DMA_Abort+0x24c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_DMA_Abort+0xd6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5f      	ldr	r2, [pc, #380]	; (80056cc <HAL_DMA_Abort+0x250>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_DMA_Abort+0xda>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HAL_DMA_Abort+0xdc>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 021e 	bic.w	r2, r2, #30
 800556a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800557a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e00a      	b.n	800559a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 020e 	bic.w	r2, r2, #14
 8005592:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <HAL_DMA_Abort+0x214>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d072      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a3a      	ldr	r2, [pc, #232]	; (8005694 <HAL_DMA_Abort+0x218>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d06d      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a39      	ldr	r2, [pc, #228]	; (8005698 <HAL_DMA_Abort+0x21c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d068      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a37      	ldr	r2, [pc, #220]	; (800569c <HAL_DMA_Abort+0x220>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d063      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a36      	ldr	r2, [pc, #216]	; (80056a0 <HAL_DMA_Abort+0x224>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d05e      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a34      	ldr	r2, [pc, #208]	; (80056a4 <HAL_DMA_Abort+0x228>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d059      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <HAL_DMA_Abort+0x22c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d054      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a31      	ldr	r2, [pc, #196]	; (80056ac <HAL_DMA_Abort+0x230>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d04f      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a30      	ldr	r2, [pc, #192]	; (80056b0 <HAL_DMA_Abort+0x234>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d04a      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2e      	ldr	r2, [pc, #184]	; (80056b4 <HAL_DMA_Abort+0x238>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d045      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2d      	ldr	r2, [pc, #180]	; (80056b8 <HAL_DMA_Abort+0x23c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d040      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <HAL_DMA_Abort+0x240>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d03b      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2a      	ldr	r2, [pc, #168]	; (80056c0 <HAL_DMA_Abort+0x244>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d036      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <HAL_DMA_Abort+0x248>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d031      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a27      	ldr	r2, [pc, #156]	; (80056c8 <HAL_DMA_Abort+0x24c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d02c      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a25      	ldr	r2, [pc, #148]	; (80056cc <HAL_DMA_Abort+0x250>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d027      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a24      	ldr	r2, [pc, #144]	; (80056d0 <HAL_DMA_Abort+0x254>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <HAL_DMA_Abort+0x258>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a21      	ldr	r2, [pc, #132]	; (80056d8 <HAL_DMA_Abort+0x25c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <HAL_DMA_Abort+0x260>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1e      	ldr	r2, [pc, #120]	; (80056e0 <HAL_DMA_Abort+0x264>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <HAL_DMA_Abort+0x268>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <HAL_DMA_Abort+0x26c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_DMA_Abort+0x20e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a19      	ldr	r2, [pc, #100]	; (80056ec <HAL_DMA_Abort+0x270>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d132      	bne.n	80056f0 <HAL_DMA_Abort+0x274>
 800568a:	2301      	movs	r3, #1
 800568c:	e031      	b.n	80056f2 <HAL_DMA_Abort+0x276>
 800568e:	bf00      	nop
 8005690:	40020010 	.word	0x40020010
 8005694:	40020028 	.word	0x40020028
 8005698:	40020040 	.word	0x40020040
 800569c:	40020058 	.word	0x40020058
 80056a0:	40020070 	.word	0x40020070
 80056a4:	40020088 	.word	0x40020088
 80056a8:	400200a0 	.word	0x400200a0
 80056ac:	400200b8 	.word	0x400200b8
 80056b0:	40020410 	.word	0x40020410
 80056b4:	40020428 	.word	0x40020428
 80056b8:	40020440 	.word	0x40020440
 80056bc:	40020458 	.word	0x40020458
 80056c0:	40020470 	.word	0x40020470
 80056c4:	40020488 	.word	0x40020488
 80056c8:	400204a0 	.word	0x400204a0
 80056cc:	400204b8 	.word	0x400204b8
 80056d0:	58025408 	.word	0x58025408
 80056d4:	5802541c 	.word	0x5802541c
 80056d8:	58025430 	.word	0x58025430
 80056dc:	58025444 	.word	0x58025444
 80056e0:	58025458 	.word	0x58025458
 80056e4:	5802546c 	.word	0x5802546c
 80056e8:	58025480 	.word	0x58025480
 80056ec:	58025494 	.word	0x58025494
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005704:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a6d      	ldr	r2, [pc, #436]	; (80058c0 <HAL_DMA_Abort+0x444>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d04a      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a6b      	ldr	r2, [pc, #428]	; (80058c4 <HAL_DMA_Abort+0x448>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d045      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6a      	ldr	r2, [pc, #424]	; (80058c8 <HAL_DMA_Abort+0x44c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d040      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a68      	ldr	r2, [pc, #416]	; (80058cc <HAL_DMA_Abort+0x450>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d03b      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a67      	ldr	r2, [pc, #412]	; (80058d0 <HAL_DMA_Abort+0x454>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d036      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a65      	ldr	r2, [pc, #404]	; (80058d4 <HAL_DMA_Abort+0x458>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d031      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a64      	ldr	r2, [pc, #400]	; (80058d8 <HAL_DMA_Abort+0x45c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d02c      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a62      	ldr	r2, [pc, #392]	; (80058dc <HAL_DMA_Abort+0x460>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d027      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a61      	ldr	r2, [pc, #388]	; (80058e0 <HAL_DMA_Abort+0x464>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d022      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a5f      	ldr	r2, [pc, #380]	; (80058e4 <HAL_DMA_Abort+0x468>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01d      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a5e      	ldr	r2, [pc, #376]	; (80058e8 <HAL_DMA_Abort+0x46c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a5c      	ldr	r2, [pc, #368]	; (80058ec <HAL_DMA_Abort+0x470>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a5b      	ldr	r2, [pc, #364]	; (80058f0 <HAL_DMA_Abort+0x474>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a59      	ldr	r2, [pc, #356]	; (80058f4 <HAL_DMA_Abort+0x478>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a58      	ldr	r2, [pc, #352]	; (80058f8 <HAL_DMA_Abort+0x47c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_DMA_Abort+0x32a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a56      	ldr	r2, [pc, #344]	; (80058fc <HAL_DMA_Abort+0x480>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <HAL_DMA_Abort+0x33c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e007      	b.n	80057c8 <HAL_DMA_Abort+0x34c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057c8:	e013      	b.n	80057f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057ca:	f7fd f815 	bl	80027f8 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d90c      	bls.n	80057f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2203      	movs	r2, #3
 80057e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e12d      	b.n	8005a4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e5      	bne.n	80057ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2f      	ldr	r2, [pc, #188]	; (80058c0 <HAL_DMA_Abort+0x444>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d04a      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <HAL_DMA_Abort+0x448>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d045      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <HAL_DMA_Abort+0x44c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d040      	beq.n	800589e <HAL_DMA_Abort+0x422>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <HAL_DMA_Abort+0x450>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d03b      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a29      	ldr	r2, [pc, #164]	; (80058d0 <HAL_DMA_Abort+0x454>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d036      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <HAL_DMA_Abort+0x458>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d031      	beq.n	800589e <HAL_DMA_Abort+0x422>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <HAL_DMA_Abort+0x45c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d02c      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a24      	ldr	r2, [pc, #144]	; (80058dc <HAL_DMA_Abort+0x460>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d027      	beq.n	800589e <HAL_DMA_Abort+0x422>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <HAL_DMA_Abort+0x464>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d022      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <HAL_DMA_Abort+0x468>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01d      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <HAL_DMA_Abort+0x46c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d018      	beq.n	800589e <HAL_DMA_Abort+0x422>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <HAL_DMA_Abort+0x470>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <HAL_DMA_Abort+0x474>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <HAL_DMA_Abort+0x478>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_DMA_Abort+0x422>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <HAL_DMA_Abort+0x47c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_DMA_Abort+0x422>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a18      	ldr	r2, [pc, #96]	; (80058fc <HAL_DMA_Abort+0x480>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d101      	bne.n	80058a2 <HAL_DMA_Abort+0x426>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_DMA_Abort+0x428>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02b      	beq.n	8005900 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	223f      	movs	r2, #63	; 0x3f
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	e02a      	b.n	8005916 <HAL_DMA_Abort+0x49a>
 80058c0:	40020010 	.word	0x40020010
 80058c4:	40020028 	.word	0x40020028
 80058c8:	40020040 	.word	0x40020040
 80058cc:	40020058 	.word	0x40020058
 80058d0:	40020070 	.word	0x40020070
 80058d4:	40020088 	.word	0x40020088
 80058d8:	400200a0 	.word	0x400200a0
 80058dc:	400200b8 	.word	0x400200b8
 80058e0:	40020410 	.word	0x40020410
 80058e4:	40020428 	.word	0x40020428
 80058e8:	40020440 	.word	0x40020440
 80058ec:	40020458 	.word	0x40020458
 80058f0:	40020470 	.word	0x40020470
 80058f4:	40020488 	.word	0x40020488
 80058f8:	400204a0 	.word	0x400204a0
 80058fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005904:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2201      	movs	r2, #1
 8005910:	409a      	lsls	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a4f      	ldr	r2, [pc, #316]	; (8005a58 <HAL_DMA_Abort+0x5dc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d072      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a4d      	ldr	r2, [pc, #308]	; (8005a5c <HAL_DMA_Abort+0x5e0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d06d      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a4c      	ldr	r2, [pc, #304]	; (8005a60 <HAL_DMA_Abort+0x5e4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d068      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <HAL_DMA_Abort+0x5e8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d063      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a49      	ldr	r2, [pc, #292]	; (8005a68 <HAL_DMA_Abort+0x5ec>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d05e      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a47      	ldr	r2, [pc, #284]	; (8005a6c <HAL_DMA_Abort+0x5f0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d059      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a46      	ldr	r2, [pc, #280]	; (8005a70 <HAL_DMA_Abort+0x5f4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d054      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a44      	ldr	r2, [pc, #272]	; (8005a74 <HAL_DMA_Abort+0x5f8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04f      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a43      	ldr	r2, [pc, #268]	; (8005a78 <HAL_DMA_Abort+0x5fc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d04a      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <HAL_DMA_Abort+0x600>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d045      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a40      	ldr	r2, [pc, #256]	; (8005a80 <HAL_DMA_Abort+0x604>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d040      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a3e      	ldr	r2, [pc, #248]	; (8005a84 <HAL_DMA_Abort+0x608>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d03b      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a3d      	ldr	r2, [pc, #244]	; (8005a88 <HAL_DMA_Abort+0x60c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d036      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3b      	ldr	r2, [pc, #236]	; (8005a8c <HAL_DMA_Abort+0x610>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d031      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a3a      	ldr	r2, [pc, #232]	; (8005a90 <HAL_DMA_Abort+0x614>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d02c      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a38      	ldr	r2, [pc, #224]	; (8005a94 <HAL_DMA_Abort+0x618>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d027      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a37      	ldr	r2, [pc, #220]	; (8005a98 <HAL_DMA_Abort+0x61c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a35      	ldr	r2, [pc, #212]	; (8005a9c <HAL_DMA_Abort+0x620>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a34      	ldr	r2, [pc, #208]	; (8005aa0 <HAL_DMA_Abort+0x624>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a32      	ldr	r2, [pc, #200]	; (8005aa4 <HAL_DMA_Abort+0x628>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a31      	ldr	r2, [pc, #196]	; (8005aa8 <HAL_DMA_Abort+0x62c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2f      	ldr	r2, [pc, #188]	; (8005aac <HAL_DMA_Abort+0x630>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2e      	ldr	r2, [pc, #184]	; (8005ab0 <HAL_DMA_Abort+0x634>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_DMA_Abort+0x58a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <HAL_DMA_Abort+0x638>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <HAL_DMA_Abort+0x58e>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_DMA_Abort+0x590>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40020010 	.word	0x40020010
 8005a5c:	40020028 	.word	0x40020028
 8005a60:	40020040 	.word	0x40020040
 8005a64:	40020058 	.word	0x40020058
 8005a68:	40020070 	.word	0x40020070
 8005a6c:	40020088 	.word	0x40020088
 8005a70:	400200a0 	.word	0x400200a0
 8005a74:	400200b8 	.word	0x400200b8
 8005a78:	40020410 	.word	0x40020410
 8005a7c:	40020428 	.word	0x40020428
 8005a80:	40020440 	.word	0x40020440
 8005a84:	40020458 	.word	0x40020458
 8005a88:	40020470 	.word	0x40020470
 8005a8c:	40020488 	.word	0x40020488
 8005a90:	400204a0 	.word	0x400204a0
 8005a94:	400204b8 	.word	0x400204b8
 8005a98:	58025408 	.word	0x58025408
 8005a9c:	5802541c 	.word	0x5802541c
 8005aa0:	58025430 	.word	0x58025430
 8005aa4:	58025444 	.word	0x58025444
 8005aa8:	58025458 	.word	0x58025458
 8005aac:	5802546c 	.word	0x5802546c
 8005ab0:	58025480 	.word	0x58025480
 8005ab4:	58025494 	.word	0x58025494

08005ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e237      	b.n	8005f3a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2280      	movs	r2, #128	; 0x80
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e22c      	b.n	8005f3a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a5c      	ldr	r2, [pc, #368]	; (8005c58 <HAL_DMA_Abort_IT+0x1a0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d04a      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a5b      	ldr	r2, [pc, #364]	; (8005c5c <HAL_DMA_Abort_IT+0x1a4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d045      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a59      	ldr	r2, [pc, #356]	; (8005c60 <HAL_DMA_Abort_IT+0x1a8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d040      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a58      	ldr	r2, [pc, #352]	; (8005c64 <HAL_DMA_Abort_IT+0x1ac>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d03b      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a56      	ldr	r2, [pc, #344]	; (8005c68 <HAL_DMA_Abort_IT+0x1b0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d036      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a55      	ldr	r2, [pc, #340]	; (8005c6c <HAL_DMA_Abort_IT+0x1b4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d031      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a53      	ldr	r2, [pc, #332]	; (8005c70 <HAL_DMA_Abort_IT+0x1b8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02c      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a52      	ldr	r2, [pc, #328]	; (8005c74 <HAL_DMA_Abort_IT+0x1bc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d027      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a50      	ldr	r2, [pc, #320]	; (8005c78 <HAL_DMA_Abort_IT+0x1c0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4f      	ldr	r2, [pc, #316]	; (8005c7c <HAL_DMA_Abort_IT+0x1c4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d01d      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a4d      	ldr	r2, [pc, #308]	; (8005c80 <HAL_DMA_Abort_IT+0x1c8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4c      	ldr	r2, [pc, #304]	; (8005c84 <HAL_DMA_Abort_IT+0x1cc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a4a      	ldr	r2, [pc, #296]	; (8005c88 <HAL_DMA_Abort_IT+0x1d0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a49      	ldr	r2, [pc, #292]	; (8005c8c <HAL_DMA_Abort_IT+0x1d4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a47      	ldr	r2, [pc, #284]	; (8005c90 <HAL_DMA_Abort_IT+0x1d8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a46      	ldr	r2, [pc, #280]	; (8005c94 <HAL_DMA_Abort_IT+0x1dc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <HAL_DMA_Abort_IT+0xcc>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_DMA_Abort_IT+0xce>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8086 	beq.w	8005c98 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <HAL_DMA_Abort_IT+0x1a0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d04a      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2e      	ldr	r2, [pc, #184]	; (8005c5c <HAL_DMA_Abort_IT+0x1a4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d045      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2c      	ldr	r2, [pc, #176]	; (8005c60 <HAL_DMA_Abort_IT+0x1a8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d040      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_DMA_Abort_IT+0x1ac>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d03b      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <HAL_DMA_Abort_IT+0x1b0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d036      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <HAL_DMA_Abort_IT+0x1b4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d031      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <HAL_DMA_Abort_IT+0x1b8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02c      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <HAL_DMA_Abort_IT+0x1bc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d027      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a23      	ldr	r2, [pc, #140]	; (8005c78 <HAL_DMA_Abort_IT+0x1c0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <HAL_DMA_Abort_IT+0x1c4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d01d      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a20      	ldr	r2, [pc, #128]	; (8005c80 <HAL_DMA_Abort_IT+0x1c8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d018      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1f      	ldr	r2, [pc, #124]	; (8005c84 <HAL_DMA_Abort_IT+0x1cc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_DMA_Abort_IT+0x1d0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <HAL_DMA_Abort_IT+0x1d4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_DMA_Abort_IT+0x1d8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x17c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <HAL_DMA_Abort_IT+0x1dc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d108      	bne.n	8005c46 <HAL_DMA_Abort_IT+0x18e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e178      	b.n	8005f38 <HAL_DMA_Abort_IT+0x480>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e16f      	b.n	8005f38 <HAL_DMA_Abort_IT+0x480>
 8005c58:	40020010 	.word	0x40020010
 8005c5c:	40020028 	.word	0x40020028
 8005c60:	40020040 	.word	0x40020040
 8005c64:	40020058 	.word	0x40020058
 8005c68:	40020070 	.word	0x40020070
 8005c6c:	40020088 	.word	0x40020088
 8005c70:	400200a0 	.word	0x400200a0
 8005c74:	400200b8 	.word	0x400200b8
 8005c78:	40020410 	.word	0x40020410
 8005c7c:	40020428 	.word	0x40020428
 8005c80:	40020440 	.word	0x40020440
 8005c84:	40020458 	.word	0x40020458
 8005c88:	40020470 	.word	0x40020470
 8005c8c:	40020488 	.word	0x40020488
 8005c90:	400204a0 	.word	0x400204a0
 8005c94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 020e 	bic.w	r2, r2, #14
 8005ca6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a6c      	ldr	r2, [pc, #432]	; (8005e60 <HAL_DMA_Abort_IT+0x3a8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d04a      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a6b      	ldr	r2, [pc, #428]	; (8005e64 <HAL_DMA_Abort_IT+0x3ac>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d045      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a69      	ldr	r2, [pc, #420]	; (8005e68 <HAL_DMA_Abort_IT+0x3b0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d040      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a68      	ldr	r2, [pc, #416]	; (8005e6c <HAL_DMA_Abort_IT+0x3b4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d03b      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a66      	ldr	r2, [pc, #408]	; (8005e70 <HAL_DMA_Abort_IT+0x3b8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d036      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a65      	ldr	r2, [pc, #404]	; (8005e74 <HAL_DMA_Abort_IT+0x3bc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d031      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a63      	ldr	r2, [pc, #396]	; (8005e78 <HAL_DMA_Abort_IT+0x3c0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d02c      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a62      	ldr	r2, [pc, #392]	; (8005e7c <HAL_DMA_Abort_IT+0x3c4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d027      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a60      	ldr	r2, [pc, #384]	; (8005e80 <HAL_DMA_Abort_IT+0x3c8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d022      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a5f      	ldr	r2, [pc, #380]	; (8005e84 <HAL_DMA_Abort_IT+0x3cc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d01d      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a5d      	ldr	r2, [pc, #372]	; (8005e88 <HAL_DMA_Abort_IT+0x3d0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d018      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a5c      	ldr	r2, [pc, #368]	; (8005e8c <HAL_DMA_Abort_IT+0x3d4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a5a      	ldr	r2, [pc, #360]	; (8005e90 <HAL_DMA_Abort_IT+0x3d8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a59      	ldr	r2, [pc, #356]	; (8005e94 <HAL_DMA_Abort_IT+0x3dc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a57      	ldr	r2, [pc, #348]	; (8005e98 <HAL_DMA_Abort_IT+0x3e0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_DMA_Abort_IT+0x290>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a56      	ldr	r2, [pc, #344]	; (8005e9c <HAL_DMA_Abort_IT+0x3e4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <HAL_DMA_Abort_IT+0x2a2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e007      	b.n	8005d6a <HAL_DMA_Abort_IT+0x2b2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3c      	ldr	r2, [pc, #240]	; (8005e60 <HAL_DMA_Abort_IT+0x3a8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d072      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3a      	ldr	r2, [pc, #232]	; (8005e64 <HAL_DMA_Abort_IT+0x3ac>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d06d      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a39      	ldr	r2, [pc, #228]	; (8005e68 <HAL_DMA_Abort_IT+0x3b0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d068      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a37      	ldr	r2, [pc, #220]	; (8005e6c <HAL_DMA_Abort_IT+0x3b4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d063      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a36      	ldr	r2, [pc, #216]	; (8005e70 <HAL_DMA_Abort_IT+0x3b8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d05e      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a34      	ldr	r2, [pc, #208]	; (8005e74 <HAL_DMA_Abort_IT+0x3bc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d059      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a33      	ldr	r2, [pc, #204]	; (8005e78 <HAL_DMA_Abort_IT+0x3c0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d054      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a31      	ldr	r2, [pc, #196]	; (8005e7c <HAL_DMA_Abort_IT+0x3c4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d04f      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <HAL_DMA_Abort_IT+0x3c8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d04a      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <HAL_DMA_Abort_IT+0x3cc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d045      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_DMA_Abort_IT+0x3d0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d040      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <HAL_DMA_Abort_IT+0x3d4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d03b      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <HAL_DMA_Abort_IT+0x3d8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d036      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_DMA_Abort_IT+0x3dc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d031      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <HAL_DMA_Abort_IT+0x3e0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d02c      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <HAL_DMA_Abort_IT+0x3e4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d027      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <HAL_DMA_Abort_IT+0x3e8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d022      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_DMA_Abort_IT+0x3ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01d      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_DMA_Abort_IT+0x3f0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_DMA_Abort_IT+0x3f4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <HAL_DMA_Abort_IT+0x3f8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <HAL_DMA_Abort_IT+0x3fc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <HAL_DMA_Abort_IT+0x400>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_DMA_Abort_IT+0x3a2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <HAL_DMA_Abort_IT+0x404>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d132      	bne.n	8005ec0 <HAL_DMA_Abort_IT+0x408>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e031      	b.n	8005ec2 <HAL_DMA_Abort_IT+0x40a>
 8005e5e:	bf00      	nop
 8005e60:	40020010 	.word	0x40020010
 8005e64:	40020028 	.word	0x40020028
 8005e68:	40020040 	.word	0x40020040
 8005e6c:	40020058 	.word	0x40020058
 8005e70:	40020070 	.word	0x40020070
 8005e74:	40020088 	.word	0x40020088
 8005e78:	400200a0 	.word	0x400200a0
 8005e7c:	400200b8 	.word	0x400200b8
 8005e80:	40020410 	.word	0x40020410
 8005e84:	40020428 	.word	0x40020428
 8005e88:	40020440 	.word	0x40020440
 8005e8c:	40020458 	.word	0x40020458
 8005e90:	40020470 	.word	0x40020470
 8005e94:	40020488 	.word	0x40020488
 8005e98:	400204a0 	.word	0x400204a0
 8005e9c:	400204b8 	.word	0x400204b8
 8005ea0:	58025408 	.word	0x58025408
 8005ea4:	5802541c 	.word	0x5802541c
 8005ea8:	58025430 	.word	0x58025430
 8005eac:	58025444 	.word	0x58025444
 8005eb0:	58025458 	.word	0x58025458
 8005eb4:	5802546c 	.word	0x5802546c
 8005eb8:	58025480 	.word	0x58025480
 8005ebc:	58025494 	.word	0x58025494
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d028      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eda:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ef4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f16:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop

08005f44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f50:	4b67      	ldr	r3, [pc, #412]	; (80060f0 <HAL_DMA_IRQHandler+0x1ac>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a67      	ldr	r2, [pc, #412]	; (80060f4 <HAL_DMA_IRQHandler+0x1b0>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0a9b      	lsrs	r3, r3, #10
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f62:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a5f      	ldr	r2, [pc, #380]	; (80060f8 <HAL_DMA_IRQHandler+0x1b4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d04a      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a5d      	ldr	r2, [pc, #372]	; (80060fc <HAL_DMA_IRQHandler+0x1b8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d045      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a5c      	ldr	r2, [pc, #368]	; (8006100 <HAL_DMA_IRQHandler+0x1bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d040      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5a      	ldr	r2, [pc, #360]	; (8006104 <HAL_DMA_IRQHandler+0x1c0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d03b      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a59      	ldr	r2, [pc, #356]	; (8006108 <HAL_DMA_IRQHandler+0x1c4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d036      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a57      	ldr	r2, [pc, #348]	; (800610c <HAL_DMA_IRQHandler+0x1c8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d031      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a56      	ldr	r2, [pc, #344]	; (8006110 <HAL_DMA_IRQHandler+0x1cc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d02c      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a54      	ldr	r2, [pc, #336]	; (8006114 <HAL_DMA_IRQHandler+0x1d0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d027      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a53      	ldr	r2, [pc, #332]	; (8006118 <HAL_DMA_IRQHandler+0x1d4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a51      	ldr	r2, [pc, #324]	; (800611c <HAL_DMA_IRQHandler+0x1d8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a50      	ldr	r2, [pc, #320]	; (8006120 <HAL_DMA_IRQHandler+0x1dc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a4e      	ldr	r2, [pc, #312]	; (8006124 <HAL_DMA_IRQHandler+0x1e0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a4d      	ldr	r2, [pc, #308]	; (8006128 <HAL_DMA_IRQHandler+0x1e4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a4b      	ldr	r2, [pc, #300]	; (800612c <HAL_DMA_IRQHandler+0x1e8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a4a      	ldr	r2, [pc, #296]	; (8006130 <HAL_DMA_IRQHandler+0x1ec>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a48      	ldr	r2, [pc, #288]	; (8006134 <HAL_DMA_IRQHandler+0x1f0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <HAL_DMA_IRQHandler+0xd6>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <HAL_DMA_IRQHandler+0xd8>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 842b 	beq.w	8006878 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2208      	movs	r2, #8
 800602c:	409a      	lsls	r2, r3
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80a2 	beq.w	800617c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2e      	ldr	r2, [pc, #184]	; (80060f8 <HAL_DMA_IRQHandler+0x1b4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d04a      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <HAL_DMA_IRQHandler+0x1b8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d045      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <HAL_DMA_IRQHandler+0x1bc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d040      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a2a      	ldr	r2, [pc, #168]	; (8006104 <HAL_DMA_IRQHandler+0x1c0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d03b      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a28      	ldr	r2, [pc, #160]	; (8006108 <HAL_DMA_IRQHandler+0x1c4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d036      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <HAL_DMA_IRQHandler+0x1c8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d031      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a25      	ldr	r2, [pc, #148]	; (8006110 <HAL_DMA_IRQHandler+0x1cc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d02c      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a24      	ldr	r2, [pc, #144]	; (8006114 <HAL_DMA_IRQHandler+0x1d0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d027      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a22      	ldr	r2, [pc, #136]	; (8006118 <HAL_DMA_IRQHandler+0x1d4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a21      	ldr	r2, [pc, #132]	; (800611c <HAL_DMA_IRQHandler+0x1d8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d01d      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_DMA_IRQHandler+0x1dc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_DMA_IRQHandler+0x1e0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <HAL_DMA_IRQHandler+0x1e4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_DMA_IRQHandler+0x1e8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <HAL_DMA_IRQHandler+0x1ec>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_DMA_IRQHandler+0x1f0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d12f      	bne.n	8006138 <HAL_DMA_IRQHandler+0x1f4>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bf14      	ite	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	2300      	moveq	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	e02e      	b.n	800614c <HAL_DMA_IRQHandler+0x208>
 80060ee:	bf00      	nop
 80060f0:	24000044 	.word	0x24000044
 80060f4:	1b4e81b5 	.word	0x1b4e81b5
 80060f8:	40020010 	.word	0x40020010
 80060fc:	40020028 	.word	0x40020028
 8006100:	40020040 	.word	0x40020040
 8006104:	40020058 	.word	0x40020058
 8006108:	40020070 	.word	0x40020070
 800610c:	40020088 	.word	0x40020088
 8006110:	400200a0 	.word	0x400200a0
 8006114:	400200b8 	.word	0x400200b8
 8006118:	40020410 	.word	0x40020410
 800611c:	40020428 	.word	0x40020428
 8006120:	40020440 	.word	0x40020440
 8006124:	40020458 	.word	0x40020458
 8006128:	40020470 	.word	0x40020470
 800612c:	40020488 	.word	0x40020488
 8006130:	400204a0 	.word	0x400204a0
 8006134:	400204b8 	.word	0x400204b8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	bf14      	ite	ne
 8006146:	2301      	movne	r3, #1
 8006148:	2300      	moveq	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d015      	beq.n	800617c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0204 	bic.w	r2, r2, #4
 800615e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2208      	movs	r2, #8
 800616a:	409a      	lsls	r2, r3
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f043 0201 	orr.w	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d06e      	beq.n	8006270 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a69      	ldr	r2, [pc, #420]	; (800633c <HAL_DMA_IRQHandler+0x3f8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a67      	ldr	r2, [pc, #412]	; (8006340 <HAL_DMA_IRQHandler+0x3fc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a66      	ldr	r2, [pc, #408]	; (8006344 <HAL_DMA_IRQHandler+0x400>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a64      	ldr	r2, [pc, #400]	; (8006348 <HAL_DMA_IRQHandler+0x404>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a63      	ldr	r2, [pc, #396]	; (800634c <HAL_DMA_IRQHandler+0x408>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a61      	ldr	r2, [pc, #388]	; (8006350 <HAL_DMA_IRQHandler+0x40c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a60      	ldr	r2, [pc, #384]	; (8006354 <HAL_DMA_IRQHandler+0x410>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a5e      	ldr	r2, [pc, #376]	; (8006358 <HAL_DMA_IRQHandler+0x414>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5d      	ldr	r2, [pc, #372]	; (800635c <HAL_DMA_IRQHandler+0x418>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a5b      	ldr	r2, [pc, #364]	; (8006360 <HAL_DMA_IRQHandler+0x41c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a5a      	ldr	r2, [pc, #360]	; (8006364 <HAL_DMA_IRQHandler+0x420>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a58      	ldr	r2, [pc, #352]	; (8006368 <HAL_DMA_IRQHandler+0x424>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a57      	ldr	r2, [pc, #348]	; (800636c <HAL_DMA_IRQHandler+0x428>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a55      	ldr	r2, [pc, #340]	; (8006370 <HAL_DMA_IRQHandler+0x42c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a54      	ldr	r2, [pc, #336]	; (8006374 <HAL_DMA_IRQHandler+0x430>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a52      	ldr	r2, [pc, #328]	; (8006378 <HAL_DMA_IRQHandler+0x434>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10a      	bne.n	8006248 <HAL_DMA_IRQHandler+0x304>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e003      	b.n	8006250 <HAL_DMA_IRQHandler+0x30c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00d      	beq.n	8006270 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	2201      	movs	r2, #1
 800625e:	409a      	lsls	r2, r3
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006268:	f043 0202 	orr.w	r2, r3, #2
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2204      	movs	r2, #4
 800627a:	409a      	lsls	r2, r3
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 808f 	beq.w	80063a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2c      	ldr	r2, [pc, #176]	; (800633c <HAL_DMA_IRQHandler+0x3f8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d04a      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <HAL_DMA_IRQHandler+0x3fc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d045      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a29      	ldr	r2, [pc, #164]	; (8006344 <HAL_DMA_IRQHandler+0x400>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d040      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <HAL_DMA_IRQHandler+0x404>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d03b      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a26      	ldr	r2, [pc, #152]	; (800634c <HAL_DMA_IRQHandler+0x408>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d036      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a24      	ldr	r2, [pc, #144]	; (8006350 <HAL_DMA_IRQHandler+0x40c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d031      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a23      	ldr	r2, [pc, #140]	; (8006354 <HAL_DMA_IRQHandler+0x410>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d02c      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a21      	ldr	r2, [pc, #132]	; (8006358 <HAL_DMA_IRQHandler+0x414>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d027      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a20      	ldr	r2, [pc, #128]	; (800635c <HAL_DMA_IRQHandler+0x418>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d022      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_DMA_IRQHandler+0x41c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01d      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <HAL_DMA_IRQHandler+0x420>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d018      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <HAL_DMA_IRQHandler+0x424>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1a      	ldr	r2, [pc, #104]	; (800636c <HAL_DMA_IRQHandler+0x428>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00e      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a18      	ldr	r2, [pc, #96]	; (8006370 <HAL_DMA_IRQHandler+0x42c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d009      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a17      	ldr	r2, [pc, #92]	; (8006374 <HAL_DMA_IRQHandler+0x430>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <HAL_DMA_IRQHandler+0x434>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d12a      	bne.n	800637c <HAL_DMA_IRQHandler+0x438>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	e023      	b.n	8006384 <HAL_DMA_IRQHandler+0x440>
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	2204      	movs	r2, #4
 8006392:	409a      	lsls	r2, r3
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	f043 0204 	orr.w	r2, r3, #4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2210      	movs	r2, #16
 80063ae:	409a      	lsls	r2, r3
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80a6 	beq.w	8006506 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a85      	ldr	r2, [pc, #532]	; (80065d4 <HAL_DMA_IRQHandler+0x690>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d04a      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a83      	ldr	r2, [pc, #524]	; (80065d8 <HAL_DMA_IRQHandler+0x694>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d045      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a82      	ldr	r2, [pc, #520]	; (80065dc <HAL_DMA_IRQHandler+0x698>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d040      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a80      	ldr	r2, [pc, #512]	; (80065e0 <HAL_DMA_IRQHandler+0x69c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d03b      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a7f      	ldr	r2, [pc, #508]	; (80065e4 <HAL_DMA_IRQHandler+0x6a0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d036      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7d      	ldr	r2, [pc, #500]	; (80065e8 <HAL_DMA_IRQHandler+0x6a4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d031      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a7c      	ldr	r2, [pc, #496]	; (80065ec <HAL_DMA_IRQHandler+0x6a8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d02c      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a7a      	ldr	r2, [pc, #488]	; (80065f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d027      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a79      	ldr	r2, [pc, #484]	; (80065f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a77      	ldr	r2, [pc, #476]	; (80065f8 <HAL_DMA_IRQHandler+0x6b4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01d      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a76      	ldr	r2, [pc, #472]	; (80065fc <HAL_DMA_IRQHandler+0x6b8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a74      	ldr	r2, [pc, #464]	; (8006600 <HAL_DMA_IRQHandler+0x6bc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a73      	ldr	r2, [pc, #460]	; (8006604 <HAL_DMA_IRQHandler+0x6c0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a71      	ldr	r2, [pc, #452]	; (8006608 <HAL_DMA_IRQHandler+0x6c4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a70      	ldr	r2, [pc, #448]	; (800660c <HAL_DMA_IRQHandler+0x6c8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a6e      	ldr	r2, [pc, #440]	; (8006610 <HAL_DMA_IRQHandler+0x6cc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d10a      	bne.n	8006470 <HAL_DMA_IRQHandler+0x52c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e009      	b.n	8006484 <HAL_DMA_IRQHandler+0x540>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	bf14      	ite	ne
 800647e:	2301      	movne	r3, #1
 8006480:	2300      	moveq	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d03e      	beq.n	8006506 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2210      	movs	r2, #16
 8006492:	409a      	lsls	r2, r3
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d018      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d108      	bne.n	80064c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d024      	beq.n	8006506 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
 80064c4:	e01f      	b.n	8006506 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01b      	beq.n	8006506 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
 80064d6:	e016      	b.n	8006506 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0208 	bic.w	r2, r2, #8
 80064f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2220      	movs	r2, #32
 8006510:	409a      	lsls	r2, r3
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8110 	beq.w	800673c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2c      	ldr	r2, [pc, #176]	; (80065d4 <HAL_DMA_IRQHandler+0x690>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d04a      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <HAL_DMA_IRQHandler+0x694>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d045      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <HAL_DMA_IRQHandler+0x698>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d040      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a28      	ldr	r2, [pc, #160]	; (80065e0 <HAL_DMA_IRQHandler+0x69c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d03b      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_DMA_IRQHandler+0x6a0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d036      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <HAL_DMA_IRQHandler+0x6a4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d031      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_DMA_IRQHandler+0x6a8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d02c      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d027      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d022      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <HAL_DMA_IRQHandler+0x6b4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d01d      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_DMA_IRQHandler+0x6b8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d018      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <HAL_DMA_IRQHandler+0x6bc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <HAL_DMA_IRQHandler+0x6c0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00e      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a19      	ldr	r2, [pc, #100]	; (8006608 <HAL_DMA_IRQHandler+0x6c4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a17      	ldr	r2, [pc, #92]	; (800660c <HAL_DMA_IRQHandler+0x6c8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a16      	ldr	r2, [pc, #88]	; (8006610 <HAL_DMA_IRQHandler+0x6cc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d12b      	bne.n	8006614 <HAL_DMA_IRQHandler+0x6d0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf14      	ite	ne
 80065ca:	2301      	movne	r3, #1
 80065cc:	2300      	moveq	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	e02a      	b.n	8006628 <HAL_DMA_IRQHandler+0x6e4>
 80065d2:	bf00      	nop
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8087 	beq.w	800673c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2220      	movs	r2, #32
 8006638:	409a      	lsls	r2, r3
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b04      	cmp	r3, #4
 8006648:	d139      	bne.n	80066be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0216 	bic.w	r2, r2, #22
 8006658:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006668:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <HAL_DMA_IRQHandler+0x736>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0208 	bic.w	r2, r2, #8
 8006688:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	223f      	movs	r2, #63	; 0x3f
 8006694:	409a      	lsls	r2, r3
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 834a 	beq.w	8006d48 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
          }
          return;
 80066bc:	e344      	b.n	8006d48 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d018      	beq.n	80066fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d108      	bne.n	80066ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d02c      	beq.n	800673c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e027      	b.n	800673c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d023      	beq.n	800673c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
 80066fc:	e01e      	b.n	800673c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10f      	bne.n	800672c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0210 	bic.w	r2, r2, #16
 800671a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8306 	beq.w	8006d52 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8088 	beq.w	8006864 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2204      	movs	r2, #4
 8006758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a7a      	ldr	r2, [pc, #488]	; (800694c <HAL_DMA_IRQHandler+0xa08>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d04a      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a79      	ldr	r2, [pc, #484]	; (8006950 <HAL_DMA_IRQHandler+0xa0c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d045      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a77      	ldr	r2, [pc, #476]	; (8006954 <HAL_DMA_IRQHandler+0xa10>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d040      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a76      	ldr	r2, [pc, #472]	; (8006958 <HAL_DMA_IRQHandler+0xa14>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d03b      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a74      	ldr	r2, [pc, #464]	; (800695c <HAL_DMA_IRQHandler+0xa18>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d036      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a73      	ldr	r2, [pc, #460]	; (8006960 <HAL_DMA_IRQHandler+0xa1c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d031      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a71      	ldr	r2, [pc, #452]	; (8006964 <HAL_DMA_IRQHandler+0xa20>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d02c      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a70      	ldr	r2, [pc, #448]	; (8006968 <HAL_DMA_IRQHandler+0xa24>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d027      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a6e      	ldr	r2, [pc, #440]	; (800696c <HAL_DMA_IRQHandler+0xa28>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d022      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a6d      	ldr	r2, [pc, #436]	; (8006970 <HAL_DMA_IRQHandler+0xa2c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d01d      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a6b      	ldr	r2, [pc, #428]	; (8006974 <HAL_DMA_IRQHandler+0xa30>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d018      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6a      	ldr	r2, [pc, #424]	; (8006978 <HAL_DMA_IRQHandler+0xa34>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a68      	ldr	r2, [pc, #416]	; (800697c <HAL_DMA_IRQHandler+0xa38>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a67      	ldr	r2, [pc, #412]	; (8006980 <HAL_DMA_IRQHandler+0xa3c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a65      	ldr	r2, [pc, #404]	; (8006984 <HAL_DMA_IRQHandler+0xa40>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a64      	ldr	r2, [pc, #400]	; (8006988 <HAL_DMA_IRQHandler+0xa44>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d108      	bne.n	800680e <HAL_DMA_IRQHandler+0x8ca>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e007      	b.n	800681e <HAL_DMA_IRQHandler+0x8da>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006826:	429a      	cmp	r2, r3
 8006828:	d307      	bcc.n	800683a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f2      	bne.n	800681e <HAL_DMA_IRQHandler+0x8da>
 8006838:	e000      	b.n	800683c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800683a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2203      	movs	r2, #3
 800684e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006852:	e003      	b.n	800685c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8272 	beq.w	8006d52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
 8006876:	e26c      	b.n	8006d52 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a43      	ldr	r2, [pc, #268]	; (800698c <HAL_DMA_IRQHandler+0xa48>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d022      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a42      	ldr	r2, [pc, #264]	; (8006990 <HAL_DMA_IRQHandler+0xa4c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01d      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a40      	ldr	r2, [pc, #256]	; (8006994 <HAL_DMA_IRQHandler+0xa50>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d018      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a3f      	ldr	r2, [pc, #252]	; (8006998 <HAL_DMA_IRQHandler+0xa54>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a3d      	ldr	r2, [pc, #244]	; (800699c <HAL_DMA_IRQHandler+0xa58>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00e      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a3c      	ldr	r2, [pc, #240]	; (80069a0 <HAL_DMA_IRQHandler+0xa5c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d009      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a3a      	ldr	r2, [pc, #232]	; (80069a4 <HAL_DMA_IRQHandler+0xa60>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <HAL_DMA_IRQHandler+0x984>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a39      	ldr	r2, [pc, #228]	; (80069a8 <HAL_DMA_IRQHandler+0xa64>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d101      	bne.n	80068cc <HAL_DMA_IRQHandler+0x988>
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_DMA_IRQHandler+0x98a>
 80068cc:	2300      	movs	r3, #0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 823f 	beq.w	8006d52 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2204      	movs	r2, #4
 80068e6:	409a      	lsls	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80cd 	beq.w	8006a8c <HAL_DMA_IRQHandler+0xb48>
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 80c7 	beq.w	8006a8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2204      	movs	r2, #4
 8006908:	409a      	lsls	r2, r3
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d049      	beq.n	80069ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8210 	beq.w	8006d4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006934:	e20a      	b.n	8006d4c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8206 	beq.w	8006d4c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006948:	e200      	b.n	8006d4c <HAL_DMA_IRQHandler+0xe08>
 800694a:	bf00      	nop
 800694c:	40020010 	.word	0x40020010
 8006950:	40020028 	.word	0x40020028
 8006954:	40020040 	.word	0x40020040
 8006958:	40020058 	.word	0x40020058
 800695c:	40020070 	.word	0x40020070
 8006960:	40020088 	.word	0x40020088
 8006964:	400200a0 	.word	0x400200a0
 8006968:	400200b8 	.word	0x400200b8
 800696c:	40020410 	.word	0x40020410
 8006970:	40020428 	.word	0x40020428
 8006974:	40020440 	.word	0x40020440
 8006978:	40020458 	.word	0x40020458
 800697c:	40020470 	.word	0x40020470
 8006980:	40020488 	.word	0x40020488
 8006984:	400204a0 	.word	0x400204a0
 8006988:	400204b8 	.word	0x400204b8
 800698c:	58025408 	.word	0x58025408
 8006990:	5802541c 	.word	0x5802541c
 8006994:	58025430 	.word	0x58025430
 8006998:	58025444 	.word	0x58025444
 800699c:	58025458 	.word	0x58025458
 80069a0:	5802546c 	.word	0x5802546c
 80069a4:	58025480 	.word	0x58025480
 80069a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d160      	bne.n	8006a78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a7f      	ldr	r2, [pc, #508]	; (8006bb8 <HAL_DMA_IRQHandler+0xc74>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d04a      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a7d      	ldr	r2, [pc, #500]	; (8006bbc <HAL_DMA_IRQHandler+0xc78>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d045      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a7c      	ldr	r2, [pc, #496]	; (8006bc0 <HAL_DMA_IRQHandler+0xc7c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d040      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a7a      	ldr	r2, [pc, #488]	; (8006bc4 <HAL_DMA_IRQHandler+0xc80>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d03b      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a79      	ldr	r2, [pc, #484]	; (8006bc8 <HAL_DMA_IRQHandler+0xc84>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d036      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a77      	ldr	r2, [pc, #476]	; (8006bcc <HAL_DMA_IRQHandler+0xc88>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d031      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a76      	ldr	r2, [pc, #472]	; (8006bd0 <HAL_DMA_IRQHandler+0xc8c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d02c      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a74      	ldr	r2, [pc, #464]	; (8006bd4 <HAL_DMA_IRQHandler+0xc90>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d027      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a73      	ldr	r2, [pc, #460]	; (8006bd8 <HAL_DMA_IRQHandler+0xc94>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d022      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a71      	ldr	r2, [pc, #452]	; (8006bdc <HAL_DMA_IRQHandler+0xc98>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01d      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a70      	ldr	r2, [pc, #448]	; (8006be0 <HAL_DMA_IRQHandler+0xc9c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a6e      	ldr	r2, [pc, #440]	; (8006be4 <HAL_DMA_IRQHandler+0xca0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6d      	ldr	r2, [pc, #436]	; (8006be8 <HAL_DMA_IRQHandler+0xca4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a6b      	ldr	r2, [pc, #428]	; (8006bec <HAL_DMA_IRQHandler+0xca8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6a      	ldr	r2, [pc, #424]	; (8006bf0 <HAL_DMA_IRQHandler+0xcac>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a68      	ldr	r2, [pc, #416]	; (8006bf4 <HAL_DMA_IRQHandler+0xcb0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <HAL_DMA_IRQHandler+0xb24>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0208 	bic.w	r2, r2, #8
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e007      	b.n	8006a78 <HAL_DMA_IRQHandler+0xb34>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0204 	bic.w	r2, r2, #4
 8006a76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8165 	beq.w	8006d4c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a8a:	e15f      	b.n	8006d4c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	2202      	movs	r2, #2
 8006a96:	409a      	lsls	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80c5 	beq.w	8006c2c <HAL_DMA_IRQHandler+0xce8>
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80bf 	beq.w	8006c2c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d018      	beq.n	8006afa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 813a 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ae4:	e134      	b.n	8006d50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8130 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006af8:	e12a      	b.n	8006d50 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 8089 	bne.w	8006c18 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2b      	ldr	r2, [pc, #172]	; (8006bb8 <HAL_DMA_IRQHandler+0xc74>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d04a      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a29      	ldr	r2, [pc, #164]	; (8006bbc <HAL_DMA_IRQHandler+0xc78>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d045      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a28      	ldr	r2, [pc, #160]	; (8006bc0 <HAL_DMA_IRQHandler+0xc7c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d040      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a26      	ldr	r2, [pc, #152]	; (8006bc4 <HAL_DMA_IRQHandler+0xc80>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d03b      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a25      	ldr	r2, [pc, #148]	; (8006bc8 <HAL_DMA_IRQHandler+0xc84>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d036      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a23      	ldr	r2, [pc, #140]	; (8006bcc <HAL_DMA_IRQHandler+0xc88>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d031      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <HAL_DMA_IRQHandler+0xc8c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d02c      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <HAL_DMA_IRQHandler+0xc90>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d027      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_DMA_IRQHandler+0xc94>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <HAL_DMA_IRQHandler+0xc98>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01d      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <HAL_DMA_IRQHandler+0xc9c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1a      	ldr	r2, [pc, #104]	; (8006be4 <HAL_DMA_IRQHandler+0xca0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a19      	ldr	r2, [pc, #100]	; (8006be8 <HAL_DMA_IRQHandler+0xca4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a17      	ldr	r2, [pc, #92]	; (8006bec <HAL_DMA_IRQHandler+0xca8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <HAL_DMA_IRQHandler+0xcac>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <HAL_DMA_IRQHandler+0xcb0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d128      	bne.n	8006bf8 <HAL_DMA_IRQHandler+0xcb4>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0214 	bic.w	r2, r2, #20
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e027      	b.n	8006c08 <HAL_DMA_IRQHandler+0xcc4>
 8006bb8:	40020010 	.word	0x40020010
 8006bbc:	40020028 	.word	0x40020028
 8006bc0:	40020040 	.word	0x40020040
 8006bc4:	40020058 	.word	0x40020058
 8006bc8:	40020070 	.word	0x40020070
 8006bcc:	40020088 	.word	0x40020088
 8006bd0:	400200a0 	.word	0x400200a0
 8006bd4:	400200b8 	.word	0x400200b8
 8006bd8:	40020410 	.word	0x40020410
 8006bdc:	40020428 	.word	0x40020428
 8006be0:	40020440 	.word	0x40020440
 8006be4:	40020458 	.word	0x40020458
 8006be8:	40020470 	.word	0x40020470
 8006bec:	40020488 	.word	0x40020488
 8006bf0:	400204a0 	.word	0x400204a0
 8006bf4:	400204b8 	.word	0x400204b8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 020a 	bic.w	r2, r2, #10
 8006c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8097 	beq.w	8006d50 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c2a:	e091      	b.n	8006d50 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2208      	movs	r2, #8
 8006c36:	409a      	lsls	r2, r3
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8088 	beq.w	8006d52 <HAL_DMA_IRQHandler+0xe0e>
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8082 	beq.w	8006d52 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a41      	ldr	r2, [pc, #260]	; (8006d58 <HAL_DMA_IRQHandler+0xe14>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04a      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a3f      	ldr	r2, [pc, #252]	; (8006d5c <HAL_DMA_IRQHandler+0xe18>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d045      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3e      	ldr	r2, [pc, #248]	; (8006d60 <HAL_DMA_IRQHandler+0xe1c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d040      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <HAL_DMA_IRQHandler+0xe20>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a3b      	ldr	r2, [pc, #236]	; (8006d68 <HAL_DMA_IRQHandler+0xe24>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d036      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a39      	ldr	r2, [pc, #228]	; (8006d6c <HAL_DMA_IRQHandler+0xe28>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d031      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a38      	ldr	r2, [pc, #224]	; (8006d70 <HAL_DMA_IRQHandler+0xe2c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02c      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a36      	ldr	r2, [pc, #216]	; (8006d74 <HAL_DMA_IRQHandler+0xe30>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d027      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a35      	ldr	r2, [pc, #212]	; (8006d78 <HAL_DMA_IRQHandler+0xe34>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a33      	ldr	r2, [pc, #204]	; (8006d7c <HAL_DMA_IRQHandler+0xe38>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a32      	ldr	r2, [pc, #200]	; (8006d80 <HAL_DMA_IRQHandler+0xe3c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a30      	ldr	r2, [pc, #192]	; (8006d84 <HAL_DMA_IRQHandler+0xe40>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2f      	ldr	r2, [pc, #188]	; (8006d88 <HAL_DMA_IRQHandler+0xe44>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <HAL_DMA_IRQHandler+0xe48>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <HAL_DMA_IRQHandler+0xe4c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a2a      	ldr	r2, [pc, #168]	; (8006d94 <HAL_DMA_IRQHandler+0xe50>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <HAL_DMA_IRQHandler+0xdbc>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 021c 	bic.w	r2, r2, #28
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e007      	b.n	8006d10 <HAL_DMA_IRQHandler+0xdcc>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 020e 	bic.w	r2, r2, #14
 8006d0e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	2201      	movs	r2, #1
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
 8006d46:	e004      	b.n	8006d52 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d48:	bf00      	nop
 8006d4a:	e002      	b.n	8006d52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d50:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d52:	3728      	adds	r7, #40	; 0x28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40020010 	.word	0x40020010
 8006d5c:	40020028 	.word	0x40020028
 8006d60:	40020040 	.word	0x40020040
 8006d64:	40020058 	.word	0x40020058
 8006d68:	40020070 	.word	0x40020070
 8006d6c:	40020088 	.word	0x40020088
 8006d70:	400200a0 	.word	0x400200a0
 8006d74:	400200b8 	.word	0x400200b8
 8006d78:	40020410 	.word	0x40020410
 8006d7c:	40020428 	.word	0x40020428
 8006d80:	40020440 	.word	0x40020440
 8006d84:	40020458 	.word	0x40020458
 8006d88:	40020470 	.word	0x40020470
 8006d8c:	40020488 	.word	0x40020488
 8006d90:	400204a0 	.word	0x400204a0
 8006d94:	400204b8 	.word	0x400204b8

08006d98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a7f      	ldr	r2, [pc, #508]	; (8006fb4 <DMA_SetConfig+0x21c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d072      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a7d      	ldr	r2, [pc, #500]	; (8006fb8 <DMA_SetConfig+0x220>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d06d      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a7c      	ldr	r2, [pc, #496]	; (8006fbc <DMA_SetConfig+0x224>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d068      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7a      	ldr	r2, [pc, #488]	; (8006fc0 <DMA_SetConfig+0x228>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d063      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a79      	ldr	r2, [pc, #484]	; (8006fc4 <DMA_SetConfig+0x22c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d05e      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a77      	ldr	r2, [pc, #476]	; (8006fc8 <DMA_SetConfig+0x230>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d059      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a76      	ldr	r2, [pc, #472]	; (8006fcc <DMA_SetConfig+0x234>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d054      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a74      	ldr	r2, [pc, #464]	; (8006fd0 <DMA_SetConfig+0x238>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d04f      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a73      	ldr	r2, [pc, #460]	; (8006fd4 <DMA_SetConfig+0x23c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d04a      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a71      	ldr	r2, [pc, #452]	; (8006fd8 <DMA_SetConfig+0x240>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d045      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a70      	ldr	r2, [pc, #448]	; (8006fdc <DMA_SetConfig+0x244>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d040      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6e      	ldr	r2, [pc, #440]	; (8006fe0 <DMA_SetConfig+0x248>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d03b      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a6d      	ldr	r2, [pc, #436]	; (8006fe4 <DMA_SetConfig+0x24c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d036      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6b      	ldr	r2, [pc, #428]	; (8006fe8 <DMA_SetConfig+0x250>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d031      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6a      	ldr	r2, [pc, #424]	; (8006fec <DMA_SetConfig+0x254>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d02c      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a68      	ldr	r2, [pc, #416]	; (8006ff0 <DMA_SetConfig+0x258>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d027      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a67      	ldr	r2, [pc, #412]	; (8006ff4 <DMA_SetConfig+0x25c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a65      	ldr	r2, [pc, #404]	; (8006ff8 <DMA_SetConfig+0x260>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01d      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a64      	ldr	r2, [pc, #400]	; (8006ffc <DMA_SetConfig+0x264>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a62      	ldr	r2, [pc, #392]	; (8007000 <DMA_SetConfig+0x268>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a61      	ldr	r2, [pc, #388]	; (8007004 <DMA_SetConfig+0x26c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a5f      	ldr	r2, [pc, #380]	; (8007008 <DMA_SetConfig+0x270>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a5e      	ldr	r2, [pc, #376]	; (800700c <DMA_SetConfig+0x274>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <DMA_SetConfig+0x10a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5c      	ldr	r2, [pc, #368]	; (8007010 <DMA_SetConfig+0x278>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d101      	bne.n	8006ea6 <DMA_SetConfig+0x10e>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <DMA_SetConfig+0x110>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006eb4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d004      	beq.n	8006ec8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ec6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a39      	ldr	r2, [pc, #228]	; (8006fb4 <DMA_SetConfig+0x21c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d04a      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a38      	ldr	r2, [pc, #224]	; (8006fb8 <DMA_SetConfig+0x220>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d045      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a36      	ldr	r2, [pc, #216]	; (8006fbc <DMA_SetConfig+0x224>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d040      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a35      	ldr	r2, [pc, #212]	; (8006fc0 <DMA_SetConfig+0x228>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d03b      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a33      	ldr	r2, [pc, #204]	; (8006fc4 <DMA_SetConfig+0x22c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d036      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a32      	ldr	r2, [pc, #200]	; (8006fc8 <DMA_SetConfig+0x230>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d031      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a30      	ldr	r2, [pc, #192]	; (8006fcc <DMA_SetConfig+0x234>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d02c      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2f      	ldr	r2, [pc, #188]	; (8006fd0 <DMA_SetConfig+0x238>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d027      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <DMA_SetConfig+0x23c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d022      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a2c      	ldr	r2, [pc, #176]	; (8006fd8 <DMA_SetConfig+0x240>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d01d      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <DMA_SetConfig+0x244>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d018      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a29      	ldr	r2, [pc, #164]	; (8006fe0 <DMA_SetConfig+0x248>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <DMA_SetConfig+0x24c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <DMA_SetConfig+0x250>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a24      	ldr	r2, [pc, #144]	; (8006fec <DMA_SetConfig+0x254>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <DMA_SetConfig+0x1d0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a23      	ldr	r2, [pc, #140]	; (8006ff0 <DMA_SetConfig+0x258>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d101      	bne.n	8006f6c <DMA_SetConfig+0x1d4>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <DMA_SetConfig+0x1d6>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d059      	beq.n	8007026 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	223f      	movs	r2, #63	; 0x3f
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f90:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b40      	cmp	r3, #64	; 0x40
 8006fa0:	d138      	bne.n	8007014 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fb2:	e086      	b.n	80070c2 <DMA_SetConfig+0x32a>
 8006fb4:	40020010 	.word	0x40020010
 8006fb8:	40020028 	.word	0x40020028
 8006fbc:	40020040 	.word	0x40020040
 8006fc0:	40020058 	.word	0x40020058
 8006fc4:	40020070 	.word	0x40020070
 8006fc8:	40020088 	.word	0x40020088
 8006fcc:	400200a0 	.word	0x400200a0
 8006fd0:	400200b8 	.word	0x400200b8
 8006fd4:	40020410 	.word	0x40020410
 8006fd8:	40020428 	.word	0x40020428
 8006fdc:	40020440 	.word	0x40020440
 8006fe0:	40020458 	.word	0x40020458
 8006fe4:	40020470 	.word	0x40020470
 8006fe8:	40020488 	.word	0x40020488
 8006fec:	400204a0 	.word	0x400204a0
 8006ff0:	400204b8 	.word	0x400204b8
 8006ff4:	58025408 	.word	0x58025408
 8006ff8:	5802541c 	.word	0x5802541c
 8006ffc:	58025430 	.word	0x58025430
 8007000:	58025444 	.word	0x58025444
 8007004:	58025458 	.word	0x58025458
 8007008:	5802546c 	.word	0x5802546c
 800700c:	58025480 	.word	0x58025480
 8007010:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	60da      	str	r2, [r3, #12]
}
 8007024:	e04d      	b.n	80070c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a29      	ldr	r2, [pc, #164]	; (80070d0 <DMA_SetConfig+0x338>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <DMA_SetConfig+0x2de>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a27      	ldr	r2, [pc, #156]	; (80070d4 <DMA_SetConfig+0x33c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <DMA_SetConfig+0x2de>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a26      	ldr	r2, [pc, #152]	; (80070d8 <DMA_SetConfig+0x340>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <DMA_SetConfig+0x2de>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a24      	ldr	r2, [pc, #144]	; (80070dc <DMA_SetConfig+0x344>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <DMA_SetConfig+0x2de>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <DMA_SetConfig+0x348>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <DMA_SetConfig+0x2de>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a21      	ldr	r2, [pc, #132]	; (80070e4 <DMA_SetConfig+0x34c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <DMA_SetConfig+0x2de>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a20      	ldr	r2, [pc, #128]	; (80070e8 <DMA_SetConfig+0x350>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <DMA_SetConfig+0x2de>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <DMA_SetConfig+0x354>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <DMA_SetConfig+0x2e2>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <DMA_SetConfig+0x2e4>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2201      	movs	r2, #1
 800708a:	409a      	lsls	r2, r3
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d108      	bne.n	80070b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	60da      	str	r2, [r3, #12]
}
 80070b0:	e007      	b.n	80070c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	60da      	str	r2, [r3, #12]
}
 80070c2:	bf00      	nop
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	58025408 	.word	0x58025408
 80070d4:	5802541c 	.word	0x5802541c
 80070d8:	58025430 	.word	0x58025430
 80070dc:	58025444 	.word	0x58025444
 80070e0:	58025458 	.word	0x58025458
 80070e4:	5802546c 	.word	0x5802546c
 80070e8:	58025480 	.word	0x58025480
 80070ec:	58025494 	.word	0x58025494

080070f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a42      	ldr	r2, [pc, #264]	; (8007208 <DMA_CalcBaseAndBitshift+0x118>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d04a      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a41      	ldr	r2, [pc, #260]	; (800720c <DMA_CalcBaseAndBitshift+0x11c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d045      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3f      	ldr	r2, [pc, #252]	; (8007210 <DMA_CalcBaseAndBitshift+0x120>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d040      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3e      	ldr	r2, [pc, #248]	; (8007214 <DMA_CalcBaseAndBitshift+0x124>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d03b      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3c      	ldr	r2, [pc, #240]	; (8007218 <DMA_CalcBaseAndBitshift+0x128>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d036      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a3b      	ldr	r2, [pc, #236]	; (800721c <DMA_CalcBaseAndBitshift+0x12c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d031      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a39      	ldr	r2, [pc, #228]	; (8007220 <DMA_CalcBaseAndBitshift+0x130>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d02c      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a38      	ldr	r2, [pc, #224]	; (8007224 <DMA_CalcBaseAndBitshift+0x134>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d027      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a36      	ldr	r2, [pc, #216]	; (8007228 <DMA_CalcBaseAndBitshift+0x138>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d022      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a35      	ldr	r2, [pc, #212]	; (800722c <DMA_CalcBaseAndBitshift+0x13c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d01d      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a33      	ldr	r2, [pc, #204]	; (8007230 <DMA_CalcBaseAndBitshift+0x140>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d018      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a32      	ldr	r2, [pc, #200]	; (8007234 <DMA_CalcBaseAndBitshift+0x144>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a30      	ldr	r2, [pc, #192]	; (8007238 <DMA_CalcBaseAndBitshift+0x148>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2f      	ldr	r2, [pc, #188]	; (800723c <DMA_CalcBaseAndBitshift+0x14c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2d      	ldr	r2, [pc, #180]	; (8007240 <DMA_CalcBaseAndBitshift+0x150>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <DMA_CalcBaseAndBitshift+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2c      	ldr	r2, [pc, #176]	; (8007244 <DMA_CalcBaseAndBitshift+0x154>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d101      	bne.n	800719c <DMA_CalcBaseAndBitshift+0xac>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <DMA_CalcBaseAndBitshift+0xae>
 800719c:	2300      	movs	r3, #0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d024      	beq.n	80071ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	3b10      	subs	r3, #16
 80071aa:	4a27      	ldr	r2, [pc, #156]	; (8007248 <DMA_CalcBaseAndBitshift+0x158>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	4a24      	ldr	r2, [pc, #144]	; (800724c <DMA_CalcBaseAndBitshift+0x15c>)
 80071bc:	5cd3      	ldrb	r3, [r2, r3]
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d908      	bls.n	80071dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <DMA_CalcBaseAndBitshift+0x160>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	1d1a      	adds	r2, r3, #4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	659a      	str	r2, [r3, #88]	; 0x58
 80071da:	e00d      	b.n	80071f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <DMA_CalcBaseAndBitshift+0x160>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6593      	str	r3, [r2, #88]	; 0x58
 80071ea:	e005      	b.n	80071f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	40020010 	.word	0x40020010
 800720c:	40020028 	.word	0x40020028
 8007210:	40020040 	.word	0x40020040
 8007214:	40020058 	.word	0x40020058
 8007218:	40020070 	.word	0x40020070
 800721c:	40020088 	.word	0x40020088
 8007220:	400200a0 	.word	0x400200a0
 8007224:	400200b8 	.word	0x400200b8
 8007228:	40020410 	.word	0x40020410
 800722c:	40020428 	.word	0x40020428
 8007230:	40020440 	.word	0x40020440
 8007234:	40020458 	.word	0x40020458
 8007238:	40020470 	.word	0x40020470
 800723c:	40020488 	.word	0x40020488
 8007240:	400204a0 	.word	0x400204a0
 8007244:	400204b8 	.word	0x400204b8
 8007248:	aaaaaaab 	.word	0xaaaaaaab
 800724c:	08010dfc 	.word	0x08010dfc
 8007250:	fffffc00 	.word	0xfffffc00

08007254 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d120      	bne.n	80072aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	2b03      	cmp	r3, #3
 800726e:	d858      	bhi.n	8007322 <DMA_CheckFifoParam+0xce>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <DMA_CheckFifoParam+0x24>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007289 	.word	0x08007289
 800727c:	0800729b 	.word	0x0800729b
 8007280:	08007289 	.word	0x08007289
 8007284:	08007323 	.word	0x08007323
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d048      	beq.n	8007326 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007298:	e045      	b.n	8007326 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072a2:	d142      	bne.n	800732a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072a8:	e03f      	b.n	800732a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b2:	d123      	bne.n	80072fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d838      	bhi.n	800732e <DMA_CheckFifoParam+0xda>
 80072bc:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <DMA_CheckFifoParam+0x70>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072db 	.word	0x080072db
 80072cc:	080072d5 	.word	0x080072d5
 80072d0:	080072ed 	.word	0x080072ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
        break;
 80072d8:	e030      	b.n	800733c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d025      	beq.n	8007332 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072ea:	e022      	b.n	8007332 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072f4:	d11f      	bne.n	8007336 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072fa:	e01c      	b.n	8007336 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	2b02      	cmp	r3, #2
 8007302:	d902      	bls.n	800730a <DMA_CheckFifoParam+0xb6>
 8007304:	2b03      	cmp	r3, #3
 8007306:	d003      	beq.n	8007310 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007308:	e018      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	73fb      	strb	r3, [r7, #15]
        break;
 800730e:	e015      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00e      	beq.n	800733a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
    break;
 8007320:	e00b      	b.n	800733a <DMA_CheckFifoParam+0xe6>
        break;
 8007322:	bf00      	nop
 8007324:	e00a      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        break;
 8007326:	bf00      	nop
 8007328:	e008      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        break;
 800732a:	bf00      	nop
 800732c:	e006      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        break;
 800732e:	bf00      	nop
 8007330:	e004      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        break;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <DMA_CheckFifoParam+0xe8>
        break;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <DMA_CheckFifoParam+0xe8>
    break;
 800733a:	bf00      	nop
    }
  }

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop

0800734c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a38      	ldr	r2, [pc, #224]	; (8007440 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a36      	ldr	r2, [pc, #216]	; (8007444 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01d      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a35      	ldr	r2, [pc, #212]	; (8007448 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a33      	ldr	r2, [pc, #204]	; (800744c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a32      	ldr	r2, [pc, #200]	; (8007450 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a30      	ldr	r2, [pc, #192]	; (8007454 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2f      	ldr	r2, [pc, #188]	; (8007458 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2d      	ldr	r2, [pc, #180]	; (800745c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01a      	beq.n	80073ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	3b08      	subs	r3, #8
 80073bc:	4a28      	ldr	r2, [pc, #160]	; (8007460 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	091b      	lsrs	r3, r3, #4
 80073c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4b26      	ldr	r3, [pc, #152]	; (8007464 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	461a      	mov	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a24      	ldr	r2, [pc, #144]	; (8007468 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80073d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2201      	movs	r2, #1
 80073e2:	409a      	lsls	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80073e8:	e024      	b.n	8007434 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	3b10      	subs	r3, #16
 80073f2:	4a1e      	ldr	r2, [pc, #120]	; (800746c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80073f4:	fba2 2303 	umull	r2, r3, r2, r3
 80073f8:	091b      	lsrs	r3, r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4a1c      	ldr	r2, [pc, #112]	; (8007470 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d806      	bhi.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d902      	bls.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3308      	adds	r3, #8
 8007410:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4b18      	ldr	r3, [pc, #96]	; (8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a16      	ldr	r2, [pc, #88]	; (800747c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007424:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	2201      	movs	r2, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	58025408 	.word	0x58025408
 8007444:	5802541c 	.word	0x5802541c
 8007448:	58025430 	.word	0x58025430
 800744c:	58025444 	.word	0x58025444
 8007450:	58025458 	.word	0x58025458
 8007454:	5802546c 	.word	0x5802546c
 8007458:	58025480 	.word	0x58025480
 800745c:	58025494 	.word	0x58025494
 8007460:	cccccccd 	.word	0xcccccccd
 8007464:	16009600 	.word	0x16009600
 8007468:	58025880 	.word	0x58025880
 800746c:	aaaaaaab 	.word	0xaaaaaaab
 8007470:	400204b8 	.word	0x400204b8
 8007474:	4002040f 	.word	0x4002040f
 8007478:	10008200 	.word	0x10008200
 800747c:	40020880 	.word	0x40020880

08007480 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d04a      	beq.n	800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b08      	cmp	r3, #8
 800749a:	d847      	bhi.n	800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a25      	ldr	r2, [pc, #148]	; (8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a24      	ldr	r2, [pc, #144]	; (800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d01d      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a22      	ldr	r2, [pc, #136]	; (8007540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a21      	ldr	r2, [pc, #132]	; (8007544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1f      	ldr	r2, [pc, #124]	; (8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1e      	ldr	r2, [pc, #120]	; (800754c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1c      	ldr	r2, [pc, #112]	; (8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d101      	bne.n	80074f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4b17      	ldr	r3, [pc, #92]	; (8007558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a15      	ldr	r2, [pc, #84]	; (800755c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007508:	671a      	str	r2, [r3, #112]	; 0x70
 800750a:	e009      	b.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4b14      	ldr	r3, [pc, #80]	; (8007560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	461a      	mov	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a11      	ldr	r2, [pc, #68]	; (8007564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800751e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3b01      	subs	r3, #1
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800752c:	bf00      	nop
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	58025408 	.word	0x58025408
 800753c:	5802541c 	.word	0x5802541c
 8007540:	58025430 	.word	0x58025430
 8007544:	58025444 	.word	0x58025444
 8007548:	58025458 	.word	0x58025458
 800754c:	5802546c 	.word	0x5802546c
 8007550:	58025480 	.word	0x58025480
 8007554:	58025494 	.word	0x58025494
 8007558:	1600963f 	.word	0x1600963f
 800755c:	58025940 	.word	0x58025940
 8007560:	1000823f 	.word	0x1000823f
 8007564:	40020940 	.word	0x40020940

08007568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007568:	b480      	push	{r7}
 800756a:	b089      	sub	sp, #36	; 0x24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007576:	4b89      	ldr	r3, [pc, #548]	; (800779c <HAL_GPIO_Init+0x234>)
 8007578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800757a:	e194      	b.n	80078a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	2101      	movs	r1, #1
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	fa01 f303 	lsl.w	r3, r1, r3
 8007588:	4013      	ands	r3, r2
 800758a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8186 	beq.w	80078a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	2b01      	cmp	r3, #1
 800759e:	d005      	beq.n	80075ac <HAL_GPIO_Init+0x44>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d130      	bne.n	800760e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	2203      	movs	r2, #3
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	4013      	ands	r3, r2
 80075c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80075e2:	2201      	movs	r2, #1
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ea:	43db      	mvns	r3, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4013      	ands	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	091b      	lsrs	r3, r3, #4
 80075f8:	f003 0201 	and.w	r2, r3, #1
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	4313      	orrs	r3, r2
 8007606:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	2b03      	cmp	r3, #3
 8007618:	d017      	beq.n	800764a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	2203      	movs	r2, #3
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	43db      	mvns	r3, r3
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	4013      	ands	r3, r2
 8007630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	fa02 f303 	lsl.w	r3, r2, r3
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	4313      	orrs	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d123      	bne.n	800769e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	08da      	lsrs	r2, r3, #3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3208      	adds	r2, #8
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	220f      	movs	r2, #15
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43db      	mvns	r3, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4013      	ands	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	4313      	orrs	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	08da      	lsrs	r2, r3, #3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3208      	adds	r2, #8
 8007698:	69b9      	ldr	r1, [r7, #24]
 800769a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	2203      	movs	r2, #3
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	43db      	mvns	r3, r3
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	4013      	ands	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f003 0203 	and.w	r2, r3, #3
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80e0 	beq.w	80078a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076e0:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <HAL_GPIO_Init+0x238>)
 80076e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076e6:	4a2e      	ldr	r2, [pc, #184]	; (80077a0 <HAL_GPIO_Init+0x238>)
 80076e8:	f043 0302 	orr.w	r3, r3, #2
 80076ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80076f0:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <HAL_GPIO_Init+0x238>)
 80076f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076fe:	4a29      	ldr	r2, [pc, #164]	; (80077a4 <HAL_GPIO_Init+0x23c>)
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	089b      	lsrs	r3, r3, #2
 8007704:	3302      	adds	r3, #2
 8007706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	220f      	movs	r2, #15
 8007716:	fa02 f303 	lsl.w	r3, r2, r3
 800771a:	43db      	mvns	r3, r3
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	4013      	ands	r3, r2
 8007720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a20      	ldr	r2, [pc, #128]	; (80077a8 <HAL_GPIO_Init+0x240>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d052      	beq.n	80077d0 <HAL_GPIO_Init+0x268>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <HAL_GPIO_Init+0x244>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d031      	beq.n	8007796 <HAL_GPIO_Init+0x22e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <HAL_GPIO_Init+0x248>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d02b      	beq.n	8007792 <HAL_GPIO_Init+0x22a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <HAL_GPIO_Init+0x24c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d025      	beq.n	800778e <HAL_GPIO_Init+0x226>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <HAL_GPIO_Init+0x250>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01f      	beq.n	800778a <HAL_GPIO_Init+0x222>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_GPIO_Init+0x254>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d019      	beq.n	8007786 <HAL_GPIO_Init+0x21e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <HAL_GPIO_Init+0x258>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_GPIO_Init+0x21a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <HAL_GPIO_Init+0x25c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00d      	beq.n	800777e <HAL_GPIO_Init+0x216>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_GPIO_Init+0x260>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <HAL_GPIO_Init+0x212>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a17      	ldr	r2, [pc, #92]	; (80077cc <HAL_GPIO_Init+0x264>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d101      	bne.n	8007776 <HAL_GPIO_Init+0x20e>
 8007772:	2309      	movs	r3, #9
 8007774:	e02d      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 8007776:	230a      	movs	r3, #10
 8007778:	e02b      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 800777a:	2308      	movs	r3, #8
 800777c:	e029      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 800777e:	2307      	movs	r3, #7
 8007780:	e027      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 8007782:	2306      	movs	r3, #6
 8007784:	e025      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 8007786:	2305      	movs	r3, #5
 8007788:	e023      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 800778a:	2304      	movs	r3, #4
 800778c:	e021      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 800778e:	2303      	movs	r3, #3
 8007790:	e01f      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 8007792:	2302      	movs	r3, #2
 8007794:	e01d      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 8007796:	2301      	movs	r3, #1
 8007798:	e01b      	b.n	80077d2 <HAL_GPIO_Init+0x26a>
 800779a:	bf00      	nop
 800779c:	58000080 	.word	0x58000080
 80077a0:	58024400 	.word	0x58024400
 80077a4:	58000400 	.word	0x58000400
 80077a8:	58020000 	.word	0x58020000
 80077ac:	58020400 	.word	0x58020400
 80077b0:	58020800 	.word	0x58020800
 80077b4:	58020c00 	.word	0x58020c00
 80077b8:	58021000 	.word	0x58021000
 80077bc:	58021400 	.word	0x58021400
 80077c0:	58021800 	.word	0x58021800
 80077c4:	58021c00 	.word	0x58021c00
 80077c8:	58022000 	.word	0x58022000
 80077cc:	58022400 	.word	0x58022400
 80077d0:	2300      	movs	r3, #0
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	f002 0203 	and.w	r2, r2, #3
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	4093      	lsls	r3, r2
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077e2:	4938      	ldr	r1, [pc, #224]	; (80078c4 <HAL_GPIO_Init+0x35c>)
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	089b      	lsrs	r3, r3, #2
 80077e8:	3302      	adds	r3, #2
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	43db      	mvns	r3, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4013      	ands	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800781e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	43db      	mvns	r3, r3
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	4013      	ands	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	43db      	mvns	r3, r3
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	4013      	ands	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	43db      	mvns	r3, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	4013      	ands	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	3301      	adds	r3, #1
 80078a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	fa22 f303 	lsr.w	r3, r2, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f47f ae63 	bne.w	800757c <HAL_GPIO_Init+0x14>
  }
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	3724      	adds	r7, #36	; 0x24
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	58000400 	.word	0x58000400

080078c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	887b      	ldrh	r3, [r7, #2]
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078e0:	2301      	movs	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
 80078e4:	e001      	b.n	80078ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	807b      	strh	r3, [r7, #2]
 8007904:	4613      	mov	r3, r2
 8007906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007908:	787b      	ldrb	r3, [r7, #1]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800790e:	887a      	ldrh	r2, [r7, #2]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007914:	e003      	b.n	800791e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007916:	887b      	ldrh	r3, [r7, #2]
 8007918:	041a      	lsls	r2, r3, #16
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	619a      	str	r2, [r3, #24]
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
	...

0800792c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e08b      	b.n	8007a56 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fa fb02 	bl	8001f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2224      	movs	r2, #36	; 0x24
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800797c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800798c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d107      	bne.n	80079a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	e006      	b.n	80079b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80079b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d108      	bne.n	80079ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ca:	605a      	str	r2, [r3, #4]
 80079cc:	e007      	b.n	80079de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6859      	ldr	r1, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4b1d      	ldr	r3, [pc, #116]	; (8007a60 <HAL_I2C_Init+0x134>)
 80079ea:	430b      	orrs	r3, r1
 80079ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69d9      	ldr	r1, [r3, #28]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1a      	ldr	r2, [r3, #32]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	02008000 	.word	0x02008000

08007a64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	607a      	str	r2, [r7, #4]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	460b      	mov	r3, r1
 8007a72:	817b      	strh	r3, [r7, #10]
 8007a74:	4613      	mov	r3, r2
 8007a76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	f040 80fd 	bne.w	8007c80 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_I2C_Master_Transmit+0x30>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e0f6      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x21e>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a9c:	f7fa feac 	bl	80027f8 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	2319      	movs	r3, #25
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fa0a 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e0e1      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2221      	movs	r2, #33	; 0x21
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2210      	movs	r2, #16
 8007aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	893a      	ldrh	r2, [r7, #8]
 8007ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2bff      	cmp	r3, #255	; 0xff
 8007aee:	d906      	bls.n	8007afe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	22ff      	movs	r2, #255	; 0xff
 8007af4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e007      	b.n	8007b0e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b0c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d024      	beq.n	8007b60 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	8979      	ldrh	r1, [r7, #10]
 8007b52:	4b4e      	ldr	r3, [pc, #312]	; (8007c8c <HAL_I2C_Master_Transmit+0x228>)
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fc05 	bl	8008368 <I2C_TransferConfig>
 8007b5e:	e066      	b.n	8007c2e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	8979      	ldrh	r1, [r7, #10]
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <HAL_I2C_Master_Transmit+0x228>)
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fbfa 	bl	8008368 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b74:	e05b      	b.n	8007c2e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	6a39      	ldr	r1, [r7, #32]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f9fd 	bl	8007f7a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e07b      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	781a      	ldrb	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d034      	beq.n	8007c2e <HAL_I2C_Master_Transmit+0x1ca>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d130      	bne.n	8007c2e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2180      	movs	r1, #128	; 0x80
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f976 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e04d      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2bff      	cmp	r3, #255	; 0xff
 8007bee:	d90e      	bls.n	8007c0e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	22ff      	movs	r2, #255	; 0xff
 8007bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	8979      	ldrh	r1, [r7, #10]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fbae 	bl	8008368 <I2C_TransferConfig>
 8007c0c:	e00f      	b.n	8007c2e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	8979      	ldrh	r1, [r7, #10]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fb9d 	bl	8008368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d19e      	bne.n	8007b76 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	6a39      	ldr	r1, [r7, #32]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f9e3 	bl	8008008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e01a      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2220      	movs	r2, #32
 8007c52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6859      	ldr	r1, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <HAL_I2C_Master_Transmit+0x22c>)
 8007c60:	400b      	ands	r3, r1
 8007c62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e000      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007c80:	2302      	movs	r3, #2
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	80002000 	.word	0x80002000
 8007c90:	fe00e800 	.word	0xfe00e800

08007c94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	817b      	strh	r3, [r7, #10]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	f040 80db 	bne.w	8007e6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_I2C_Master_Receive+0x30>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e0d4      	b.n	8007e6e <HAL_I2C_Master_Receive+0x1da>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ccc:	f7fa fd94 	bl	80027f8 <HAL_GetTick>
 8007cd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	2319      	movs	r3, #25
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f8f2 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e0bf      	b.n	8007e6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2222      	movs	r2, #34	; 0x22
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2210      	movs	r2, #16
 8007cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	893a      	ldrh	r2, [r7, #8]
 8007d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2bff      	cmp	r3, #255	; 0xff
 8007d1e:	d90e      	bls.n	8007d3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	22ff      	movs	r2, #255	; 0xff
 8007d24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	8979      	ldrh	r1, [r7, #10]
 8007d2e:	4b52      	ldr	r3, [pc, #328]	; (8007e78 <HAL_I2C_Master_Receive+0x1e4>)
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fb16 	bl	8008368 <I2C_TransferConfig>
 8007d3c:	e06d      	b.n	8007e1a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	8979      	ldrh	r1, [r7, #10]
 8007d50:	4b49      	ldr	r3, [pc, #292]	; (8007e78 <HAL_I2C_Master_Receive+0x1e4>)
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fb05 	bl	8008368 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007d5e:	e05c      	b.n	8007e1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	6a39      	ldr	r1, [r7, #32]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f993 	bl	8008090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e07c      	b.n	8007e6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d034      	beq.n	8007e1a <HAL_I2C_Master_Receive+0x186>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d130      	bne.n	8007e1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f880 	bl	8007ec8 <I2C_WaitOnFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e04d      	b.n	8007e6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2bff      	cmp	r3, #255	; 0xff
 8007dda:	d90e      	bls.n	8007dfa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	22ff      	movs	r2, #255	; 0xff
 8007de0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	8979      	ldrh	r1, [r7, #10]
 8007dea:	2300      	movs	r3, #0
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fab8 	bl	8008368 <I2C_TransferConfig>
 8007df8:	e00f      	b.n	8007e1a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	8979      	ldrh	r1, [r7, #10]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 faa7 	bl	8008368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d19d      	bne.n	8007d60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	6a39      	ldr	r1, [r7, #32]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f8ed 	bl	8008008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e01a      	b.n	8007e6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <HAL_I2C_Master_Receive+0x1e8>)
 8007e4c:	400b      	ands	r3, r1
 8007e4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e000      	b.n	8007e6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007e6c:	2302      	movs	r3, #2
  }
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	80002400 	.word	0x80002400
 8007e7c:	fe00e800 	.word	0xfe00e800

08007e80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d103      	bne.n	8007e9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d007      	beq.n	8007ebc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	619a      	str	r2, [r3, #24]
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ed8:	e03b      	b.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f962 	bl	80081a8 <I2C_IsErrorOccurred>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e041      	b.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef4:	d02d      	beq.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef6:	f7fa fc7f 	bl	80027f8 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d302      	bcc.n	8007f0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d122      	bne.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4013      	ands	r3, r2
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d113      	bne.n	8007f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2e:	f043 0220 	orr.w	r2, r3, #32
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e00f      	b.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	bf0c      	ite	eq
 8007f62:	2301      	moveq	r3, #1
 8007f64:	2300      	movne	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d0b4      	beq.n	8007eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f86:	e033      	b.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f90b 	bl	80081a8 <I2C_IsErrorOccurred>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e031      	b.n	8008000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fa2:	d025      	beq.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa4:	f7fa fc28 	bl	80027f8 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d302      	bcc.n	8007fba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11a      	bne.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d013      	beq.n	8007ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	f043 0220 	orr.w	r2, r3, #32
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e007      	b.n	8008000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d1c4      	bne.n	8007f88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008014:	e02f      	b.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f8c4 	bl	80081a8 <I2C_IsErrorOccurred>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e02d      	b.n	8008086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fa fbe5 	bl	80027f8 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d11a      	bne.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b20      	cmp	r3, #32
 800804c:	d013      	beq.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e007      	b.n	8008086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b20      	cmp	r3, #32
 8008082:	d1c8      	bne.n	8008016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80080a0:	e071      	b.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f87e 	bl	80081a8 <I2C_IsErrorOccurred>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d13b      	bne.n	800813c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d138      	bne.n	800813c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d105      	bne.n	80080e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b10      	cmp	r3, #16
 80080f0:	d121      	bne.n	8008136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2210      	movs	r2, #16
 80080f8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2204      	movs	r2, #4
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2220      	movs	r2, #32
 8008106:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6859      	ldr	r1, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008114:	400b      	ands	r3, r1
 8008116:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
 8008134:	e002      	b.n	800813c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800813c:	f7fa fb5c 	bl	80027f8 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d302      	bcc.n	8008152 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d119      	bne.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d116      	bne.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d00f      	beq.n	8008186 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b04      	cmp	r3, #4
 8008192:	d002      	beq.n	800819a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d083      	beq.n	80080a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	fe00e800 	.word	0xfe00e800

080081a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d068      	beq.n	80082a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2210      	movs	r2, #16
 80081da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081dc:	e049      	b.n	8008272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e4:	d045      	beq.n	8008272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081e6:	f7fa fb07 	bl	80027f8 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <I2C_IsErrorOccurred+0x54>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d13a      	bne.n	8008272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800820e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800821a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800821e:	d121      	bne.n	8008264 <I2C_IsErrorOccurred+0xbc>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008226:	d01d      	beq.n	8008264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008228:	7cfb      	ldrb	r3, [r7, #19]
 800822a:	2b20      	cmp	r3, #32
 800822c:	d01a      	beq.n	8008264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800823c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800823e:	f7fa fadb 	bl	80027f8 <HAL_GetTick>
 8008242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008244:	e00e      	b.n	8008264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008246:	f7fa fad7 	bl	80027f8 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b19      	cmp	r3, #25
 8008252:	d907      	bls.n	8008264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f043 0320 	orr.w	r3, r3, #32
 800825a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008262:	e006      	b.n	8008272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b20      	cmp	r3, #32
 8008270:	d1e9      	bne.n	8008246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d003      	beq.n	8008288 <I2C_IsErrorOccurred+0xe0>
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0aa      	beq.n	80081de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2220      	movs	r2, #32
 8008296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	f043 0304 	orr.w	r3, r3, #4
 800829e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	f043 0302 	orr.w	r3, r3, #2
 8008302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01c      	beq.n	8008356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fdaf 	bl	8007e80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6859      	ldr	r1, [r3, #4]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <I2C_IsErrorOccurred+0x1bc>)
 800832e:	400b      	ands	r3, r1
 8008330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	431a      	orrs	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800835a:	4618      	mov	r0, r3
 800835c:	3728      	adds	r7, #40	; 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	fe00e800 	.word	0xfe00e800

08008368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	817b      	strh	r3, [r7, #10]
 8008376:	4613      	mov	r3, r2
 8008378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800837a:	897b      	ldrh	r3, [r7, #10]
 800837c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008380:	7a7b      	ldrb	r3, [r7, #9]
 8008382:	041b      	lsls	r3, r3, #16
 8008384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	4313      	orrs	r3, r2
 8008392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	0d5b      	lsrs	r3, r3, #21
 80083a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083a6:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <I2C_TransferConfig+0x60>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	43db      	mvns	r3, r3
 80083ac:	ea02 0103 	and.w	r1, r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	03ff63ff 	.word	0x03ff63ff

080083cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d138      	bne.n	8008454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e032      	b.n	8008456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2224      	movs	r2, #36	; 0x24
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800841e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6819      	ldr	r1, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b20      	cmp	r3, #32
 8008476:	d139      	bne.n	80084ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008482:	2302      	movs	r3, #2
 8008484:	e033      	b.n	80084ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2224      	movs	r2, #36	; 0x24
 8008492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0201 	orr.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e000      	b.n	80084ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
  }
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008508:	4b18      	ldr	r3, [pc, #96]	; (800856c <HAL_PWR_EnterSTOPMode+0x70>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f023 0201 	bic.w	r2, r3, #1
 8008510:	4916      	ldr	r1, [pc, #88]	; (800856c <HAL_PWR_EnterSTOPMode+0x70>)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4313      	orrs	r3, r2
 8008516:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008518:	4b14      	ldr	r3, [pc, #80]	; (800856c <HAL_PWR_EnterSTOPMode+0x70>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <HAL_PWR_EnterSTOPMode+0x70>)
 800851e:	f023 0305 	bic.w	r3, r3, #5
 8008522:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8008524:	4b11      	ldr	r3, [pc, #68]	; (800856c <HAL_PWR_EnterSTOPMode+0x70>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	4a10      	ldr	r2, [pc, #64]	; (800856c <HAL_PWR_EnterSTOPMode+0x70>)
 800852a:	f023 0302 	bic.w	r3, r3, #2
 800852e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <HAL_PWR_EnterSTOPMode+0x74>)
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	4a0e      	ldr	r2, [pc, #56]	; (8008570 <HAL_PWR_EnterSTOPMode+0x74>)
 8008536:	f043 0304 	orr.w	r3, r3, #4
 800853a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800853c:	f3bf 8f4f 	dsb	sy
}
 8008540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008542:	f3bf 8f6f 	isb	sy
}
 8008546:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d101      	bne.n	8008552 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800854e:	bf30      	wfi
 8008550:	e000      	b.n	8008554 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008552:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008554:	4b06      	ldr	r3, [pc, #24]	; (8008570 <HAL_PWR_EnterSTOPMode+0x74>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	4a05      	ldr	r2, [pc, #20]	; (8008570 <HAL_PWR_EnterSTOPMode+0x74>)
 800855a:	f023 0304 	bic.w	r3, r3, #4
 800855e:	6113      	str	r3, [r2, #16]
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	58024800 	.word	0x58024800
 8008570:	e000ed00 	.word	0xe000ed00

08008574 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800857c:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_PWREx_ConfigSupply+0x70>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b04      	cmp	r3, #4
 8008586:	d00a      	beq.n	800859e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008588:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <HAL_PWREx_ConfigSupply+0x70>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d001      	beq.n	800859a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e01f      	b.n	80085da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	e01d      	b.n	80085da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800859e:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <HAL_PWREx_ConfigSupply+0x70>)
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f023 0207 	bic.w	r2, r3, #7
 80085a6:	490f      	ldr	r1, [pc, #60]	; (80085e4 <HAL_PWREx_ConfigSupply+0x70>)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80085ae:	f7fa f923 	bl	80027f8 <HAL_GetTick>
 80085b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085b4:	e009      	b.n	80085ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085b6:	f7fa f91f 	bl	80027f8 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085c4:	d901      	bls.n	80085ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e007      	b.n	80085da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085ca:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <HAL_PWREx_ConfigSupply+0x70>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d6:	d1ee      	bne.n	80085b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	58024800 	.word	0x58024800

080085e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	; 0x30
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	f000 bc48 	b.w	8008e8c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 8088 	beq.w	800871a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800860a:	4b99      	ldr	r3, [pc, #612]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008614:	4b96      	ldr	r3, [pc, #600]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	2b10      	cmp	r3, #16
 800861e:	d007      	beq.n	8008630 <HAL_RCC_OscConfig+0x48>
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	2b18      	cmp	r3, #24
 8008624:	d111      	bne.n	800864a <HAL_RCC_OscConfig+0x62>
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d10c      	bne.n	800864a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008630:	4b8f      	ldr	r3, [pc, #572]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d06d      	beq.n	8008718 <HAL_RCC_OscConfig+0x130>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d169      	bne.n	8008718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f000 bc21 	b.w	8008e8c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008652:	d106      	bne.n	8008662 <HAL_RCC_OscConfig+0x7a>
 8008654:	4b86      	ldr	r3, [pc, #536]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a85      	ldr	r2, [pc, #532]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800865a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e02e      	b.n	80086c0 <HAL_RCC_OscConfig+0xd8>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10c      	bne.n	8008684 <HAL_RCC_OscConfig+0x9c>
 800866a:	4b81      	ldr	r3, [pc, #516]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a80      	ldr	r2, [pc, #512]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	4b7e      	ldr	r3, [pc, #504]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a7d      	ldr	r2, [pc, #500]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800867c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e01d      	b.n	80086c0 <HAL_RCC_OscConfig+0xd8>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800868c:	d10c      	bne.n	80086a8 <HAL_RCC_OscConfig+0xc0>
 800868e:	4b78      	ldr	r3, [pc, #480]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a77      	ldr	r2, [pc, #476]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	4b75      	ldr	r3, [pc, #468]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a74      	ldr	r2, [pc, #464]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80086a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	e00b      	b.n	80086c0 <HAL_RCC_OscConfig+0xd8>
 80086a8:	4b71      	ldr	r3, [pc, #452]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a70      	ldr	r2, [pc, #448]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80086ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	4b6e      	ldr	r3, [pc, #440]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a6d      	ldr	r2, [pc, #436]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80086ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d013      	beq.n	80086f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c8:	f7fa f896 	bl	80027f8 <HAL_GetTick>
 80086cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086d0:	f7fa f892 	bl	80027f8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b64      	cmp	r3, #100	; 0x64
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e3d4      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086e2:	4b63      	ldr	r3, [pc, #396]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0f0      	beq.n	80086d0 <HAL_RCC_OscConfig+0xe8>
 80086ee:	e014      	b.n	800871a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f0:	f7fa f882 	bl	80027f8 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086f8:	f7fa f87e 	bl	80027f8 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b64      	cmp	r3, #100	; 0x64
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e3c0      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800870a:	4b59      	ldr	r3, [pc, #356]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f0      	bne.n	80086f8 <HAL_RCC_OscConfig+0x110>
 8008716:	e000      	b.n	800871a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 80ca 	beq.w	80088bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008728:	4b51      	ldr	r3, [pc, #324]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008730:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008732:	4b4f      	ldr	r3, [pc, #316]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <HAL_RCC_OscConfig+0x166>
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	2b18      	cmp	r3, #24
 8008742:	d156      	bne.n	80087f2 <HAL_RCC_OscConfig+0x20a>
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d151      	bne.n	80087f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800874e:	4b48      	ldr	r3, [pc, #288]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_RCC_OscConfig+0x17e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e392      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008766:	4b42      	ldr	r3, [pc, #264]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f023 0219 	bic.w	r2, r3, #25
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	493f      	ldr	r1, [pc, #252]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008774:	4313      	orrs	r3, r2
 8008776:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008778:	f7fa f83e 	bl	80027f8 <HAL_GetTick>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008780:	f7fa f83a 	bl	80027f8 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e37c      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008792:	4b37      	ldr	r3, [pc, #220]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f0      	beq.n	8008780 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800879e:	f7fa f847 	bl	8002830 <HAL_GetREVID>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d817      	bhi.n	80087dc <HAL_RCC_OscConfig+0x1f4>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	d108      	bne.n	80087c6 <HAL_RCC_OscConfig+0x1de>
 80087b4:	4b2e      	ldr	r3, [pc, #184]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087bc:	4a2c      	ldr	r2, [pc, #176]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087c4:	e07a      	b.n	80088bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c6:	4b2a      	ldr	r3, [pc, #168]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	031b      	lsls	r3, r3, #12
 80087d4:	4926      	ldr	r1, [pc, #152]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087da:	e06f      	b.n	80088bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087dc:	4b24      	ldr	r3, [pc, #144]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	061b      	lsls	r3, r3, #24
 80087ea:	4921      	ldr	r1, [pc, #132]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087f0:	e064      	b.n	80088bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d047      	beq.n	800888a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087fa:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f023 0219 	bic.w	r2, r3, #25
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	491a      	ldr	r1, [pc, #104]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008808:	4313      	orrs	r3, r2
 800880a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7f9 fff4 	bl	80027f8 <HAL_GetTick>
 8008810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008814:	f7f9 fff0 	bl	80027f8 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e332      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0f0      	beq.n	8008814 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008832:	f7f9 fffd 	bl	8002830 <HAL_GetREVID>
 8008836:	4603      	mov	r3, r0
 8008838:	f241 0203 	movw	r2, #4099	; 0x1003
 800883c:	4293      	cmp	r3, r2
 800883e:	d819      	bhi.n	8008874 <HAL_RCC_OscConfig+0x28c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b40      	cmp	r3, #64	; 0x40
 8008846:	d108      	bne.n	800885a <HAL_RCC_OscConfig+0x272>
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008850:	4a07      	ldr	r2, [pc, #28]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 8008852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008856:	6053      	str	r3, [r2, #4]
 8008858:	e030      	b.n	80088bc <HAL_RCC_OscConfig+0x2d4>
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	031b      	lsls	r3, r3, #12
 8008868:	4901      	ldr	r1, [pc, #4]	; (8008870 <HAL_RCC_OscConfig+0x288>)
 800886a:	4313      	orrs	r3, r2
 800886c:	604b      	str	r3, [r1, #4]
 800886e:	e025      	b.n	80088bc <HAL_RCC_OscConfig+0x2d4>
 8008870:	58024400 	.word	0x58024400
 8008874:	4b9a      	ldr	r3, [pc, #616]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	061b      	lsls	r3, r3, #24
 8008882:	4997      	ldr	r1, [pc, #604]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008884:	4313      	orrs	r3, r2
 8008886:	604b      	str	r3, [r1, #4]
 8008888:	e018      	b.n	80088bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800888a:	4b95      	ldr	r3, [pc, #596]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a94      	ldr	r2, [pc, #592]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008896:	f7f9 ffaf 	bl	80027f8 <HAL_GetTick>
 800889a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800889c:	e008      	b.n	80088b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800889e:	f7f9 ffab 	bl	80027f8 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d901      	bls.n	80088b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e2ed      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088b0:	4b8b      	ldr	r3, [pc, #556]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f0      	bne.n	800889e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80a9 	beq.w	8008a1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ca:	4b85      	ldr	r3, [pc, #532]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088d4:	4b82      	ldr	r3, [pc, #520]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d007      	beq.n	80088f0 <HAL_RCC_OscConfig+0x308>
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b18      	cmp	r3, #24
 80088e4:	d13a      	bne.n	800895c <HAL_RCC_OscConfig+0x374>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f003 0303 	and.w	r3, r3, #3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d135      	bne.n	800895c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088f0:	4b7b      	ldr	r3, [pc, #492]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <HAL_RCC_OscConfig+0x320>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	2b80      	cmp	r3, #128	; 0x80
 8008902:	d001      	beq.n	8008908 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e2c1      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008908:	f7f9 ff92 	bl	8002830 <HAL_GetREVID>
 800890c:	4603      	mov	r3, r0
 800890e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008912:	4293      	cmp	r3, r2
 8008914:	d817      	bhi.n	8008946 <HAL_RCC_OscConfig+0x35e>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	2b20      	cmp	r3, #32
 800891c:	d108      	bne.n	8008930 <HAL_RCC_OscConfig+0x348>
 800891e:	4b70      	ldr	r3, [pc, #448]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008926:	4a6e      	ldr	r2, [pc, #440]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800892c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800892e:	e075      	b.n	8008a1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008930:	4b6b      	ldr	r3, [pc, #428]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	069b      	lsls	r3, r3, #26
 800893e:	4968      	ldr	r1, [pc, #416]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008940:	4313      	orrs	r3, r2
 8008942:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008944:	e06a      	b.n	8008a1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008946:	4b66      	ldr	r3, [pc, #408]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	061b      	lsls	r3, r3, #24
 8008954:	4962      	ldr	r1, [pc, #392]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008956:	4313      	orrs	r3, r2
 8008958:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800895a:	e05f      	b.n	8008a1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d042      	beq.n	80089ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008964:	4b5e      	ldr	r3, [pc, #376]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a5d      	ldr	r2, [pc, #372]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 800896a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7f9 ff42 	bl	80027f8 <HAL_GetTick>
 8008974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008978:	f7f9 ff3e 	bl	80027f8 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e280      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800898a:	4b55      	ldr	r3, [pc, #340]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008996:	f7f9 ff4b 	bl	8002830 <HAL_GetREVID>
 800899a:	4603      	mov	r3, r0
 800899c:	f241 0203 	movw	r2, #4099	; 0x1003
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d817      	bhi.n	80089d4 <HAL_RCC_OscConfig+0x3ec>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d108      	bne.n	80089be <HAL_RCC_OscConfig+0x3d6>
 80089ac:	4b4c      	ldr	r3, [pc, #304]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089b4:	4a4a      	ldr	r2, [pc, #296]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ba:	6053      	str	r3, [r2, #4]
 80089bc:	e02e      	b.n	8008a1c <HAL_RCC_OscConfig+0x434>
 80089be:	4b48      	ldr	r3, [pc, #288]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	069b      	lsls	r3, r3, #26
 80089cc:	4944      	ldr	r1, [pc, #272]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	604b      	str	r3, [r1, #4]
 80089d2:	e023      	b.n	8008a1c <HAL_RCC_OscConfig+0x434>
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	493f      	ldr	r1, [pc, #252]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60cb      	str	r3, [r1, #12]
 80089e8:	e018      	b.n	8008a1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089ea:	4b3d      	ldr	r3, [pc, #244]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 80089f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f6:	f7f9 feff 	bl	80027f8 <HAL_GetTick>
 80089fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089fe:	f7f9 fefb 	bl	80027f8 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e23d      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a10:	4b33      	ldr	r3, [pc, #204]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f0      	bne.n	80089fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d036      	beq.n	8008a96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d019      	beq.n	8008a64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a30:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a34:	4a2a      	ldr	r2, [pc, #168]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3c:	f7f9 fedc 	bl	80027f8 <HAL_GetTick>
 8008a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a44:	f7f9 fed8 	bl	80027f8 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e21a      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a56:	4b22      	ldr	r3, [pc, #136]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0f0      	beq.n	8008a44 <HAL_RCC_OscConfig+0x45c>
 8008a62:	e018      	b.n	8008a96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a64:	4b1e      	ldr	r3, [pc, #120]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a68:	4a1d      	ldr	r2, [pc, #116]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a6a:	f023 0301 	bic.w	r3, r3, #1
 8008a6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a70:	f7f9 fec2 	bl	80027f8 <HAL_GetTick>
 8008a74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a78:	f7f9 febe 	bl	80027f8 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e200      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f0      	bne.n	8008a78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d039      	beq.n	8008b16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01c      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a0c      	ldr	r2, [pc, #48]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ab4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ab6:	f7f9 fe9f 	bl	80027f8 <HAL_GetTick>
 8008aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008abc:	e008      	b.n	8008ad0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008abe:	f7f9 fe9b 	bl	80027f8 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e1dd      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ad0:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f0      	beq.n	8008abe <HAL_RCC_OscConfig+0x4d6>
 8008adc:	e01b      	b.n	8008b16 <HAL_RCC_OscConfig+0x52e>
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ae4:	4b9b      	ldr	r3, [pc, #620]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a9a      	ldr	r2, [pc, #616]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008af0:	f7f9 fe82 	bl	80027f8 <HAL_GetTick>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008af8:	f7f9 fe7e 	bl	80027f8 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e1c0      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b0a:	4b92      	ldr	r3, [pc, #584]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8081 	beq.w	8008c26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b24:	4b8c      	ldr	r3, [pc, #560]	; (8008d58 <HAL_RCC_OscConfig+0x770>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a8b      	ldr	r2, [pc, #556]	; (8008d58 <HAL_RCC_OscConfig+0x770>)
 8008b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b30:	f7f9 fe62 	bl	80027f8 <HAL_GetTick>
 8008b34:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b38:	f7f9 fe5e 	bl	80027f8 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b64      	cmp	r3, #100	; 0x64
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e1a0      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b4a:	4b83      	ldr	r3, [pc, #524]	; (8008d58 <HAL_RCC_OscConfig+0x770>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d106      	bne.n	8008b6c <HAL_RCC_OscConfig+0x584>
 8008b5e:	4b7d      	ldr	r3, [pc, #500]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b62:	4a7c      	ldr	r2, [pc, #496]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6713      	str	r3, [r2, #112]	; 0x70
 8008b6a:	e02d      	b.n	8008bc8 <HAL_RCC_OscConfig+0x5e0>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10c      	bne.n	8008b8e <HAL_RCC_OscConfig+0x5a6>
 8008b74:	4b77      	ldr	r3, [pc, #476]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b78:	4a76      	ldr	r2, [pc, #472]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b7a:	f023 0301 	bic.w	r3, r3, #1
 8008b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b80:	4b74      	ldr	r3, [pc, #464]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b84:	4a73      	ldr	r2, [pc, #460]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b86:	f023 0304 	bic.w	r3, r3, #4
 8008b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b8c:	e01c      	b.n	8008bc8 <HAL_RCC_OscConfig+0x5e0>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d10c      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x5c8>
 8008b96:	4b6f      	ldr	r3, [pc, #444]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	4a6e      	ldr	r2, [pc, #440]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008b9c:	f043 0304 	orr.w	r3, r3, #4
 8008ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba2:	4b6c      	ldr	r3, [pc, #432]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	4a6b      	ldr	r2, [pc, #428]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008ba8:	f043 0301 	orr.w	r3, r3, #1
 8008bac:	6713      	str	r3, [r2, #112]	; 0x70
 8008bae:	e00b      	b.n	8008bc8 <HAL_RCC_OscConfig+0x5e0>
 8008bb0:	4b68      	ldr	r3, [pc, #416]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	4a67      	ldr	r2, [pc, #412]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	6713      	str	r3, [r2, #112]	; 0x70
 8008bbc:	4b65      	ldr	r3, [pc, #404]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc0:	4a64      	ldr	r2, [pc, #400]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008bc2:	f023 0304 	bic.w	r3, r3, #4
 8008bc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d015      	beq.n	8008bfc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd0:	f7f9 fe12 	bl	80027f8 <HAL_GetTick>
 8008bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bd6:	e00a      	b.n	8008bee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bd8:	f7f9 fe0e 	bl	80027f8 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e14e      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bee:	4b59      	ldr	r3, [pc, #356]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0ee      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x5f0>
 8008bfa:	e014      	b.n	8008c26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bfc:	f7f9 fdfc 	bl	80027f8 <HAL_GetTick>
 8008c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c02:	e00a      	b.n	8008c1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c04:	f7f9 fdf8 	bl	80027f8 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e138      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c1a:	4b4e      	ldr	r3, [pc, #312]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1ee      	bne.n	8008c04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 812d 	beq.w	8008e8a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c30:	4b48      	ldr	r3, [pc, #288]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c38:	2b18      	cmp	r3, #24
 8008c3a:	f000 80bd 	beq.w	8008db8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	f040 809e 	bne.w	8008d84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c48:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a41      	ldr	r2, [pc, #260]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c54:	f7f9 fdd0 	bl	80027f8 <HAL_GetTick>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c5c:	f7f9 fdcc 	bl	80027f8 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e10e      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c6e:	4b39      	ldr	r3, [pc, #228]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1f0      	bne.n	8008c5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c7a:	4b36      	ldr	r3, [pc, #216]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c7e:	4b37      	ldr	r3, [pc, #220]	; (8008d5c <HAL_RCC_OscConfig+0x774>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c8a:	0112      	lsls	r2, r2, #4
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	4931      	ldr	r1, [pc, #196]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	628b      	str	r3, [r1, #40]	; 0x28
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	025b      	lsls	r3, r3, #9
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cc4:	4923      	ldr	r1, [pc, #140]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008cca:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	4a21      	ldr	r2, [pc, #132]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008cd0:	f023 0301 	bic.w	r3, r3, #1
 8008cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cd6:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cda:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <HAL_RCC_OscConfig+0x778>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ce2:	00d2      	lsls	r2, r2, #3
 8008ce4:	491b      	ldr	r1, [pc, #108]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cea:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	f023 020c 	bic.w	r2, r3, #12
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	4917      	ldr	r1, [pc, #92]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	f023 0202 	bic.w	r2, r3, #2
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d08:	4912      	ldr	r1, [pc, #72]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d26:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d32:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	4a07      	ldr	r2, [pc, #28]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a04      	ldr	r2, [pc, #16]	; (8008d54 <HAL_RCC_OscConfig+0x76c>)
 8008d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4a:	f7f9 fd55 	bl	80027f8 <HAL_GetTick>
 8008d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d50:	e011      	b.n	8008d76 <HAL_RCC_OscConfig+0x78e>
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
 8008d58:	58024800 	.word	0x58024800
 8008d5c:	fffffc0c 	.word	0xfffffc0c
 8008d60:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d64:	f7f9 fd48 	bl	80027f8 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e08a      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d76:	4b47      	ldr	r3, [pc, #284]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCC_OscConfig+0x77c>
 8008d82:	e082      	b.n	8008e8a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d84:	4b43      	ldr	r3, [pc, #268]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a42      	ldr	r2, [pc, #264]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7f9 fd32 	bl	80027f8 <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d98:	f7f9 fd2e 	bl	80027f8 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e070      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008daa:	4b3a      	ldr	r3, [pc, #232]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <HAL_RCC_OscConfig+0x7b0>
 8008db6:	e068      	b.n	8008e8a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008db8:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008dbe:	4b35      	ldr	r3, [pc, #212]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d031      	beq.n	8008e30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f003 0203 	and.w	r2, r3, #3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d12a      	bne.n	8008e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	091b      	lsrs	r3, r3, #4
 8008dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d122      	bne.n	8008e30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d11a      	bne.n	8008e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	0a5b      	lsrs	r3, r3, #9
 8008dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d111      	bne.n	8008e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d108      	bne.n	8008e30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	0e1b      	lsrs	r3, r3, #24
 8008e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d001      	beq.n	8008e34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e02b      	b.n	8008e8c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e34:	4b17      	ldr	r3, [pc, #92]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d01f      	beq.n	8008e8a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e4a:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e50:	f023 0301 	bic.w	r3, r3, #1
 8008e54:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e56:	f7f9 fccf 	bl	80027f8 <HAL_GetTick>
 8008e5a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e5c:	bf00      	nop
 8008e5e:	f7f9 fccb 	bl	80027f8 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d0f9      	beq.n	8008e5e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e6a:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <HAL_RCC_OscConfig+0x8b0>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e76:	00d2      	lsls	r2, r2, #3
 8008e78:	4906      	ldr	r1, [pc, #24]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	4a04      	ldr	r2, [pc, #16]	; (8008e94 <HAL_RCC_OscConfig+0x8ac>)
 8008e84:	f043 0301 	orr.w	r3, r3, #1
 8008e88:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3730      	adds	r7, #48	; 0x30
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	58024400 	.word	0x58024400
 8008e98:	ffff0007 	.word	0xffff0007

08008e9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e19c      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008eb0:	4b8a      	ldr	r3, [pc, #552]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d910      	bls.n	8008ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ebe:	4b87      	ldr	r3, [pc, #540]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f023 020f 	bic.w	r2, r3, #15
 8008ec6:	4985      	ldr	r1, [pc, #532]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b83      	ldr	r3, [pc, #524]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d001      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e184      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d010      	beq.n	8008f0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	4b7b      	ldr	r3, [pc, #492]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d908      	bls.n	8008f0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008efc:	4b78      	ldr	r3, [pc, #480]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	4975      	ldr	r1, [pc, #468]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0308 	and.w	r3, r3, #8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d010      	beq.n	8008f3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695a      	ldr	r2, [r3, #20]
 8008f1e:	4b70      	ldr	r3, [pc, #448]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d908      	bls.n	8008f3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f2a:	4b6d      	ldr	r3, [pc, #436]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	496a      	ldr	r1, [pc, #424]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d010      	beq.n	8008f6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	4b64      	ldr	r3, [pc, #400]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d908      	bls.n	8008f6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f58:	4b61      	ldr	r3, [pc, #388]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	495e      	ldr	r1, [pc, #376]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d010      	beq.n	8008f98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69da      	ldr	r2, [r3, #28]
 8008f7a:	4b59      	ldr	r3, [pc, #356]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d908      	bls.n	8008f98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f86:	4b56      	ldr	r3, [pc, #344]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	4953      	ldr	r1, [pc, #332]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d010      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d908      	bls.n	8008fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fb4:	4b4a      	ldr	r3, [pc, #296]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f023 020f 	bic.w	r2, r3, #15
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	4947      	ldr	r1, [pc, #284]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d055      	beq.n	800907e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fd2:	4b43      	ldr	r3, [pc, #268]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	4940      	ldr	r1, [pc, #256]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d107      	bne.n	8008ffc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fec:	4b3c      	ldr	r3, [pc, #240]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d121      	bne.n	800903c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e0f6      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d107      	bne.n	8009014 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009004:	4b36      	ldr	r3, [pc, #216]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d115      	bne.n	800903c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e0ea      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d107      	bne.n	800902c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800901c:	4b30      	ldr	r3, [pc, #192]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e0de      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800902c:	4b2c      	ldr	r3, [pc, #176]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e0d6      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800903c:	4b28      	ldr	r3, [pc, #160]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f023 0207 	bic.w	r2, r3, #7
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	4925      	ldr	r1, [pc, #148]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 800904a:	4313      	orrs	r3, r2
 800904c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800904e:	f7f9 fbd3 	bl	80027f8 <HAL_GetTick>
 8009052:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009054:	e00a      	b.n	800906c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009056:	f7f9 fbcf 	bl	80027f8 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f241 3288 	movw	r2, #5000	; 0x1388
 8009064:	4293      	cmp	r3, r2
 8009066:	d901      	bls.n	800906c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e0be      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800906c:	4b1c      	ldr	r3, [pc, #112]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	429a      	cmp	r2, r3
 800907c:	d1eb      	bne.n	8009056 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d010      	beq.n	80090ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	4b14      	ldr	r3, [pc, #80]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	429a      	cmp	r2, r3
 8009098:	d208      	bcs.n	80090ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800909a:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f023 020f 	bic.w	r2, r3, #15
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	490e      	ldr	r1, [pc, #56]	; (80090e0 <HAL_RCC_ClockConfig+0x244>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090ac:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 030f 	and.w	r3, r3, #15
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d214      	bcs.n	80090e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ba:	4b08      	ldr	r3, [pc, #32]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f023 020f 	bic.w	r2, r3, #15
 80090c2:	4906      	ldr	r1, [pc, #24]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ca:	4b04      	ldr	r3, [pc, #16]	; (80090dc <HAL_RCC_ClockConfig+0x240>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d005      	beq.n	80090e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e086      	b.n	80091ea <HAL_RCC_ClockConfig+0x34e>
 80090dc:	52002000 	.word	0x52002000
 80090e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d010      	beq.n	8009112 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	4b3f      	ldr	r3, [pc, #252]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d208      	bcs.n	8009112 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009100:	4b3c      	ldr	r3, [pc, #240]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	4939      	ldr	r1, [pc, #228]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 800910e:	4313      	orrs	r3, r2
 8009110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0308 	and.w	r3, r3, #8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d010      	beq.n	8009140 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	4b34      	ldr	r3, [pc, #208]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800912a:	429a      	cmp	r2, r3
 800912c:	d208      	bcs.n	8009140 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800912e:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	492e      	ldr	r1, [pc, #184]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 800913c:	4313      	orrs	r3, r2
 800913e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	d010      	beq.n	800916e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009158:	429a      	cmp	r2, r3
 800915a:	d208      	bcs.n	800916e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800915c:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	4922      	ldr	r1, [pc, #136]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 800916a:	4313      	orrs	r3, r2
 800916c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d010      	beq.n	800919c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009186:	429a      	cmp	r2, r3
 8009188:	d208      	bcs.n	800919c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800918a:	4b1a      	ldr	r3, [pc, #104]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4917      	ldr	r1, [pc, #92]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 8009198:	4313      	orrs	r3, r2
 800919a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800919c:	f000 f834 	bl	8009208 <HAL_RCC_GetSysClockFreq>
 80091a0:	4602      	mov	r2, r0
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	0a1b      	lsrs	r3, r3, #8
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	4912      	ldr	r1, [pc, #72]	; (80091f8 <HAL_RCC_ClockConfig+0x35c>)
 80091ae:	5ccb      	ldrb	r3, [r1, r3]
 80091b0:	f003 031f 	and.w	r3, r3, #31
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091ba:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <HAL_RCC_ClockConfig+0x358>)
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	4a0d      	ldr	r2, [pc, #52]	; (80091f8 <HAL_RCC_ClockConfig+0x35c>)
 80091c4:	5cd3      	ldrb	r3, [r2, r3]
 80091c6:	f003 031f 	and.w	r3, r3, #31
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	fa22 f303 	lsr.w	r3, r2, r3
 80091d0:	4a0a      	ldr	r2, [pc, #40]	; (80091fc <HAL_RCC_ClockConfig+0x360>)
 80091d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091d4:	4a0a      	ldr	r2, [pc, #40]	; (8009200 <HAL_RCC_ClockConfig+0x364>)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80091da:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <HAL_RCC_ClockConfig+0x368>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 fac0 	bl	8002764 <HAL_InitTick>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	58024400 	.word	0x58024400
 80091f8:	08010dec 	.word	0x08010dec
 80091fc:	24000048 	.word	0x24000048
 8009200:	24000044 	.word	0x24000044
 8009204:	2400004c 	.word	0x2400004c

08009208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009208:	b480      	push	{r7}
 800920a:	b089      	sub	sp, #36	; 0x24
 800920c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800920e:	4bb3      	ldr	r3, [pc, #716]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009216:	2b18      	cmp	r3, #24
 8009218:	f200 8155 	bhi.w	80094c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <HAL_RCC_GetSysClockFreq+0x1c>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009289 	.word	0x08009289
 8009228:	080094c7 	.word	0x080094c7
 800922c:	080094c7 	.word	0x080094c7
 8009230:	080094c7 	.word	0x080094c7
 8009234:	080094c7 	.word	0x080094c7
 8009238:	080094c7 	.word	0x080094c7
 800923c:	080094c7 	.word	0x080094c7
 8009240:	080094c7 	.word	0x080094c7
 8009244:	080092af 	.word	0x080092af
 8009248:	080094c7 	.word	0x080094c7
 800924c:	080094c7 	.word	0x080094c7
 8009250:	080094c7 	.word	0x080094c7
 8009254:	080094c7 	.word	0x080094c7
 8009258:	080094c7 	.word	0x080094c7
 800925c:	080094c7 	.word	0x080094c7
 8009260:	080094c7 	.word	0x080094c7
 8009264:	080092b5 	.word	0x080092b5
 8009268:	080094c7 	.word	0x080094c7
 800926c:	080094c7 	.word	0x080094c7
 8009270:	080094c7 	.word	0x080094c7
 8009274:	080094c7 	.word	0x080094c7
 8009278:	080094c7 	.word	0x080094c7
 800927c:	080094c7 	.word	0x080094c7
 8009280:	080094c7 	.word	0x080094c7
 8009284:	080092bb 	.word	0x080092bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009288:	4b94      	ldr	r3, [pc, #592]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0320 	and.w	r3, r3, #32
 8009290:	2b00      	cmp	r3, #0
 8009292:	d009      	beq.n	80092a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009294:	4b91      	ldr	r3, [pc, #580]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	08db      	lsrs	r3, r3, #3
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	4a90      	ldr	r2, [pc, #576]	; (80094e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
 80092a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80092a6:	e111      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80092a8:	4b8d      	ldr	r3, [pc, #564]	; (80094e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092aa:	61bb      	str	r3, [r7, #24]
      break;
 80092ac:	e10e      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80092ae:	4b8d      	ldr	r3, [pc, #564]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092b0:	61bb      	str	r3, [r7, #24]
      break;
 80092b2:	e10b      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80092b4:	4b8c      	ldr	r3, [pc, #560]	; (80094e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80092b6:	61bb      	str	r3, [r7, #24]
      break;
 80092b8:	e108      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092ba:	4b88      	ldr	r3, [pc, #544]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092c4:	4b85      	ldr	r3, [pc, #532]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c8:	091b      	lsrs	r3, r3, #4
 80092ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092d0:	4b82      	ldr	r3, [pc, #520]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092da:	4b80      	ldr	r3, [pc, #512]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	08db      	lsrs	r3, r3, #3
 80092e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	fb02 f303 	mul.w	r3, r2, r3
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80e1 	beq.w	80094c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b02      	cmp	r3, #2
 8009302:	f000 8083 	beq.w	800940c <HAL_RCC_GetSysClockFreq+0x204>
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b02      	cmp	r3, #2
 800930a:	f200 80a1 	bhi.w	8009450 <HAL_RCC_GetSysClockFreq+0x248>
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <HAL_RCC_GetSysClockFreq+0x114>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d056      	beq.n	80093c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800931a:	e099      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800931c:	4b6f      	ldr	r3, [pc, #444]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d02d      	beq.n	8009384 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009328:	4b6c      	ldr	r3, [pc, #432]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	08db      	lsrs	r3, r3, #3
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	4a6b      	ldr	r2, [pc, #428]	; (80094e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009334:	fa22 f303 	lsr.w	r3, r2, r3
 8009338:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b62      	ldr	r3, [pc, #392]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a02 	vldr	s12, [r7, #8]
 8009366:	eddf 5a61 	vldr	s11, [pc, #388]	; 80094ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009382:	e087      	b.n	8009494 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b51      	ldr	r3, [pc, #324]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80094ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093c6:	e065      	b.n	8009494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80094f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b40      	ldr	r3, [pc, #256]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80094ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800940a:	e043      	b.n	8009494 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	4b2f      	ldr	r3, [pc, #188]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009432:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80094ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800944e:	e021      	b.n	8009494 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80094f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800945e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009462:	4b1e      	ldr	r3, [pc, #120]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009472:	ed97 6a02 	vldr	s12, [r7, #8]
 8009476:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800947a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800947e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800948e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009492:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	0a5b      	lsrs	r3, r3, #9
 800949a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949e:	3301      	adds	r3, #1
 80094a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b8:	ee17 3a90 	vmov	r3, s15
 80094bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80094be:	e005      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61bb      	str	r3, [r7, #24]
      break;
 80094c4:	e002      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094c8:	61bb      	str	r3, [r7, #24]
      break;
 80094ca:	bf00      	nop
  }

  return sysclockfreq;
 80094cc:	69bb      	ldr	r3, [r7, #24]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3724      	adds	r7, #36	; 0x24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	58024400 	.word	0x58024400
 80094e0:	03d09000 	.word	0x03d09000
 80094e4:	003d0900 	.word	0x003d0900
 80094e8:	017d7840 	.word	0x017d7840
 80094ec:	46000000 	.word	0x46000000
 80094f0:	4c742400 	.word	0x4c742400
 80094f4:	4a742400 	.word	0x4a742400
 80094f8:	4bbebc20 	.word	0x4bbebc20

080094fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009502:	f7ff fe81 	bl	8009208 <HAL_RCC_GetSysClockFreq>
 8009506:	4602      	mov	r2, r0
 8009508:	4b10      	ldr	r3, [pc, #64]	; (800954c <HAL_RCC_GetHCLKFreq+0x50>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	f003 030f 	and.w	r3, r3, #15
 8009512:	490f      	ldr	r1, [pc, #60]	; (8009550 <HAL_RCC_GetHCLKFreq+0x54>)
 8009514:	5ccb      	ldrb	r3, [r1, r3]
 8009516:	f003 031f 	and.w	r3, r3, #31
 800951a:	fa22 f303 	lsr.w	r3, r2, r3
 800951e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009520:	4b0a      	ldr	r3, [pc, #40]	; (800954c <HAL_RCC_GetHCLKFreq+0x50>)
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <HAL_RCC_GetHCLKFreq+0x54>)
 800952a:	5cd3      	ldrb	r3, [r2, r3]
 800952c:	f003 031f 	and.w	r3, r3, #31
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	fa22 f303 	lsr.w	r3, r2, r3
 8009536:	4a07      	ldr	r2, [pc, #28]	; (8009554 <HAL_RCC_GetHCLKFreq+0x58>)
 8009538:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800953a:	4a07      	ldr	r2, [pc, #28]	; (8009558 <HAL_RCC_GetHCLKFreq+0x5c>)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009540:	4b04      	ldr	r3, [pc, #16]	; (8009554 <HAL_RCC_GetHCLKFreq+0x58>)
 8009542:	681b      	ldr	r3, [r3, #0]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	58024400 	.word	0x58024400
 8009550:	08010dec 	.word	0x08010dec
 8009554:	24000048 	.word	0x24000048
 8009558:	24000044 	.word	0x24000044

0800955c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009560:	f7ff ffcc 	bl	80094fc <HAL_RCC_GetHCLKFreq>
 8009564:	4602      	mov	r2, r0
 8009566:	4b06      	ldr	r3, [pc, #24]	; (8009580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	091b      	lsrs	r3, r3, #4
 800956c:	f003 0307 	and.w	r3, r3, #7
 8009570:	4904      	ldr	r1, [pc, #16]	; (8009584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009572:	5ccb      	ldrb	r3, [r1, r3]
 8009574:	f003 031f 	and.w	r3, r3, #31
 8009578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800957c:	4618      	mov	r0, r3
 800957e:	bd80      	pop	{r7, pc}
 8009580:	58024400 	.word	0x58024400
 8009584:	08010dec 	.word	0x08010dec

08009588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800958c:	f7ff ffb6 	bl	80094fc <HAL_RCC_GetHCLKFreq>
 8009590:	4602      	mov	r2, r0
 8009592:	4b06      	ldr	r3, [pc, #24]	; (80095ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	0a1b      	lsrs	r3, r3, #8
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	4904      	ldr	r1, [pc, #16]	; (80095b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800959e:	5ccb      	ldrb	r3, [r1, r3]
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	58024400 	.word	0x58024400
 80095b0:	08010dec 	.word	0x08010dec

080095b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b8:	b0ca      	sub	sp, #296	; 0x128
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095c0:	2300      	movs	r3, #0
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095c6:	2300      	movs	r3, #0
 80095c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80095d8:	2500      	movs	r5, #0
 80095da:	ea54 0305 	orrs.w	r3, r4, r5
 80095de:	d049      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80095e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095ea:	d02f      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80095ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095f0:	d828      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095f6:	d01a      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80095f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095fc:	d822      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009606:	d007      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009608:	e01c      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800960a:	4bb8      	ldr	r3, [pc, #736]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	4ab7      	ldr	r2, [pc, #732]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009616:	e01a      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961c:	3308      	adds	r3, #8
 800961e:	2102      	movs	r1, #2
 8009620:	4618      	mov	r0, r3
 8009622:	f002 fb61 	bl	800bce8 <RCCEx_PLL2_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800962c:	e00f      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009632:	3328      	adds	r3, #40	; 0x28
 8009634:	2102      	movs	r1, #2
 8009636:	4618      	mov	r0, r3
 8009638:	f002 fc08 	bl	800be4c <RCCEx_PLL3_Config>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009642:	e004      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800964a:	e000      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800964c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009656:	4ba5      	ldr	r3, [pc, #660]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800965e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009664:	4aa1      	ldr	r2, [pc, #644]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009666:	430b      	orrs	r3, r1
 8009668:	6513      	str	r3, [r2, #80]	; 0x50
 800966a:	e003      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009680:	f04f 0900 	mov.w	r9, #0
 8009684:	ea58 0309 	orrs.w	r3, r8, r9
 8009688:	d047      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800968a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009690:	2b04      	cmp	r3, #4
 8009692:	d82a      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096b1 	.word	0x080096b1
 80096a0:	080096bf 	.word	0x080096bf
 80096a4:	080096d5 	.word	0x080096d5
 80096a8:	080096f3 	.word	0x080096f3
 80096ac:	080096f3 	.word	0x080096f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b0:	4b8e      	ldr	r3, [pc, #568]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a8d      	ldr	r2, [pc, #564]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096bc:	e01a      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c2:	3308      	adds	r3, #8
 80096c4:	2100      	movs	r1, #0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f002 fb0e 	bl	800bce8 <RCCEx_PLL2_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096d2:	e00f      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d8:	3328      	adds	r3, #40	; 0x28
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f002 fbb5 	bl	800be4c <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096e8:	e004      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096f0:	e000      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80096f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096fc:	4b7b      	ldr	r3, [pc, #492]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009700:	f023 0107 	bic.w	r1, r3, #7
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800970a:	4a78      	ldr	r2, [pc, #480]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800970c:	430b      	orrs	r3, r1
 800970e:	6513      	str	r3, [r2, #80]	; 0x50
 8009710:	e003      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800971a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009726:	f04f 0b00 	mov.w	fp, #0
 800972a:	ea5a 030b 	orrs.w	r3, sl, fp
 800972e:	d04c      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973a:	d030      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800973c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009740:	d829      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009742:	2bc0      	cmp	r3, #192	; 0xc0
 8009744:	d02d      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009746:	2bc0      	cmp	r3, #192	; 0xc0
 8009748:	d825      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800974a:	2b80      	cmp	r3, #128	; 0x80
 800974c:	d018      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800974e:	2b80      	cmp	r3, #128	; 0x80
 8009750:	d821      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d007      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800975a:	e01c      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975c:	4b63      	ldr	r3, [pc, #396]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a62      	ldr	r2, [pc, #392]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009768:	e01c      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976e:	3308      	adds	r3, #8
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f002 fab8 	bl	800bce8 <RCCEx_PLL2_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800977e:	e011      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009784:	3328      	adds	r3, #40	; 0x28
 8009786:	2100      	movs	r1, #0
 8009788:	4618      	mov	r0, r3
 800978a:	f002 fb5f 	bl	800be4c <RCCEx_PLL3_Config>
 800978e:	4603      	mov	r3, r0
 8009790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009794:	e006      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800979c:	e002      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80097a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80097ac:	4b4f      	ldr	r3, [pc, #316]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80097b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ba:	4a4c      	ldr	r2, [pc, #304]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097bc:	430b      	orrs	r3, r1
 80097be:	6513      	str	r3, [r2, #80]	; 0x50
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80097d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80097e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80097e4:	460b      	mov	r3, r1
 80097e6:	4313      	orrs	r3, r2
 80097e8:	d053      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097f6:	d035      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80097f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097fc:	d82e      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80097fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009802:	d031      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009804:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009808:	d828      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800980a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800980e:	d01a      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009814:	d822      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800981a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800981e:	d007      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009820:	e01c      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009822:	4b32      	ldr	r3, [pc, #200]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a31      	ldr	r2, [pc, #196]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800982c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800982e:	e01c      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009834:	3308      	adds	r3, #8
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f002 fa55 	bl	800bce8 <RCCEx_PLL2_Config>
 800983e:	4603      	mov	r3, r0
 8009840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009844:	e011      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984a:	3328      	adds	r3, #40	; 0x28
 800984c:	2100      	movs	r1, #0
 800984e:	4618      	mov	r0, r3
 8009850:	f002 fafc 	bl	800be4c <RCCEx_PLL3_Config>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800985a:	e006      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009862:	e002      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009864:	bf00      	nop
 8009866:	e000      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009872:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009876:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009882:	4a1a      	ldr	r2, [pc, #104]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009884:	430b      	orrs	r3, r1
 8009886:	6593      	str	r3, [r2, #88]	; 0x58
 8009888:	e003      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800988e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800989e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098a2:	2300      	movs	r3, #0
 80098a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80098a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80098ac:	460b      	mov	r3, r1
 80098ae:	4313      	orrs	r3, r2
 80098b0:	d056      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098be:	d038      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80098c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098c4:	d831      	bhi.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098ca:	d034      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80098cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098d0:	d82b      	bhi.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098d6:	d01d      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80098d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098dc:	d825      	bhi.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80098e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098e6:	d00a      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80098e8:	e01f      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80098ea:	bf00      	nop
 80098ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098f0:	4ba2      	ldr	r3, [pc, #648]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4aa1      	ldr	r2, [pc, #644]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098fc:	e01c      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009902:	3308      	adds	r3, #8
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f002 f9ee 	bl	800bce8 <RCCEx_PLL2_Config>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009912:	e011      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009918:	3328      	adds	r3, #40	; 0x28
 800991a:	2100      	movs	r1, #0
 800991c:	4618      	mov	r0, r3
 800991e:	f002 fa95 	bl	800be4c <RCCEx_PLL3_Config>
 8009922:	4603      	mov	r3, r0
 8009924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009928:	e006      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009930:	e002      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009932:	bf00      	nop
 8009934:	e000      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009940:	4b8e      	ldr	r3, [pc, #568]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009944:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009950:	4a8a      	ldr	r2, [pc, #552]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009952:	430b      	orrs	r3, r1
 8009954:	6593      	str	r3, [r2, #88]	; 0x58
 8009956:	e003      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800995c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800996c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009970:	2300      	movs	r3, #0
 8009972:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009976:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800997a:	460b      	mov	r3, r1
 800997c:	4313      	orrs	r3, r2
 800997e:	d03a      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009986:	2b30      	cmp	r3, #48	; 0x30
 8009988:	d01f      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800998a:	2b30      	cmp	r3, #48	; 0x30
 800998c:	d819      	bhi.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800998e:	2b20      	cmp	r3, #32
 8009990:	d00c      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009992:	2b20      	cmp	r3, #32
 8009994:	d815      	bhi.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d019      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800999a:	2b10      	cmp	r3, #16
 800999c:	d111      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999e:	4b77      	ldr	r3, [pc, #476]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	4a76      	ldr	r2, [pc, #472]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80099aa:	e011      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b0:	3308      	adds	r3, #8
 80099b2:	2102      	movs	r1, #2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f002 f997 	bl	800bce8 <RCCEx_PLL2_Config>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80099c0:	e006      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099c8:	e002      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80099ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099d8:	4b68      	ldr	r3, [pc, #416]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80099e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e6:	4a65      	ldr	r2, [pc, #404]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099e8:	430b      	orrs	r3, r1
 80099ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099ec:	e003      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009a02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a06:	2300      	movs	r3, #0
 8009a08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4313      	orrs	r3, r2
 8009a14:	d051      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a20:	d035      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a26:	d82e      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a2c:	d031      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a32:	d828      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a38:	d01a      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3e:	d822      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a48:	d007      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009a4a:	e01c      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4c:	4b4b      	ldr	r3, [pc, #300]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	4a4a      	ldr	r2, [pc, #296]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a58:	e01c      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5e:	3308      	adds	r3, #8
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f002 f940 	bl	800bce8 <RCCEx_PLL2_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a6e:	e011      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a74:	3328      	adds	r3, #40	; 0x28
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f002 f9e7 	bl	800be4c <RCCEx_PLL3_Config>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a84:	e006      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a8c:	e002      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a8e:	bf00      	nop
 8009a90:	e000      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a9c:	4b37      	ldr	r3, [pc, #220]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aaa:	4a34      	ldr	r2, [pc, #208]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6513      	str	r3, [r2, #80]	; 0x50
 8009ab0:	e003      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009aca:	2300      	movs	r3, #0
 8009acc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ad0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	d056      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ae4:	d033      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aea:	d82c      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009af0:	d02f      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009af2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009af6:	d826      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009afc:	d02b      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b02:	d820      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b08:	d012      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b0e:	d81a      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d022      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b18:	d115      	bne.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1e:	3308      	adds	r3, #8
 8009b20:	2101      	movs	r1, #1
 8009b22:	4618      	mov	r0, r3
 8009b24:	f002 f8e0 	bl	800bce8 <RCCEx_PLL2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b2e:	e015      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b34:	3328      	adds	r3, #40	; 0x28
 8009b36:	2101      	movs	r1, #1
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 f987 	bl	800be4c <RCCEx_PLL3_Config>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b44:	e00a      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b4c:	e006      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b4e:	bf00      	nop
 8009b50:	e004      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b52:	bf00      	nop
 8009b54:	e002      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b56:	bf00      	nop
 8009b58:	e000      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10d      	bne.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b64:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b72:	4a02      	ldr	r2, [pc, #8]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b74:	430b      	orrs	r3, r1
 8009b76:	6513      	str	r3, [r2, #80]	; 0x50
 8009b78:	e006      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b7a:	bf00      	nop
 8009b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d055      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bb4:	d033      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bba:	d82c      	bhi.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc0:	d02f      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc6:	d826      	bhi.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bcc:	d02b      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009bce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bd2:	d820      	bhi.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd8:	d012      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bde:	d81a      	bhi.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d022      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009be8:	d115      	bne.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bee:	3308      	adds	r3, #8
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f002 f878 	bl	800bce8 <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bfe:	e015      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c04:	3328      	adds	r3, #40	; 0x28
 8009c06:	2101      	movs	r1, #1
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f002 f91f 	bl	800be4c <RCCEx_PLL3_Config>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c14:	e00a      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c1c:	e006      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c1e:	bf00      	nop
 8009c20:	e004      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c22:	bf00      	nop
 8009c24:	e002      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c26:	bf00      	nop
 8009c28:	e000      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c34:	4ba3      	ldr	r3, [pc, #652]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c38:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c44:	4a9f      	ldr	r2, [pc, #636]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c46:	430b      	orrs	r3, r1
 8009c48:	6593      	str	r3, [r2, #88]	; 0x58
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c64:	2300      	movs	r3, #0
 8009c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c6e:	460b      	mov	r3, r1
 8009c70:	4313      	orrs	r3, r2
 8009c72:	d037      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7e:	d00e      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c84:	d816      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d018      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c8e:	d111      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c90:	4b8c      	ldr	r3, [pc, #560]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	4a8b      	ldr	r2, [pc, #556]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c9c:	e00f      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 f81e 	bl	800bce8 <RCCEx_PLL2_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009cb2:	e004      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cba:	e000      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009cc6:	4b7f      	ldr	r3, [pc, #508]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd4:	4a7b      	ldr	r2, [pc, #492]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cd6:	430b      	orrs	r3, r1
 8009cd8:	6513      	str	r3, [r2, #80]	; 0x50
 8009cda:	e003      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ce0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4313      	orrs	r3, r2
 8009d02:	d039      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d81c      	bhi.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d51 	.word	0x08009d51
 8009d18:	08009d25 	.word	0x08009d25
 8009d1c:	08009d33 	.word	0x08009d33
 8009d20:	08009d51 	.word	0x08009d51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d24:	4b67      	ldr	r3, [pc, #412]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	4a66      	ldr	r2, [pc, #408]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d30:	e00f      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d36:	3308      	adds	r3, #8
 8009d38:	2102      	movs	r1, #2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 ffd4 	bl	800bce8 <RCCEx_PLL2_Config>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d46:	e004      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d4e:	e000      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d5a:	4b5a      	ldr	r3, [pc, #360]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5e:	f023 0103 	bic.w	r1, r3, #3
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d68:	4a56      	ldr	r2, [pc, #344]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d6e:	e003      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009d92:	460b      	mov	r3, r1
 8009d94:	4313      	orrs	r3, r2
 8009d96:	f000 809f 	beq.w	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d9a:	4b4b      	ldr	r3, [pc, #300]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a4a      	ldr	r2, [pc, #296]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009da4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009da6:	f7f8 fd27 	bl	80027f8 <HAL_GetTick>
 8009daa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dae:	e00b      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009db0:	f7f8 fd22 	bl	80027f8 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2b64      	cmp	r3, #100	; 0x64
 8009dbe:	d903      	bls.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dc6:	e005      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dc8:	4b3f      	ldr	r3, [pc, #252]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0ed      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d179      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ddc:	4b39      	ldr	r3, [pc, #228]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009de8:	4053      	eors	r3, r2
 8009dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d015      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009df2:	4b34      	ldr	r3, [pc, #208]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	4a30      	ldr	r2, [pc, #192]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e08:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0e:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e14:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e16:	4a2b      	ldr	r2, [pc, #172]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e2a:	d118      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7f8 fce4 	bl	80027f8 <HAL_GetTick>
 8009e30:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e34:	e00d      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e36:	f7f8 fcdf 	bl	80027f8 <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009e40:	1ad2      	subs	r2, r2, r3
 8009e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d903      	bls.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009e50:	e005      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d0eb      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d129      	bne.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e76:	d10e      	bne.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009e78:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e88:	091a      	lsrs	r2, r3, #4
 8009e8a:	4b10      	ldr	r3, [pc, #64]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	4a0d      	ldr	r2, [pc, #52]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e90:	430b      	orrs	r3, r1
 8009e92:	6113      	str	r3, [r2, #16]
 8009e94:	e005      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009e96:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ea0:	6113      	str	r3, [r2, #16]
 8009ea2:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb2:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8009eb8:	e00e      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009ec2:	e009      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009ec4:	58024400 	.word	0x58024400
 8009ec8:	58024800 	.word	0x58024800
 8009ecc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f002 0301 	and.w	r3, r2, #1
 8009ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f000 8089 	beq.w	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f00:	2b28      	cmp	r3, #40	; 0x28
 8009f02:	d86b      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009f04:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	08009fe5 	.word	0x08009fe5
 8009f10:	08009fdd 	.word	0x08009fdd
 8009f14:	08009fdd 	.word	0x08009fdd
 8009f18:	08009fdd 	.word	0x08009fdd
 8009f1c:	08009fdd 	.word	0x08009fdd
 8009f20:	08009fdd 	.word	0x08009fdd
 8009f24:	08009fdd 	.word	0x08009fdd
 8009f28:	08009fdd 	.word	0x08009fdd
 8009f2c:	08009fb1 	.word	0x08009fb1
 8009f30:	08009fdd 	.word	0x08009fdd
 8009f34:	08009fdd 	.word	0x08009fdd
 8009f38:	08009fdd 	.word	0x08009fdd
 8009f3c:	08009fdd 	.word	0x08009fdd
 8009f40:	08009fdd 	.word	0x08009fdd
 8009f44:	08009fdd 	.word	0x08009fdd
 8009f48:	08009fdd 	.word	0x08009fdd
 8009f4c:	08009fc7 	.word	0x08009fc7
 8009f50:	08009fdd 	.word	0x08009fdd
 8009f54:	08009fdd 	.word	0x08009fdd
 8009f58:	08009fdd 	.word	0x08009fdd
 8009f5c:	08009fdd 	.word	0x08009fdd
 8009f60:	08009fdd 	.word	0x08009fdd
 8009f64:	08009fdd 	.word	0x08009fdd
 8009f68:	08009fdd 	.word	0x08009fdd
 8009f6c:	08009fe5 	.word	0x08009fe5
 8009f70:	08009fdd 	.word	0x08009fdd
 8009f74:	08009fdd 	.word	0x08009fdd
 8009f78:	08009fdd 	.word	0x08009fdd
 8009f7c:	08009fdd 	.word	0x08009fdd
 8009f80:	08009fdd 	.word	0x08009fdd
 8009f84:	08009fdd 	.word	0x08009fdd
 8009f88:	08009fdd 	.word	0x08009fdd
 8009f8c:	08009fe5 	.word	0x08009fe5
 8009f90:	08009fdd 	.word	0x08009fdd
 8009f94:	08009fdd 	.word	0x08009fdd
 8009f98:	08009fdd 	.word	0x08009fdd
 8009f9c:	08009fdd 	.word	0x08009fdd
 8009fa0:	08009fdd 	.word	0x08009fdd
 8009fa4:	08009fdd 	.word	0x08009fdd
 8009fa8:	08009fdd 	.word	0x08009fdd
 8009fac:	08009fe5 	.word	0x08009fe5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 fe95 	bl	800bce8 <RCCEx_PLL2_Config>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fc4:	e00f      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fca:	3328      	adds	r3, #40	; 0x28
 8009fcc:	2101      	movs	r1, #1
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 ff3c 	bl	800be4c <RCCEx_PLL3_Config>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fda:	e004      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fe2:	e000      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fee:	4bbf      	ldr	r3, [pc, #764]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ffc:	4abb      	ldr	r2, [pc, #748]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ffe:	430b      	orrs	r3, r1
 800a000:	6553      	str	r3, [r2, #84]	; 0x54
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f002 0302 	and.w	r3, r2, #2
 800a018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a022:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a026:	460b      	mov	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	d041      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a032:	2b05      	cmp	r3, #5
 800a034:	d824      	bhi.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a036:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03c:	0800a089 	.word	0x0800a089
 800a040:	0800a055 	.word	0x0800a055
 800a044:	0800a06b 	.word	0x0800a06b
 800a048:	0800a089 	.word	0x0800a089
 800a04c:	0800a089 	.word	0x0800a089
 800a050:	0800a089 	.word	0x0800a089
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a058:	3308      	adds	r3, #8
 800a05a:	2101      	movs	r1, #1
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 fe43 	bl	800bce8 <RCCEx_PLL2_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a068:	e00f      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	3328      	adds	r3, #40	; 0x28
 800a070:	2101      	movs	r1, #1
 800a072:	4618      	mov	r0, r3
 800a074:	f001 feea 	bl	800be4c <RCCEx_PLL3_Config>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a07e:	e004      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a086:	e000      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a092:	4b96      	ldr	r3, [pc, #600]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a096:	f023 0107 	bic.w	r1, r3, #7
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0a0:	4a92      	ldr	r2, [pc, #584]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0a2:	430b      	orrs	r3, r1
 800a0a4:	6553      	str	r3, [r2, #84]	; 0x54
 800a0a6:	e003      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f002 0304 	and.w	r3, r2, #4
 800a0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	d044      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d8:	2b05      	cmp	r3, #5
 800a0da:	d825      	bhi.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a0dc:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a131 	.word	0x0800a131
 800a0e8:	0800a0fd 	.word	0x0800a0fd
 800a0ec:	0800a113 	.word	0x0800a113
 800a0f0:	0800a131 	.word	0x0800a131
 800a0f4:	0800a131 	.word	0x0800a131
 800a0f8:	0800a131 	.word	0x0800a131
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a100:	3308      	adds	r3, #8
 800a102:	2101      	movs	r1, #1
 800a104:	4618      	mov	r0, r3
 800a106:	f001 fdef 	bl	800bce8 <RCCEx_PLL2_Config>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a110:	e00f      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a116:	3328      	adds	r3, #40	; 0x28
 800a118:	2101      	movs	r1, #1
 800a11a:	4618      	mov	r0, r3
 800a11c:	f001 fe96 	bl	800be4c <RCCEx_PLL3_Config>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a126:	e004      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a12e:	e000      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a130:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10b      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a13a:	4b6c      	ldr	r3, [pc, #432]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13e:	f023 0107 	bic.w	r1, r3, #7
 800a142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a14a:	4a68      	ldr	r2, [pc, #416]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a14c:	430b      	orrs	r3, r1
 800a14e:	6593      	str	r3, [r2, #88]	; 0x58
 800a150:	e003      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f002 0320 	and.w	r3, r2, #32
 800a166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a16a:	2300      	movs	r3, #0
 800a16c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d055      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a186:	d033      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a18c:	d82c      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a192:	d02f      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a198:	d826      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a19a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a19e:	d02b      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a1a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1a4:	d820      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a1a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1aa:	d012      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1b0:	d81a      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d022      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1ba:	d115      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 fd8f 	bl	800bce8 <RCCEx_PLL2_Config>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1d0:	e015      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d6:	3328      	adds	r3, #40	; 0x28
 800a1d8:	2102      	movs	r1, #2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 fe36 	bl	800be4c <RCCEx_PLL3_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1e6:	e00a      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1ee:	e006      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1f0:	bf00      	nop
 800a1f2:	e004      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1f4:	bf00      	nop
 800a1f6:	e002      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1f8:	bf00      	nop
 800a1fa:	e000      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10b      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a206:	4b39      	ldr	r3, [pc, #228]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a216:	4a35      	ldr	r2, [pc, #212]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a218:	430b      	orrs	r3, r1
 800a21a:	6553      	str	r3, [r2, #84]	; 0x54
 800a21c:	e003      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a236:	2300      	movs	r3, #0
 800a238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a23c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a240:	460b      	mov	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	d058      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a24e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a252:	d033      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a258:	d82c      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a25e:	d02f      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a264:	d826      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a26a:	d02b      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a26c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a270:	d820      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a276:	d012      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27c:	d81a      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d022      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a286:	d115      	bne.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28c:	3308      	adds	r3, #8
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fd29 	bl	800bce8 <RCCEx_PLL2_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a29c:	e015      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a2:	3328      	adds	r3, #40	; 0x28
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fdd0 	bl	800be4c <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a2b2:	e00a      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2ba:	e006      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2bc:	bf00      	nop
 800a2be:	e004      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2c0:	bf00      	nop
 800a2c2:	e002      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2c4:	bf00      	nop
 800a2c6:	e000      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10e      	bne.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2d2:	4b06      	ldr	r3, [pc, #24]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2e2:	4a02      	ldr	r2, [pc, #8]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a2e8:	e006      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a308:	2300      	movs	r3, #0
 800a30a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a30e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a312:	460b      	mov	r3, r1
 800a314:	4313      	orrs	r3, r2
 800a316:	d055      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a320:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a324:	d033      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a326:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a32a:	d82c      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a330:	d02f      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a336:	d826      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a338:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a33c:	d02b      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a33e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a342:	d820      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a348:	d012      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a34a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a34e:	d81a      	bhi.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d022      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a358:	d115      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35e:	3308      	adds	r3, #8
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fcc0 	bl	800bce8 <RCCEx_PLL2_Config>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a36e:	e015      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a374:	3328      	adds	r3, #40	; 0x28
 800a376:	2102      	movs	r1, #2
 800a378:	4618      	mov	r0, r3
 800a37a:	f001 fd67 	bl	800be4c <RCCEx_PLL3_Config>
 800a37e:	4603      	mov	r3, r0
 800a380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a384:	e00a      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a38c:	e006      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a38e:	bf00      	nop
 800a390:	e004      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a392:	bf00      	nop
 800a394:	e002      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a396:	bf00      	nop
 800a398:	e000      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a39a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a39c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10b      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a3a4:	4ba1      	ldr	r3, [pc, #644]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3b4:	4a9d      	ldr	r2, [pc, #628]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3b6:	430b      	orrs	r3, r1
 800a3b8:	6593      	str	r3, [r2, #88]	; 0x58
 800a3ba:	e003      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f002 0308 	and.w	r3, r2, #8
 800a3d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a3da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	d01e      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f0:	d10c      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f6:	3328      	adds	r3, #40	; 0x28
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 fd26 	bl	800be4c <RCCEx_PLL3_Config>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a40c:	4b87      	ldr	r3, [pc, #540]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a410:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a41c:	4a83      	ldr	r2, [pc, #524]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a41e:	430b      	orrs	r3, r1
 800a420:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f002 0310 	and.w	r3, r2, #16
 800a42e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a432:	2300      	movs	r3, #0
 800a434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a438:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a43c:	460b      	mov	r3, r1
 800a43e:	4313      	orrs	r3, r2
 800a440:	d01e      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a44e:	d10c      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a454:	3328      	adds	r3, #40	; 0x28
 800a456:	2102      	movs	r1, #2
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 fcf7 	bl	800be4c <RCCEx_PLL3_Config>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a46a:	4b70      	ldr	r3, [pc, #448]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a47a:	4a6c      	ldr	r2, [pc, #432]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a48c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a490:	2300      	movs	r3, #0
 800a492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a496:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a49a:	460b      	mov	r3, r1
 800a49c:	4313      	orrs	r3, r2
 800a49e:	d03e      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4ac:	d022      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a4ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4b2:	d81b      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a4b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4bc:	d00b      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a4be:	e015      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 fc0d 	bl	800bce8 <RCCEx_PLL2_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4d4:	e00f      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4da:	3328      	adds	r3, #40	; 0x28
 800a4dc:	2102      	movs	r1, #2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 fcb4 	bl	800be4c <RCCEx_PLL3_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4ea:	e004      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4f2:	e000      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10b      	bne.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4fe:	4b4b      	ldr	r3, [pc, #300]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a502:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a50e:	4a47      	ldr	r2, [pc, #284]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a510:	430b      	orrs	r3, r1
 800a512:	6593      	str	r3, [r2, #88]	; 0x58
 800a514:	e003      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a51a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a52a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a52c:	2300      	movs	r3, #0
 800a52e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a530:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a534:	460b      	mov	r3, r1
 800a536:	4313      	orrs	r3, r2
 800a538:	d03b      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a546:	d01f      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a54c:	d818      	bhi.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a54e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a552:	d003      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a558:	d007      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a55a:	e011      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a55c:	4b33      	ldr	r3, [pc, #204]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	4a32      	ldr	r2, [pc, #200]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a568:	e00f      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56e:	3328      	adds	r3, #40	; 0x28
 800a570:	2101      	movs	r1, #1
 800a572:	4618      	mov	r0, r3
 800a574:	f001 fc6a 	bl	800be4c <RCCEx_PLL3_Config>
 800a578:	4603      	mov	r3, r0
 800a57a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a57e:	e004      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a586:	e000      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a58a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a592:	4b26      	ldr	r3, [pc, #152]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	4a22      	ldr	r2, [pc, #136]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a4:	430b      	orrs	r3, r1
 800a5a6:	6553      	str	r3, [r2, #84]	; 0x54
 800a5a8:	e003      	b.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a5be:	673b      	str	r3, [r7, #112]	; 0x70
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	677b      	str	r3, [r7, #116]	; 0x74
 800a5c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	d034      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5dc:	d007      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a5de:	e011      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5e0:	4b12      	ldr	r3, [pc, #72]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	4a11      	ldr	r2, [pc, #68]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5ec:	e00e      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	2102      	movs	r1, #2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f001 fb76 	bl	800bce8 <RCCEx_PLL2_Config>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a602:	e003      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a60c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10d      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a614:	4b05      	ldr	r3, [pc, #20]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a622:	4a02      	ldr	r2, [pc, #8]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a624:	430b      	orrs	r3, r1
 800a626:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a628:	e006      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a62a:	bf00      	nop
 800a62c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a644:	66bb      	str	r3, [r7, #104]	; 0x68
 800a646:	2300      	movs	r3, #0
 800a648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a64a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a64e:	460b      	mov	r3, r1
 800a650:	4313      	orrs	r3, r2
 800a652:	d00c      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a658:	3328      	adds	r3, #40	; 0x28
 800a65a:	2102      	movs	r1, #2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 fbf5 	bl	800be4c <RCCEx_PLL3_Config>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a67a:	663b      	str	r3, [r7, #96]	; 0x60
 800a67c:	2300      	movs	r3, #0
 800a67e:	667b      	str	r3, [r7, #100]	; 0x64
 800a680:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a684:	460b      	mov	r3, r1
 800a686:	4313      	orrs	r3, r2
 800a688:	d038      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a696:	d018      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a69c:	d811      	bhi.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a69e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a2:	d014      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a6a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a8:	d80b      	bhi.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d011      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a6ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b2:	d106      	bne.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6b4:	4bc3      	ldr	r3, [pc, #780]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	4ac2      	ldr	r2, [pc, #776]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a6c0:	e008      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6c8:	e004      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a6ca:	bf00      	nop
 800a6cc:	e002      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a6ce:	bf00      	nop
 800a6d0:	e000      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10b      	bne.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6dc:	4bb9      	ldr	r3, [pc, #740]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ec:	4ab5      	ldr	r2, [pc, #724]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6ee:	430b      	orrs	r3, r1
 800a6f0:	6553      	str	r3, [r2, #84]	; 0x54
 800a6f2:	e003      	b.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a708:	65bb      	str	r3, [r7, #88]	; 0x58
 800a70a:	2300      	movs	r3, #0
 800a70c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a70e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a712:	460b      	mov	r3, r1
 800a714:	4313      	orrs	r3, r2
 800a716:	d009      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a718:	4baa      	ldr	r3, [pc, #680]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a726:	4aa7      	ldr	r2, [pc, #668]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a728:	430b      	orrs	r3, r1
 800a72a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a738:	653b      	str	r3, [r7, #80]	; 0x50
 800a73a:	2300      	movs	r3, #0
 800a73c:	657b      	str	r3, [r7, #84]	; 0x54
 800a73e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a742:	460b      	mov	r3, r1
 800a744:	4313      	orrs	r3, r2
 800a746:	d00a      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a748:	4b9e      	ldr	r3, [pc, #632]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a754:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a758:	4a9a      	ldr	r2, [pc, #616]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a75a:	430b      	orrs	r3, r1
 800a75c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a76a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a76c:	2300      	movs	r3, #0
 800a76e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a770:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a774:	460b      	mov	r3, r1
 800a776:	4313      	orrs	r3, r2
 800a778:	d009      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a77a:	4b92      	ldr	r3, [pc, #584]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a788:	4a8e      	ldr	r2, [pc, #568]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a78a:	430b      	orrs	r3, r1
 800a78c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a79a:	643b      	str	r3, [r7, #64]	; 0x40
 800a79c:	2300      	movs	r3, #0
 800a79e:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	d00e      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7aa:	4b86      	ldr	r3, [pc, #536]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	4a85      	ldr	r2, [pc, #532]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7b4:	6113      	str	r3, [r2, #16]
 800a7b6:	4b83      	ldr	r3, [pc, #524]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7b8:	6919      	ldr	r1, [r3, #16]
 800a7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a7c2:	4a80      	ldr	r2, [pc, #512]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7c4:	430b      	orrs	r3, r1
 800a7c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a7d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	d009      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a7e4:	4b77      	ldr	r3, [pc, #476]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f2:	4a74      	ldr	r2, [pc, #464]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a804:	633b      	str	r3, [r7, #48]	; 0x30
 800a806:	2300      	movs	r3, #0
 800a808:	637b      	str	r3, [r7, #52]	; 0x34
 800a80a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a80e:	460b      	mov	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	d00a      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a814:	4b6b      	ldr	r3, [pc, #428]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a818:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a824:	4a67      	ldr	r2, [pc, #412]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a826:	430b      	orrs	r3, r1
 800a828:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	2100      	movs	r1, #0
 800a834:	62b9      	str	r1, [r7, #40]	; 0x28
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a83c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a840:	460b      	mov	r3, r1
 800a842:	4313      	orrs	r3, r2
 800a844:	d011      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84a:	3308      	adds	r3, #8
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f001 fa4a 	bl	800bce8 <RCCEx_PLL2_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a85a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	2100      	movs	r1, #0
 800a874:	6239      	str	r1, [r7, #32]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	627b      	str	r3, [r7, #36]	; 0x24
 800a87c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a880:	460b      	mov	r3, r1
 800a882:	4313      	orrs	r3, r2
 800a884:	d011      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a88a:	3308      	adds	r3, #8
 800a88c:	2101      	movs	r1, #1
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 fa2a 	bl	800bce8 <RCCEx_PLL2_Config>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a89a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	61b9      	str	r1, [r7, #24]
 800a8b6:	f003 0304 	and.w	r3, r3, #4
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	d011      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	2102      	movs	r1, #2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f001 fa0a 	bl	800bce8 <RCCEx_PLL2_Config>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	6139      	str	r1, [r7, #16]
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a900:	460b      	mov	r3, r1
 800a902:	4313      	orrs	r3, r2
 800a904:	d011      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90a:	3328      	adds	r3, #40	; 0x28
 800a90c:	2100      	movs	r1, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f001 fa9c 	bl	800be4c <RCCEx_PLL3_Config>
 800a914:	4603      	mov	r3, r0
 800a916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	2100      	movs	r1, #0
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	f003 0310 	and.w	r3, r3, #16
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a940:	460b      	mov	r3, r1
 800a942:	4313      	orrs	r3, r2
 800a944:	d011      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94a:	3328      	adds	r3, #40	; 0x28
 800a94c:	2101      	movs	r1, #1
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 fa7c 	bl	800be4c <RCCEx_PLL3_Config>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a95a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	2100      	movs	r1, #0
 800a974:	6039      	str	r1, [r7, #0]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	607b      	str	r3, [r7, #4]
 800a97c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a980:	460b      	mov	r3, r1
 800a982:	4313      	orrs	r3, r2
 800a984:	d011      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98a:	3328      	adds	r3, #40	; 0x28
 800a98c:	2102      	movs	r1, #2
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 fa5c 	bl	800be4c <RCCEx_PLL3_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a99a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a9aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e000      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9c4:	58024400 	.word	0x58024400

0800a9c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b090      	sub	sp, #64	; 0x40
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a9da:	430b      	orrs	r3, r1
 800a9dc:	f040 8094 	bne.w	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a9e0:	4b9e      	ldr	r3, [pc, #632]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	f200 8087 	bhi.w	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a9f2:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f8:	0800aa0d 	.word	0x0800aa0d
 800a9fc:	0800aa35 	.word	0x0800aa35
 800aa00:	0800aa5d 	.word	0x0800aa5d
 800aa04:	0800aaf9 	.word	0x0800aaf9
 800aa08:	0800aa85 	.word	0x0800aa85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa0c:	4b93      	ldr	r3, [pc, #588]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa18:	d108      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f001 f810 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa28:	f000 bd45 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa30:	f000 bd41 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa34:	4b89      	ldr	r3, [pc, #548]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa40:	d108      	bne.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa42:	f107 0318 	add.w	r3, r7, #24
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fd54 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa50:	f000 bd31 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa58:	f000 bd2d 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa5c:	4b7f      	ldr	r3, [pc, #508]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa68:	d108      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa6a:	f107 030c 	add.w	r3, r7, #12
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fe94 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa78:	f000 bd1d 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa80:	f000 bd19 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa84:	4b75      	ldr	r3, [pc, #468]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa8e:	4b73      	ldr	r3, [pc, #460]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0304 	and.w	r3, r3, #4
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d10c      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d109      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa0:	4b6e      	ldr	r3, [pc, #440]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	08db      	lsrs	r3, r3, #3
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	4a6d      	ldr	r2, [pc, #436]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab2:	e01f      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aab4:	4b69      	ldr	r3, [pc, #420]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac0:	d106      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aac8:	d102      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaca:	4b66      	ldr	r3, [pc, #408]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aace:	e011      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aad0:	4b62      	ldr	r3, [pc, #392]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aadc:	d106      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae4:	d102      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aae6:	4b60      	ldr	r3, [pc, #384]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaea:	e003      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aaf0:	f000 bce1 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaf4:	f000 bcdf 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aaf8:	4b5c      	ldr	r3, [pc, #368]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafc:	f000 bcdb 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab04:	f000 bcd7 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ab08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab0c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ab10:	430b      	orrs	r3, r1
 800ab12:	f040 80ad 	bne.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ab16:	4b51      	ldr	r3, [pc, #324]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ab1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab26:	d056      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2e:	f200 8090 	bhi.w	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab34:	2bc0      	cmp	r3, #192	; 0xc0
 800ab36:	f000 8088 	beq.w	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2bc0      	cmp	r3, #192	; 0xc0
 800ab3e:	f200 8088 	bhi.w	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	2b80      	cmp	r3, #128	; 0x80
 800ab46:	d032      	beq.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	2b80      	cmp	r3, #128	; 0x80
 800ab4c:	f200 8081 	bhi.w	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	2b40      	cmp	r3, #64	; 0x40
 800ab5a:	d014      	beq.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ab5c:	e079      	b.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab5e:	4b3f      	ldr	r3, [pc, #252]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab6a:	d108      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 ff67 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab7a:	f000 bc9c 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab82:	f000 bc98 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab86:	4b35      	ldr	r3, [pc, #212]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab92:	d108      	bne.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab94:	f107 0318 	add.w	r3, r7, #24
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fcab 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba2:	f000 bc88 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abaa:	f000 bc84 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abae:	4b2b      	ldr	r3, [pc, #172]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abba:	d108      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abbc:	f107 030c 	add.w	r3, r7, #12
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fdeb 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abca:	f000 bc74 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd2:	f000 bc70 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd6:	4b21      	ldr	r3, [pc, #132]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abe0:	4b1e      	ldr	r3, [pc, #120]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d10c      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800abec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d109      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf2:	4b1a      	ldr	r3, [pc, #104]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	08db      	lsrs	r3, r3, #3
 800abf8:	f003 0303 	and.w	r3, r3, #3
 800abfc:	4a18      	ldr	r2, [pc, #96]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac04:	e01f      	b.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac06:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac12:	d106      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac1a:	d102      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac1c:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac20:	e011      	b.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac22:	4b0e      	ldr	r3, [pc, #56]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac2e:	d106      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ac30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac36:	d102      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac38:	4b0b      	ldr	r3, [pc, #44]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac3c:	e003      	b.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac42:	f000 bc38 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac46:	f000 bc36 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac4a:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4e:	f000 bc32 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac56:	f000 bc2e 	b.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac5a:	bf00      	nop
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	003d0900 	.word	0x003d0900
 800ac68:	017d7840 	.word	0x017d7840
 800ac6c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ac70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac74:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ac78:	430b      	orrs	r3, r1
 800ac7a:	f040 809c 	bne.w	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac7e:	4b9e      	ldr	r3, [pc, #632]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ac86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac8e:	d054      	beq.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac96:	f200 808b 	bhi.w	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aca0:	f000 8083 	beq.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800aca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acaa:	f200 8081 	bhi.w	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acb4:	d02f      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acbc:	d878      	bhi.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d004      	beq.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acca:	d012      	beq.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800accc:	e070      	b.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acce:	4b8a      	ldr	r3, [pc, #552]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acda:	d107      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 feaf 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acea:	e3e4      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf0:	e3e1      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acf2:	4b81      	ldr	r3, [pc, #516]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acfe:	d107      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad00:	f107 0318 	add.w	r3, r7, #24
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fbf5 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad0e:	e3d2      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad14:	e3cf      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad16:	4b78      	ldr	r3, [pc, #480]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad22:	d107      	bne.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad24:	f107 030c 	add.w	r3, r7, #12
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 fd37 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad32:	e3c0      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad38:	e3bd      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad3a:	4b6f      	ldr	r3, [pc, #444]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad44:	4b6c      	ldr	r3, [pc, #432]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b04      	cmp	r3, #4
 800ad4e:	d10c      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ad50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d109      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad56:	4b68      	ldr	r3, [pc, #416]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	08db      	lsrs	r3, r3, #3
 800ad5c:	f003 0303 	and.w	r3, r3, #3
 800ad60:	4a66      	ldr	r2, [pc, #408]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad62:	fa22 f303 	lsr.w	r3, r2, r3
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad68:	e01e      	b.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad6a:	4b63      	ldr	r3, [pc, #396]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad76:	d106      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad7e:	d102      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad80:	4b5f      	ldr	r3, [pc, #380]	; (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad84:	e010      	b.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad86:	4b5c      	ldr	r3, [pc, #368]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad92:	d106      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad9a:	d102      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad9c:	4b59      	ldr	r3, [pc, #356]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ada0:	e002      	b.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ada6:	e386      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ada8:	e385      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adaa:	4b57      	ldr	r3, [pc, #348]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adae:	e382      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb4:	e37f      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800adb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800adbe:	430b      	orrs	r3, r1
 800adc0:	f040 80a7 	bne.w	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800adc4:	4b4c      	ldr	r3, [pc, #304]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800adcc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800add4:	d055      	beq.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800addc:	f200 8096 	bhi.w	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ade6:	f000 8084 	beq.w	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adf0:	f200 808c 	bhi.w	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adfa:	d030      	beq.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae02:	f200 8083 	bhi.w	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae12:	d012      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ae14:	e07a      	b.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae16:	4b38      	ldr	r3, [pc, #224]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae22:	d107      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fe0b 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae32:	e340      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae38:	e33d      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae3a:	4b2f      	ldr	r3, [pc, #188]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae46:	d107      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae48:	f107 0318 	add.w	r3, r7, #24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fb51 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae56:	e32e      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae5c:	e32b      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae5e:	4b26      	ldr	r3, [pc, #152]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6a:	d107      	bne.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae6c:	f107 030c 	add.w	r3, r7, #12
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fc93 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7a:	e31c      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae80:	e319      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae82:	4b1d      	ldr	r3, [pc, #116]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae8c:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d10c      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ae98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae9e:	4b16      	ldr	r3, [pc, #88]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	08db      	lsrs	r3, r3, #3
 800aea4:	f003 0303 	and.w	r3, r3, #3
 800aea8:	4a14      	ldr	r2, [pc, #80]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aeaa:	fa22 f303 	lsr.w	r3, r2, r3
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb0:	e01e      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aebe:	d106      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aec6:	d102      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aec8:	4b0d      	ldr	r3, [pc, #52]	; (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aecc:	e010      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aece:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeda:	d106      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aee2:	d102      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee8:	e002      	b.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aeee:	e2e2      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aef0:	e2e1      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aef2:	4b05      	ldr	r3, [pc, #20]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aef6:	e2de      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aef8:	58024400 	.word	0x58024400
 800aefc:	03d09000 	.word	0x03d09000
 800af00:	003d0900 	.word	0x003d0900
 800af04:	017d7840 	.word	0x017d7840
 800af08:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af10:	e2d1      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800af12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af16:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800af1a:	430b      	orrs	r3, r1
 800af1c:	f040 809c 	bne.w	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800af20:	4b93      	ldr	r3, [pc, #588]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800af28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af30:	d054      	beq.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af38:	f200 808b 	bhi.w	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af42:	f000 8083 	beq.w	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af4c:	f200 8081 	bhi.w	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af56:	d02f      	beq.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af5e:	d878      	bhi.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800af60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af62:	2b00      	cmp	r3, #0
 800af64:	d004      	beq.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af6c:	d012      	beq.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800af6e:	e070      	b.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af70:	4b7f      	ldr	r3, [pc, #508]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af7c:	d107      	bne.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fd5e 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af8c:	e293      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af92:	e290      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af94:	4b76      	ldr	r3, [pc, #472]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afa0:	d107      	bne.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afa2:	f107 0318 	add.w	r3, r7, #24
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 faa4 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afb0:	e281      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb6:	e27e      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afb8:	4b6d      	ldr	r3, [pc, #436]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc4:	d107      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afc6:	f107 030c 	add.w	r3, r7, #12
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fbe6 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd4:	e26f      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afda:	e26c      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afdc:	4b64      	ldr	r3, [pc, #400]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afe4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afe6:	4b62      	ldr	r3, [pc, #392]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0304 	and.w	r3, r3, #4
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d10c      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d109      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aff8:	4b5d      	ldr	r3, [pc, #372]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	08db      	lsrs	r3, r3, #3
 800affe:	f003 0303 	and.w	r3, r3, #3
 800b002:	4a5c      	ldr	r2, [pc, #368]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b004:	fa22 f303 	lsr.w	r3, r2, r3
 800b008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b00a:	e01e      	b.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b00c:	4b58      	ldr	r3, [pc, #352]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b018:	d106      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b020:	d102      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b022:	4b55      	ldr	r3, [pc, #340]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b026:	e010      	b.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b028:	4b51      	ldr	r3, [pc, #324]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b034:	d106      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b03c:	d102      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b03e:	4b4f      	ldr	r3, [pc, #316]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b042:	e002      	b.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b048:	e235      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b04a:	e234      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b04c:	4b4c      	ldr	r3, [pc, #304]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b050:	e231      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b056:	e22e      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b060:	430b      	orrs	r3, r1
 800b062:	f040 808f 	bne.w	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b066:	4b42      	ldr	r3, [pc, #264]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b06a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b06e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b076:	d06b      	beq.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b07e:	d874      	bhi.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b086:	d056      	beq.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b08e:	d86c      	bhi.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b096:	d03b      	beq.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b09e:	d864      	bhi.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0a6:	d021      	beq.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0ae:	d85c      	bhi.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d004      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0bc:	d004      	beq.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b0be:	e054      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b0c0:	f7fe fa4c 	bl	800955c <HAL_RCC_GetPCLK1Freq>
 800b0c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0c6:	e1f6      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0c8:	4b29      	ldr	r3, [pc, #164]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0d4:	d107      	bne.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d6:	f107 0318 	add.w	r3, r7, #24
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fa0a 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e4:	e1e7      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ea:	e1e4      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0ec:	4b20      	ldr	r3, [pc, #128]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f8:	d107      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0fa:	f107 030c 	add.w	r3, r7, #12
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fb4c 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b108:	e1d5      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b10e:	e1d2      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b110:	4b17      	ldr	r3, [pc, #92]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d109      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b11c:	4b14      	ldr	r3, [pc, #80]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	08db      	lsrs	r3, r3, #3
 800b122:	f003 0303 	and.w	r3, r3, #3
 800b126:	4a13      	ldr	r2, [pc, #76]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b128:	fa22 f303 	lsr.w	r3, r2, r3
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b12e:	e1c2      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b134:	e1bf      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b136:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b142:	d102      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b148:	e1b5      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b14e:	e1b2      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b15c:	d102      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b15e:	4b07      	ldr	r3, [pc, #28]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b162:	e1a8      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b168:	e1a5      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b16e:	e1a2      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b170:	58024400 	.word	0x58024400
 800b174:	03d09000 	.word	0x03d09000
 800b178:	003d0900 	.word	0x003d0900
 800b17c:	017d7840 	.word	0x017d7840
 800b180:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b184:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b188:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b18c:	430b      	orrs	r3, r1
 800b18e:	d173      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b190:	4b9c      	ldr	r3, [pc, #624]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b198:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1a0:	d02f      	beq.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1a8:	d863      	bhi.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b6:	d012      	beq.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b1b8:	e05b      	b.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ba:	4b92      	ldr	r3, [pc, #584]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1c6:	d107      	bne.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1c8:	f107 0318 	add.w	r3, r7, #24
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 f991 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d6:	e16e      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1dc:	e16b      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1de:	4b89      	ldr	r3, [pc, #548]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ea:	d107      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ec:	f107 030c 	add.w	r3, r7, #12
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 fad3 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1fa:	e15c      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b200:	e159      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b202:	4b80      	ldr	r3, [pc, #512]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b20a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b20c:	4b7d      	ldr	r3, [pc, #500]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0304 	and.w	r3, r3, #4
 800b214:	2b04      	cmp	r3, #4
 800b216:	d10c      	bne.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b21e:	4b79      	ldr	r3, [pc, #484]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	08db      	lsrs	r3, r3, #3
 800b224:	f003 0303 	and.w	r3, r3, #3
 800b228:	4a77      	ldr	r2, [pc, #476]	; (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b22a:	fa22 f303 	lsr.w	r3, r2, r3
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b230:	e01e      	b.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b232:	4b74      	ldr	r3, [pc, #464]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b23e:	d106      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b246:	d102      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b248:	4b70      	ldr	r3, [pc, #448]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b24c:	e010      	b.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b24e:	4b6d      	ldr	r3, [pc, #436]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b25a:	d106      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b262:	d102      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b264:	4b6a      	ldr	r3, [pc, #424]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b268:	e002      	b.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b26e:	e122      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b270:	e121      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b276:	e11e      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b27c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b280:	430b      	orrs	r3, r1
 800b282:	d133      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b284:	4b5f      	ldr	r3, [pc, #380]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b28c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	2b00      	cmp	r3, #0
 800b292:	d004      	beq.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b29a:	d012      	beq.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b29c:	e023      	b.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b29e:	4b59      	ldr	r3, [pc, #356]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2aa:	d107      	bne.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fbc7 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ba:	e0fc      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c0:	e0f9      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2c2:	4b50      	ldr	r3, [pc, #320]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ce:	d107      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d0:	f107 0318 	add.w	r3, r7, #24
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 f90d 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2de:	e0ea      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e4:	e0e7      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ea:	e0e4      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	f040 808d 	bne.w	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b2fa:	4b42      	ldr	r3, [pc, #264]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b302:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b30a:	d06b      	beq.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b312:	d874      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31a:	d056      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b322:	d86c      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b32a:	d03b      	beq.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b332:	d864      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b33a:	d021      	beq.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b342:	d85c      	bhi.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b350:	d004      	beq.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b352:	e054      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b354:	f000 f8b8 	bl	800b4c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b358:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b35a:	e0ac      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b35c:	4b29      	ldr	r3, [pc, #164]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b368:	d107      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b36a:	f107 0318 	add.w	r3, r7, #24
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f8c0 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b378:	e09d      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b37e:	e09a      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b380:	4b20      	ldr	r3, [pc, #128]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b38c:	d107      	bne.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b38e:	f107 030c 	add.w	r3, r7, #12
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fa02 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39c:	e08b      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3a2:	e088      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b3a4:	4b17      	ldr	r3, [pc, #92]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d109      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3b0:	4b14      	ldr	r3, [pc, #80]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	08db      	lsrs	r3, r3, #3
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	4a13      	ldr	r2, [pc, #76]	; (800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c2:	e078      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c8:	e075      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d6:	d102      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b3d8:	4b0c      	ldr	r3, [pc, #48]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3dc:	e06b      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e2:	e068      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3e4:	4b07      	ldr	r3, [pc, #28]	; (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3f0:	d102      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b3f2:	4b07      	ldr	r3, [pc, #28]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f6:	e05e      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3fc:	e05b      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b402:	e058      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b404:	58024400 	.word	0x58024400
 800b408:	03d09000 	.word	0x03d09000
 800b40c:	003d0900 	.word	0x003d0900
 800b410:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b418:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b41c:	430b      	orrs	r3, r1
 800b41e:	d148      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b420:	4b27      	ldr	r3, [pc, #156]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b428:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b430:	d02a      	beq.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b438:	d838      	bhi.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d004      	beq.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b446:	d00d      	beq.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b448:	e030      	b.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b44a:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b456:	d102      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b458:	4b1a      	ldr	r3, [pc, #104]	; (800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b45c:	e02b      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b462:	e028      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b464:	4b16      	ldr	r3, [pc, #88]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b46c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b470:	d107      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fae4 	bl	800ba44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b480:	e019      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b486:	e016      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b488:	4b0d      	ldr	r3, [pc, #52]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b494:	d107      	bne.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b496:	f107 0318 	add.w	r3, r7, #24
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f82a 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a4:	e007      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4aa:	e004      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4b0:	e001      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3740      	adds	r7, #64	; 0x40
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	017d7840 	.word	0x017d7840

0800b4c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b4cc:	f7fe f816 	bl	80094fc <HAL_RCC_GetHCLKFreq>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	091b      	lsrs	r3, r3, #4
 800b4d8:	f003 0307 	and.w	r3, r3, #7
 800b4dc:	4904      	ldr	r1, [pc, #16]	; (800b4f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b4de:	5ccb      	ldrb	r3, [r1, r3]
 800b4e0:	f003 031f 	and.w	r3, r3, #31
 800b4e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	58024400 	.word	0x58024400
 800b4f0:	08010dec 	.word	0x08010dec

0800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b089      	sub	sp, #36	; 0x24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4fc:	4ba1      	ldr	r3, [pc, #644]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b506:	4b9f      	ldr	r3, [pc, #636]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50a:	0b1b      	lsrs	r3, r3, #12
 800b50c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b510:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b512:	4b9c      	ldr	r3, [pc, #624]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b516:	091b      	lsrs	r3, r3, #4
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b51e:	4b99      	ldr	r3, [pc, #612]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	08db      	lsrs	r3, r3, #3
 800b524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	fb02 f303 	mul.w	r3, r2, r3
 800b52e:	ee07 3a90 	vmov	s15, r3
 800b532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b536:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 8111 	beq.w	800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b02      	cmp	r3, #2
 800b546:	f000 8083 	beq.w	800b650 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	f200 80a1 	bhi.w	800b694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d003      	beq.n	800b560 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d056      	beq.n	800b60c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b55e:	e099      	b.n	800b694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b560:	4b88      	ldr	r3, [pc, #544]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0320 	and.w	r3, r3, #32
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d02d      	beq.n	800b5c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b56c:	4b85      	ldr	r3, [pc, #532]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	08db      	lsrs	r3, r3, #3
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	4a84      	ldr	r2, [pc, #528]	; (800b788 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b578:	fa22 f303 	lsr.w	r3, r2, r3
 800b57c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b596:	4b7b      	ldr	r3, [pc, #492]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5c6:	e087      	b.n	800b6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b790 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5da:	4b6a      	ldr	r3, [pc, #424]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e2:	ee07 3a90 	vmov	s15, r3
 800b5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b60a:	e065      	b.n	800b6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	ee07 3a90 	vmov	s15, r3
 800b612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b616:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b61e:	4b59      	ldr	r3, [pc, #356]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b632:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b64a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b64e:	e043      	b.n	800b6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b662:	4b48      	ldr	r3, [pc, #288]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b672:	ed97 6a03 	vldr	s12, [r7, #12]
 800b676:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b692:	e021      	b.n	800b6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a6:	4b37      	ldr	r3, [pc, #220]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b78c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b6d8:	4b2a      	ldr	r3, [pc, #168]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6dc:	0a5b      	lsrs	r3, r3, #9
 800b6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fe:	ee17 2a90 	vmov	r2, s15
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b706:	4b1f      	ldr	r3, [pc, #124]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b71c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b720:	edd7 6a07 	vldr	s13, [r7, #28]
 800b724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72c:	ee17 2a90 	vmov	r2, s15
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b734:	4b13      	ldr	r3, [pc, #76]	; (800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b738:	0e1b      	lsrs	r3, r3, #24
 800b73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b74a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b74e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b75a:	ee17 2a90 	vmov	r2, s15
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b762:	e008      	b.n	800b776 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	609a      	str	r2, [r3, #8]
}
 800b776:	bf00      	nop
 800b778:	3724      	adds	r7, #36	; 0x24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	58024400 	.word	0x58024400
 800b788:	03d09000 	.word	0x03d09000
 800b78c:	46000000 	.word	0x46000000
 800b790:	4c742400 	.word	0x4c742400
 800b794:	4a742400 	.word	0x4a742400
 800b798:	4bbebc20 	.word	0x4bbebc20

0800b79c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b089      	sub	sp, #36	; 0x24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7a4:	4ba1      	ldr	r3, [pc, #644]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a8:	f003 0303 	and.w	r3, r3, #3
 800b7ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b7ae:	4b9f      	ldr	r3, [pc, #636]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b2:	0d1b      	lsrs	r3, r3, #20
 800b7b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b7ba:	4b9c      	ldr	r3, [pc, #624]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b7c6:	4b99      	ldr	r3, [pc, #612]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ca:	08db      	lsrs	r3, r3, #3
 800b7cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	fb02 f303 	mul.w	r3, r2, r3
 800b7d6:	ee07 3a90 	vmov	s15, r3
 800b7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 8111 	beq.w	800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	f000 8083 	beq.w	800b8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	f200 80a1 	bhi.w	800b93c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d056      	beq.n	800b8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b806:	e099      	b.n	800b93c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b808:	4b88      	ldr	r3, [pc, #544]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 0320 	and.w	r3, r3, #32
 800b810:	2b00      	cmp	r3, #0
 800b812:	d02d      	beq.n	800b870 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b814:	4b85      	ldr	r3, [pc, #532]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	08db      	lsrs	r3, r3, #3
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	4a84      	ldr	r2, [pc, #528]	; (800ba30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b820:	fa22 f303 	lsr.w	r3, r2, r3
 800b824:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83e:	4b7b      	ldr	r3, [pc, #492]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b852:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b86a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b86e:	e087      	b.n	800b980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	ee07 3a90 	vmov	s15, r3
 800b876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b882:	4b6a      	ldr	r3, [pc, #424]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b88a:	ee07 3a90 	vmov	s15, r3
 800b88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b892:	ed97 6a03 	vldr	s12, [r7, #12]
 800b896:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8b2:	e065      	b.n	800b980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	ee07 3a90 	vmov	s15, r3
 800b8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c6:	4b59      	ldr	r3, [pc, #356]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8f6:	e043      	b.n	800b980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b902:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b90a:	4b48      	ldr	r3, [pc, #288]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b91e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b92a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b93a:	e021      	b.n	800b980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	ee07 3a90 	vmov	s15, r3
 800b942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b946:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b94e:	4b37      	ldr	r3, [pc, #220]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b962:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b97a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b97e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b980:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b984:	0a5b      	lsrs	r3, r3, #9
 800b986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b99a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b99e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a6:	ee17 2a90 	vmov	r2, s15
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b9ae:	4b1f      	ldr	r3, [pc, #124]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	0c1b      	lsrs	r3, r3, #16
 800b9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b8:	ee07 3a90 	vmov	s15, r3
 800b9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9d4:	ee17 2a90 	vmov	r2, s15
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b9dc:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e0:	0e1b      	lsrs	r3, r3, #24
 800b9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba02:	ee17 2a90 	vmov	r2, s15
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ba0a:	e008      	b.n	800ba1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	609a      	str	r2, [r3, #8]
}
 800ba1e:	bf00      	nop
 800ba20:	3724      	adds	r7, #36	; 0x24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	58024400 	.word	0x58024400
 800ba30:	03d09000 	.word	0x03d09000
 800ba34:	46000000 	.word	0x46000000
 800ba38:	4c742400 	.word	0x4c742400
 800ba3c:	4a742400 	.word	0x4a742400
 800ba40:	4bbebc20 	.word	0x4bbebc20

0800ba44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b089      	sub	sp, #36	; 0x24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba4c:	4ba0      	ldr	r3, [pc, #640]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba50:	f003 0303 	and.w	r3, r3, #3
 800ba54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ba56:	4b9e      	ldr	r3, [pc, #632]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	091b      	lsrs	r3, r3, #4
 800ba5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ba62:	4b9b      	ldr	r3, [pc, #620]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ba6c:	4b98      	ldr	r3, [pc, #608]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba70:	08db      	lsrs	r3, r3, #3
 800ba72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	fb02 f303 	mul.w	r3, r2, r3
 800ba7c:	ee07 3a90 	vmov	s15, r3
 800ba80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 8111 	beq.w	800bcb2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	f000 8083 	beq.w	800bb9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	f200 80a1 	bhi.w	800bbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d056      	beq.n	800bb5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800baac:	e099      	b.n	800bbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baae:	4b88      	ldr	r3, [pc, #544]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d02d      	beq.n	800bb16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800baba:	4b85      	ldr	r3, [pc, #532]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	08db      	lsrs	r3, r3, #3
 800bac0:	f003 0303 	and.w	r3, r3, #3
 800bac4:	4a83      	ldr	r2, [pc, #524]	; (800bcd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bac6:	fa22 f303 	lsr.w	r3, r2, r3
 800baca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	ee07 3a90 	vmov	s15, r3
 800bad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bae4:	4b7a      	ldr	r3, [pc, #488]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baec:	ee07 3a90 	vmov	s15, r3
 800baf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bcd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bafc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb14:	e087      	b.n	800bc26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	ee07 3a90 	vmov	s15, r3
 800bb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bcdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb28:	4b69      	ldr	r3, [pc, #420]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb38:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bcd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb58:	e065      	b.n	800bc26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	ee07 3a90 	vmov	s15, r3
 800bb60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bce0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bb68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6c:	4b58      	ldr	r3, [pc, #352]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb74:	ee07 3a90 	vmov	s15, r3
 800bb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb80:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bcd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb9c:	e043      	b.n	800bc26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	ee07 3a90 	vmov	s15, r3
 800bba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bce4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bbac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbb0:	4b47      	ldr	r3, [pc, #284]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbc4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bcd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbe0:	e021      	b.n	800bc26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	ee07 3a90 	vmov	s15, r3
 800bbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bcdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbf4:	4b36      	ldr	r3, [pc, #216]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc04:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc08:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bcd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc26:	4b2a      	ldr	r3, [pc, #168]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2a:	0a5b      	lsrs	r3, r3, #9
 800bc2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc30:	ee07 3a90 	vmov	s15, r3
 800bc34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc40:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4c:	ee17 2a90 	vmov	r2, s15
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc54:	4b1e      	ldr	r3, [pc, #120]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc58:	0c1b      	lsrs	r3, r3, #16
 800bc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7a:	ee17 2a90 	vmov	r2, s15
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc82:	4b13      	ldr	r3, [pc, #76]	; (800bcd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc86:	0e1b      	lsrs	r3, r3, #24
 800bc88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca8:	ee17 2a90 	vmov	r2, s15
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bcb0:	e008      	b.n	800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	609a      	str	r2, [r3, #8]
}
 800bcc4:	bf00      	nop
 800bcc6:	3724      	adds	r7, #36	; 0x24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	58024400 	.word	0x58024400
 800bcd4:	03d09000 	.word	0x03d09000
 800bcd8:	46000000 	.word	0x46000000
 800bcdc:	4c742400 	.word	0x4c742400
 800bce0:	4a742400 	.word	0x4a742400
 800bce4:	4bbebc20 	.word	0x4bbebc20

0800bce8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcf6:	4b53      	ldr	r3, [pc, #332]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfa:	f003 0303 	and.w	r3, r3, #3
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	d101      	bne.n	800bd06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e099      	b.n	800be3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd06:	4b4f      	ldr	r3, [pc, #316]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a4e      	ldr	r2, [pc, #312]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd12:	f7f6 fd71 	bl	80027f8 <HAL_GetTick>
 800bd16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd18:	e008      	b.n	800bd2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd1a:	f7f6 fd6d 	bl	80027f8 <HAL_GetTick>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d901      	bls.n	800bd2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e086      	b.n	800be3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd2c:	4b45      	ldr	r3, [pc, #276]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1f0      	bne.n	800bd1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd38:	4b42      	ldr	r3, [pc, #264]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	031b      	lsls	r3, r3, #12
 800bd46:	493f      	ldr	r1, [pc, #252]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	628b      	str	r3, [r1, #40]	; 0x28
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	025b      	lsls	r3, r3, #9
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	431a      	orrs	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	041b      	lsls	r3, r3, #16
 800bd6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	061b      	lsls	r3, r3, #24
 800bd78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd7c:	4931      	ldr	r1, [pc, #196]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd82:	4b30      	ldr	r3, [pc, #192]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	492d      	ldr	r1, [pc, #180]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd94:	4b2b      	ldr	r3, [pc, #172]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	f023 0220 	bic.w	r2, r3, #32
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	4928      	ldr	r1, [pc, #160]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bda6:	4b27      	ldr	r3, [pc, #156]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	4a26      	ldr	r2, [pc, #152]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdac:	f023 0310 	bic.w	r3, r3, #16
 800bdb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bdb2:	4b24      	ldr	r3, [pc, #144]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdb6:	4b24      	ldr	r3, [pc, #144]	; (800be48 <RCCEx_PLL2_Config+0x160>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	69d2      	ldr	r2, [r2, #28]
 800bdbe:	00d2      	lsls	r2, r2, #3
 800bdc0:	4920      	ldr	r1, [pc, #128]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bdc6:	4b1f      	ldr	r3, [pc, #124]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	4a1e      	ldr	r2, [pc, #120]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdcc:	f043 0310 	orr.w	r3, r3, #16
 800bdd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d106      	bne.n	800bde6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bdd8:	4b1a      	ldr	r3, [pc, #104]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	4a19      	ldr	r2, [pc, #100]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bde2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bde4:	e00f      	b.n	800be06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d106      	bne.n	800bdfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bdec:	4b15      	ldr	r3, [pc, #84]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	4a14      	ldr	r2, [pc, #80]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdf8:	e005      	b.n	800be06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdfa:	4b12      	ldr	r3, [pc, #72]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800bdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfe:	4a11      	ldr	r2, [pc, #68]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800be00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a0e      	ldr	r2, [pc, #56]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800be0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be12:	f7f6 fcf1 	bl	80027f8 <HAL_GetTick>
 800be16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be18:	e008      	b.n	800be2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be1a:	f7f6 fced 	bl	80027f8 <HAL_GetTick>
 800be1e:	4602      	mov	r2, r0
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	2b02      	cmp	r3, #2
 800be26:	d901      	bls.n	800be2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be28:	2303      	movs	r3, #3
 800be2a:	e006      	b.n	800be3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <RCCEx_PLL2_Config+0x15c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0f0      	beq.n	800be1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	58024400 	.word	0x58024400
 800be48:	ffff0007 	.word	0xffff0007

0800be4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be5a:	4b53      	ldr	r3, [pc, #332]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800be5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5e:	f003 0303 	and.w	r3, r3, #3
 800be62:	2b03      	cmp	r3, #3
 800be64:	d101      	bne.n	800be6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e099      	b.n	800bf9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be6a:	4b4f      	ldr	r3, [pc, #316]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a4e      	ldr	r2, [pc, #312]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800be70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be76:	f7f6 fcbf 	bl	80027f8 <HAL_GetTick>
 800be7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be7c:	e008      	b.n	800be90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be7e:	f7f6 fcbb 	bl	80027f8 <HAL_GetTick>
 800be82:	4602      	mov	r2, r0
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d901      	bls.n	800be90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e086      	b.n	800bf9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be90:	4b45      	ldr	r3, [pc, #276]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1f0      	bne.n	800be7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be9c:	4b42      	ldr	r3, [pc, #264]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800be9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	051b      	lsls	r3, r3, #20
 800beaa:	493f      	ldr	r1, [pc, #252]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800beac:	4313      	orrs	r3, r2
 800beae:	628b      	str	r3, [r1, #40]	; 0x28
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	025b      	lsls	r3, r3, #9
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	431a      	orrs	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	3b01      	subs	r3, #1
 800becc:	041b      	lsls	r3, r3, #16
 800bece:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	3b01      	subs	r3, #1
 800beda:	061b      	lsls	r3, r3, #24
 800bedc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bee0:	4931      	ldr	r1, [pc, #196]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bee2:	4313      	orrs	r3, r2
 800bee4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bee6:	4b30      	ldr	r3, [pc, #192]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	492d      	ldr	r1, [pc, #180]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bef8:	4b2b      	ldr	r3, [pc, #172]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	4928      	ldr	r1, [pc, #160]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf0a:	4b27      	ldr	r3, [pc, #156]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	4a26      	ldr	r2, [pc, #152]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf16:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf1a:	4b24      	ldr	r3, [pc, #144]	; (800bfac <RCCEx_PLL3_Config+0x160>)
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	69d2      	ldr	r2, [r2, #28]
 800bf22:	00d2      	lsls	r2, r2, #3
 800bf24:	4920      	ldr	r1, [pc, #128]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf26:	4313      	orrs	r3, r2
 800bf28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf2a:	4b1f      	ldr	r3, [pc, #124]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2e:	4a1e      	ldr	r2, [pc, #120]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d106      	bne.n	800bf4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf3c:	4b1a      	ldr	r3, [pc, #104]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	4a19      	ldr	r2, [pc, #100]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bf46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf48:	e00f      	b.n	800bf6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d106      	bne.n	800bf5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf50:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf54:	4a14      	ldr	r2, [pc, #80]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf5c:	e005      	b.n	800bf6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf5e:	4b12      	ldr	r3, [pc, #72]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf62:	4a11      	ldr	r2, [pc, #68]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf6a:	4b0f      	ldr	r3, [pc, #60]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a0e      	ldr	r2, [pc, #56]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf76:	f7f6 fc3f 	bl	80027f8 <HAL_GetTick>
 800bf7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf7c:	e008      	b.n	800bf90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf7e:	f7f6 fc3b 	bl	80027f8 <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d901      	bls.n	800bf90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e006      	b.n	800bf9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf90:	4b05      	ldr	r3, [pc, #20]	; (800bfa8 <RCCEx_PLL3_Config+0x15c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0f0      	beq.n	800bf7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	58024400 	.word	0x58024400
 800bfac:	ffff0007 	.word	0xffff0007

0800bfb0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e10f      	b.n	800c1e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a87      	ldr	r2, [pc, #540]	; (800c1ec <HAL_SPI_Init+0x23c>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d00f      	beq.n	800bff2 <HAL_SPI_Init+0x42>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a86      	ldr	r2, [pc, #536]	; (800c1f0 <HAL_SPI_Init+0x240>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00a      	beq.n	800bff2 <HAL_SPI_Init+0x42>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a84      	ldr	r2, [pc, #528]	; (800c1f4 <HAL_SPI_Init+0x244>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d005      	beq.n	800bff2 <HAL_SPI_Init+0x42>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	2b0f      	cmp	r3, #15
 800bfec:	d901      	bls.n	800bff2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e0f7      	b.n	800c1e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fc12 	bl	800c81c <SPI_GetPacketSize>
 800bff8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a7b      	ldr	r2, [pc, #492]	; (800c1ec <HAL_SPI_Init+0x23c>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d00c      	beq.n	800c01e <HAL_SPI_Init+0x6e>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a79      	ldr	r2, [pc, #484]	; (800c1f0 <HAL_SPI_Init+0x240>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d007      	beq.n	800c01e <HAL_SPI_Init+0x6e>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a78      	ldr	r2, [pc, #480]	; (800c1f4 <HAL_SPI_Init+0x244>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d002      	beq.n	800c01e <HAL_SPI_Init+0x6e>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	d811      	bhi.n	800c042 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c022:	4a72      	ldr	r2, [pc, #456]	; (800c1ec <HAL_SPI_Init+0x23c>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d009      	beq.n	800c03c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a70      	ldr	r2, [pc, #448]	; (800c1f0 <HAL_SPI_Init+0x240>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d004      	beq.n	800c03c <HAL_SPI_Init+0x8c>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a6f      	ldr	r2, [pc, #444]	; (800c1f4 <HAL_SPI_Init+0x244>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d104      	bne.n	800c046 <HAL_SPI_Init+0x96>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b10      	cmp	r3, #16
 800c040:	d901      	bls.n	800c046 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e0cd      	b.n	800c1e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7f5 ffe8 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2202      	movs	r2, #2
 800c064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0201 	bic.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c082:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c08c:	d119      	bne.n	800c0c2 <HAL_SPI_Init+0x112>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c096:	d103      	bne.n	800c0a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d008      	beq.n	800c0b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10c      	bne.n	800c0c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c0ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0b0:	d107      	bne.n	800c0c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c0c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00f      	beq.n	800c0ee <HAL_SPI_Init+0x13e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	2b06      	cmp	r3, #6
 800c0d4:	d90b      	bls.n	800c0ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	e007      	b.n	800c0fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69da      	ldr	r2, [r3, #28]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	431a      	orrs	r2, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	431a      	orrs	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c110:	ea42 0103 	orr.w	r1, r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68da      	ldr	r2, [r3, #12]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	430a      	orrs	r2, r1
 800c11e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	431a      	orrs	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	431a      	orrs	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	695b      	ldr	r3, [r3, #20]
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	431a      	orrs	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	431a      	orrs	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c15e:	ea42 0103 	orr.w	r1, r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	430a      	orrs	r2, r1
 800c16c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d113      	bne.n	800c19e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c188:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c19c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f022 0201 	bic.w	r2, r2, #1
 800c1ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00a      	beq.n	800c1d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	40013000 	.word	0x40013000
 800c1f0:	40003800 	.word	0x40003800
 800c1f4:	40003c00 	.word	0x40003c00

0800c1f8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	603b      	str	r3, [r7, #0]
 800c204:	4613      	mov	r3, r2
 800c206:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20c:	095b      	lsrs	r3, r3, #5
 800c20e:	b29b      	uxth	r3, r3
 800c210:	3301      	adds	r3, #1
 800c212:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3330      	adds	r3, #48	; 0x30
 800c21a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c21c:	f7f6 faec 	bl	80027f8 <HAL_GetTick>
 800c220:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d001      	beq.n	800c232 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c22e:	2302      	movs	r3, #2
 800c230:	e250      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <HAL_SPI_Receive+0x46>
 800c238:	88fb      	ldrh	r3, [r7, #6]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e248      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d101      	bne.n	800c250 <HAL_SPI_Receive+0x58>
 800c24c:	2302      	movs	r3, #2
 800c24e:	e241      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2204      	movs	r2, #4
 800c25c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	88fa      	ldrh	r2, [r7, #6]
 800c272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	88fa      	ldrh	r2, [r7, #6]
 800c27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c2a8:	d108      	bne.n	800c2bc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	e009      	b.n	800c2d0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c2ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	4b95      	ldr	r3, [pc, #596]	; (800c52c <HAL_SPI_Receive+0x334>)
 800c2d8:	4013      	ands	r3, r2
 800c2da:	88f9      	ldrh	r1, [r7, #6]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	6812      	ldr	r2, [r2, #0]
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f042 0201 	orr.w	r2, r2, #1
 800c2f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2fc:	d107      	bne.n	800c30e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c30c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	2b0f      	cmp	r3, #15
 800c314:	d96c      	bls.n	800c3f0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c316:	e064      	b.n	800c3e2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d114      	bne.n	800c358 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c336:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c338:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c33e:	1d1a      	adds	r2, r3, #4
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	3b01      	subs	r3, #1
 800c34e:	b29a      	uxth	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c356:	e044      	b.n	800c3e2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c35e:	b29b      	uxth	r3, r3
 800c360:	8bfa      	ldrh	r2, [r7, #30]
 800c362:	429a      	cmp	r2, r3
 800c364:	d919      	bls.n	800c39a <HAL_SPI_Receive+0x1a2>
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d014      	beq.n	800c39a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c37a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c380:	1d1a      	adds	r2, r3, #4
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	3b01      	subs	r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c398:	e023      	b.n	800c3e2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c39a:	f7f6 fa2d 	bl	80027f8 <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d803      	bhi.n	800c3b2 <HAL_SPI_Receive+0x1ba>
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3b0:	d102      	bne.n	800c3b8 <HAL_SPI_Receive+0x1c0>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d114      	bne.n	800c3e2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f98f 	bl	800c6dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e178      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d194      	bne.n	800c318 <HAL_SPI_Receive+0x120>
 800c3ee:	e15e      	b.n	800c6ae <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	f240 8153 	bls.w	800c6a0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c3fa:	e08f      	b.n	800c51c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d114      	bne.n	800c43c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	8812      	ldrh	r2, [r2, #0]
 800c41a:	b292      	uxth	r2, r2
 800c41c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c422:	1c9a      	adds	r2, r3, #2
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	b29a      	uxth	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c43a:	e06f      	b.n	800c51c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c442:	b29b      	uxth	r3, r3
 800c444:	8bfa      	ldrh	r2, [r7, #30]
 800c446:	429a      	cmp	r2, r3
 800c448:	d924      	bls.n	800c494 <HAL_SPI_Receive+0x29c>
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d01f      	beq.n	800c494 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	8812      	ldrh	r2, [r2, #0]
 800c45c:	b292      	uxth	r2, r2
 800c45e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c464:	1c9a      	adds	r2, r3, #2
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	8812      	ldrh	r2, [r2, #0]
 800c472:	b292      	uxth	r2, r2
 800c474:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c47a:	1c9a      	adds	r2, r3, #2
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c486:	b29b      	uxth	r3, r3
 800c488:	3b02      	subs	r3, #2
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c492:	e043      	b.n	800c51c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d119      	bne.n	800c4d4 <HAL_SPI_Receive+0x2dc>
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d014      	beq.n	800c4d4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	8812      	ldrh	r2, [r2, #0]
 800c4b2:	b292      	uxth	r2, r2
 800c4b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ba:	1c9a      	adds	r2, r3, #2
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c4d2:	e023      	b.n	800c51c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4d4:	f7f6 f990 	bl	80027f8 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d803      	bhi.n	800c4ec <HAL_SPI_Receive+0x2f4>
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ea:	d102      	bne.n	800c4f2 <HAL_SPI_Receive+0x2fa>
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d114      	bne.n	800c51c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 f8f2 	bl	800c6dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e0db      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c522:	b29b      	uxth	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	f47f af69 	bne.w	800c3fc <HAL_SPI_Receive+0x204>
 800c52a:	e0c0      	b.n	800c6ae <HAL_SPI_Receive+0x4b6>
 800c52c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b01      	cmp	r3, #1
 800c544:	d117      	bne.n	800c576 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c552:	7812      	ldrb	r2, [r2, #0]
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c568:	b29b      	uxth	r3, r3
 800c56a:	3b01      	subs	r3, #1
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c574:	e094      	b.n	800c6a0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	8bfa      	ldrh	r2, [r7, #30]
 800c580:	429a      	cmp	r2, r3
 800c582:	d946      	bls.n	800c612 <HAL_SPI_Receive+0x41a>
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d041      	beq.n	800c612 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5a4:	1c5a      	adds	r2, r3, #1
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5b6:	7812      	ldrb	r2, [r2, #0]
 800c5b8:	b2d2      	uxtb	r2, r2
 800c5ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5d2:	7812      	ldrb	r2, [r2, #0]
 800c5d4:	b2d2      	uxtb	r2, r2
 800c5d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5ee:	7812      	ldrb	r2, [r2, #0]
 800c5f0:	b2d2      	uxtb	r2, r2
 800c5f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c604:	b29b      	uxth	r3, r3
 800c606:	3b04      	subs	r3, #4
 800c608:	b29a      	uxth	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c610:	e046      	b.n	800c6a0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c618:	b29b      	uxth	r3, r3
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d81c      	bhi.n	800c658 <HAL_SPI_Receive+0x460>
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c624:	2b00      	cmp	r3, #0
 800c626:	d017      	beq.n	800c658 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c634:	7812      	ldrb	r2, [r2, #0]
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	3b01      	subs	r3, #1
 800c64e:	b29a      	uxth	r2, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c656:	e023      	b.n	800c6a0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c658:	f7f6 f8ce 	bl	80027f8 <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	429a      	cmp	r2, r3
 800c666:	d803      	bhi.n	800c670 <HAL_SPI_Receive+0x478>
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c66e:	d102      	bne.n	800c676 <HAL_SPI_Receive+0x47e>
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d114      	bne.n	800c6a0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f000 f830 	bl	800c6dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e019      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f47f af41 	bne.w	800c530 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 f814 	bl	800c6dc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e000      	b.n	800c6d4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
  }
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3720      	adds	r7, #32
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	699a      	ldr	r2, [r3, #24]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f042 0208 	orr.w	r2, r2, #8
 800c6fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	699a      	ldr	r2, [r3, #24]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f042 0210 	orr.w	r2, r2, #16
 800c70a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0201 	bic.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6919      	ldr	r1, [r3, #16]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	4b3c      	ldr	r3, [pc, #240]	; (800c818 <SPI_CloseTransfer+0x13c>)
 800c728:	400b      	ands	r3, r1
 800c72a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c73a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b04      	cmp	r3, #4
 800c746:	d014      	beq.n	800c772 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f003 0320 	and.w	r3, r3, #32
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00f      	beq.n	800c772 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c758:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	699a      	ldr	r2, [r3, #24]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f042 0220 	orr.w	r2, r2, #32
 800c770:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d014      	beq.n	800c7a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00f      	beq.n	800c7a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c78e:	f043 0204 	orr.w	r2, r3, #4
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	699a      	ldr	r2, [r3, #24]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00f      	beq.n	800c7d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7b8:	f043 0201 	orr.w	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	699a      	ldr	r2, [r3, #24]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00f      	beq.n	800c7fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7e2:	f043 0208 	orr.w	r2, r3, #8
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	699a      	ldr	r2, [r3, #24]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c80c:	bf00      	nop
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	fffffc90 	.word	0xfffffc90

0800c81c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c828:	095b      	lsrs	r3, r3, #5
 800c82a:	3301      	adds	r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	3301      	adds	r3, #1
 800c834:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	3307      	adds	r3, #7
 800c83a:	08db      	lsrs	r3, r3, #3
 800c83c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	fb02 f303 	mul.w	r3, r2, r3
}
 800c846:	4618      	mov	r0, r3
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d101      	bne.n	800c864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	e049      	b.n	800c8f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d106      	bne.n	800c87e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7f5 fccf 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2202      	movs	r2, #2
 800c882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	3304      	adds	r3, #4
 800c88e:	4619      	mov	r1, r3
 800c890:	4610      	mov	r0, r2
 800c892:	f000 ffad 	bl	800d7f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b01      	cmp	r3, #1
 800c912:	d001      	beq.n	800c918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e04c      	b.n	800c9b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4a26      	ldr	r2, [pc, #152]	; (800c9c0 <HAL_TIM_Base_Start+0xc0>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d022      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c932:	d01d      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a22      	ldr	r2, [pc, #136]	; (800c9c4 <HAL_TIM_Base_Start+0xc4>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d018      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a21      	ldr	r2, [pc, #132]	; (800c9c8 <HAL_TIM_Base_Start+0xc8>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d013      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a1f      	ldr	r2, [pc, #124]	; (800c9cc <HAL_TIM_Base_Start+0xcc>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d00e      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a1e      	ldr	r2, [pc, #120]	; (800c9d0 <HAL_TIM_Base_Start+0xd0>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d009      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1c      	ldr	r2, [pc, #112]	; (800c9d4 <HAL_TIM_Base_Start+0xd4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d004      	beq.n	800c970 <HAL_TIM_Base_Start+0x70>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a1b      	ldr	r2, [pc, #108]	; (800c9d8 <HAL_TIM_Base_Start+0xd8>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d115      	bne.n	800c99c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <HAL_TIM_Base_Start+0xdc>)
 800c978:	4013      	ands	r3, r2
 800c97a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b06      	cmp	r3, #6
 800c980:	d015      	beq.n	800c9ae <HAL_TIM_Base_Start+0xae>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c988:	d011      	beq.n	800c9ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f042 0201 	orr.w	r2, r2, #1
 800c998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c99a:	e008      	b.n	800c9ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f042 0201 	orr.w	r2, r2, #1
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	e000      	b.n	800c9b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	40010000 	.word	0x40010000
 800c9c4:	40000400 	.word	0x40000400
 800c9c8:	40000800 	.word	0x40000800
 800c9cc:	40000c00 	.word	0x40000c00
 800c9d0:	40010400 	.word	0x40010400
 800c9d4:	40001800 	.word	0x40001800
 800c9d8:	40014000 	.word	0x40014000
 800c9dc:	00010007 	.word	0x00010007

0800c9e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6a1a      	ldr	r2, [r3, #32]
 800c9ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10f      	bne.n	800ca18 <HAL_TIM_Base_Stop+0x38>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6a1a      	ldr	r2, [r3, #32]
 800c9fe:	f240 4344 	movw	r3, #1092	; 0x444
 800ca02:	4013      	ands	r3, r2
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d107      	bne.n	800ca18 <HAL_TIM_Base_Stop+0x38>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f022 0201 	bic.w	r2, r2, #1
 800ca16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
	...

0800ca30 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d109      	bne.n	800ca58 <HAL_TIM_OC_Start_IT+0x28>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	bf14      	ite	ne
 800ca50:	2301      	movne	r3, #1
 800ca52:	2300      	moveq	r3, #0
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	e03c      	b.n	800cad2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d109      	bne.n	800ca72 <HAL_TIM_OC_Start_IT+0x42>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	bf14      	ite	ne
 800ca6a:	2301      	movne	r3, #1
 800ca6c:	2300      	moveq	r3, #0
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	e02f      	b.n	800cad2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d109      	bne.n	800ca8c <HAL_TIM_OC_Start_IT+0x5c>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	bf14      	ite	ne
 800ca84:	2301      	movne	r3, #1
 800ca86:	2300      	moveq	r3, #0
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	e022      	b.n	800cad2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b0c      	cmp	r3, #12
 800ca90:	d109      	bne.n	800caa6 <HAL_TIM_OC_Start_IT+0x76>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	bf14      	ite	ne
 800ca9e:	2301      	movne	r3, #1
 800caa0:	2300      	moveq	r3, #0
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	e015      	b.n	800cad2 <HAL_TIM_OC_Start_IT+0xa2>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b10      	cmp	r3, #16
 800caaa:	d109      	bne.n	800cac0 <HAL_TIM_OC_Start_IT+0x90>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	bf14      	ite	ne
 800cab8:	2301      	movne	r3, #1
 800caba:	2300      	moveq	r3, #0
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	e008      	b.n	800cad2 <HAL_TIM_OC_Start_IT+0xa2>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b01      	cmp	r3, #1
 800caca:	bf14      	ite	ne
 800cacc:	2301      	movne	r3, #1
 800cace:	2300      	moveq	r3, #0
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e0ec      	b.n	800ccb4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d104      	bne.n	800caea <HAL_TIM_OC_Start_IT+0xba>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cae8:	e023      	b.n	800cb32 <HAL_TIM_OC_Start_IT+0x102>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b04      	cmp	r3, #4
 800caee:	d104      	bne.n	800cafa <HAL_TIM_OC_Start_IT+0xca>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2202      	movs	r2, #2
 800caf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800caf8:	e01b      	b.n	800cb32 <HAL_TIM_OC_Start_IT+0x102>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b08      	cmp	r3, #8
 800cafe:	d104      	bne.n	800cb0a <HAL_TIM_OC_Start_IT+0xda>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb08:	e013      	b.n	800cb32 <HAL_TIM_OC_Start_IT+0x102>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b0c      	cmp	r3, #12
 800cb0e:	d104      	bne.n	800cb1a <HAL_TIM_OC_Start_IT+0xea>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb18:	e00b      	b.n	800cb32 <HAL_TIM_OC_Start_IT+0x102>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b10      	cmp	r3, #16
 800cb1e:	d104      	bne.n	800cb2a <HAL_TIM_OC_Start_IT+0xfa>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb28:	e003      	b.n	800cb32 <HAL_TIM_OC_Start_IT+0x102>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b0c      	cmp	r3, #12
 800cb36:	d841      	bhi.n	800cbbc <HAL_TIM_OC_Start_IT+0x18c>
 800cb38:	a201      	add	r2, pc, #4	; (adr r2, 800cb40 <HAL_TIM_OC_Start_IT+0x110>)
 800cb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3e:	bf00      	nop
 800cb40:	0800cb75 	.word	0x0800cb75
 800cb44:	0800cbbd 	.word	0x0800cbbd
 800cb48:	0800cbbd 	.word	0x0800cbbd
 800cb4c:	0800cbbd 	.word	0x0800cbbd
 800cb50:	0800cb87 	.word	0x0800cb87
 800cb54:	0800cbbd 	.word	0x0800cbbd
 800cb58:	0800cbbd 	.word	0x0800cbbd
 800cb5c:	0800cbbd 	.word	0x0800cbbd
 800cb60:	0800cb99 	.word	0x0800cb99
 800cb64:	0800cbbd 	.word	0x0800cbbd
 800cb68:	0800cbbd 	.word	0x0800cbbd
 800cb6c:	0800cbbd 	.word	0x0800cbbd
 800cb70:	0800cbab 	.word	0x0800cbab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68da      	ldr	r2, [r3, #12]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0202 	orr.w	r2, r2, #2
 800cb82:	60da      	str	r2, [r3, #12]
      break;
 800cb84:	e01d      	b.n	800cbc2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68da      	ldr	r2, [r3, #12]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f042 0204 	orr.w	r2, r2, #4
 800cb94:	60da      	str	r2, [r3, #12]
      break;
 800cb96:	e014      	b.n	800cbc2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68da      	ldr	r2, [r3, #12]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f042 0208 	orr.w	r2, r2, #8
 800cba6:	60da      	str	r2, [r3, #12]
      break;
 800cba8:	e00b      	b.n	800cbc2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68da      	ldr	r2, [r3, #12]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f042 0210 	orr.w	r2, r2, #16
 800cbb8:	60da      	str	r2, [r3, #12]
      break;
 800cbba:	e002      	b.n	800cbc2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc0:	bf00      	nop
  }

  if (status == HAL_OK)
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d174      	bne.n	800ccb2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f001 fa27 	bl	800e024 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a38      	ldr	r2, [pc, #224]	; (800ccbc <HAL_TIM_OC_Start_IT+0x28c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d013      	beq.n	800cc08 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a36      	ldr	r2, [pc, #216]	; (800ccc0 <HAL_TIM_OC_Start_IT+0x290>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d00e      	beq.n	800cc08 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a35      	ldr	r2, [pc, #212]	; (800ccc4 <HAL_TIM_OC_Start_IT+0x294>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d009      	beq.n	800cc08 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a33      	ldr	r2, [pc, #204]	; (800ccc8 <HAL_TIM_OC_Start_IT+0x298>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d004      	beq.n	800cc08 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a32      	ldr	r2, [pc, #200]	; (800cccc <HAL_TIM_OC_Start_IT+0x29c>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d101      	bne.n	800cc0c <HAL_TIM_OC_Start_IT+0x1dc>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e000      	b.n	800cc0e <HAL_TIM_OC_Start_IT+0x1de>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d007      	beq.n	800cc22 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a25      	ldr	r2, [pc, #148]	; (800ccbc <HAL_TIM_OC_Start_IT+0x28c>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d022      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc34:	d01d      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a25      	ldr	r2, [pc, #148]	; (800ccd0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d018      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a23      	ldr	r2, [pc, #140]	; (800ccd4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d013      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00e      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a19      	ldr	r2, [pc, #100]	; (800ccc0 <HAL_TIM_OC_Start_IT+0x290>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d009      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a1e      	ldr	r2, [pc, #120]	; (800ccdc <HAL_TIM_OC_Start_IT+0x2ac>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d004      	beq.n	800cc72 <HAL_TIM_OC_Start_IT+0x242>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a15      	ldr	r2, [pc, #84]	; (800ccc4 <HAL_TIM_OC_Start_IT+0x294>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d115      	bne.n	800cc9e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689a      	ldr	r2, [r3, #8]
 800cc78:	4b19      	ldr	r3, [pc, #100]	; (800cce0 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b06      	cmp	r3, #6
 800cc82:	d015      	beq.n	800ccb0 <HAL_TIM_OC_Start_IT+0x280>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc8a:	d011      	beq.n	800ccb0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f042 0201 	orr.w	r2, r2, #1
 800cc9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc9c:	e008      	b.n	800ccb0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f042 0201 	orr.w	r2, r2, #1
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	e000      	b.n	800ccb2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccb0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	40010000 	.word	0x40010000
 800ccc0:	40010400 	.word	0x40010400
 800ccc4:	40014000 	.word	0x40014000
 800ccc8:	40014400 	.word	0x40014400
 800cccc:	40014800 	.word	0x40014800
 800ccd0:	40000400 	.word	0x40000400
 800ccd4:	40000800 	.word	0x40000800
 800ccd8:	40000c00 	.word	0x40000c00
 800ccdc:	40001800 	.word	0x40001800
 800cce0:	00010007 	.word	0x00010007

0800cce4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b0c      	cmp	r3, #12
 800ccf6:	d841      	bhi.n	800cd7c <HAL_TIM_OC_Stop_IT+0x98>
 800ccf8:	a201      	add	r2, pc, #4	; (adr r2, 800cd00 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ccfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfe:	bf00      	nop
 800cd00:	0800cd35 	.word	0x0800cd35
 800cd04:	0800cd7d 	.word	0x0800cd7d
 800cd08:	0800cd7d 	.word	0x0800cd7d
 800cd0c:	0800cd7d 	.word	0x0800cd7d
 800cd10:	0800cd47 	.word	0x0800cd47
 800cd14:	0800cd7d 	.word	0x0800cd7d
 800cd18:	0800cd7d 	.word	0x0800cd7d
 800cd1c:	0800cd7d 	.word	0x0800cd7d
 800cd20:	0800cd59 	.word	0x0800cd59
 800cd24:	0800cd7d 	.word	0x0800cd7d
 800cd28:	0800cd7d 	.word	0x0800cd7d
 800cd2c:	0800cd7d 	.word	0x0800cd7d
 800cd30:	0800cd6b 	.word	0x0800cd6b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68da      	ldr	r2, [r3, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 0202 	bic.w	r2, r2, #2
 800cd42:	60da      	str	r2, [r3, #12]
      break;
 800cd44:	e01d      	b.n	800cd82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0204 	bic.w	r2, r2, #4
 800cd54:	60da      	str	r2, [r3, #12]
      break;
 800cd56:	e014      	b.n	800cd82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68da      	ldr	r2, [r3, #12]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f022 0208 	bic.w	r2, r2, #8
 800cd66:	60da      	str	r2, [r3, #12]
      break;
 800cd68:	e00b      	b.n	800cd82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68da      	ldr	r2, [r3, #12]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f022 0210 	bic.w	r2, r2, #16
 800cd78:	60da      	str	r2, [r3, #12]
      break;
 800cd7a:	e002      	b.n	800cd82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd80:	bf00      	nop
  }

  if (status == HAL_OK)
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 8081 	bne.w	800ce8c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f001 f946 	bl	800e024 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a3e      	ldr	r2, [pc, #248]	; (800ce98 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d013      	beq.n	800cdca <HAL_TIM_OC_Stop_IT+0xe6>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a3d      	ldr	r2, [pc, #244]	; (800ce9c <HAL_TIM_OC_Stop_IT+0x1b8>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d00e      	beq.n	800cdca <HAL_TIM_OC_Stop_IT+0xe6>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a3b      	ldr	r2, [pc, #236]	; (800cea0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d009      	beq.n	800cdca <HAL_TIM_OC_Stop_IT+0xe6>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a3a      	ldr	r2, [pc, #232]	; (800cea4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d004      	beq.n	800cdca <HAL_TIM_OC_Stop_IT+0xe6>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a38      	ldr	r2, [pc, #224]	; (800cea8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d101      	bne.n	800cdce <HAL_TIM_OC_Stop_IT+0xea>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <HAL_TIM_OC_Stop_IT+0xec>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d017      	beq.n	800ce04 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6a1a      	ldr	r2, [r3, #32]
 800cdda:	f241 1311 	movw	r3, #4369	; 0x1111
 800cdde:	4013      	ands	r3, r2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10f      	bne.n	800ce04 <HAL_TIM_OC_Stop_IT+0x120>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6a1a      	ldr	r2, [r3, #32]
 800cdea:	f240 4344 	movw	r3, #1092	; 0x444
 800cdee:	4013      	ands	r3, r2
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d107      	bne.n	800ce04 <HAL_TIM_OC_Stop_IT+0x120>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6a1a      	ldr	r2, [r3, #32]
 800ce0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10f      	bne.n	800ce34 <HAL_TIM_OC_Stop_IT+0x150>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6a1a      	ldr	r2, [r3, #32]
 800ce1a:	f240 4344 	movw	r3, #1092	; 0x444
 800ce1e:	4013      	ands	r3, r2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d107      	bne.n	800ce34 <HAL_TIM_OC_Stop_IT+0x150>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f022 0201 	bic.w	r2, r2, #1
 800ce32:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d104      	bne.n	800ce44 <HAL_TIM_OC_Stop_IT+0x160>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce42:	e023      	b.n	800ce8c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b04      	cmp	r3, #4
 800ce48:	d104      	bne.n	800ce54 <HAL_TIM_OC_Stop_IT+0x170>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce52:	e01b      	b.n	800ce8c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2b08      	cmp	r3, #8
 800ce58:	d104      	bne.n	800ce64 <HAL_TIM_OC_Stop_IT+0x180>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce62:	e013      	b.n	800ce8c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b0c      	cmp	r3, #12
 800ce68:	d104      	bne.n	800ce74 <HAL_TIM_OC_Stop_IT+0x190>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce72:	e00b      	b.n	800ce8c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2b10      	cmp	r3, #16
 800ce78:	d104      	bne.n	800ce84 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce82:	e003      	b.n	800ce8c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	40010000 	.word	0x40010000
 800ce9c:	40010400 	.word	0x40010400
 800cea0:	40014000 	.word	0x40014000
 800cea4:	40014400 	.word	0x40014400
 800cea8:	40014800 	.word	0x40014800

0800ceac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e049      	b.n	800cf52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d106      	bne.n	800ced8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7f5 f962 	bl	800219c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	3304      	adds	r3, #4
 800cee8:	4619      	mov	r1, r3
 800ceea:	4610      	mov	r0, r2
 800ceec:	f000 fc80 	bl	800d7f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
	...

0800cf5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d109      	bne.n	800cf80 <HAL_TIM_PWM_Start+0x24>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	bf14      	ite	ne
 800cf78:	2301      	movne	r3, #1
 800cf7a:	2300      	moveq	r3, #0
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	e03c      	b.n	800cffa <HAL_TIM_PWM_Start+0x9e>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b04      	cmp	r3, #4
 800cf84:	d109      	bne.n	800cf9a <HAL_TIM_PWM_Start+0x3e>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	bf14      	ite	ne
 800cf92:	2301      	movne	r3, #1
 800cf94:	2300      	moveq	r3, #0
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	e02f      	b.n	800cffa <HAL_TIM_PWM_Start+0x9e>
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d109      	bne.n	800cfb4 <HAL_TIM_PWM_Start+0x58>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	bf14      	ite	ne
 800cfac:	2301      	movne	r3, #1
 800cfae:	2300      	moveq	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	e022      	b.n	800cffa <HAL_TIM_PWM_Start+0x9e>
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b0c      	cmp	r3, #12
 800cfb8:	d109      	bne.n	800cfce <HAL_TIM_PWM_Start+0x72>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	bf14      	ite	ne
 800cfc6:	2301      	movne	r3, #1
 800cfc8:	2300      	moveq	r3, #0
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	e015      	b.n	800cffa <HAL_TIM_PWM_Start+0x9e>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b10      	cmp	r3, #16
 800cfd2:	d109      	bne.n	800cfe8 <HAL_TIM_PWM_Start+0x8c>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	bf14      	ite	ne
 800cfe0:	2301      	movne	r3, #1
 800cfe2:	2300      	moveq	r3, #0
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	e008      	b.n	800cffa <HAL_TIM_PWM_Start+0x9e>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	bf14      	ite	ne
 800cff4:	2301      	movne	r3, #1
 800cff6:	2300      	moveq	r3, #0
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e0a1      	b.n	800d146 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d104      	bne.n	800d012 <HAL_TIM_PWM_Start+0xb6>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d010:	e023      	b.n	800d05a <HAL_TIM_PWM_Start+0xfe>
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b04      	cmp	r3, #4
 800d016:	d104      	bne.n	800d022 <HAL_TIM_PWM_Start+0xc6>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d020:	e01b      	b.n	800d05a <HAL_TIM_PWM_Start+0xfe>
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b08      	cmp	r3, #8
 800d026:	d104      	bne.n	800d032 <HAL_TIM_PWM_Start+0xd6>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2202      	movs	r2, #2
 800d02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d030:	e013      	b.n	800d05a <HAL_TIM_PWM_Start+0xfe>
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2b0c      	cmp	r3, #12
 800d036:	d104      	bne.n	800d042 <HAL_TIM_PWM_Start+0xe6>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d040:	e00b      	b.n	800d05a <HAL_TIM_PWM_Start+0xfe>
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b10      	cmp	r3, #16
 800d046:	d104      	bne.n	800d052 <HAL_TIM_PWM_Start+0xf6>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2202      	movs	r2, #2
 800d04c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d050:	e003      	b.n	800d05a <HAL_TIM_PWM_Start+0xfe>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2202      	movs	r2, #2
 800d056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2201      	movs	r2, #1
 800d060:	6839      	ldr	r1, [r7, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f000 ffde 	bl	800e024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a38      	ldr	r2, [pc, #224]	; (800d150 <HAL_TIM_PWM_Start+0x1f4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d013      	beq.n	800d09a <HAL_TIM_PWM_Start+0x13e>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a37      	ldr	r2, [pc, #220]	; (800d154 <HAL_TIM_PWM_Start+0x1f8>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d00e      	beq.n	800d09a <HAL_TIM_PWM_Start+0x13e>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a35      	ldr	r2, [pc, #212]	; (800d158 <HAL_TIM_PWM_Start+0x1fc>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d009      	beq.n	800d09a <HAL_TIM_PWM_Start+0x13e>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a34      	ldr	r2, [pc, #208]	; (800d15c <HAL_TIM_PWM_Start+0x200>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d004      	beq.n	800d09a <HAL_TIM_PWM_Start+0x13e>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a32      	ldr	r2, [pc, #200]	; (800d160 <HAL_TIM_PWM_Start+0x204>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d101      	bne.n	800d09e <HAL_TIM_PWM_Start+0x142>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <HAL_TIM_PWM_Start+0x144>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d007      	beq.n	800d0b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a25      	ldr	r2, [pc, #148]	; (800d150 <HAL_TIM_PWM_Start+0x1f4>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d022      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c6:	d01d      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a25      	ldr	r2, [pc, #148]	; (800d164 <HAL_TIM_PWM_Start+0x208>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d018      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a24      	ldr	r2, [pc, #144]	; (800d168 <HAL_TIM_PWM_Start+0x20c>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d013      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a22      	ldr	r2, [pc, #136]	; (800d16c <HAL_TIM_PWM_Start+0x210>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d00e      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a1a      	ldr	r2, [pc, #104]	; (800d154 <HAL_TIM_PWM_Start+0x1f8>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d009      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a1e      	ldr	r2, [pc, #120]	; (800d170 <HAL_TIM_PWM_Start+0x214>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d004      	beq.n	800d104 <HAL_TIM_PWM_Start+0x1a8>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a16      	ldr	r2, [pc, #88]	; (800d158 <HAL_TIM_PWM_Start+0x1fc>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d115      	bne.n	800d130 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	4b1a      	ldr	r3, [pc, #104]	; (800d174 <HAL_TIM_PWM_Start+0x218>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b06      	cmp	r3, #6
 800d114:	d015      	beq.n	800d142 <HAL_TIM_PWM_Start+0x1e6>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d11c:	d011      	beq.n	800d142 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0201 	orr.w	r2, r2, #1
 800d12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d12e:	e008      	b.n	800d142 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f042 0201 	orr.w	r2, r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	e000      	b.n	800d144 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	40010000 	.word	0x40010000
 800d154:	40010400 	.word	0x40010400
 800d158:	40014000 	.word	0x40014000
 800d15c:	40014400 	.word	0x40014400
 800d160:	40014800 	.word	0x40014800
 800d164:	40000400 	.word	0x40000400
 800d168:	40000800 	.word	0x40000800
 800d16c:	40000c00 	.word	0x40000c00
 800d170:	40001800 	.word	0x40001800
 800d174:	00010007 	.word	0x00010007

0800d178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	f003 0302 	and.w	r3, r3, #2
 800d196:	2b00      	cmp	r3, #0
 800d198:	d020      	beq.n	800d1dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d01b      	beq.n	800d1dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f06f 0202 	mvn.w	r2, #2
 800d1ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	f003 0303 	and.w	r3, r3, #3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 faf6 	bl	800d7b4 <HAL_TIM_IC_CaptureCallback>
 800d1c8:	e005      	b.n	800d1d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7f3 fce6 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 faf9 	bl	800d7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	f003 0304 	and.w	r3, r3, #4
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d020      	beq.n	800d228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f003 0304 	and.w	r3, r3, #4
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d01b      	beq.n	800d228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f06f 0204 	mvn.w	r2, #4
 800d1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d003      	beq.n	800d216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fad0 	bl	800d7b4 <HAL_TIM_IC_CaptureCallback>
 800d214:	e005      	b.n	800d222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7f3 fcc0 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 fad3 	bl	800d7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f003 0308 	and.w	r3, r3, #8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d020      	beq.n	800d274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f003 0308 	and.w	r3, r3, #8
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d01b      	beq.n	800d274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f06f 0208 	mvn.w	r2, #8
 800d244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2204      	movs	r2, #4
 800d24a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	f003 0303 	and.w	r3, r3, #3
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 faaa 	bl	800d7b4 <HAL_TIM_IC_CaptureCallback>
 800d260:	e005      	b.n	800d26e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7f3 fc9a 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 faad 	bl	800d7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	f003 0310 	and.w	r3, r3, #16
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d020      	beq.n	800d2c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f003 0310 	and.w	r3, r3, #16
 800d284:	2b00      	cmp	r3, #0
 800d286:	d01b      	beq.n	800d2c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f06f 0210 	mvn.w	r2, #16
 800d290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2208      	movs	r2, #8
 800d296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fa84 	bl	800d7b4 <HAL_TIM_IC_CaptureCallback>
 800d2ac:	e005      	b.n	800d2ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7f3 fc74 	bl	8000b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fa87 	bl	800d7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00c      	beq.n	800d2e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d007      	beq.n	800d2e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f06f 0201 	mvn.w	r2, #1
 800d2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fa5e 	bl	800d7a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d104      	bne.n	800d2f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00c      	beq.n	800d312 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d007      	beq.n	800d312 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 ffc5 	bl	800e29c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00c      	beq.n	800d336 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d322:	2b00      	cmp	r3, #0
 800d324:	d007      	beq.n	800d336 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d32e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 ffbd 	bl	800e2b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00c      	beq.n	800d35a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fa41 	bl	800d7dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	f003 0320 	and.w	r3, r3, #32
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00c      	beq.n	800d37e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d007      	beq.n	800d37e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f06f 0220 	mvn.w	r2, #32
 800d376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 ff85 	bl	800e288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d37e:	bf00      	nop
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d101      	bne.n	800d3a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	e0ff      	b.n	800d5a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b14      	cmp	r3, #20
 800d3b2:	f200 80f0 	bhi.w	800d596 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3b6:	a201      	add	r2, pc, #4	; (adr r2, 800d3bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3bc:	0800d411 	.word	0x0800d411
 800d3c0:	0800d597 	.word	0x0800d597
 800d3c4:	0800d597 	.word	0x0800d597
 800d3c8:	0800d597 	.word	0x0800d597
 800d3cc:	0800d451 	.word	0x0800d451
 800d3d0:	0800d597 	.word	0x0800d597
 800d3d4:	0800d597 	.word	0x0800d597
 800d3d8:	0800d597 	.word	0x0800d597
 800d3dc:	0800d493 	.word	0x0800d493
 800d3e0:	0800d597 	.word	0x0800d597
 800d3e4:	0800d597 	.word	0x0800d597
 800d3e8:	0800d597 	.word	0x0800d597
 800d3ec:	0800d4d3 	.word	0x0800d4d3
 800d3f0:	0800d597 	.word	0x0800d597
 800d3f4:	0800d597 	.word	0x0800d597
 800d3f8:	0800d597 	.word	0x0800d597
 800d3fc:	0800d515 	.word	0x0800d515
 800d400:	0800d597 	.word	0x0800d597
 800d404:	0800d597 	.word	0x0800d597
 800d408:	0800d597 	.word	0x0800d597
 800d40c:	0800d555 	.word	0x0800d555
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68b9      	ldr	r1, [r7, #8]
 800d416:	4618      	mov	r0, r3
 800d418:	f000 fa90 	bl	800d93c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	699a      	ldr	r2, [r3, #24]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f042 0208 	orr.w	r2, r2, #8
 800d42a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	699a      	ldr	r2, [r3, #24]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f022 0204 	bic.w	r2, r2, #4
 800d43a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6999      	ldr	r1, [r3, #24]
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	691a      	ldr	r2, [r3, #16]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	430a      	orrs	r2, r1
 800d44c:	619a      	str	r2, [r3, #24]
      break;
 800d44e:	e0a5      	b.n	800d59c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fb00 	bl	800da5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	699a      	ldr	r2, [r3, #24]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d46a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d47a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6999      	ldr	r1, [r3, #24]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	021a      	lsls	r2, r3, #8
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	430a      	orrs	r2, r1
 800d48e:	619a      	str	r2, [r3, #24]
      break;
 800d490:	e084      	b.n	800d59c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	4618      	mov	r0, r3
 800d49a:	f000 fb69 	bl	800db70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	69da      	ldr	r2, [r3, #28]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f042 0208 	orr.w	r2, r2, #8
 800d4ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69da      	ldr	r2, [r3, #28]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f022 0204 	bic.w	r2, r2, #4
 800d4bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69d9      	ldr	r1, [r3, #28]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	691a      	ldr	r2, [r3, #16]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	61da      	str	r2, [r3, #28]
      break;
 800d4d0:	e064      	b.n	800d59c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f000 fbd1 	bl	800dc80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	69da      	ldr	r2, [r3, #28]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	69d9      	ldr	r1, [r3, #28]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	021a      	lsls	r2, r3, #8
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	430a      	orrs	r2, r1
 800d510:	61da      	str	r2, [r3, #28]
      break;
 800d512:	e043      	b.n	800d59c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fc1a 	bl	800dd54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f042 0208 	orr.w	r2, r2, #8
 800d52e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 0204 	bic.w	r2, r2, #4
 800d53e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	691a      	ldr	r2, [r3, #16]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	430a      	orrs	r2, r1
 800d550:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d552:	e023      	b.n	800d59c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68b9      	ldr	r1, [r7, #8]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f000 fc5e 	bl	800de1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d56e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d57e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	691b      	ldr	r3, [r3, #16]
 800d58a:	021a      	lsls	r2, r3, #8
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	430a      	orrs	r2, r1
 800d592:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d594:	e002      	b.n	800d59c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	75fb      	strb	r3, [r7, #23]
      break;
 800d59a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop

0800d5b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d101      	bne.n	800d5cc <HAL_TIM_ConfigClockSource+0x1c>
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	e0dc      	b.n	800d786 <HAL_TIM_ConfigClockSource+0x1d6>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	4b6a      	ldr	r3, [pc, #424]	; (800d790 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a64      	ldr	r2, [pc, #400]	; (800d794 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d602:	4293      	cmp	r3, r2
 800d604:	f000 80a9 	beq.w	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d608:	4a62      	ldr	r2, [pc, #392]	; (800d794 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	f200 80ae 	bhi.w	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d610:	4a61      	ldr	r2, [pc, #388]	; (800d798 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d612:	4293      	cmp	r3, r2
 800d614:	f000 80a1 	beq.w	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d618:	4a5f      	ldr	r2, [pc, #380]	; (800d798 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	f200 80a6 	bhi.w	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d620:	4a5e      	ldr	r2, [pc, #376]	; (800d79c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d622:	4293      	cmp	r3, r2
 800d624:	f000 8099 	beq.w	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d628:	4a5c      	ldr	r2, [pc, #368]	; (800d79c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	f200 809e 	bhi.w	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d630:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d634:	f000 8091 	beq.w	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d638:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d63c:	f200 8096 	bhi.w	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d644:	f000 8089 	beq.w	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d64c:	f200 808e 	bhi.w	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d654:	d03e      	beq.n	800d6d4 <HAL_TIM_ConfigClockSource+0x124>
 800d656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d65a:	f200 8087 	bhi.w	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d662:	f000 8086 	beq.w	800d772 <HAL_TIM_ConfigClockSource+0x1c2>
 800d666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d66a:	d87f      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d66c:	2b70      	cmp	r3, #112	; 0x70
 800d66e:	d01a      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0xf6>
 800d670:	2b70      	cmp	r3, #112	; 0x70
 800d672:	d87b      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d674:	2b60      	cmp	r3, #96	; 0x60
 800d676:	d050      	beq.n	800d71a <HAL_TIM_ConfigClockSource+0x16a>
 800d678:	2b60      	cmp	r3, #96	; 0x60
 800d67a:	d877      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d67c:	2b50      	cmp	r3, #80	; 0x50
 800d67e:	d03c      	beq.n	800d6fa <HAL_TIM_ConfigClockSource+0x14a>
 800d680:	2b50      	cmp	r3, #80	; 0x50
 800d682:	d873      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d684:	2b40      	cmp	r3, #64	; 0x40
 800d686:	d058      	beq.n	800d73a <HAL_TIM_ConfigClockSource+0x18a>
 800d688:	2b40      	cmp	r3, #64	; 0x40
 800d68a:	d86f      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d68c:	2b30      	cmp	r3, #48	; 0x30
 800d68e:	d064      	beq.n	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d690:	2b30      	cmp	r3, #48	; 0x30
 800d692:	d86b      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d694:	2b20      	cmp	r3, #32
 800d696:	d060      	beq.n	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d698:	2b20      	cmp	r3, #32
 800d69a:	d867      	bhi.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d05c      	beq.n	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d6a0:	2b10      	cmp	r3, #16
 800d6a2:	d05a      	beq.n	800d75a <HAL_TIM_ConfigClockSource+0x1aa>
 800d6a4:	e062      	b.n	800d76c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	6899      	ldr	r1, [r3, #8]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	f000 fc95 	bl	800dfe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d6c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	609a      	str	r2, [r3, #8]
      break;
 800d6d2:	e04f      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	6899      	ldr	r1, [r3, #8]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	f000 fc7e 	bl	800dfe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6f6:	609a      	str	r2, [r3, #8]
      break;
 800d6f8:	e03c      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6818      	ldr	r0, [r3, #0]
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	6859      	ldr	r1, [r3, #4]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	461a      	mov	r2, r3
 800d708:	f000 fbee 	bl	800dee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2150      	movs	r1, #80	; 0x50
 800d712:	4618      	mov	r0, r3
 800d714:	f000 fc48 	bl	800dfa8 <TIM_ITRx_SetConfig>
      break;
 800d718:	e02c      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6818      	ldr	r0, [r3, #0]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	6859      	ldr	r1, [r3, #4]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	461a      	mov	r2, r3
 800d728:	f000 fc0d 	bl	800df46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2160      	movs	r1, #96	; 0x60
 800d732:	4618      	mov	r0, r3
 800d734:	f000 fc38 	bl	800dfa8 <TIM_ITRx_SetConfig>
      break;
 800d738:	e01c      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6818      	ldr	r0, [r3, #0]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	6859      	ldr	r1, [r3, #4]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	461a      	mov	r2, r3
 800d748:	f000 fbce 	bl	800dee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2140      	movs	r1, #64	; 0x40
 800d752:	4618      	mov	r0, r3
 800d754:	f000 fc28 	bl	800dfa8 <TIM_ITRx_SetConfig>
      break;
 800d758:	e00c      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f000 fc1f 	bl	800dfa8 <TIM_ITRx_SetConfig>
      break;
 800d76a:	e003      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	73fb      	strb	r3, [r7, #15]
      break;
 800d770:	e000      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d784:	7bfb      	ldrb	r3, [r7, #15]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	ffceff88 	.word	0xffceff88
 800d794:	00100040 	.word	0x00100040
 800d798:	00100030 	.word	0x00100030
 800d79c:	00100020 	.word	0x00100020

0800d7a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a46      	ldr	r2, [pc, #280]	; (800d91c <TIM_Base_SetConfig+0x12c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d013      	beq.n	800d830 <TIM_Base_SetConfig+0x40>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d80e:	d00f      	beq.n	800d830 <TIM_Base_SetConfig+0x40>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a43      	ldr	r2, [pc, #268]	; (800d920 <TIM_Base_SetConfig+0x130>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d00b      	beq.n	800d830 <TIM_Base_SetConfig+0x40>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a42      	ldr	r2, [pc, #264]	; (800d924 <TIM_Base_SetConfig+0x134>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d007      	beq.n	800d830 <TIM_Base_SetConfig+0x40>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a41      	ldr	r2, [pc, #260]	; (800d928 <TIM_Base_SetConfig+0x138>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d003      	beq.n	800d830 <TIM_Base_SetConfig+0x40>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	4a40      	ldr	r2, [pc, #256]	; (800d92c <TIM_Base_SetConfig+0x13c>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d108      	bne.n	800d842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a35      	ldr	r2, [pc, #212]	; (800d91c <TIM_Base_SetConfig+0x12c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d01f      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d850:	d01b      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a32      	ldr	r2, [pc, #200]	; (800d920 <TIM_Base_SetConfig+0x130>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d017      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a31      	ldr	r2, [pc, #196]	; (800d924 <TIM_Base_SetConfig+0x134>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d013      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a30      	ldr	r2, [pc, #192]	; (800d928 <TIM_Base_SetConfig+0x138>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d00f      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a2f      	ldr	r2, [pc, #188]	; (800d92c <TIM_Base_SetConfig+0x13c>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d00b      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a2e      	ldr	r2, [pc, #184]	; (800d930 <TIM_Base_SetConfig+0x140>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d007      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a2d      	ldr	r2, [pc, #180]	; (800d934 <TIM_Base_SetConfig+0x144>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d003      	beq.n	800d88a <TIM_Base_SetConfig+0x9a>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a2c      	ldr	r2, [pc, #176]	; (800d938 <TIM_Base_SetConfig+0x148>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d108      	bne.n	800d89c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	4313      	orrs	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a16      	ldr	r2, [pc, #88]	; (800d91c <TIM_Base_SetConfig+0x12c>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d00f      	beq.n	800d8e8 <TIM_Base_SetConfig+0xf8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a18      	ldr	r2, [pc, #96]	; (800d92c <TIM_Base_SetConfig+0x13c>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d00b      	beq.n	800d8e8 <TIM_Base_SetConfig+0xf8>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a17      	ldr	r2, [pc, #92]	; (800d930 <TIM_Base_SetConfig+0x140>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d007      	beq.n	800d8e8 <TIM_Base_SetConfig+0xf8>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a16      	ldr	r2, [pc, #88]	; (800d934 <TIM_Base_SetConfig+0x144>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d003      	beq.n	800d8e8 <TIM_Base_SetConfig+0xf8>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a15      	ldr	r2, [pc, #84]	; (800d938 <TIM_Base_SetConfig+0x148>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d103      	bne.n	800d8f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	691a      	ldr	r2, [r3, #16]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d105      	bne.n	800d90e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	f023 0201 	bic.w	r2, r3, #1
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	611a      	str	r2, [r3, #16]
  }
}
 800d90e:	bf00      	nop
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	40010000 	.word	0x40010000
 800d920:	40000400 	.word	0x40000400
 800d924:	40000800 	.word	0x40000800
 800d928:	40000c00 	.word	0x40000c00
 800d92c:	40010400 	.word	0x40010400
 800d930:	40014000 	.word	0x40014000
 800d934:	40014400 	.word	0x40014400
 800d938:	40014800 	.word	0x40014800

0800d93c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	f023 0201 	bic.w	r2, r3, #1
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4b37      	ldr	r3, [pc, #220]	; (800da44 <TIM_OC1_SetConfig+0x108>)
 800d968:	4013      	ands	r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 0303 	bic.w	r3, r3, #3
 800d972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f023 0302 	bic.w	r3, r3, #2
 800d984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a2d      	ldr	r2, [pc, #180]	; (800da48 <TIM_OC1_SetConfig+0x10c>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d00f      	beq.n	800d9b8 <TIM_OC1_SetConfig+0x7c>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	4a2c      	ldr	r2, [pc, #176]	; (800da4c <TIM_OC1_SetConfig+0x110>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d00b      	beq.n	800d9b8 <TIM_OC1_SetConfig+0x7c>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a2b      	ldr	r2, [pc, #172]	; (800da50 <TIM_OC1_SetConfig+0x114>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d007      	beq.n	800d9b8 <TIM_OC1_SetConfig+0x7c>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a2a      	ldr	r2, [pc, #168]	; (800da54 <TIM_OC1_SetConfig+0x118>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d003      	beq.n	800d9b8 <TIM_OC1_SetConfig+0x7c>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a29      	ldr	r2, [pc, #164]	; (800da58 <TIM_OC1_SetConfig+0x11c>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d10c      	bne.n	800d9d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f023 0308 	bic.w	r3, r3, #8
 800d9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f023 0304 	bic.w	r3, r3, #4
 800d9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a1c      	ldr	r2, [pc, #112]	; (800da48 <TIM_OC1_SetConfig+0x10c>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d00f      	beq.n	800d9fa <TIM_OC1_SetConfig+0xbe>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a1b      	ldr	r2, [pc, #108]	; (800da4c <TIM_OC1_SetConfig+0x110>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d00b      	beq.n	800d9fa <TIM_OC1_SetConfig+0xbe>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a1a      	ldr	r2, [pc, #104]	; (800da50 <TIM_OC1_SetConfig+0x114>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d007      	beq.n	800d9fa <TIM_OC1_SetConfig+0xbe>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a19      	ldr	r2, [pc, #100]	; (800da54 <TIM_OC1_SetConfig+0x118>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d003      	beq.n	800d9fa <TIM_OC1_SetConfig+0xbe>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a18      	ldr	r2, [pc, #96]	; (800da58 <TIM_OC1_SetConfig+0x11c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d111      	bne.n	800da1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4313      	orrs	r3, r2
 800da12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	699b      	ldr	r3, [r3, #24]
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	4313      	orrs	r3, r2
 800da1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	693a      	ldr	r2, [r7, #16]
 800da22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	621a      	str	r2, [r3, #32]
}
 800da38:	bf00      	nop
 800da3a:	371c      	adds	r7, #28
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr
 800da44:	fffeff8f 	.word	0xfffeff8f
 800da48:	40010000 	.word	0x40010000
 800da4c:	40010400 	.word	0x40010400
 800da50:	40014000 	.word	0x40014000
 800da54:	40014400 	.word	0x40014400
 800da58:	40014800 	.word	0x40014800

0800da5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b087      	sub	sp, #28
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a1b      	ldr	r3, [r3, #32]
 800da70:	f023 0210 	bic.w	r2, r3, #16
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4b34      	ldr	r3, [pc, #208]	; (800db58 <TIM_OC2_SetConfig+0xfc>)
 800da88:	4013      	ands	r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	021b      	lsls	r3, r3, #8
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	f023 0320 	bic.w	r3, r3, #32
 800daa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	011b      	lsls	r3, r3, #4
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a29      	ldr	r2, [pc, #164]	; (800db5c <TIM_OC2_SetConfig+0x100>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d003      	beq.n	800dac4 <TIM_OC2_SetConfig+0x68>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a28      	ldr	r2, [pc, #160]	; (800db60 <TIM_OC2_SetConfig+0x104>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d10d      	bne.n	800dae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	011b      	lsls	r3, r3, #4
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4a1e      	ldr	r2, [pc, #120]	; (800db5c <TIM_OC2_SetConfig+0x100>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d00f      	beq.n	800db08 <TIM_OC2_SetConfig+0xac>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a1d      	ldr	r2, [pc, #116]	; (800db60 <TIM_OC2_SetConfig+0x104>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d00b      	beq.n	800db08 <TIM_OC2_SetConfig+0xac>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a1c      	ldr	r2, [pc, #112]	; (800db64 <TIM_OC2_SetConfig+0x108>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d007      	beq.n	800db08 <TIM_OC2_SetConfig+0xac>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a1b      	ldr	r2, [pc, #108]	; (800db68 <TIM_OC2_SetConfig+0x10c>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d003      	beq.n	800db08 <TIM_OC2_SetConfig+0xac>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a1a      	ldr	r2, [pc, #104]	; (800db6c <TIM_OC2_SetConfig+0x110>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d113      	bne.n	800db30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	4313      	orrs	r3, r2
 800db22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	621a      	str	r2, [r3, #32]
}
 800db4a:	bf00      	nop
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	feff8fff 	.word	0xfeff8fff
 800db5c:	40010000 	.word	0x40010000
 800db60:	40010400 	.word	0x40010400
 800db64:	40014000 	.word	0x40014000
 800db68:	40014400 	.word	0x40014400
 800db6c:	40014800 	.word	0x40014800

0800db70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db70:	b480      	push	{r7}
 800db72:	b087      	sub	sp, #28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a1b      	ldr	r3, [r3, #32]
 800db84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	4b33      	ldr	r3, [pc, #204]	; (800dc68 <TIM_OC3_SetConfig+0xf8>)
 800db9c:	4013      	ands	r3, r2
 800db9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	021b      	lsls	r3, r3, #8
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a28      	ldr	r2, [pc, #160]	; (800dc6c <TIM_OC3_SetConfig+0xfc>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d003      	beq.n	800dbd6 <TIM_OC3_SetConfig+0x66>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a27      	ldr	r2, [pc, #156]	; (800dc70 <TIM_OC3_SetConfig+0x100>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d10d      	bne.n	800dbf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	021b      	lsls	r3, r3, #8
 800dbe4:	697a      	ldr	r2, [r7, #20]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a1d      	ldr	r2, [pc, #116]	; (800dc6c <TIM_OC3_SetConfig+0xfc>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d00f      	beq.n	800dc1a <TIM_OC3_SetConfig+0xaa>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a1c      	ldr	r2, [pc, #112]	; (800dc70 <TIM_OC3_SetConfig+0x100>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d00b      	beq.n	800dc1a <TIM_OC3_SetConfig+0xaa>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a1b      	ldr	r2, [pc, #108]	; (800dc74 <TIM_OC3_SetConfig+0x104>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d007      	beq.n	800dc1a <TIM_OC3_SetConfig+0xaa>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a1a      	ldr	r2, [pc, #104]	; (800dc78 <TIM_OC3_SetConfig+0x108>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d003      	beq.n	800dc1a <TIM_OC3_SetConfig+0xaa>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a19      	ldr	r2, [pc, #100]	; (800dc7c <TIM_OC3_SetConfig+0x10c>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d113      	bne.n	800dc42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	695b      	ldr	r3, [r3, #20]
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	693a      	ldr	r2, [r7, #16]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	621a      	str	r2, [r3, #32]
}
 800dc5c:	bf00      	nop
 800dc5e:	371c      	adds	r7, #28
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	fffeff8f 	.word	0xfffeff8f
 800dc6c:	40010000 	.word	0x40010000
 800dc70:	40010400 	.word	0x40010400
 800dc74:	40014000 	.word	0x40014000
 800dc78:	40014400 	.word	0x40014400
 800dc7c:	40014800 	.word	0x40014800

0800dc80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b087      	sub	sp, #28
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a1b      	ldr	r3, [r3, #32]
 800dc94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	69db      	ldr	r3, [r3, #28]
 800dca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	4b24      	ldr	r3, [pc, #144]	; (800dd3c <TIM_OC4_SetConfig+0xbc>)
 800dcac:	4013      	ands	r3, r2
 800dcae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	021b      	lsls	r3, r3, #8
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	031b      	lsls	r3, r3, #12
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a19      	ldr	r2, [pc, #100]	; (800dd40 <TIM_OC4_SetConfig+0xc0>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d00f      	beq.n	800dd00 <TIM_OC4_SetConfig+0x80>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a18      	ldr	r2, [pc, #96]	; (800dd44 <TIM_OC4_SetConfig+0xc4>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d00b      	beq.n	800dd00 <TIM_OC4_SetConfig+0x80>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a17      	ldr	r2, [pc, #92]	; (800dd48 <TIM_OC4_SetConfig+0xc8>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d007      	beq.n	800dd00 <TIM_OC4_SetConfig+0x80>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a16      	ldr	r2, [pc, #88]	; (800dd4c <TIM_OC4_SetConfig+0xcc>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d003      	beq.n	800dd00 <TIM_OC4_SetConfig+0x80>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <TIM_OC4_SetConfig+0xd0>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d109      	bne.n	800dd14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	019b      	lsls	r3, r3, #6
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	621a      	str	r2, [r3, #32]
}
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	feff8fff 	.word	0xfeff8fff
 800dd40:	40010000 	.word	0x40010000
 800dd44:	40010400 	.word	0x40010400
 800dd48:	40014000 	.word	0x40014000
 800dd4c:	40014400 	.word	0x40014400
 800dd50:	40014800 	.word	0x40014800

0800dd54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b087      	sub	sp, #28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a1b      	ldr	r3, [r3, #32]
 800dd68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4b21      	ldr	r3, [pc, #132]	; (800de04 <TIM_OC5_SetConfig+0xb0>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dd94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	041b      	lsls	r3, r3, #16
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4a18      	ldr	r2, [pc, #96]	; (800de08 <TIM_OC5_SetConfig+0xb4>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d00f      	beq.n	800ddca <TIM_OC5_SetConfig+0x76>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a17      	ldr	r2, [pc, #92]	; (800de0c <TIM_OC5_SetConfig+0xb8>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d00b      	beq.n	800ddca <TIM_OC5_SetConfig+0x76>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a16      	ldr	r2, [pc, #88]	; (800de10 <TIM_OC5_SetConfig+0xbc>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d007      	beq.n	800ddca <TIM_OC5_SetConfig+0x76>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a15      	ldr	r2, [pc, #84]	; (800de14 <TIM_OC5_SetConfig+0xc0>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d003      	beq.n	800ddca <TIM_OC5_SetConfig+0x76>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a14      	ldr	r2, [pc, #80]	; (800de18 <TIM_OC5_SetConfig+0xc4>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d109      	bne.n	800ddde <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	021b      	lsls	r3, r3, #8
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	685a      	ldr	r2, [r3, #4]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	621a      	str	r2, [r3, #32]
}
 800ddf8:	bf00      	nop
 800ddfa:	371c      	adds	r7, #28
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	fffeff8f 	.word	0xfffeff8f
 800de08:	40010000 	.word	0x40010000
 800de0c:	40010400 	.word	0x40010400
 800de10:	40014000 	.word	0x40014000
 800de14:	40014400 	.word	0x40014400
 800de18:	40014800 	.word	0x40014800

0800de1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b087      	sub	sp, #28
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a1b      	ldr	r3, [r3, #32]
 800de30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	4b22      	ldr	r3, [pc, #136]	; (800ded0 <TIM_OC6_SetConfig+0xb4>)
 800de48:	4013      	ands	r3, r2
 800de4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	021b      	lsls	r3, r3, #8
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	4313      	orrs	r3, r2
 800de56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	051b      	lsls	r3, r3, #20
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	4313      	orrs	r3, r2
 800de6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4a19      	ldr	r2, [pc, #100]	; (800ded4 <TIM_OC6_SetConfig+0xb8>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d00f      	beq.n	800de94 <TIM_OC6_SetConfig+0x78>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4a18      	ldr	r2, [pc, #96]	; (800ded8 <TIM_OC6_SetConfig+0xbc>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00b      	beq.n	800de94 <TIM_OC6_SetConfig+0x78>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a17      	ldr	r2, [pc, #92]	; (800dedc <TIM_OC6_SetConfig+0xc0>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d007      	beq.n	800de94 <TIM_OC6_SetConfig+0x78>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a16      	ldr	r2, [pc, #88]	; (800dee0 <TIM_OC6_SetConfig+0xc4>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d003      	beq.n	800de94 <TIM_OC6_SetConfig+0x78>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a15      	ldr	r2, [pc, #84]	; (800dee4 <TIM_OC6_SetConfig+0xc8>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d109      	bne.n	800dea8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	695b      	ldr	r3, [r3, #20]
 800dea0:	029b      	lsls	r3, r3, #10
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	685a      	ldr	r2, [r3, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	621a      	str	r2, [r3, #32]
}
 800dec2:	bf00      	nop
 800dec4:	371c      	adds	r7, #28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop
 800ded0:	feff8fff 	.word	0xfeff8fff
 800ded4:	40010000 	.word	0x40010000
 800ded8:	40010400 	.word	0x40010400
 800dedc:	40014000 	.word	0x40014000
 800dee0:	40014400 	.word	0x40014400
 800dee4:	40014800 	.word	0x40014800

0800dee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dee8:	b480      	push	{r7}
 800deea:	b087      	sub	sp, #28
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6a1b      	ldr	r3, [r3, #32]
 800def8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6a1b      	ldr	r3, [r3, #32]
 800defe:	f023 0201 	bic.w	r2, r3, #1
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	011b      	lsls	r3, r3, #4
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f023 030a 	bic.w	r3, r3, #10
 800df24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df26:	697a      	ldr	r2, [r7, #20]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	621a      	str	r2, [r3, #32]
}
 800df3a:	bf00      	nop
 800df3c:	371c      	adds	r7, #28
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df46:	b480      	push	{r7}
 800df48:	b087      	sub	sp, #28
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	60f8      	str	r0, [r7, #12]
 800df4e:	60b9      	str	r1, [r7, #8]
 800df50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6a1b      	ldr	r3, [r3, #32]
 800df5c:	f023 0210 	bic.w	r2, r3, #16
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	031b      	lsls	r3, r3, #12
 800df76:	693a      	ldr	r2, [r7, #16]
 800df78:	4313      	orrs	r3, r2
 800df7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	011b      	lsls	r3, r3, #4
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	4313      	orrs	r3, r2
 800df8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	697a      	ldr	r2, [r7, #20]
 800df98:	621a      	str	r2, [r3, #32]
}
 800df9a:	bf00      	nop
 800df9c:	371c      	adds	r7, #28
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
	...

0800dfa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	4b09      	ldr	r3, [pc, #36]	; (800dfe0 <TIM_ITRx_SetConfig+0x38>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	f043 0307 	orr.w	r3, r3, #7
 800dfca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	609a      	str	r2, [r3, #8]
}
 800dfd2:	bf00      	nop
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	ffcfff8f 	.word	0xffcfff8f

0800dfe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
 800dff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	021a      	lsls	r2, r3, #8
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	431a      	orrs	r2, r3
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	4313      	orrs	r3, r2
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	4313      	orrs	r3, r2
 800e010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	609a      	str	r2, [r3, #8]
}
 800e018:	bf00      	nop
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e024:	b480      	push	{r7}
 800e026:	b087      	sub	sp, #28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	f003 031f 	and.w	r3, r3, #31
 800e036:	2201      	movs	r2, #1
 800e038:	fa02 f303 	lsl.w	r3, r2, r3
 800e03c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6a1a      	ldr	r2, [r3, #32]
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	43db      	mvns	r3, r3
 800e046:	401a      	ands	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6a1a      	ldr	r2, [r3, #32]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f003 031f 	and.w	r3, r3, #31
 800e056:	6879      	ldr	r1, [r7, #4]
 800e058:	fa01 f303 	lsl.w	r3, r1, r3
 800e05c:	431a      	orrs	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	621a      	str	r2, [r3, #32]
}
 800e062:	bf00      	nop
 800e064:	371c      	adds	r7, #28
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
	...

0800e070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e080:	2b01      	cmp	r3, #1
 800e082:	d101      	bne.n	800e088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e084:	2302      	movs	r3, #2
 800e086:	e06d      	b.n	800e164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2202      	movs	r2, #2
 800e094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a30      	ldr	r2, [pc, #192]	; (800e170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d004      	beq.n	800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a2f      	ldr	r2, [pc, #188]	; (800e174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d108      	bne.n	800e0ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e0c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a20      	ldr	r2, [pc, #128]	; (800e170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d022      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0fa:	d01d      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a1d      	ldr	r2, [pc, #116]	; (800e178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d018      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a1c      	ldr	r2, [pc, #112]	; (800e17c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d013      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a1a      	ldr	r2, [pc, #104]	; (800e180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d00e      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a15      	ldr	r2, [pc, #84]	; (800e174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d009      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a16      	ldr	r2, [pc, #88]	; (800e184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d004      	beq.n	800e138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a15      	ldr	r2, [pc, #84]	; (800e188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d10c      	bne.n	800e152 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e13e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	4313      	orrs	r3, r2
 800e148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	40010000 	.word	0x40010000
 800e174:	40010400 	.word	0x40010400
 800e178:	40000400 	.word	0x40000400
 800e17c:	40000800 	.word	0x40000800
 800e180:	40000c00 	.word	0x40000c00
 800e184:	40001800 	.word	0x40001800
 800e188:	40014000 	.word	0x40014000

0800e18c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e196:	2300      	movs	r3, #0
 800e198:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d101      	bne.n	800e1a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	e065      	b.n	800e274 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	4313      	orrs	r3, r2
 800e202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e20e:	4313      	orrs	r3, r2
 800e210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	041b      	lsls	r3, r3, #16
 800e21e:	4313      	orrs	r3, r2
 800e220:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a16      	ldr	r2, [pc, #88]	; (800e280 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d004      	beq.n	800e236 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a14      	ldr	r2, [pc, #80]	; (800e284 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d115      	bne.n	800e262 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	051b      	lsls	r3, r3, #20
 800e242:	4313      	orrs	r3, r2
 800e244:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	4313      	orrs	r3, r2
 800e252:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	4313      	orrs	r3, r2
 800e260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	40010000 	.word	0x40010000
 800e284:	40010400 	.word	0x40010400

0800e288 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e042      	b.n	800e35c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d106      	bne.n	800e2ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7f4 f821 	bl	8002330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2224      	movs	r2, #36	; 0x24
 800e2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f022 0201 	bic.w	r2, r2, #1
 800e304:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f001 fa44 	bl	800f79c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 fcd9 	bl	800eccc <UART_SetConfig>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d101      	bne.n	800e324 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e320:	2301      	movs	r3, #1
 800e322:	e01b      	b.n	800e35c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	689a      	ldr	r2, [r3, #8]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f042 0201 	orr.w	r2, r2, #1
 800e352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f001 fac3 	bl	800f8e0 <UART_CheckIdleState>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08a      	sub	sp, #40	; 0x28
 800e368:	af02      	add	r7, sp, #8
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	603b      	str	r3, [r7, #0]
 800e370:	4613      	mov	r3, r2
 800e372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e37a:	2b20      	cmp	r3, #32
 800e37c:	d17b      	bne.n	800e476 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d002      	beq.n	800e38a <HAL_UART_Transmit+0x26>
 800e384:	88fb      	ldrh	r3, [r7, #6]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e074      	b.n	800e478 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2221      	movs	r2, #33	; 0x21
 800e39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e39e:	f7f4 fa2b 	bl	80027f8 <HAL_GetTick>
 800e3a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	88fa      	ldrh	r2, [r7, #6]
 800e3a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	88fa      	ldrh	r2, [r7, #6]
 800e3b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3bc:	d108      	bne.n	800e3d0 <HAL_UART_Transmit+0x6c>
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d104      	bne.n	800e3d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	61bb      	str	r3, [r7, #24]
 800e3ce:	e003      	b.n	800e3d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e3d8:	e030      	b.n	800e43c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2180      	movs	r1, #128	; 0x80
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f001 fb25 	bl	800fa34 <UART_WaitOnFlagUntilTimeout>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2220      	movs	r2, #32
 800e3f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	e03d      	b.n	800e478 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d10b      	bne.n	800e41a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	3302      	adds	r3, #2
 800e416:	61bb      	str	r3, [r7, #24]
 800e418:	e007      	b.n	800e42a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	781a      	ldrb	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	3301      	adds	r3, #1
 800e428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e430:	b29b      	uxth	r3, r3
 800e432:	3b01      	subs	r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e442:	b29b      	uxth	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1c8      	bne.n	800e3da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2200      	movs	r2, #0
 800e450:	2140      	movs	r1, #64	; 0x40
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f001 faee 	bl	800fa34 <UART_WaitOnFlagUntilTimeout>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d005      	beq.n	800e46a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e006      	b.n	800e478 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2220      	movs	r2, #32
 800e46e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	e000      	b.n	800e478 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e476:	2302      	movs	r3, #2
  }
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3720      	adds	r7, #32
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08a      	sub	sp, #40	; 0x28
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	4613      	mov	r3, r2
 800e48c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e494:	2b20      	cmp	r3, #32
 800e496:	d137      	bne.n	800e508 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d002      	beq.n	800e4a4 <HAL_UART_Receive_IT+0x24>
 800e49e:	88fb      	ldrh	r3, [r7, #6]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e030      	b.n	800e50a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a18      	ldr	r2, [pc, #96]	; (800e514 <HAL_UART_Receive_IT+0x94>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d01f      	beq.n	800e4f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d018      	beq.n	800e4f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	e853 3f00 	ldrex	r3, [r3]
 800e4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	623b      	str	r3, [r7, #32]
 800e4e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e8:	69f9      	ldr	r1, [r7, #28]
 800e4ea:	6a3a      	ldr	r2, [r7, #32]
 800e4ec:	e841 2300 	strex	r3, r2, [r1]
 800e4f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1e6      	bne.n	800e4c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e4f8:	88fb      	ldrh	r3, [r7, #6]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	68b9      	ldr	r1, [r7, #8]
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f001 fb06 	bl	800fb10 <UART_Start_Receive_IT>
 800e504:	4603      	mov	r3, r0
 800e506:	e000      	b.n	800e50a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e508:	2302      	movs	r3, #2
  }
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3728      	adds	r7, #40	; 0x28
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	58000c00 	.word	0x58000c00

0800e518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b0ba      	sub	sp, #232	; 0xe8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	69db      	ldr	r3, [r3, #28]
 800e526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e53e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e542:	f640 030f 	movw	r3, #2063	; 0x80f
 800e546:	4013      	ands	r3, r2
 800e548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e54c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11b      	bne.n	800e58c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e558:	f003 0320 	and.w	r3, r3, #32
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d015      	beq.n	800e58c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e564:	f003 0320 	and.w	r3, r3, #32
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d105      	bne.n	800e578 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e574:	2b00      	cmp	r3, #0
 800e576:	d009      	beq.n	800e58c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 8377 	beq.w	800ec70 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	4798      	blx	r3
      }
      return;
 800e58a:	e371      	b.n	800ec70 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e58c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e590:	2b00      	cmp	r3, #0
 800e592:	f000 8123 	beq.w	800e7dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e596:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e59a:	4b8d      	ldr	r3, [pc, #564]	; (800e7d0 <HAL_UART_IRQHandler+0x2b8>)
 800e59c:	4013      	ands	r3, r2
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e5a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e5a6:	4b8b      	ldr	r3, [pc, #556]	; (800e7d4 <HAL_UART_IRQHandler+0x2bc>)
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 8116 	beq.w	800e7dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d011      	beq.n	800e5e0 <HAL_UART_IRQHandler+0xc8>
 800e5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5d6:	f043 0201 	orr.w	r2, r3, #1
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5e4:	f003 0302 	and.w	r3, r3, #2
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d011      	beq.n	800e610 <HAL_UART_IRQHandler+0xf8>
 800e5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00b      	beq.n	800e610 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e606:	f043 0204 	orr.w	r2, r3, #4
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e614:	f003 0304 	and.w	r3, r3, #4
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d011      	beq.n	800e640 <HAL_UART_IRQHandler+0x128>
 800e61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00b      	beq.n	800e640 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2204      	movs	r2, #4
 800e62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e636:	f043 0202 	orr.w	r2, r3, #2
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d017      	beq.n	800e67c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e650:	f003 0320 	and.w	r3, r3, #32
 800e654:	2b00      	cmp	r3, #0
 800e656:	d105      	bne.n	800e664 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e658:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e65c:	4b5c      	ldr	r3, [pc, #368]	; (800e7d0 <HAL_UART_IRQHandler+0x2b8>)
 800e65e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2208      	movs	r2, #8
 800e66a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e672:	f043 0208 	orr.w	r2, r3, #8
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e684:	2b00      	cmp	r3, #0
 800e686:	d012      	beq.n	800e6ae <HAL_UART_IRQHandler+0x196>
 800e688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e68c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00c      	beq.n	800e6ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e69c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6a4:	f043 0220 	orr.w	r2, r3, #32
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 82dd 	beq.w	800ec74 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6be:	f003 0320 	and.w	r3, r3, #32
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d013      	beq.n	800e6ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ca:	f003 0320 	and.w	r3, r3, #32
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d105      	bne.n	800e6de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d003      	beq.n	800e6ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e702:	2b40      	cmp	r3, #64	; 0x40
 800e704:	d005      	beq.n	800e712 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e70a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d054      	beq.n	800e7bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f001 fb1e 	bl	800fd54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e722:	2b40      	cmp	r3, #64	; 0x40
 800e724:	d146      	bne.n	800e7b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3308      	adds	r3, #8
 800e72c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e734:	e853 3f00 	ldrex	r3, [r3]
 800e738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3308      	adds	r3, #8
 800e74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1d9      	bne.n	800e726 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d017      	beq.n	800e7ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e782:	4a15      	ldr	r2, [pc, #84]	; (800e7d8 <HAL_UART_IRQHandler+0x2c0>)
 800e784:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7f7 f993 	bl	8005ab8 <HAL_DMA_Abort_IT>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d019      	beq.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e7a6:	4610      	mov	r0, r2
 800e7a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7aa:	e00f      	b.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 fa77 	bl	800eca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b2:	e00b      	b.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fa73 	bl	800eca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ba:	e007      	b.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fa6f 	bl	800eca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e7ca:	e253      	b.n	800ec74 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7cc:	bf00      	nop
    return;
 800e7ce:	e251      	b.n	800ec74 <HAL_UART_IRQHandler+0x75c>
 800e7d0:	10000001 	.word	0x10000001
 800e7d4:	04000120 	.word	0x04000120
 800e7d8:	0800fe21 	.word	0x0800fe21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	f040 81e7 	bne.w	800ebb4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7ea:	f003 0310 	and.w	r3, r3, #16
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 81e0 	beq.w	800ebb4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7f8:	f003 0310 	and.w	r3, r3, #16
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 81d9 	beq.w	800ebb4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2210      	movs	r2, #16
 800e808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e814:	2b40      	cmp	r3, #64	; 0x40
 800e816:	f040 8151 	bne.w	800eabc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a96      	ldr	r2, [pc, #600]	; (800ea7c <HAL_UART_IRQHandler+0x564>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d068      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a93      	ldr	r2, [pc, #588]	; (800ea80 <HAL_UART_IRQHandler+0x568>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d061      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a91      	ldr	r2, [pc, #580]	; (800ea84 <HAL_UART_IRQHandler+0x56c>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d05a      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a8e      	ldr	r2, [pc, #568]	; (800ea88 <HAL_UART_IRQHandler+0x570>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d053      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a8c      	ldr	r2, [pc, #560]	; (800ea8c <HAL_UART_IRQHandler+0x574>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d04c      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a89      	ldr	r2, [pc, #548]	; (800ea90 <HAL_UART_IRQHandler+0x578>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d045      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a87      	ldr	r2, [pc, #540]	; (800ea94 <HAL_UART_IRQHandler+0x57c>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d03e      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a84      	ldr	r2, [pc, #528]	; (800ea98 <HAL_UART_IRQHandler+0x580>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d037      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a82      	ldr	r2, [pc, #520]	; (800ea9c <HAL_UART_IRQHandler+0x584>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d030      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a7f      	ldr	r2, [pc, #508]	; (800eaa0 <HAL_UART_IRQHandler+0x588>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d029      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a7d      	ldr	r2, [pc, #500]	; (800eaa4 <HAL_UART_IRQHandler+0x58c>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d022      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a7a      	ldr	r2, [pc, #488]	; (800eaa8 <HAL_UART_IRQHandler+0x590>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d01b      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a78      	ldr	r2, [pc, #480]	; (800eaac <HAL_UART_IRQHandler+0x594>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d014      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a75      	ldr	r2, [pc, #468]	; (800eab0 <HAL_UART_IRQHandler+0x598>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d00d      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4a73      	ldr	r2, [pc, #460]	; (800eab4 <HAL_UART_IRQHandler+0x59c>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d006      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a70      	ldr	r2, [pc, #448]	; (800eab8 <HAL_UART_IRQHandler+0x5a0>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d106      	bne.n	800e908 <HAL_UART_IRQHandler+0x3f0>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	b29b      	uxth	r3, r3
 800e906:	e005      	b.n	800e914 <HAL_UART_IRQHandler+0x3fc>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	b29b      	uxth	r3, r3
 800e914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 81ab 	beq.w	800ec78 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e92c:	429a      	cmp	r2, r3
 800e92e:	f080 81a3 	bcs.w	800ec78 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e938:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e948:	f000 8087 	beq.w	800ea5a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e958:	e853 3f00 	ldrex	r3, [r3]
 800e95c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	461a      	mov	r2, r3
 800e972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e97a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e982:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e986:	e841 2300 	strex	r3, r2, [r1]
 800e98a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e98e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1da      	bne.n	800e94c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3308      	adds	r3, #8
 800e99c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9a0:	e853 3f00 	ldrex	r3, [r3]
 800e9a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e9a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9a8:	f023 0301 	bic.w	r3, r3, #1
 800e9ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e9ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e9be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e9c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9c6:	e841 2300 	strex	r3, r2, [r1]
 800e9ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e9cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e1      	bne.n	800e996 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9dc:	e853 3f00 	ldrex	r3, [r3]
 800e9e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e9e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	3308      	adds	r3, #8
 800e9f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e9f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9fe:	e841 2300 	strex	r3, r2, [r1]
 800ea02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ea04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1e3      	bne.n	800e9d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2220      	movs	r2, #32
 800ea0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea20:	e853 3f00 	ldrex	r3, [r3]
 800ea24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea28:	f023 0310 	bic.w	r3, r3, #16
 800ea2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	461a      	mov	r2, r3
 800ea36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e4      	bne.n	800ea18 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f6 fd11 	bl	800547c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f91d 	bl	800ecb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea7a:	e0fd      	b.n	800ec78 <HAL_UART_IRQHandler+0x760>
 800ea7c:	40020010 	.word	0x40020010
 800ea80:	40020028 	.word	0x40020028
 800ea84:	40020040 	.word	0x40020040
 800ea88:	40020058 	.word	0x40020058
 800ea8c:	40020070 	.word	0x40020070
 800ea90:	40020088 	.word	0x40020088
 800ea94:	400200a0 	.word	0x400200a0
 800ea98:	400200b8 	.word	0x400200b8
 800ea9c:	40020410 	.word	0x40020410
 800eaa0:	40020428 	.word	0x40020428
 800eaa4:	40020440 	.word	0x40020440
 800eaa8:	40020458 	.word	0x40020458
 800eaac:	40020470 	.word	0x40020470
 800eab0:	40020488 	.word	0x40020488
 800eab4:	400204a0 	.word	0x400204a0
 800eab8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f000 80cf 	beq.w	800ec7c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 80ca 	beq.w	800ec7c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	e853 3f00 	ldrex	r3, [r3]
 800eaf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eafc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	461a      	mov	r2, r3
 800eb06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eb0a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb12:	e841 2300 	strex	r3, r2, [r1]
 800eb16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1e4      	bne.n	800eae8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3308      	adds	r3, #8
 800eb24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	e853 3f00 	ldrex	r3, [r3]
 800eb2c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb2e:	6a3a      	ldr	r2, [r7, #32]
 800eb30:	4b55      	ldr	r3, [pc, #340]	; (800ec88 <HAL_UART_IRQHandler+0x770>)
 800eb32:	4013      	ands	r3, r2
 800eb34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	3308      	adds	r3, #8
 800eb3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eb42:	633a      	str	r2, [r7, #48]	; 0x30
 800eb44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb4a:	e841 2300 	strex	r3, r2, [r1]
 800eb4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1e3      	bne.n	800eb1e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2220      	movs	r2, #32
 800eb5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	e853 3f00 	ldrex	r3, [r3]
 800eb76:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f023 0310 	bic.w	r3, r3, #16
 800eb7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eb8c:	61fb      	str	r3, [r7, #28]
 800eb8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb90:	69b9      	ldr	r1, [r7, #24]
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	e841 2300 	strex	r3, r2, [r1]
 800eb98:	617b      	str	r3, [r7, #20]
   return(result);
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1e4      	bne.n	800eb6a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2202      	movs	r2, #2
 800eba4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ebaa:	4619      	mov	r1, r3
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f881 	bl	800ecb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ebb2:	e063      	b.n	800ec7c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ebb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00e      	beq.n	800ebde <HAL_UART_IRQHandler+0x6c6>
 800ebc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d008      	beq.n	800ebde <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ebd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f001 fe80 	bl	80108dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebdc:	e051      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d014      	beq.n	800ec14 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ebea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d105      	bne.n	800ec02 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ebf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d008      	beq.n	800ec14 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d03a      	beq.n	800ec80 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	4798      	blx	r3
    }
    return;
 800ec12:	e035      	b.n	800ec80 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d009      	beq.n	800ec34 <HAL_UART_IRQHandler+0x71c>
 800ec20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f001 f90d 	bl	800fe4c <UART_EndTransmit_IT>
    return;
 800ec32:	e026      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d009      	beq.n	800ec54 <HAL_UART_IRQHandler+0x73c>
 800ec40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d003      	beq.n	800ec54 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f001 fe59 	bl	8010904 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec52:	e016      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d010      	beq.n	800ec82 <HAL_UART_IRQHandler+0x76a>
 800ec60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	da0c      	bge.n	800ec82 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f001 fe41 	bl	80108f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec6e:	e008      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec70:	bf00      	nop
 800ec72:	e006      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
    return;
 800ec74:	bf00      	nop
 800ec76:	e004      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec78:	bf00      	nop
 800ec7a:	e002      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec7c:	bf00      	nop
 800ec7e:	e000      	b.n	800ec82 <HAL_UART_IRQHandler+0x76a>
    return;
 800ec80:	bf00      	nop
  }
}
 800ec82:	37e8      	adds	r7, #232	; 0xe8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	effffffe 	.word	0xeffffffe

0800ec8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecd0:	b092      	sub	sp, #72	; 0x48
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	431a      	orrs	r2, r3
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	695b      	ldr	r3, [r3, #20]
 800ecea:	431a      	orrs	r2, r3
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	69db      	ldr	r3, [r3, #28]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4bbe      	ldr	r3, [pc, #760]	; (800eff4 <UART_SetConfig+0x328>)
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	6812      	ldr	r2, [r2, #0]
 800ed02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed04:	430b      	orrs	r3, r1
 800ed06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	68da      	ldr	r2, [r3, #12]
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	430a      	orrs	r2, r1
 800ed1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	699b      	ldr	r3, [r3, #24]
 800ed22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4ab3      	ldr	r2, [pc, #716]	; (800eff8 <UART_SetConfig+0x32c>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d004      	beq.n	800ed38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed34:	4313      	orrs	r3, r2
 800ed36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	689a      	ldr	r2, [r3, #8]
 800ed3e:	4baf      	ldr	r3, [pc, #700]	; (800effc <UART_SetConfig+0x330>)
 800ed40:	4013      	ands	r3, r2
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	6812      	ldr	r2, [r2, #0]
 800ed46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed52:	f023 010f 	bic.w	r1, r3, #15
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	430a      	orrs	r2, r1
 800ed60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4aa6      	ldr	r2, [pc, #664]	; (800f000 <UART_SetConfig+0x334>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d177      	bne.n	800ee5c <UART_SetConfig+0x190>
 800ed6c:	4ba5      	ldr	r3, [pc, #660]	; (800f004 <UART_SetConfig+0x338>)
 800ed6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed74:	2b28      	cmp	r3, #40	; 0x28
 800ed76:	d86d      	bhi.n	800ee54 <UART_SetConfig+0x188>
 800ed78:	a201      	add	r2, pc, #4	; (adr r2, 800ed80 <UART_SetConfig+0xb4>)
 800ed7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7e:	bf00      	nop
 800ed80:	0800ee25 	.word	0x0800ee25
 800ed84:	0800ee55 	.word	0x0800ee55
 800ed88:	0800ee55 	.word	0x0800ee55
 800ed8c:	0800ee55 	.word	0x0800ee55
 800ed90:	0800ee55 	.word	0x0800ee55
 800ed94:	0800ee55 	.word	0x0800ee55
 800ed98:	0800ee55 	.word	0x0800ee55
 800ed9c:	0800ee55 	.word	0x0800ee55
 800eda0:	0800ee2d 	.word	0x0800ee2d
 800eda4:	0800ee55 	.word	0x0800ee55
 800eda8:	0800ee55 	.word	0x0800ee55
 800edac:	0800ee55 	.word	0x0800ee55
 800edb0:	0800ee55 	.word	0x0800ee55
 800edb4:	0800ee55 	.word	0x0800ee55
 800edb8:	0800ee55 	.word	0x0800ee55
 800edbc:	0800ee55 	.word	0x0800ee55
 800edc0:	0800ee35 	.word	0x0800ee35
 800edc4:	0800ee55 	.word	0x0800ee55
 800edc8:	0800ee55 	.word	0x0800ee55
 800edcc:	0800ee55 	.word	0x0800ee55
 800edd0:	0800ee55 	.word	0x0800ee55
 800edd4:	0800ee55 	.word	0x0800ee55
 800edd8:	0800ee55 	.word	0x0800ee55
 800eddc:	0800ee55 	.word	0x0800ee55
 800ede0:	0800ee3d 	.word	0x0800ee3d
 800ede4:	0800ee55 	.word	0x0800ee55
 800ede8:	0800ee55 	.word	0x0800ee55
 800edec:	0800ee55 	.word	0x0800ee55
 800edf0:	0800ee55 	.word	0x0800ee55
 800edf4:	0800ee55 	.word	0x0800ee55
 800edf8:	0800ee55 	.word	0x0800ee55
 800edfc:	0800ee55 	.word	0x0800ee55
 800ee00:	0800ee45 	.word	0x0800ee45
 800ee04:	0800ee55 	.word	0x0800ee55
 800ee08:	0800ee55 	.word	0x0800ee55
 800ee0c:	0800ee55 	.word	0x0800ee55
 800ee10:	0800ee55 	.word	0x0800ee55
 800ee14:	0800ee55 	.word	0x0800ee55
 800ee18:	0800ee55 	.word	0x0800ee55
 800ee1c:	0800ee55 	.word	0x0800ee55
 800ee20:	0800ee4d 	.word	0x0800ee4d
 800ee24:	2301      	movs	r3, #1
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e222      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee2c:	2304      	movs	r3, #4
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e21e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee34:	2308      	movs	r3, #8
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e21a      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee3c:	2310      	movs	r3, #16
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee42:	e216      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee44:	2320      	movs	r3, #32
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4a:	e212      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee4c:	2340      	movs	r3, #64	; 0x40
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee52:	e20e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee54:	2380      	movs	r3, #128	; 0x80
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e20a      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a69      	ldr	r2, [pc, #420]	; (800f008 <UART_SetConfig+0x33c>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d130      	bne.n	800eec8 <UART_SetConfig+0x1fc>
 800ee66:	4b67      	ldr	r3, [pc, #412]	; (800f004 <UART_SetConfig+0x338>)
 800ee68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee6a:	f003 0307 	and.w	r3, r3, #7
 800ee6e:	2b05      	cmp	r3, #5
 800ee70:	d826      	bhi.n	800eec0 <UART_SetConfig+0x1f4>
 800ee72:	a201      	add	r2, pc, #4	; (adr r2, 800ee78 <UART_SetConfig+0x1ac>)
 800ee74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee78:	0800ee91 	.word	0x0800ee91
 800ee7c:	0800ee99 	.word	0x0800ee99
 800ee80:	0800eea1 	.word	0x0800eea1
 800ee84:	0800eea9 	.word	0x0800eea9
 800ee88:	0800eeb1 	.word	0x0800eeb1
 800ee8c:	0800eeb9 	.word	0x0800eeb9
 800ee90:	2300      	movs	r3, #0
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee96:	e1ec      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ee98:	2304      	movs	r3, #4
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9e:	e1e8      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eea0:	2308      	movs	r3, #8
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea6:	e1e4      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eea8:	2310      	movs	r3, #16
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeae:	e1e0      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eeb0:	2320      	movs	r3, #32
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb6:	e1dc      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eeb8:	2340      	movs	r3, #64	; 0x40
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eebe:	e1d8      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eec0:	2380      	movs	r3, #128	; 0x80
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec6:	e1d4      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a4f      	ldr	r2, [pc, #316]	; (800f00c <UART_SetConfig+0x340>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d130      	bne.n	800ef34 <UART_SetConfig+0x268>
 800eed2:	4b4c      	ldr	r3, [pc, #304]	; (800f004 <UART_SetConfig+0x338>)
 800eed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eed6:	f003 0307 	and.w	r3, r3, #7
 800eeda:	2b05      	cmp	r3, #5
 800eedc:	d826      	bhi.n	800ef2c <UART_SetConfig+0x260>
 800eede:	a201      	add	r2, pc, #4	; (adr r2, 800eee4 <UART_SetConfig+0x218>)
 800eee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee4:	0800eefd 	.word	0x0800eefd
 800eee8:	0800ef05 	.word	0x0800ef05
 800eeec:	0800ef0d 	.word	0x0800ef0d
 800eef0:	0800ef15 	.word	0x0800ef15
 800eef4:	0800ef1d 	.word	0x0800ef1d
 800eef8:	0800ef25 	.word	0x0800ef25
 800eefc:	2300      	movs	r3, #0
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef02:	e1b6      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef04:	2304      	movs	r3, #4
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0a:	e1b2      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef0c:	2308      	movs	r3, #8
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef12:	e1ae      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef14:	2310      	movs	r3, #16
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1a:	e1aa      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef1c:	2320      	movs	r3, #32
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef22:	e1a6      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef24:	2340      	movs	r3, #64	; 0x40
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2a:	e1a2      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef2c:	2380      	movs	r3, #128	; 0x80
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef32:	e19e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a35      	ldr	r2, [pc, #212]	; (800f010 <UART_SetConfig+0x344>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d130      	bne.n	800efa0 <UART_SetConfig+0x2d4>
 800ef3e:	4b31      	ldr	r3, [pc, #196]	; (800f004 <UART_SetConfig+0x338>)
 800ef40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef42:	f003 0307 	and.w	r3, r3, #7
 800ef46:	2b05      	cmp	r3, #5
 800ef48:	d826      	bhi.n	800ef98 <UART_SetConfig+0x2cc>
 800ef4a:	a201      	add	r2, pc, #4	; (adr r2, 800ef50 <UART_SetConfig+0x284>)
 800ef4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef50:	0800ef69 	.word	0x0800ef69
 800ef54:	0800ef71 	.word	0x0800ef71
 800ef58:	0800ef79 	.word	0x0800ef79
 800ef5c:	0800ef81 	.word	0x0800ef81
 800ef60:	0800ef89 	.word	0x0800ef89
 800ef64:	0800ef91 	.word	0x0800ef91
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e180      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef70:	2304      	movs	r3, #4
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e17c      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef78:	2308      	movs	r3, #8
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e178      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef80:	2310      	movs	r3, #16
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e174      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef88:	2320      	movs	r3, #32
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8e:	e170      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef90:	2340      	movs	r3, #64	; 0x40
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef96:	e16c      	b.n	800f272 <UART_SetConfig+0x5a6>
 800ef98:	2380      	movs	r3, #128	; 0x80
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9e:	e168      	b.n	800f272 <UART_SetConfig+0x5a6>
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a1b      	ldr	r2, [pc, #108]	; (800f014 <UART_SetConfig+0x348>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d142      	bne.n	800f030 <UART_SetConfig+0x364>
 800efaa:	4b16      	ldr	r3, [pc, #88]	; (800f004 <UART_SetConfig+0x338>)
 800efac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efae:	f003 0307 	and.w	r3, r3, #7
 800efb2:	2b05      	cmp	r3, #5
 800efb4:	d838      	bhi.n	800f028 <UART_SetConfig+0x35c>
 800efb6:	a201      	add	r2, pc, #4	; (adr r2, 800efbc <UART_SetConfig+0x2f0>)
 800efb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbc:	0800efd5 	.word	0x0800efd5
 800efc0:	0800efdd 	.word	0x0800efdd
 800efc4:	0800efe5 	.word	0x0800efe5
 800efc8:	0800efed 	.word	0x0800efed
 800efcc:	0800f019 	.word	0x0800f019
 800efd0:	0800f021 	.word	0x0800f021
 800efd4:	2300      	movs	r3, #0
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e14a      	b.n	800f272 <UART_SetConfig+0x5a6>
 800efdc:	2304      	movs	r3, #4
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e146      	b.n	800f272 <UART_SetConfig+0x5a6>
 800efe4:	2308      	movs	r3, #8
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e142      	b.n	800f272 <UART_SetConfig+0x5a6>
 800efec:	2310      	movs	r3, #16
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff2:	e13e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800eff4:	cfff69f3 	.word	0xcfff69f3
 800eff8:	58000c00 	.word	0x58000c00
 800effc:	11fff4ff 	.word	0x11fff4ff
 800f000:	40011000 	.word	0x40011000
 800f004:	58024400 	.word	0x58024400
 800f008:	40004400 	.word	0x40004400
 800f00c:	40004800 	.word	0x40004800
 800f010:	40004c00 	.word	0x40004c00
 800f014:	40005000 	.word	0x40005000
 800f018:	2320      	movs	r3, #32
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e128      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f020:	2340      	movs	r3, #64	; 0x40
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e124      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f028:	2380      	movs	r3, #128	; 0x80
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e120      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4acb      	ldr	r2, [pc, #812]	; (800f364 <UART_SetConfig+0x698>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d176      	bne.n	800f128 <UART_SetConfig+0x45c>
 800f03a:	4bcb      	ldr	r3, [pc, #812]	; (800f368 <UART_SetConfig+0x69c>)
 800f03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f042:	2b28      	cmp	r3, #40	; 0x28
 800f044:	d86c      	bhi.n	800f120 <UART_SetConfig+0x454>
 800f046:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <UART_SetConfig+0x380>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f0f1 	.word	0x0800f0f1
 800f050:	0800f121 	.word	0x0800f121
 800f054:	0800f121 	.word	0x0800f121
 800f058:	0800f121 	.word	0x0800f121
 800f05c:	0800f121 	.word	0x0800f121
 800f060:	0800f121 	.word	0x0800f121
 800f064:	0800f121 	.word	0x0800f121
 800f068:	0800f121 	.word	0x0800f121
 800f06c:	0800f0f9 	.word	0x0800f0f9
 800f070:	0800f121 	.word	0x0800f121
 800f074:	0800f121 	.word	0x0800f121
 800f078:	0800f121 	.word	0x0800f121
 800f07c:	0800f121 	.word	0x0800f121
 800f080:	0800f121 	.word	0x0800f121
 800f084:	0800f121 	.word	0x0800f121
 800f088:	0800f121 	.word	0x0800f121
 800f08c:	0800f101 	.word	0x0800f101
 800f090:	0800f121 	.word	0x0800f121
 800f094:	0800f121 	.word	0x0800f121
 800f098:	0800f121 	.word	0x0800f121
 800f09c:	0800f121 	.word	0x0800f121
 800f0a0:	0800f121 	.word	0x0800f121
 800f0a4:	0800f121 	.word	0x0800f121
 800f0a8:	0800f121 	.word	0x0800f121
 800f0ac:	0800f109 	.word	0x0800f109
 800f0b0:	0800f121 	.word	0x0800f121
 800f0b4:	0800f121 	.word	0x0800f121
 800f0b8:	0800f121 	.word	0x0800f121
 800f0bc:	0800f121 	.word	0x0800f121
 800f0c0:	0800f121 	.word	0x0800f121
 800f0c4:	0800f121 	.word	0x0800f121
 800f0c8:	0800f121 	.word	0x0800f121
 800f0cc:	0800f111 	.word	0x0800f111
 800f0d0:	0800f121 	.word	0x0800f121
 800f0d4:	0800f121 	.word	0x0800f121
 800f0d8:	0800f121 	.word	0x0800f121
 800f0dc:	0800f121 	.word	0x0800f121
 800f0e0:	0800f121 	.word	0x0800f121
 800f0e4:	0800f121 	.word	0x0800f121
 800f0e8:	0800f121 	.word	0x0800f121
 800f0ec:	0800f119 	.word	0x0800f119
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e0bc      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f0f8:	2304      	movs	r3, #4
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e0b8      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f100:	2308      	movs	r3, #8
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e0b4      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f108:	2310      	movs	r3, #16
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e0b0      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f110:	2320      	movs	r3, #32
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f116:	e0ac      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f118:	2340      	movs	r3, #64	; 0x40
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e0a8      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f120:	2380      	movs	r3, #128	; 0x80
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e0a4      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a8f      	ldr	r2, [pc, #572]	; (800f36c <UART_SetConfig+0x6a0>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d130      	bne.n	800f194 <UART_SetConfig+0x4c8>
 800f132:	4b8d      	ldr	r3, [pc, #564]	; (800f368 <UART_SetConfig+0x69c>)
 800f134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f136:	f003 0307 	and.w	r3, r3, #7
 800f13a:	2b05      	cmp	r3, #5
 800f13c:	d826      	bhi.n	800f18c <UART_SetConfig+0x4c0>
 800f13e:	a201      	add	r2, pc, #4	; (adr r2, 800f144 <UART_SetConfig+0x478>)
 800f140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f144:	0800f15d 	.word	0x0800f15d
 800f148:	0800f165 	.word	0x0800f165
 800f14c:	0800f16d 	.word	0x0800f16d
 800f150:	0800f175 	.word	0x0800f175
 800f154:	0800f17d 	.word	0x0800f17d
 800f158:	0800f185 	.word	0x0800f185
 800f15c:	2300      	movs	r3, #0
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e086      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f164:	2304      	movs	r3, #4
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e082      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f16c:	2308      	movs	r3, #8
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e07e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f174:	2310      	movs	r3, #16
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17a:	e07a      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f17c:	2320      	movs	r3, #32
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f182:	e076      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f184:	2340      	movs	r3, #64	; 0x40
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18a:	e072      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f18c:	2380      	movs	r3, #128	; 0x80
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f192:	e06e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4a75      	ldr	r2, [pc, #468]	; (800f370 <UART_SetConfig+0x6a4>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d130      	bne.n	800f200 <UART_SetConfig+0x534>
 800f19e:	4b72      	ldr	r3, [pc, #456]	; (800f368 <UART_SetConfig+0x69c>)
 800f1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1a2:	f003 0307 	and.w	r3, r3, #7
 800f1a6:	2b05      	cmp	r3, #5
 800f1a8:	d826      	bhi.n	800f1f8 <UART_SetConfig+0x52c>
 800f1aa:	a201      	add	r2, pc, #4	; (adr r2, 800f1b0 <UART_SetConfig+0x4e4>)
 800f1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1b0:	0800f1c9 	.word	0x0800f1c9
 800f1b4:	0800f1d1 	.word	0x0800f1d1
 800f1b8:	0800f1d9 	.word	0x0800f1d9
 800f1bc:	0800f1e1 	.word	0x0800f1e1
 800f1c0:	0800f1e9 	.word	0x0800f1e9
 800f1c4:	0800f1f1 	.word	0x0800f1f1
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ce:	e050      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f1d0:	2304      	movs	r3, #4
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d6:	e04c      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f1d8:	2308      	movs	r3, #8
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1de:	e048      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f1e0:	2310      	movs	r3, #16
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e6:	e044      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f1e8:	2320      	movs	r3, #32
 800f1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ee:	e040      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f1f0:	2340      	movs	r3, #64	; 0x40
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f6:	e03c      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f1f8:	2380      	movs	r3, #128	; 0x80
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1fe:	e038      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a5b      	ldr	r2, [pc, #364]	; (800f374 <UART_SetConfig+0x6a8>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d130      	bne.n	800f26c <UART_SetConfig+0x5a0>
 800f20a:	4b57      	ldr	r3, [pc, #348]	; (800f368 <UART_SetConfig+0x69c>)
 800f20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f20e:	f003 0307 	and.w	r3, r3, #7
 800f212:	2b05      	cmp	r3, #5
 800f214:	d826      	bhi.n	800f264 <UART_SetConfig+0x598>
 800f216:	a201      	add	r2, pc, #4	; (adr r2, 800f21c <UART_SetConfig+0x550>)
 800f218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21c:	0800f235 	.word	0x0800f235
 800f220:	0800f23d 	.word	0x0800f23d
 800f224:	0800f245 	.word	0x0800f245
 800f228:	0800f24d 	.word	0x0800f24d
 800f22c:	0800f255 	.word	0x0800f255
 800f230:	0800f25d 	.word	0x0800f25d
 800f234:	2302      	movs	r3, #2
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23a:	e01a      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f23c:	2304      	movs	r3, #4
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f242:	e016      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f244:	2308      	movs	r3, #8
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24a:	e012      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f24c:	2310      	movs	r3, #16
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f252:	e00e      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f254:	2320      	movs	r3, #32
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25a:	e00a      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f25c:	2340      	movs	r3, #64	; 0x40
 800f25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f262:	e006      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f264:	2380      	movs	r3, #128	; 0x80
 800f266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26a:	e002      	b.n	800f272 <UART_SetConfig+0x5a6>
 800f26c:	2380      	movs	r3, #128	; 0x80
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a3f      	ldr	r2, [pc, #252]	; (800f374 <UART_SetConfig+0x6a8>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	f040 80f8 	bne.w	800f46e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f27e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f282:	2b20      	cmp	r3, #32
 800f284:	dc46      	bgt.n	800f314 <UART_SetConfig+0x648>
 800f286:	2b02      	cmp	r3, #2
 800f288:	f2c0 8082 	blt.w	800f390 <UART_SetConfig+0x6c4>
 800f28c:	3b02      	subs	r3, #2
 800f28e:	2b1e      	cmp	r3, #30
 800f290:	d87e      	bhi.n	800f390 <UART_SetConfig+0x6c4>
 800f292:	a201      	add	r2, pc, #4	; (adr r2, 800f298 <UART_SetConfig+0x5cc>)
 800f294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f298:	0800f31b 	.word	0x0800f31b
 800f29c:	0800f391 	.word	0x0800f391
 800f2a0:	0800f323 	.word	0x0800f323
 800f2a4:	0800f391 	.word	0x0800f391
 800f2a8:	0800f391 	.word	0x0800f391
 800f2ac:	0800f391 	.word	0x0800f391
 800f2b0:	0800f333 	.word	0x0800f333
 800f2b4:	0800f391 	.word	0x0800f391
 800f2b8:	0800f391 	.word	0x0800f391
 800f2bc:	0800f391 	.word	0x0800f391
 800f2c0:	0800f391 	.word	0x0800f391
 800f2c4:	0800f391 	.word	0x0800f391
 800f2c8:	0800f391 	.word	0x0800f391
 800f2cc:	0800f391 	.word	0x0800f391
 800f2d0:	0800f343 	.word	0x0800f343
 800f2d4:	0800f391 	.word	0x0800f391
 800f2d8:	0800f391 	.word	0x0800f391
 800f2dc:	0800f391 	.word	0x0800f391
 800f2e0:	0800f391 	.word	0x0800f391
 800f2e4:	0800f391 	.word	0x0800f391
 800f2e8:	0800f391 	.word	0x0800f391
 800f2ec:	0800f391 	.word	0x0800f391
 800f2f0:	0800f391 	.word	0x0800f391
 800f2f4:	0800f391 	.word	0x0800f391
 800f2f8:	0800f391 	.word	0x0800f391
 800f2fc:	0800f391 	.word	0x0800f391
 800f300:	0800f391 	.word	0x0800f391
 800f304:	0800f391 	.word	0x0800f391
 800f308:	0800f391 	.word	0x0800f391
 800f30c:	0800f391 	.word	0x0800f391
 800f310:	0800f383 	.word	0x0800f383
 800f314:	2b40      	cmp	r3, #64	; 0x40
 800f316:	d037      	beq.n	800f388 <UART_SetConfig+0x6bc>
 800f318:	e03a      	b.n	800f390 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f31a:	f7fc f8d5 	bl	800b4c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f31e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f320:	e03c      	b.n	800f39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f326:	4618      	mov	r0, r3
 800f328:	f7fc f8e4 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f330:	e034      	b.n	800f39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f332:	f107 0318 	add.w	r3, r7, #24
 800f336:	4618      	mov	r0, r3
 800f338:	f7fc fa30 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f340:	e02c      	b.n	800f39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f342:	4b09      	ldr	r3, [pc, #36]	; (800f368 <UART_SetConfig+0x69c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f003 0320 	and.w	r3, r3, #32
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d016      	beq.n	800f37c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f34e:	4b06      	ldr	r3, [pc, #24]	; (800f368 <UART_SetConfig+0x69c>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	08db      	lsrs	r3, r3, #3
 800f354:	f003 0303 	and.w	r3, r3, #3
 800f358:	4a07      	ldr	r2, [pc, #28]	; (800f378 <UART_SetConfig+0x6ac>)
 800f35a:	fa22 f303 	lsr.w	r3, r2, r3
 800f35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f360:	e01c      	b.n	800f39c <UART_SetConfig+0x6d0>
 800f362:	bf00      	nop
 800f364:	40011400 	.word	0x40011400
 800f368:	58024400 	.word	0x58024400
 800f36c:	40007800 	.word	0x40007800
 800f370:	40007c00 	.word	0x40007c00
 800f374:	58000c00 	.word	0x58000c00
 800f378:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f37c:	4b9d      	ldr	r3, [pc, #628]	; (800f5f4 <UART_SetConfig+0x928>)
 800f37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f380:	e00c      	b.n	800f39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f382:	4b9d      	ldr	r3, [pc, #628]	; (800f5f8 <UART_SetConfig+0x92c>)
 800f384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f386:	e009      	b.n	800f39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f38e:	e005      	b.n	800f39c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f390:	2300      	movs	r3, #0
 800f392:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f394:	2301      	movs	r3, #1
 800f396:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f39a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 81de 	beq.w	800f760 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a8:	4a94      	ldr	r2, [pc, #592]	; (800f5fc <UART_SetConfig+0x930>)
 800f3aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	005b      	lsls	r3, r3, #1
 800f3c0:	4413      	add	r3, r2
 800f3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d305      	bcc.n	800f3d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d903      	bls.n	800f3dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3da:	e1c1      	b.n	800f760 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3de:	2200      	movs	r2, #0
 800f3e0:	60bb      	str	r3, [r7, #8]
 800f3e2:	60fa      	str	r2, [r7, #12]
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e8:	4a84      	ldr	r2, [pc, #528]	; (800f5fc <UART_SetConfig+0x930>)
 800f3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	603b      	str	r3, [r7, #0]
 800f3f4:	607a      	str	r2, [r7, #4]
 800f3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3fe:	f7f0 ff6b 	bl	80002d8 <__aeabi_uldivmod>
 800f402:	4602      	mov	r2, r0
 800f404:	460b      	mov	r3, r1
 800f406:	4610      	mov	r0, r2
 800f408:	4619      	mov	r1, r3
 800f40a:	f04f 0200 	mov.w	r2, #0
 800f40e:	f04f 0300 	mov.w	r3, #0
 800f412:	020b      	lsls	r3, r1, #8
 800f414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f418:	0202      	lsls	r2, r0, #8
 800f41a:	6979      	ldr	r1, [r7, #20]
 800f41c:	6849      	ldr	r1, [r1, #4]
 800f41e:	0849      	lsrs	r1, r1, #1
 800f420:	2000      	movs	r0, #0
 800f422:	460c      	mov	r4, r1
 800f424:	4605      	mov	r5, r0
 800f426:	eb12 0804 	adds.w	r8, r2, r4
 800f42a:	eb43 0905 	adc.w	r9, r3, r5
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	469a      	mov	sl, r3
 800f436:	4693      	mov	fp, r2
 800f438:	4652      	mov	r2, sl
 800f43a:	465b      	mov	r3, fp
 800f43c:	4640      	mov	r0, r8
 800f43e:	4649      	mov	r1, r9
 800f440:	f7f0 ff4a 	bl	80002d8 <__aeabi_uldivmod>
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	4613      	mov	r3, r2
 800f44a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f452:	d308      	bcc.n	800f466 <UART_SetConfig+0x79a>
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f45a:	d204      	bcs.n	800f466 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f462:	60da      	str	r2, [r3, #12]
 800f464:	e17c      	b.n	800f760 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f46c:	e178      	b.n	800f760 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	69db      	ldr	r3, [r3, #28]
 800f472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f476:	f040 80c5 	bne.w	800f604 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f47a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f47e:	2b20      	cmp	r3, #32
 800f480:	dc48      	bgt.n	800f514 <UART_SetConfig+0x848>
 800f482:	2b00      	cmp	r3, #0
 800f484:	db7b      	blt.n	800f57e <UART_SetConfig+0x8b2>
 800f486:	2b20      	cmp	r3, #32
 800f488:	d879      	bhi.n	800f57e <UART_SetConfig+0x8b2>
 800f48a:	a201      	add	r2, pc, #4	; (adr r2, 800f490 <UART_SetConfig+0x7c4>)
 800f48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f490:	0800f51b 	.word	0x0800f51b
 800f494:	0800f523 	.word	0x0800f523
 800f498:	0800f57f 	.word	0x0800f57f
 800f49c:	0800f57f 	.word	0x0800f57f
 800f4a0:	0800f52b 	.word	0x0800f52b
 800f4a4:	0800f57f 	.word	0x0800f57f
 800f4a8:	0800f57f 	.word	0x0800f57f
 800f4ac:	0800f57f 	.word	0x0800f57f
 800f4b0:	0800f53b 	.word	0x0800f53b
 800f4b4:	0800f57f 	.word	0x0800f57f
 800f4b8:	0800f57f 	.word	0x0800f57f
 800f4bc:	0800f57f 	.word	0x0800f57f
 800f4c0:	0800f57f 	.word	0x0800f57f
 800f4c4:	0800f57f 	.word	0x0800f57f
 800f4c8:	0800f57f 	.word	0x0800f57f
 800f4cc:	0800f57f 	.word	0x0800f57f
 800f4d0:	0800f54b 	.word	0x0800f54b
 800f4d4:	0800f57f 	.word	0x0800f57f
 800f4d8:	0800f57f 	.word	0x0800f57f
 800f4dc:	0800f57f 	.word	0x0800f57f
 800f4e0:	0800f57f 	.word	0x0800f57f
 800f4e4:	0800f57f 	.word	0x0800f57f
 800f4e8:	0800f57f 	.word	0x0800f57f
 800f4ec:	0800f57f 	.word	0x0800f57f
 800f4f0:	0800f57f 	.word	0x0800f57f
 800f4f4:	0800f57f 	.word	0x0800f57f
 800f4f8:	0800f57f 	.word	0x0800f57f
 800f4fc:	0800f57f 	.word	0x0800f57f
 800f500:	0800f57f 	.word	0x0800f57f
 800f504:	0800f57f 	.word	0x0800f57f
 800f508:	0800f57f 	.word	0x0800f57f
 800f50c:	0800f57f 	.word	0x0800f57f
 800f510:	0800f571 	.word	0x0800f571
 800f514:	2b40      	cmp	r3, #64	; 0x40
 800f516:	d02e      	beq.n	800f576 <UART_SetConfig+0x8aa>
 800f518:	e031      	b.n	800f57e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f51a:	f7fa f81f 	bl	800955c <HAL_RCC_GetPCLK1Freq>
 800f51e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f520:	e033      	b.n	800f58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f522:	f7fa f831 	bl	8009588 <HAL_RCC_GetPCLK2Freq>
 800f526:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f528:	e02f      	b.n	800f58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f52a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fb ffe0 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f538:	e027      	b.n	800f58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f53a:	f107 0318 	add.w	r3, r7, #24
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fc f92c 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f548:	e01f      	b.n	800f58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f54a:	4b2d      	ldr	r3, [pc, #180]	; (800f600 <UART_SetConfig+0x934>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f003 0320 	and.w	r3, r3, #32
 800f552:	2b00      	cmp	r3, #0
 800f554:	d009      	beq.n	800f56a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f556:	4b2a      	ldr	r3, [pc, #168]	; (800f600 <UART_SetConfig+0x934>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	08db      	lsrs	r3, r3, #3
 800f55c:	f003 0303 	and.w	r3, r3, #3
 800f560:	4a24      	ldr	r2, [pc, #144]	; (800f5f4 <UART_SetConfig+0x928>)
 800f562:	fa22 f303 	lsr.w	r3, r2, r3
 800f566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f568:	e00f      	b.n	800f58a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f56a:	4b22      	ldr	r3, [pc, #136]	; (800f5f4 <UART_SetConfig+0x928>)
 800f56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f56e:	e00c      	b.n	800f58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f570:	4b21      	ldr	r3, [pc, #132]	; (800f5f8 <UART_SetConfig+0x92c>)
 800f572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f574:	e009      	b.n	800f58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f57c:	e005      	b.n	800f58a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f57e:	2300      	movs	r3, #0
 800f580:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f582:	2301      	movs	r3, #1
 800f584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f000 80e7 	beq.w	800f760 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f596:	4a19      	ldr	r2, [pc, #100]	; (800f5fc <UART_SetConfig+0x930>)
 800f598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f59c:	461a      	mov	r2, r3
 800f59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5a4:	005a      	lsls	r2, r3, #1
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	085b      	lsrs	r3, r3, #1
 800f5ac:	441a      	add	r2, r3
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	2b0f      	cmp	r3, #15
 800f5bc:	d916      	bls.n	800f5ec <UART_SetConfig+0x920>
 800f5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5c4:	d212      	bcs.n	800f5ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	f023 030f 	bic.w	r3, r3, #15
 800f5ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	085b      	lsrs	r3, r3, #1
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5e8:	60da      	str	r2, [r3, #12]
 800f5ea:	e0b9      	b.n	800f760 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f5f2:	e0b5      	b.n	800f760 <UART_SetConfig+0xa94>
 800f5f4:	03d09000 	.word	0x03d09000
 800f5f8:	003d0900 	.word	0x003d0900
 800f5fc:	08010e04 	.word	0x08010e04
 800f600:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f604:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f608:	2b20      	cmp	r3, #32
 800f60a:	dc49      	bgt.n	800f6a0 <UART_SetConfig+0x9d4>
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	db7c      	blt.n	800f70a <UART_SetConfig+0xa3e>
 800f610:	2b20      	cmp	r3, #32
 800f612:	d87a      	bhi.n	800f70a <UART_SetConfig+0xa3e>
 800f614:	a201      	add	r2, pc, #4	; (adr r2, 800f61c <UART_SetConfig+0x950>)
 800f616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61a:	bf00      	nop
 800f61c:	0800f6a7 	.word	0x0800f6a7
 800f620:	0800f6af 	.word	0x0800f6af
 800f624:	0800f70b 	.word	0x0800f70b
 800f628:	0800f70b 	.word	0x0800f70b
 800f62c:	0800f6b7 	.word	0x0800f6b7
 800f630:	0800f70b 	.word	0x0800f70b
 800f634:	0800f70b 	.word	0x0800f70b
 800f638:	0800f70b 	.word	0x0800f70b
 800f63c:	0800f6c7 	.word	0x0800f6c7
 800f640:	0800f70b 	.word	0x0800f70b
 800f644:	0800f70b 	.word	0x0800f70b
 800f648:	0800f70b 	.word	0x0800f70b
 800f64c:	0800f70b 	.word	0x0800f70b
 800f650:	0800f70b 	.word	0x0800f70b
 800f654:	0800f70b 	.word	0x0800f70b
 800f658:	0800f70b 	.word	0x0800f70b
 800f65c:	0800f6d7 	.word	0x0800f6d7
 800f660:	0800f70b 	.word	0x0800f70b
 800f664:	0800f70b 	.word	0x0800f70b
 800f668:	0800f70b 	.word	0x0800f70b
 800f66c:	0800f70b 	.word	0x0800f70b
 800f670:	0800f70b 	.word	0x0800f70b
 800f674:	0800f70b 	.word	0x0800f70b
 800f678:	0800f70b 	.word	0x0800f70b
 800f67c:	0800f70b 	.word	0x0800f70b
 800f680:	0800f70b 	.word	0x0800f70b
 800f684:	0800f70b 	.word	0x0800f70b
 800f688:	0800f70b 	.word	0x0800f70b
 800f68c:	0800f70b 	.word	0x0800f70b
 800f690:	0800f70b 	.word	0x0800f70b
 800f694:	0800f70b 	.word	0x0800f70b
 800f698:	0800f70b 	.word	0x0800f70b
 800f69c:	0800f6fd 	.word	0x0800f6fd
 800f6a0:	2b40      	cmp	r3, #64	; 0x40
 800f6a2:	d02e      	beq.n	800f702 <UART_SetConfig+0xa36>
 800f6a4:	e031      	b.n	800f70a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6a6:	f7f9 ff59 	bl	800955c <HAL_RCC_GetPCLK1Freq>
 800f6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6ac:	e033      	b.n	800f716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6ae:	f7f9 ff6b 	bl	8009588 <HAL_RCC_GetPCLK2Freq>
 800f6b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6b4:	e02f      	b.n	800f716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fb ff1a 	bl	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c4:	e027      	b.n	800f716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6c6:	f107 0318 	add.w	r3, r7, #24
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fc f866 	bl	800b79c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6d4:	e01f      	b.n	800f716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6d6:	4b2d      	ldr	r3, [pc, #180]	; (800f78c <UART_SetConfig+0xac0>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f003 0320 	and.w	r3, r3, #32
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d009      	beq.n	800f6f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6e2:	4b2a      	ldr	r3, [pc, #168]	; (800f78c <UART_SetConfig+0xac0>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	08db      	lsrs	r3, r3, #3
 800f6e8:	f003 0303 	and.w	r3, r3, #3
 800f6ec:	4a28      	ldr	r2, [pc, #160]	; (800f790 <UART_SetConfig+0xac4>)
 800f6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6f4:	e00f      	b.n	800f716 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f6f6:	4b26      	ldr	r3, [pc, #152]	; (800f790 <UART_SetConfig+0xac4>)
 800f6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6fa:	e00c      	b.n	800f716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6fc:	4b25      	ldr	r3, [pc, #148]	; (800f794 <UART_SetConfig+0xac8>)
 800f6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f700:	e009      	b.n	800f716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f708:	e005      	b.n	800f716 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f70a:	2300      	movs	r3, #0
 800f70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f714:	bf00      	nop
    }

    if (pclk != 0U)
 800f716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d021      	beq.n	800f760 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f720:	4a1d      	ldr	r2, [pc, #116]	; (800f798 <UART_SetConfig+0xacc>)
 800f722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f726:	461a      	mov	r2, r3
 800f728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f72a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	085b      	lsrs	r3, r3, #1
 800f734:	441a      	add	r2, r3
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f73e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f742:	2b0f      	cmp	r3, #15
 800f744:	d909      	bls.n	800f75a <UART_SetConfig+0xa8e>
 800f746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f74c:	d205      	bcs.n	800f75a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f750:	b29a      	uxth	r2, r3
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60da      	str	r2, [r3, #12]
 800f758:	e002      	b.n	800f760 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	2201      	movs	r2, #1
 800f764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	2200      	movs	r2, #0
 800f774:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	2200      	movs	r2, #0
 800f77a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f77c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f780:	4618      	mov	r0, r3
 800f782:	3748      	adds	r7, #72	; 0x48
 800f784:	46bd      	mov	sp, r7
 800f786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f78a:	bf00      	nop
 800f78c:	58024400 	.word	0x58024400
 800f790:	03d09000 	.word	0x03d09000
 800f794:	003d0900 	.word	0x003d0900
 800f798:	08010e04 	.word	0x08010e04

0800f79c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a8:	f003 0308 	and.w	r3, r3, #8
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00a      	beq.n	800f7c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00a      	beq.n	800f7e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	430a      	orrs	r2, r1
 800f7e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ec:	f003 0302 	and.w	r3, r3, #2
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d00a      	beq.n	800f80a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	430a      	orrs	r2, r1
 800f808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80e:	f003 0304 	and.w	r3, r3, #4
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00a      	beq.n	800f82c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	430a      	orrs	r2, r1
 800f82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f830:	f003 0310 	and.w	r3, r3, #16
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00a      	beq.n	800f84e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	430a      	orrs	r2, r1
 800f84c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f852:	f003 0320 	and.w	r3, r3, #32
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00a      	beq.n	800f870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	430a      	orrs	r2, r1
 800f86e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d01a      	beq.n	800f8b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	430a      	orrs	r2, r1
 800f890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f89a:	d10a      	bne.n	800f8b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	430a      	orrs	r2, r1
 800f8b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00a      	beq.n	800f8d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	430a      	orrs	r2, r1
 800f8d2:	605a      	str	r2, [r3, #4]
  }
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b098      	sub	sp, #96	; 0x60
 800f8e4:	af02      	add	r7, sp, #8
 800f8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f8f0:	f7f2 ff82 	bl	80027f8 <HAL_GetTick>
 800f8f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f003 0308 	and.w	r3, r3, #8
 800f900:	2b08      	cmp	r3, #8
 800f902:	d12f      	bne.n	800f964 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f908:	9300      	str	r3, [sp, #0]
 800f90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f90c:	2200      	movs	r2, #0
 800f90e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f88e 	bl	800fa34 <UART_WaitOnFlagUntilTimeout>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d022      	beq.n	800f964 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	e853 3f00 	ldrex	r3, [r3]
 800f92a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f932:	653b      	str	r3, [r7, #80]	; 0x50
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f93c:	647b      	str	r3, [r7, #68]	; 0x44
 800f93e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f944:	e841 2300 	strex	r3, r2, [r1]
 800f948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e6      	bne.n	800f91e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2220      	movs	r2, #32
 800f954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f960:	2303      	movs	r3, #3
 800f962:	e063      	b.n	800fa2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f003 0304 	and.w	r3, r3, #4
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d149      	bne.n	800fa06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f972:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f97a:	2200      	movs	r2, #0
 800f97c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 f857 	bl	800fa34 <UART_WaitOnFlagUntilTimeout>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d03c      	beq.n	800fa06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f994:	e853 3f00 	ldrex	r3, [r3]
 800f998:	623b      	str	r3, [r7, #32]
   return(result);
 800f99a:	6a3b      	ldr	r3, [r7, #32]
 800f99c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9aa:	633b      	str	r3, [r7, #48]	; 0x30
 800f9ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9b2:	e841 2300 	strex	r3, r2, [r1]
 800f9b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1e6      	bne.n	800f98c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	e853 3f00 	ldrex	r3, [r3]
 800f9cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f023 0301 	bic.w	r3, r3, #1
 800f9d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9de:	61fa      	str	r2, [r7, #28]
 800f9e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e2:	69b9      	ldr	r1, [r7, #24]
 800f9e4:	69fa      	ldr	r2, [r7, #28]
 800f9e6:	e841 2300 	strex	r3, r2, [r1]
 800f9ea:	617b      	str	r3, [r7, #20]
   return(result);
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e5      	bne.n	800f9be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2220      	movs	r2, #32
 800f9f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa02:	2303      	movs	r3, #3
 800fa04:	e012      	b.n	800fa2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2220      	movs	r2, #32
 800fa0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2220      	movs	r2, #32
 800fa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2200      	movs	r2, #0
 800fa26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3758      	adds	r7, #88	; 0x58
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	603b      	str	r3, [r7, #0]
 800fa40:	4613      	mov	r3, r2
 800fa42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa44:	e04f      	b.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa4c:	d04b      	beq.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa4e:	f7f2 fed3 	bl	80027f8 <HAL_GetTick>
 800fa52:	4602      	mov	r2, r0
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	69ba      	ldr	r2, [r7, #24]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d302      	bcc.n	800fa64 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d101      	bne.n	800fa68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa64:	2303      	movs	r3, #3
 800fa66:	e04e      	b.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f003 0304 	and.w	r3, r3, #4
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d037      	beq.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	2b80      	cmp	r3, #128	; 0x80
 800fa7a:	d034      	beq.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b40      	cmp	r3, #64	; 0x40
 800fa80:	d031      	beq.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	69db      	ldr	r3, [r3, #28]
 800fa88:	f003 0308 	and.w	r3, r3, #8
 800fa8c:	2b08      	cmp	r3, #8
 800fa8e:	d110      	bne.n	800fab2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2208      	movs	r2, #8
 800fa96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f000 f95b 	bl	800fd54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2208      	movs	r2, #8
 800faa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800faae:	2301      	movs	r3, #1
 800fab0:	e029      	b.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	69db      	ldr	r3, [r3, #28]
 800fab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fabc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fac0:	d111      	bne.n	800fae6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800faca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f000 f941 	bl	800fd54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2220      	movs	r2, #32
 800fad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fae2:	2303      	movs	r3, #3
 800fae4:	e00f      	b.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	69da      	ldr	r2, [r3, #28]
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	4013      	ands	r3, r2
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	bf0c      	ite	eq
 800faf6:	2301      	moveq	r3, #1
 800faf8:	2300      	movne	r3, #0
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	461a      	mov	r2, r3
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d0a0      	beq.n	800fa46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b0a3      	sub	sp, #140	; 0x8c
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	88fa      	ldrh	r2, [r7, #6]
 800fb28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	88fa      	ldrh	r2, [r7, #6]
 800fb30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	689b      	ldr	r3, [r3, #8]
 800fb3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb42:	d10e      	bne.n	800fb62 <UART_Start_Receive_IT+0x52>
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	691b      	ldr	r3, [r3, #16]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d105      	bne.n	800fb58 <UART_Start_Receive_IT+0x48>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb56:	e02d      	b.n	800fbb4 <UART_Start_Receive_IT+0xa4>
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	22ff      	movs	r2, #255	; 0xff
 800fb5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb60:	e028      	b.n	800fbb4 <UART_Start_Receive_IT+0xa4>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d10d      	bne.n	800fb86 <UART_Start_Receive_IT+0x76>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d104      	bne.n	800fb7c <UART_Start_Receive_IT+0x6c>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	22ff      	movs	r2, #255	; 0xff
 800fb76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb7a:	e01b      	b.n	800fbb4 <UART_Start_Receive_IT+0xa4>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	227f      	movs	r2, #127	; 0x7f
 800fb80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb84:	e016      	b.n	800fbb4 <UART_Start_Receive_IT+0xa4>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb8e:	d10d      	bne.n	800fbac <UART_Start_Receive_IT+0x9c>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d104      	bne.n	800fba2 <UART_Start_Receive_IT+0x92>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	227f      	movs	r2, #127	; 0x7f
 800fb9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fba0:	e008      	b.n	800fbb4 <UART_Start_Receive_IT+0xa4>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	223f      	movs	r2, #63	; 0x3f
 800fba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbaa:	e003      	b.n	800fbb4 <UART_Start_Receive_IT+0xa4>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2222      	movs	r2, #34	; 0x22
 800fbc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3308      	adds	r3, #8
 800fbca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbce:	e853 3f00 	ldrex	r3, [r3]
 800fbd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fbd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbd6:	f043 0301 	orr.w	r3, r3, #1
 800fbda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fbe8:	673a      	str	r2, [r7, #112]	; 0x70
 800fbea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fbee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbf0:	e841 2300 	strex	r3, r2, [r1]
 800fbf4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fbf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1e3      	bne.n	800fbc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc04:	d14f      	bne.n	800fca6 <UART_Start_Receive_IT+0x196>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc0c:	88fa      	ldrh	r2, [r7, #6]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d349      	bcc.n	800fca6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc1a:	d107      	bne.n	800fc2c <UART_Start_Receive_IT+0x11c>
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d103      	bne.n	800fc2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4a47      	ldr	r2, [pc, #284]	; (800fd44 <UART_Start_Receive_IT+0x234>)
 800fc28:	675a      	str	r2, [r3, #116]	; 0x74
 800fc2a:	e002      	b.n	800fc32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4a46      	ldr	r2, [pc, #280]	; (800fd48 <UART_Start_Receive_IT+0x238>)
 800fc30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d01a      	beq.n	800fc70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc42:	e853 3f00 	ldrex	r3, [r3]
 800fc46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	461a      	mov	r2, r3
 800fc58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fc6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e4      	bne.n	800fc3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3308      	adds	r3, #8
 800fc76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc7a:	e853 3f00 	ldrex	r3, [r3]
 800fc7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc86:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3308      	adds	r3, #8
 800fc8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fc90:	64ba      	str	r2, [r7, #72]	; 0x48
 800fc92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc98:	e841 2300 	strex	r3, r2, [r1]
 800fc9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fc9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1e5      	bne.n	800fc70 <UART_Start_Receive_IT+0x160>
 800fca4:	e046      	b.n	800fd34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcae:	d107      	bne.n	800fcc0 <UART_Start_Receive_IT+0x1b0>
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d103      	bne.n	800fcc0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	4a24      	ldr	r2, [pc, #144]	; (800fd4c <UART_Start_Receive_IT+0x23c>)
 800fcbc:	675a      	str	r2, [r3, #116]	; 0x74
 800fcbe:	e002      	b.n	800fcc6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	4a23      	ldr	r2, [pc, #140]	; (800fd50 <UART_Start_Receive_IT+0x240>)
 800fcc4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d019      	beq.n	800fd02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd6:	e853 3f00 	ldrex	r3, [r3]
 800fcda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fce2:	677b      	str	r3, [r7, #116]	; 0x74
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	461a      	mov	r2, r3
 800fcea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcec:	637b      	str	r3, [r7, #52]	; 0x34
 800fcee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcf4:	e841 2300 	strex	r3, r2, [r1]
 800fcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e6      	bne.n	800fcce <UART_Start_Receive_IT+0x1be>
 800fd00:	e018      	b.n	800fd34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	e853 3f00 	ldrex	r3, [r3]
 800fd0e:	613b      	str	r3, [r7, #16]
   return(result);
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	f043 0320 	orr.w	r3, r3, #32
 800fd16:	67bb      	str	r3, [r7, #120]	; 0x78
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd20:	623b      	str	r3, [r7, #32]
 800fd22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd24:	69f9      	ldr	r1, [r7, #28]
 800fd26:	6a3a      	ldr	r2, [r7, #32]
 800fd28:	e841 2300 	strex	r3, r2, [r1]
 800fd2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d1e6      	bne.n	800fd02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	378c      	adds	r7, #140	; 0x8c
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop
 800fd44:	08010575 	.word	0x08010575
 800fd48:	08010215 	.word	0x08010215
 800fd4c:	0801005d 	.word	0x0801005d
 800fd50:	0800fea5 	.word	0x0800fea5

0800fd54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b095      	sub	sp, #84	; 0x54
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd64:	e853 3f00 	ldrex	r3, [r3]
 800fd68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd7a:	643b      	str	r3, [r7, #64]	; 0x40
 800fd7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd82:	e841 2300 	strex	r3, r2, [r1]
 800fd86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d1e6      	bne.n	800fd5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3308      	adds	r3, #8
 800fd94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd96:	6a3b      	ldr	r3, [r7, #32]
 800fd98:	e853 3f00 	ldrex	r3, [r3]
 800fd9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd9e:	69fa      	ldr	r2, [r7, #28]
 800fda0:	4b1e      	ldr	r3, [pc, #120]	; (800fe1c <UART_EndRxTransfer+0xc8>)
 800fda2:	4013      	ands	r3, r2
 800fda4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3308      	adds	r3, #8
 800fdac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fdb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdb6:	e841 2300 	strex	r3, r2, [r1]
 800fdba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1e5      	bne.n	800fd8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d118      	bne.n	800fdfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	e853 3f00 	ldrex	r3, [r3]
 800fdd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	f023 0310 	bic.w	r3, r3, #16
 800fdde:	647b      	str	r3, [r7, #68]	; 0x44
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	461a      	mov	r2, r3
 800fde6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fde8:	61bb      	str	r3, [r7, #24]
 800fdea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdec:	6979      	ldr	r1, [r7, #20]
 800fdee:	69ba      	ldr	r2, [r7, #24]
 800fdf0:	e841 2300 	strex	r3, r2, [r1]
 800fdf4:	613b      	str	r3, [r7, #16]
   return(result);
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d1e6      	bne.n	800fdca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2220      	movs	r2, #32
 800fe00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fe10:	bf00      	nop
 800fe12:	3754      	adds	r7, #84	; 0x54
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr
 800fe1c:	effffffe 	.word	0xeffffffe

0800fe20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f7fe ff2e 	bl	800eca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe44:	bf00      	nop
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b088      	sub	sp, #32
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	e853 3f00 	ldrex	r3, [r3]
 800fe60:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe68:	61fb      	str	r3, [r7, #28]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	61bb      	str	r3, [r7, #24]
 800fe74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe76:	6979      	ldr	r1, [r7, #20]
 800fe78:	69ba      	ldr	r2, [r7, #24]
 800fe7a:	e841 2300 	strex	r3, r2, [r1]
 800fe7e:	613b      	str	r3, [r7, #16]
   return(result);
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1e6      	bne.n	800fe54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2220      	movs	r2, #32
 800fe8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2200      	movs	r2, #0
 800fe92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7fe fef9 	bl	800ec8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe9a:	bf00      	nop
 800fe9c:	3720      	adds	r7, #32
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b09c      	sub	sp, #112	; 0x70
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800feb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800febc:	2b22      	cmp	r3, #34	; 0x22
 800febe:	f040 80be 	bne.w	801003e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fecc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fed0:	b2d9      	uxtb	r1, r3
 800fed2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fedc:	400a      	ands	r2, r1
 800fede:	b2d2      	uxtb	r2, r2
 800fee0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fee6:	1c5a      	adds	r2, r3, #1
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	3b01      	subs	r3, #1
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f040 80a1 	bne.w	801004e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff14:	e853 3f00 	ldrex	r3, [r3]
 800ff18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff20:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	461a      	mov	r2, r3
 800ff28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff32:	e841 2300 	strex	r3, r2, [r1]
 800ff36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d1e6      	bne.n	800ff0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	3308      	adds	r3, #8
 800ff44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	e853 3f00 	ldrex	r3, [r3]
 800ff4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff50:	f023 0301 	bic.w	r3, r3, #1
 800ff54:	667b      	str	r3, [r7, #100]	; 0x64
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3308      	adds	r3, #8
 800ff5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff5e:	647a      	str	r2, [r7, #68]	; 0x44
 800ff60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff66:	e841 2300 	strex	r3, r2, [r1]
 800ff6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d1e5      	bne.n	800ff3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2220      	movs	r2, #32
 800ff76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a33      	ldr	r2, [pc, #204]	; (8010058 <UART_RxISR_8BIT+0x1b4>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d01f      	beq.n	800ffd0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d018      	beq.n	800ffd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa6:	e853 3f00 	ldrex	r3, [r3]
 800ffaa:	623b      	str	r3, [r7, #32]
   return(result);
 800ffac:	6a3b      	ldr	r3, [r7, #32]
 800ffae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ffb2:	663b      	str	r3, [r7, #96]	; 0x60
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	461a      	mov	r2, r3
 800ffba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffbc:	633b      	str	r3, [r7, #48]	; 0x30
 800ffbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffc4:	e841 2300 	strex	r3, r2, [r1]
 800ffc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ffca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e6      	bne.n	800ff9e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d12e      	bne.n	8010036 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	e853 3f00 	ldrex	r3, [r3]
 800ffea:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f023 0310 	bic.w	r3, r3, #16
 800fff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	461a      	mov	r2, r3
 800fffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fffc:	61fb      	str	r3, [r7, #28]
 800fffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010000:	69b9      	ldr	r1, [r7, #24]
 8010002:	69fa      	ldr	r2, [r7, #28]
 8010004:	e841 2300 	strex	r3, r2, [r1]
 8010008:	617b      	str	r3, [r7, #20]
   return(result);
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1e6      	bne.n	800ffde <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	69db      	ldr	r3, [r3, #28]
 8010016:	f003 0310 	and.w	r3, r3, #16
 801001a:	2b10      	cmp	r3, #16
 801001c:	d103      	bne.n	8010026 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	2210      	movs	r2, #16
 8010024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801002c:	4619      	mov	r1, r3
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7fe fe40 	bl	800ecb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010034:	e00b      	b.n	801004e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f7f0 fe3c 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 801003c:	e007      	b.n	801004e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	699a      	ldr	r2, [r3, #24]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f042 0208 	orr.w	r2, r2, #8
 801004c:	619a      	str	r2, [r3, #24]
}
 801004e:	bf00      	nop
 8010050:	3770      	adds	r7, #112	; 0x70
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	58000c00 	.word	0x58000c00

0801005c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b09c      	sub	sp, #112	; 0x70
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801006a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010074:	2b22      	cmp	r3, #34	; 0x22
 8010076:	f040 80be 	bne.w	80101f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010080:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010088:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801008a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801008e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010092:	4013      	ands	r3, r2
 8010094:	b29a      	uxth	r2, r3
 8010096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010098:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801009e:	1c9a      	adds	r2, r3, #2
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	3b01      	subs	r3, #1
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100bc:	b29b      	uxth	r3, r3
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f040 80a1 	bne.w	8010206 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100cc:	e853 3f00 	ldrex	r3, [r3]
 80100d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80100d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100d8:	667b      	str	r3, [r7, #100]	; 0x64
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	461a      	mov	r2, r3
 80100e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100e2:	657b      	str	r3, [r7, #84]	; 0x54
 80100e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100ea:	e841 2300 	strex	r3, r2, [r1]
 80100ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1e6      	bne.n	80100c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	3308      	adds	r3, #8
 80100fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010100:	e853 3f00 	ldrex	r3, [r3]
 8010104:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010108:	f023 0301 	bic.w	r3, r3, #1
 801010c:	663b      	str	r3, [r7, #96]	; 0x60
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	3308      	adds	r3, #8
 8010114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010116:	643a      	str	r2, [r7, #64]	; 0x40
 8010118:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801011a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801011c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801011e:	e841 2300 	strex	r3, r2, [r1]
 8010122:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	2b00      	cmp	r3, #0
 8010128:	d1e5      	bne.n	80100f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2220      	movs	r2, #32
 801012e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4a33      	ldr	r2, [pc, #204]	; (8010210 <UART_RxISR_16BIT+0x1b4>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d01f      	beq.n	8010188 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010152:	2b00      	cmp	r3, #0
 8010154:	d018      	beq.n	8010188 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015c:	6a3b      	ldr	r3, [r7, #32]
 801015e:	e853 3f00 	ldrex	r3, [r3]
 8010162:	61fb      	str	r3, [r7, #28]
   return(result);
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801016a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010176:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801017a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801017c:	e841 2300 	strex	r3, r2, [r1]
 8010180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010184:	2b00      	cmp	r3, #0
 8010186:	d1e6      	bne.n	8010156 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801018c:	2b01      	cmp	r3, #1
 801018e:	d12e      	bne.n	80101ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	e853 3f00 	ldrex	r3, [r3]
 80101a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	f023 0310 	bic.w	r3, r3, #16
 80101aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	461a      	mov	r2, r3
 80101b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101b4:	61bb      	str	r3, [r7, #24]
 80101b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b8:	6979      	ldr	r1, [r7, #20]
 80101ba:	69ba      	ldr	r2, [r7, #24]
 80101bc:	e841 2300 	strex	r3, r2, [r1]
 80101c0:	613b      	str	r3, [r7, #16]
   return(result);
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1e6      	bne.n	8010196 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	69db      	ldr	r3, [r3, #28]
 80101ce:	f003 0310 	and.w	r3, r3, #16
 80101d2:	2b10      	cmp	r3, #16
 80101d4:	d103      	bne.n	80101de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2210      	movs	r2, #16
 80101dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101e4:	4619      	mov	r1, r3
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7fe fd64 	bl	800ecb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101ec:	e00b      	b.n	8010206 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7f0 fd60 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 80101f4:	e007      	b.n	8010206 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	699a      	ldr	r2, [r3, #24]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f042 0208 	orr.w	r2, r2, #8
 8010204:	619a      	str	r2, [r3, #24]
}
 8010206:	bf00      	nop
 8010208:	3770      	adds	r7, #112	; 0x70
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	58000c00 	.word	0x58000c00

08010214 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b0ac      	sub	sp, #176	; 0xb0
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010222:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	69db      	ldr	r3, [r3, #28]
 801022c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801024a:	2b22      	cmp	r3, #34	; 0x22
 801024c:	f040 8180 	bne.w	8010550 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010256:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801025a:	e123      	b.n	80104a4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010262:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010266:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801026a:	b2d9      	uxtb	r1, r3
 801026c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010270:	b2da      	uxtb	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010276:	400a      	ands	r2, r1
 8010278:	b2d2      	uxtb	r2, r2
 801027a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010280:	1c5a      	adds	r2, r3, #1
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801028c:	b29b      	uxth	r3, r3
 801028e:	3b01      	subs	r3, #1
 8010290:	b29a      	uxth	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	69db      	ldr	r3, [r3, #28]
 801029e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80102a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102a6:	f003 0307 	and.w	r3, r3, #7
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d053      	beq.n	8010356 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102b2:	f003 0301 	and.w	r3, r3, #1
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d011      	beq.n	80102de <UART_RxISR_8BIT_FIFOEN+0xca>
 80102ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00b      	beq.n	80102de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2201      	movs	r2, #1
 80102cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102d4:	f043 0201 	orr.w	r2, r3, #1
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102e2:	f003 0302 	and.w	r3, r3, #2
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d011      	beq.n	801030e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80102ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00b      	beq.n	801030e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2202      	movs	r2, #2
 80102fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010304:	f043 0204 	orr.w	r2, r3, #4
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801030e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010312:	f003 0304 	and.w	r3, r3, #4
 8010316:	2b00      	cmp	r3, #0
 8010318:	d011      	beq.n	801033e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801031a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801031e:	f003 0301 	and.w	r3, r3, #1
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00b      	beq.n	801033e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2204      	movs	r2, #4
 801032c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010334:	f043 0202 	orr.w	r2, r3, #2
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010344:	2b00      	cmp	r3, #0
 8010346:	d006      	beq.n	8010356 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7fe fca9 	bl	800eca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801035c:	b29b      	uxth	r3, r3
 801035e:	2b00      	cmp	r3, #0
 8010360:	f040 80a0 	bne.w	80104a4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801036a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801036c:	e853 3f00 	ldrex	r3, [r3]
 8010370:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	461a      	mov	r2, r3
 8010382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010388:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801038a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801038c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801038e:	e841 2300 	strex	r3, r2, [r1]
 8010392:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1e4      	bne.n	8010364 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	3308      	adds	r3, #8
 80103a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a4:	e853 3f00 	ldrex	r3, [r3]
 80103a8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80103aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103ac:	4b6e      	ldr	r3, [pc, #440]	; (8010568 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80103ae:	4013      	ands	r3, r2
 80103b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	3308      	adds	r3, #8
 80103ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103be:	66ba      	str	r2, [r7, #104]	; 0x68
 80103c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80103c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103c6:	e841 2300 	strex	r3, r2, [r1]
 80103ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80103cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d1e3      	bne.n	801039a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2220      	movs	r2, #32
 80103d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a60      	ldr	r2, [pc, #384]	; (801056c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d021      	beq.n	8010434 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d01a      	beq.n	8010434 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010406:	e853 3f00 	ldrex	r3, [r3]
 801040a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801040c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801040e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	461a      	mov	r2, r3
 801041c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010420:	657b      	str	r3, [r7, #84]	; 0x54
 8010422:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010424:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010428:	e841 2300 	strex	r3, r2, [r1]
 801042c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801042e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1e4      	bne.n	80103fe <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010438:	2b01      	cmp	r3, #1
 801043a:	d130      	bne.n	801049e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801044a:	e853 3f00 	ldrex	r3, [r3]
 801044e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010452:	f023 0310 	bic.w	r3, r3, #16
 8010456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	461a      	mov	r2, r3
 8010460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010464:	643b      	str	r3, [r7, #64]	; 0x40
 8010466:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801046a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801046c:	e841 2300 	strex	r3, r2, [r1]
 8010470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010474:	2b00      	cmp	r3, #0
 8010476:	d1e4      	bne.n	8010442 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	69db      	ldr	r3, [r3, #28]
 801047e:	f003 0310 	and.w	r3, r3, #16
 8010482:	2b10      	cmp	r3, #16
 8010484:	d103      	bne.n	801048e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2210      	movs	r2, #16
 801048c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010494:	4619      	mov	r1, r3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7fe fc0c 	bl	800ecb4 <HAL_UARTEx_RxEventCallback>
 801049c:	e002      	b.n	80104a4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f7f0 fc08 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d006      	beq.n	80104ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80104ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104b0:	f003 0320 	and.w	r3, r3, #32
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f47f aed1 	bne.w	801025c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80104c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d049      	beq.n	8010560 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d242      	bcs.n	8010560 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	3308      	adds	r3, #8
 80104e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	e853 3f00 	ldrex	r3, [r3]
 80104e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80104f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3308      	adds	r3, #8
 80104fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80104fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010506:	e841 2300 	strex	r3, r2, [r1]
 801050a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1e3      	bne.n	80104da <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a16      	ldr	r2, [pc, #88]	; (8010570 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010516:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	e853 3f00 	ldrex	r3, [r3]
 8010524:	60bb      	str	r3, [r7, #8]
   return(result);
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	f043 0320 	orr.w	r3, r3, #32
 801052c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	461a      	mov	r2, r3
 8010536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801053a:	61bb      	str	r3, [r7, #24]
 801053c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053e:	6979      	ldr	r1, [r7, #20]
 8010540:	69ba      	ldr	r2, [r7, #24]
 8010542:	e841 2300 	strex	r3, r2, [r1]
 8010546:	613b      	str	r3, [r7, #16]
   return(result);
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1e4      	bne.n	8010518 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801054e:	e007      	b.n	8010560 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	699a      	ldr	r2, [r3, #24]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f042 0208 	orr.w	r2, r2, #8
 801055e:	619a      	str	r2, [r3, #24]
}
 8010560:	bf00      	nop
 8010562:	37b0      	adds	r7, #176	; 0xb0
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	effffffe 	.word	0xeffffffe
 801056c:	58000c00 	.word	0x58000c00
 8010570:	0800fea5 	.word	0x0800fea5

08010574 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b0ae      	sub	sp, #184	; 0xb8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010582:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	69db      	ldr	r3, [r3, #28]
 801058c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105aa:	2b22      	cmp	r3, #34	; 0x22
 80105ac:	f040 8184 	bne.w	80108b8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105ba:	e127      	b.n	801080c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80105ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80105d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80105d6:	4013      	ands	r3, r2
 80105d8:	b29a      	uxth	r2, r3
 80105da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105e4:	1c9a      	adds	r2, r3, #2
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	3b01      	subs	r3, #1
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	69db      	ldr	r3, [r3, #28]
 8010602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801060a:	f003 0307 	and.w	r3, r3, #7
 801060e:	2b00      	cmp	r3, #0
 8010610:	d053      	beq.n	80106ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	2b00      	cmp	r3, #0
 801061c:	d011      	beq.n	8010642 <UART_RxISR_16BIT_FIFOEN+0xce>
 801061e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00b      	beq.n	8010642 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2201      	movs	r2, #1
 8010630:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010638:	f043 0201 	orr.w	r2, r3, #1
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010646:	f003 0302 	and.w	r3, r3, #2
 801064a:	2b00      	cmp	r3, #0
 801064c:	d011      	beq.n	8010672 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801064e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00b      	beq.n	8010672 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2202      	movs	r2, #2
 8010660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010668:	f043 0204 	orr.w	r2, r3, #4
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010676:	f003 0304 	and.w	r3, r3, #4
 801067a:	2b00      	cmp	r3, #0
 801067c:	d011      	beq.n	80106a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801067e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010682:	f003 0301 	and.w	r3, r3, #1
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00b      	beq.n	80106a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2204      	movs	r2, #4
 8010690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010698:	f043 0202 	orr.w	r2, r3, #2
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d006      	beq.n	80106ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f7fe faf7 	bl	800eca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f040 80a2 	bne.w	801080c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106d0:	e853 3f00 	ldrex	r3, [r3]
 80106d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80106d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	461a      	mov	r2, r3
 80106e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80106ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106ee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80106f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106f6:	e841 2300 	strex	r3, r2, [r1]
 80106fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80106fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1e2      	bne.n	80106c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801070c:	e853 3f00 	ldrex	r3, [r3]
 8010710:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010712:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010714:	4b6e      	ldr	r3, [pc, #440]	; (80108d0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010716:	4013      	ands	r3, r2
 8010718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	3308      	adds	r3, #8
 8010722:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010726:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010728:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801072c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801072e:	e841 2300 	strex	r3, r2, [r1]
 8010732:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1e3      	bne.n	8010702 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2220      	movs	r2, #32
 801073e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4a60      	ldr	r2, [pc, #384]	; (80108d4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d021      	beq.n	801079c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010762:	2b00      	cmp	r3, #0
 8010764:	d01a      	beq.n	801079c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801076e:	e853 3f00 	ldrex	r3, [r3]
 8010772:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801077a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010788:	65bb      	str	r3, [r7, #88]	; 0x58
 801078a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801078e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010790:	e841 2300 	strex	r3, r2, [r1]
 8010794:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1e4      	bne.n	8010766 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d130      	bne.n	8010806 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b2:	e853 3f00 	ldrex	r3, [r3]
 80107b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80107b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ba:	f023 0310 	bic.w	r3, r3, #16
 80107be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107cc:	647b      	str	r3, [r7, #68]	; 0x44
 80107ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107d4:	e841 2300 	strex	r3, r2, [r1]
 80107d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80107da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e4      	bne.n	80107aa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	69db      	ldr	r3, [r3, #28]
 80107e6:	f003 0310 	and.w	r3, r3, #16
 80107ea:	2b10      	cmp	r3, #16
 80107ec:	d103      	bne.n	80107f6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2210      	movs	r2, #16
 80107f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7fe fa58 	bl	800ecb4 <HAL_UARTEx_RxEventCallback>
 8010804:	e002      	b.n	801080c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7f0 fa54 	bl	8000cb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801080c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010810:	2b00      	cmp	r3, #0
 8010812:	d006      	beq.n	8010822 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010818:	f003 0320 	and.w	r3, r3, #32
 801081c:	2b00      	cmp	r3, #0
 801081e:	f47f aecd 	bne.w	80105bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010828:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801082c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010830:	2b00      	cmp	r3, #0
 8010832:	d049      	beq.n	80108c8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801083a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801083e:	429a      	cmp	r2, r3
 8010840:	d242      	bcs.n	80108c8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3308      	adds	r3, #8
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	e853 3f00 	ldrex	r3, [r3]
 8010850:	623b      	str	r3, [r7, #32]
   return(result);
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	3308      	adds	r3, #8
 8010862:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010866:	633a      	str	r2, [r7, #48]	; 0x30
 8010868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801086c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801086e:	e841 2300 	strex	r3, r2, [r1]
 8010872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1e3      	bne.n	8010842 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4a16      	ldr	r2, [pc, #88]	; (80108d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801087e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	e853 3f00 	ldrex	r3, [r3]
 801088c:	60fb      	str	r3, [r7, #12]
   return(result);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f043 0320 	orr.w	r3, r3, #32
 8010894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	461a      	mov	r2, r3
 801089e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108a2:	61fb      	str	r3, [r7, #28]
 80108a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108a6:	69b9      	ldr	r1, [r7, #24]
 80108a8:	69fa      	ldr	r2, [r7, #28]
 80108aa:	e841 2300 	strex	r3, r2, [r1]
 80108ae:	617b      	str	r3, [r7, #20]
   return(result);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d1e4      	bne.n	8010880 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108b6:	e007      	b.n	80108c8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	699a      	ldr	r2, [r3, #24]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f042 0208 	orr.w	r2, r2, #8
 80108c6:	619a      	str	r2, [r3, #24]
}
 80108c8:	bf00      	nop
 80108ca:	37b8      	adds	r7, #184	; 0xb8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	effffffe 	.word	0xeffffffe
 80108d4:	58000c00 	.word	0x58000c00
 80108d8:	0801005d 	.word	0x0801005d

080108dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80108e4:	bf00      	nop
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr

080108f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80108f8:	bf00      	nop
 80108fa:	370c      	adds	r7, #12
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801090c:	bf00      	nop
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010926:	2b01      	cmp	r3, #1
 8010928:	d101      	bne.n	801092e <HAL_UARTEx_DisableFifoMode+0x16>
 801092a:	2302      	movs	r3, #2
 801092c:	e027      	b.n	801097e <HAL_UARTEx_DisableFifoMode+0x66>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2224      	movs	r2, #36	; 0x24
 801093a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f022 0201 	bic.w	r2, r2, #1
 8010954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801095c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2220      	movs	r2, #32
 8010970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801097c:	2300      	movs	r3, #0
}
 801097e:	4618      	mov	r0, r3
 8010980:	3714      	adds	r7, #20
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr

0801098a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801098a:	b580      	push	{r7, lr}
 801098c:	b084      	sub	sp, #16
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801099a:	2b01      	cmp	r3, #1
 801099c:	d101      	bne.n	80109a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801099e:	2302      	movs	r3, #2
 80109a0:	e02d      	b.n	80109fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2201      	movs	r2, #1
 80109a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2224      	movs	r2, #36	; 0x24
 80109ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f022 0201 	bic.w	r2, r2, #1
 80109c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	683a      	ldr	r2, [r7, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 f850 	bl	8010a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2220      	movs	r2, #32
 80109f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b084      	sub	sp, #16
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d101      	bne.n	8010a1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e02d      	b.n	8010a7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2201      	movs	r2, #1
 8010a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2224      	movs	r2, #36	; 0x24
 8010a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f022 0201 	bic.w	r2, r2, #1
 8010a44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	689b      	ldr	r3, [r3, #8]
 8010a4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	430a      	orrs	r2, r1
 8010a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f812 	bl	8010a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2220      	movs	r2, #32
 8010a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d108      	bne.n	8010aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2201      	movs	r2, #1
 8010a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010aa4:	e031      	b.n	8010b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010aa6:	2310      	movs	r3, #16
 8010aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010aaa:	2310      	movs	r3, #16
 8010aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	0e5b      	lsrs	r3, r3, #25
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	f003 0307 	and.w	r3, r3, #7
 8010abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	0f5b      	lsrs	r3, r3, #29
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	f003 0307 	and.w	r3, r3, #7
 8010acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ace:	7bbb      	ldrb	r3, [r7, #14]
 8010ad0:	7b3a      	ldrb	r2, [r7, #12]
 8010ad2:	4911      	ldr	r1, [pc, #68]	; (8010b18 <UARTEx_SetNbDataToProcess+0x94>)
 8010ad4:	5c8a      	ldrb	r2, [r1, r2]
 8010ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010ada:	7b3a      	ldrb	r2, [r7, #12]
 8010adc:	490f      	ldr	r1, [pc, #60]	; (8010b1c <UARTEx_SetNbDataToProcess+0x98>)
 8010ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	7b7a      	ldrb	r2, [r7, #13]
 8010af0:	4909      	ldr	r1, [pc, #36]	; (8010b18 <UARTEx_SetNbDataToProcess+0x94>)
 8010af2:	5c8a      	ldrb	r2, [r1, r2]
 8010af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010af8:	7b7a      	ldrb	r2, [r7, #13]
 8010afa:	4908      	ldr	r1, [pc, #32]	; (8010b1c <UARTEx_SetNbDataToProcess+0x98>)
 8010afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b02:	b29a      	uxth	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010b0a:	bf00      	nop
 8010b0c:	3714      	adds	r7, #20
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	08010e1c 	.word	0x08010e1c
 8010b1c:	08010e24 	.word	0x08010e24

08010b20 <__errno>:
 8010b20:	4b01      	ldr	r3, [pc, #4]	; (8010b28 <__errno+0x8>)
 8010b22:	6818      	ldr	r0, [r3, #0]
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop
 8010b28:	24000054 	.word	0x24000054

08010b2c <__libc_init_array>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	4d0d      	ldr	r5, [pc, #52]	; (8010b64 <__libc_init_array+0x38>)
 8010b30:	4c0d      	ldr	r4, [pc, #52]	; (8010b68 <__libc_init_array+0x3c>)
 8010b32:	1b64      	subs	r4, r4, r5
 8010b34:	10a4      	asrs	r4, r4, #2
 8010b36:	2600      	movs	r6, #0
 8010b38:	42a6      	cmp	r6, r4
 8010b3a:	d109      	bne.n	8010b50 <__libc_init_array+0x24>
 8010b3c:	4d0b      	ldr	r5, [pc, #44]	; (8010b6c <__libc_init_array+0x40>)
 8010b3e:	4c0c      	ldr	r4, [pc, #48]	; (8010b70 <__libc_init_array+0x44>)
 8010b40:	f000 f93c 	bl	8010dbc <_init>
 8010b44:	1b64      	subs	r4, r4, r5
 8010b46:	10a4      	asrs	r4, r4, #2
 8010b48:	2600      	movs	r6, #0
 8010b4a:	42a6      	cmp	r6, r4
 8010b4c:	d105      	bne.n	8010b5a <__libc_init_array+0x2e>
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}
 8010b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b54:	4798      	blx	r3
 8010b56:	3601      	adds	r6, #1
 8010b58:	e7ee      	b.n	8010b38 <__libc_init_array+0xc>
 8010b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b5e:	4798      	blx	r3
 8010b60:	3601      	adds	r6, #1
 8010b62:	e7f2      	b.n	8010b4a <__libc_init_array+0x1e>
 8010b64:	08010e34 	.word	0x08010e34
 8010b68:	08010e34 	.word	0x08010e34
 8010b6c:	08010e34 	.word	0x08010e34
 8010b70:	08010e38 	.word	0x08010e38

08010b74 <malloc>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <malloc+0xc>)
 8010b76:	4601      	mov	r1, r0
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f000 b88d 	b.w	8010c98 <_malloc_r>
 8010b7e:	bf00      	nop
 8010b80:	24000054 	.word	0x24000054

08010b84 <free>:
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <free+0xc>)
 8010b86:	4601      	mov	r1, r0
 8010b88:	6818      	ldr	r0, [r3, #0]
 8010b8a:	f000 b819 	b.w	8010bc0 <_free_r>
 8010b8e:	bf00      	nop
 8010b90:	24000054 	.word	0x24000054

08010b94 <memcpy>:
 8010b94:	440a      	add	r2, r1
 8010b96:	4291      	cmp	r1, r2
 8010b98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010b9c:	d100      	bne.n	8010ba0 <memcpy+0xc>
 8010b9e:	4770      	bx	lr
 8010ba0:	b510      	push	{r4, lr}
 8010ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010baa:	4291      	cmp	r1, r2
 8010bac:	d1f9      	bne.n	8010ba2 <memcpy+0xe>
 8010bae:	bd10      	pop	{r4, pc}

08010bb0 <memset>:
 8010bb0:	4402      	add	r2, r0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d100      	bne.n	8010bba <memset+0xa>
 8010bb8:	4770      	bx	lr
 8010bba:	f803 1b01 	strb.w	r1, [r3], #1
 8010bbe:	e7f9      	b.n	8010bb4 <memset+0x4>

08010bc0 <_free_r>:
 8010bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bc2:	2900      	cmp	r1, #0
 8010bc4:	d044      	beq.n	8010c50 <_free_r+0x90>
 8010bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bca:	9001      	str	r0, [sp, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	f1a1 0404 	sub.w	r4, r1, #4
 8010bd2:	bfb8      	it	lt
 8010bd4:	18e4      	addlt	r4, r4, r3
 8010bd6:	f000 f8e3 	bl	8010da0 <__malloc_lock>
 8010bda:	4a1e      	ldr	r2, [pc, #120]	; (8010c54 <_free_r+0x94>)
 8010bdc:	9801      	ldr	r0, [sp, #4]
 8010bde:	6813      	ldr	r3, [r2, #0]
 8010be0:	b933      	cbnz	r3, 8010bf0 <_free_r+0x30>
 8010be2:	6063      	str	r3, [r4, #4]
 8010be4:	6014      	str	r4, [r2, #0]
 8010be6:	b003      	add	sp, #12
 8010be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bec:	f000 b8de 	b.w	8010dac <__malloc_unlock>
 8010bf0:	42a3      	cmp	r3, r4
 8010bf2:	d908      	bls.n	8010c06 <_free_r+0x46>
 8010bf4:	6825      	ldr	r5, [r4, #0]
 8010bf6:	1961      	adds	r1, r4, r5
 8010bf8:	428b      	cmp	r3, r1
 8010bfa:	bf01      	itttt	eq
 8010bfc:	6819      	ldreq	r1, [r3, #0]
 8010bfe:	685b      	ldreq	r3, [r3, #4]
 8010c00:	1949      	addeq	r1, r1, r5
 8010c02:	6021      	streq	r1, [r4, #0]
 8010c04:	e7ed      	b.n	8010be2 <_free_r+0x22>
 8010c06:	461a      	mov	r2, r3
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	b10b      	cbz	r3, 8010c10 <_free_r+0x50>
 8010c0c:	42a3      	cmp	r3, r4
 8010c0e:	d9fa      	bls.n	8010c06 <_free_r+0x46>
 8010c10:	6811      	ldr	r1, [r2, #0]
 8010c12:	1855      	adds	r5, r2, r1
 8010c14:	42a5      	cmp	r5, r4
 8010c16:	d10b      	bne.n	8010c30 <_free_r+0x70>
 8010c18:	6824      	ldr	r4, [r4, #0]
 8010c1a:	4421      	add	r1, r4
 8010c1c:	1854      	adds	r4, r2, r1
 8010c1e:	42a3      	cmp	r3, r4
 8010c20:	6011      	str	r1, [r2, #0]
 8010c22:	d1e0      	bne.n	8010be6 <_free_r+0x26>
 8010c24:	681c      	ldr	r4, [r3, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	6053      	str	r3, [r2, #4]
 8010c2a:	4421      	add	r1, r4
 8010c2c:	6011      	str	r1, [r2, #0]
 8010c2e:	e7da      	b.n	8010be6 <_free_r+0x26>
 8010c30:	d902      	bls.n	8010c38 <_free_r+0x78>
 8010c32:	230c      	movs	r3, #12
 8010c34:	6003      	str	r3, [r0, #0]
 8010c36:	e7d6      	b.n	8010be6 <_free_r+0x26>
 8010c38:	6825      	ldr	r5, [r4, #0]
 8010c3a:	1961      	adds	r1, r4, r5
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	bf04      	itt	eq
 8010c40:	6819      	ldreq	r1, [r3, #0]
 8010c42:	685b      	ldreq	r3, [r3, #4]
 8010c44:	6063      	str	r3, [r4, #4]
 8010c46:	bf04      	itt	eq
 8010c48:	1949      	addeq	r1, r1, r5
 8010c4a:	6021      	streq	r1, [r4, #0]
 8010c4c:	6054      	str	r4, [r2, #4]
 8010c4e:	e7ca      	b.n	8010be6 <_free_r+0x26>
 8010c50:	b003      	add	sp, #12
 8010c52:	bd30      	pop	{r4, r5, pc}
 8010c54:	2400066c 	.word	0x2400066c

08010c58 <sbrk_aligned>:
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	4e0e      	ldr	r6, [pc, #56]	; (8010c94 <sbrk_aligned+0x3c>)
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	6831      	ldr	r1, [r6, #0]
 8010c60:	4605      	mov	r5, r0
 8010c62:	b911      	cbnz	r1, 8010c6a <sbrk_aligned+0x12>
 8010c64:	f000 f88c 	bl	8010d80 <_sbrk_r>
 8010c68:	6030      	str	r0, [r6, #0]
 8010c6a:	4621      	mov	r1, r4
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f000 f887 	bl	8010d80 <_sbrk_r>
 8010c72:	1c43      	adds	r3, r0, #1
 8010c74:	d00a      	beq.n	8010c8c <sbrk_aligned+0x34>
 8010c76:	1cc4      	adds	r4, r0, #3
 8010c78:	f024 0403 	bic.w	r4, r4, #3
 8010c7c:	42a0      	cmp	r0, r4
 8010c7e:	d007      	beq.n	8010c90 <sbrk_aligned+0x38>
 8010c80:	1a21      	subs	r1, r4, r0
 8010c82:	4628      	mov	r0, r5
 8010c84:	f000 f87c 	bl	8010d80 <_sbrk_r>
 8010c88:	3001      	adds	r0, #1
 8010c8a:	d101      	bne.n	8010c90 <sbrk_aligned+0x38>
 8010c8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c90:	4620      	mov	r0, r4
 8010c92:	bd70      	pop	{r4, r5, r6, pc}
 8010c94:	24000670 	.word	0x24000670

08010c98 <_malloc_r>:
 8010c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c9c:	1ccd      	adds	r5, r1, #3
 8010c9e:	f025 0503 	bic.w	r5, r5, #3
 8010ca2:	3508      	adds	r5, #8
 8010ca4:	2d0c      	cmp	r5, #12
 8010ca6:	bf38      	it	cc
 8010ca8:	250c      	movcc	r5, #12
 8010caa:	2d00      	cmp	r5, #0
 8010cac:	4607      	mov	r7, r0
 8010cae:	db01      	blt.n	8010cb4 <_malloc_r+0x1c>
 8010cb0:	42a9      	cmp	r1, r5
 8010cb2:	d905      	bls.n	8010cc0 <_malloc_r+0x28>
 8010cb4:	230c      	movs	r3, #12
 8010cb6:	603b      	str	r3, [r7, #0]
 8010cb8:	2600      	movs	r6, #0
 8010cba:	4630      	mov	r0, r6
 8010cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc0:	4e2e      	ldr	r6, [pc, #184]	; (8010d7c <_malloc_r+0xe4>)
 8010cc2:	f000 f86d 	bl	8010da0 <__malloc_lock>
 8010cc6:	6833      	ldr	r3, [r6, #0]
 8010cc8:	461c      	mov	r4, r3
 8010cca:	bb34      	cbnz	r4, 8010d1a <_malloc_r+0x82>
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4638      	mov	r0, r7
 8010cd0:	f7ff ffc2 	bl	8010c58 <sbrk_aligned>
 8010cd4:	1c43      	adds	r3, r0, #1
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	d14d      	bne.n	8010d76 <_malloc_r+0xde>
 8010cda:	6834      	ldr	r4, [r6, #0]
 8010cdc:	4626      	mov	r6, r4
 8010cde:	2e00      	cmp	r6, #0
 8010ce0:	d140      	bne.n	8010d64 <_malloc_r+0xcc>
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	4631      	mov	r1, r6
 8010ce6:	4638      	mov	r0, r7
 8010ce8:	eb04 0803 	add.w	r8, r4, r3
 8010cec:	f000 f848 	bl	8010d80 <_sbrk_r>
 8010cf0:	4580      	cmp	r8, r0
 8010cf2:	d13a      	bne.n	8010d6a <_malloc_r+0xd2>
 8010cf4:	6821      	ldr	r1, [r4, #0]
 8010cf6:	3503      	adds	r5, #3
 8010cf8:	1a6d      	subs	r5, r5, r1
 8010cfa:	f025 0503 	bic.w	r5, r5, #3
 8010cfe:	3508      	adds	r5, #8
 8010d00:	2d0c      	cmp	r5, #12
 8010d02:	bf38      	it	cc
 8010d04:	250c      	movcc	r5, #12
 8010d06:	4629      	mov	r1, r5
 8010d08:	4638      	mov	r0, r7
 8010d0a:	f7ff ffa5 	bl	8010c58 <sbrk_aligned>
 8010d0e:	3001      	adds	r0, #1
 8010d10:	d02b      	beq.n	8010d6a <_malloc_r+0xd2>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	442b      	add	r3, r5
 8010d16:	6023      	str	r3, [r4, #0]
 8010d18:	e00e      	b.n	8010d38 <_malloc_r+0xa0>
 8010d1a:	6822      	ldr	r2, [r4, #0]
 8010d1c:	1b52      	subs	r2, r2, r5
 8010d1e:	d41e      	bmi.n	8010d5e <_malloc_r+0xc6>
 8010d20:	2a0b      	cmp	r2, #11
 8010d22:	d916      	bls.n	8010d52 <_malloc_r+0xba>
 8010d24:	1961      	adds	r1, r4, r5
 8010d26:	42a3      	cmp	r3, r4
 8010d28:	6025      	str	r5, [r4, #0]
 8010d2a:	bf18      	it	ne
 8010d2c:	6059      	strne	r1, [r3, #4]
 8010d2e:	6863      	ldr	r3, [r4, #4]
 8010d30:	bf08      	it	eq
 8010d32:	6031      	streq	r1, [r6, #0]
 8010d34:	5162      	str	r2, [r4, r5]
 8010d36:	604b      	str	r3, [r1, #4]
 8010d38:	4638      	mov	r0, r7
 8010d3a:	f104 060b 	add.w	r6, r4, #11
 8010d3e:	f000 f835 	bl	8010dac <__malloc_unlock>
 8010d42:	f026 0607 	bic.w	r6, r6, #7
 8010d46:	1d23      	adds	r3, r4, #4
 8010d48:	1af2      	subs	r2, r6, r3
 8010d4a:	d0b6      	beq.n	8010cba <_malloc_r+0x22>
 8010d4c:	1b9b      	subs	r3, r3, r6
 8010d4e:	50a3      	str	r3, [r4, r2]
 8010d50:	e7b3      	b.n	8010cba <_malloc_r+0x22>
 8010d52:	6862      	ldr	r2, [r4, #4]
 8010d54:	42a3      	cmp	r3, r4
 8010d56:	bf0c      	ite	eq
 8010d58:	6032      	streq	r2, [r6, #0]
 8010d5a:	605a      	strne	r2, [r3, #4]
 8010d5c:	e7ec      	b.n	8010d38 <_malloc_r+0xa0>
 8010d5e:	4623      	mov	r3, r4
 8010d60:	6864      	ldr	r4, [r4, #4]
 8010d62:	e7b2      	b.n	8010cca <_malloc_r+0x32>
 8010d64:	4634      	mov	r4, r6
 8010d66:	6876      	ldr	r6, [r6, #4]
 8010d68:	e7b9      	b.n	8010cde <_malloc_r+0x46>
 8010d6a:	230c      	movs	r3, #12
 8010d6c:	603b      	str	r3, [r7, #0]
 8010d6e:	4638      	mov	r0, r7
 8010d70:	f000 f81c 	bl	8010dac <__malloc_unlock>
 8010d74:	e7a1      	b.n	8010cba <_malloc_r+0x22>
 8010d76:	6025      	str	r5, [r4, #0]
 8010d78:	e7de      	b.n	8010d38 <_malloc_r+0xa0>
 8010d7a:	bf00      	nop
 8010d7c:	2400066c 	.word	0x2400066c

08010d80 <_sbrk_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d06      	ldr	r5, [pc, #24]	; (8010d9c <_sbrk_r+0x1c>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	602b      	str	r3, [r5, #0]
 8010d8c:	f7f1 fbc6 	bl	800251c <_sbrk>
 8010d90:	1c43      	adds	r3, r0, #1
 8010d92:	d102      	bne.n	8010d9a <_sbrk_r+0x1a>
 8010d94:	682b      	ldr	r3, [r5, #0]
 8010d96:	b103      	cbz	r3, 8010d9a <_sbrk_r+0x1a>
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	bd38      	pop	{r3, r4, r5, pc}
 8010d9c:	24000674 	.word	0x24000674

08010da0 <__malloc_lock>:
 8010da0:	4801      	ldr	r0, [pc, #4]	; (8010da8 <__malloc_lock+0x8>)
 8010da2:	f000 b809 	b.w	8010db8 <__retarget_lock_acquire_recursive>
 8010da6:	bf00      	nop
 8010da8:	24000678 	.word	0x24000678

08010dac <__malloc_unlock>:
 8010dac:	4801      	ldr	r0, [pc, #4]	; (8010db4 <__malloc_unlock+0x8>)
 8010dae:	f000 b804 	b.w	8010dba <__retarget_lock_release_recursive>
 8010db2:	bf00      	nop
 8010db4:	24000678 	.word	0x24000678

08010db8 <__retarget_lock_acquire_recursive>:
 8010db8:	4770      	bx	lr

08010dba <__retarget_lock_release_recursive>:
 8010dba:	4770      	bx	lr

08010dbc <_init>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	bf00      	nop
 8010dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc2:	bc08      	pop	{r3}
 8010dc4:	469e      	mov	lr, r3
 8010dc6:	4770      	bx	lr

08010dc8 <_fini>:
 8010dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dca:	bf00      	nop
 8010dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dce:	bc08      	pop	{r3}
 8010dd0:	469e      	mov	lr, r3
 8010dd2:	4770      	bx	lr
