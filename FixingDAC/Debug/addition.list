
addition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010070  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08010308  08010308  00020308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010348  08010348  00020348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010350  08010350  00020350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010354  08010354  00020354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e8  24000000  08010358  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  24000100  08010440  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000828  08010440  00030828  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023538  00000000  00000000  00030159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003a76  00000000  00000000  00053691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c48  00000000  00000000  00057108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000162d  00000000  00000000  00058d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b74f  00000000  00000000  0005a37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002576d  00000000  00000000  00095acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180e49  00000000  00000000  000bb239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007eac  00000000  00000000  0023c084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  00243f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080102f0 	.word	0x080102f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	080102f0 	.word	0x080102f0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <__NVIC_SystemReset+0x24>)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <__NVIC_SystemReset+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <__NVIC_SystemReset+0x20>
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	05fa0004 	.word	0x05fa0004

08000600 <spi>:
 * @brief polls respective spi sensor and returns uint16_t value
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint8_t* spi(SPI_HandleTypeDef spi) {
 8000600:	b084      	sub	sp, #16
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	f107 0c18 	add.w	ip, r7, #24
 800060c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spiRxBuffer[2];
	HAL_SPI_Receive(&spi, (uint8_t*) spiRxBuffer, 1, 1);
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	2301      	movs	r3, #1
 8000614:	2201      	movs	r2, #1
 8000616:	f107 0018 	add.w	r0, r7, #24
 800061a:	f00b f87b 	bl	800b714 <HAL_SPI_Receive>
	uint8_t SPI_LSB = ((spiRxBuffer[0] & 0xFF00) >> 8);
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
	uint8_t SPI_MSB = (spiRxBuffer[1] & 0xFF);
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	73bb      	strb	r3, [r7, #14]
	spi.Instance->CR1 |= 1 << 10; // THIS IS NEEDED TO STOP SPI2_SCK FROM GENERATING CLOCK PULSES
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000630:	601a      	str	r2, [r3, #0]
	uint8_t *results = malloc(2 * sizeof(uint8_t));
 8000632:	2002      	movs	r0, #2
 8000634:	f00f fd02 	bl	801003c <malloc>
 8000638:	4603      	mov	r3, r0
 800063a:	60bb      	str	r3, [r7, #8]
	results[0] = SPI_MSB;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	7bba      	ldrb	r2, [r7, #14]
 8000640:	701a      	strb	r2, [r3, #0]
	results[1] = SPI_LSB;
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	7bfa      	ldrb	r2, [r7, #15]
 8000648:	701a      	strb	r2, [r3, #0]
	return results;
 800064a:	68bb      	ldr	r3, [r7, #8]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000656:	b004      	add	sp, #16
 8000658:	4770      	bx	lr
	...

0800065c <set_erpa_sweep>:

/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <set_erpa_sweep+0x28>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <set_erpa_sweep+0x2c>)
 8000668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <set_erpa_sweep+0x30>)
 8000672:	f003 fe6a 	bl	800434a <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000676:	2100      	movs	r1, #0
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <set_erpa_sweep+0x30>)
 800067a:	f003 fd02 	bl	8004082 <HAL_DAC_Start>

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000084 	.word	0x24000084
 8000688:	24000000 	.word	0x24000000
 800068c:	240002d4 	.word	0x240002d4

08000690 <erpa_adc>:
/**
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t* erpa_adc() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

	uint16_t PC4 = ADC1Data[1]; 			// SWPmon --
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <erpa_adc+0x34>)
 8000698:	885b      	ldrh	r3, [r3, #2]
 800069a:	80fb      	strh	r3, [r7, #6]
	uint16_t PB0 = ADC1Data[5]; 	// TEMP1 -- verified doesn't need to change
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <erpa_adc+0x34>)
 800069e:	895b      	ldrh	r3, [r3, #10]
 80006a0:	80bb      	strh	r3, [r7, #4]

	uint16_t *results = malloc(2 * sizeof(uint16_t));
 80006a2:	2004      	movs	r0, #4
 80006a4:	f00f fcca 	bl	801003c <malloc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	603b      	str	r3, [r7, #0]
	results[0] = PC4;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	801a      	strh	r2, [r3, #0]
	results[1] = PB0;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3302      	adds	r3, #2
 80006b6:	88ba      	ldrh	r2, [r7, #4]
 80006b8:	801a      	strh	r2, [r3, #0]

	return results;
 80006ba:	683b      	ldr	r3, [r7, #0]

}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	240006a0 	.word	0x240006a0

080006c8 <send_erpa_packet>:
 * @brief sends erpa packet via UART
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(uint8_t *erpa_spi, uint16_t *erpa_adc_results) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]

	uint8_t erpa_buf[14];
	erpa_buf[0] = erpa_sync;                  			// ERPA SYNC 0xAA MSB
 80006d2:	23aa      	movs	r3, #170	; 0xaa
 80006d4:	723b      	strb	r3, [r7, #8]
	erpa_buf[1] = erpa_sync;                  			// ERPA SYNC 0xAA LSB
 80006d6:	23aa      	movs	r3, #170	; 0xaa
 80006d8:	727b      	strb	r3, [r7, #9]
	erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 				// ERPA SEQ # MSB
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <send_erpa_packet+0x90>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72bb      	strb	r3, [r7, #10]
	erpa_buf[3] = (erpa_seq & 0xFF);          				// ERPA SEQ # MSB
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <send_erpa_packet+0x90>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	72fb      	strb	r3, [r7, #11]
	erpa_buf[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80006ee:	2300      	movs	r3, #0
 80006f0:	733b      	strb	r3, [r7, #12]
	erpa_buf[5] = (0 & 0xFF);               					// ENDmon LSB
 80006f2:	2300      	movs	r3, #0
 80006f4:	737b      	strb	r3, [r7, #13]
	erpa_buf[6] = ((erpa_adc_results[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	73bb      	strb	r3, [r7, #14]
	erpa_buf[7] = (erpa_adc_results[0] & 0xFF);             // SWP Monitored LSB
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	73fb      	strb	r3, [r7, #15]
	erpa_buf[8] = ((erpa_adc_results[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3302      	adds	r3, #2
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	743b      	strb	r3, [r7, #16]
	erpa_buf[9] = (erpa_adc_results[1] & 0xFF);             // TEMPURATURE 1 LSB
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	3302      	adds	r3, #2
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	747b      	strb	r3, [r7, #17]
	erpa_buf[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 8000722:	2300      	movs	r3, #0
 8000724:	74bb      	strb	r3, [r7, #18]
	erpa_buf[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 8000726:	2300      	movs	r3, #0
 8000728:	74fb      	strb	r3, [r7, #19]
	erpa_buf[12] = erpa_spi[0];									// ERPA eADC MSB
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	753b      	strb	r3, [r7, #20]
	erpa_buf[13] = erpa_spi[1];									// ERPA eADC LSB
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000736:	f107 0108 	add.w	r1, r7, #8
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	220e      	movs	r2, #14
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <send_erpa_packet+0x94>)
 8000740:	f00d f89e 	bl	800d880 <HAL_UART_Transmit>
	erpa_seq++;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <send_erpa_packet+0x90>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <send_erpa_packet+0x90>)
 800074e:	801a      	strh	r2, [r3, #0]

}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	240006cc 	.word	0x240006cc
 800075c:	240005a8 	.word	0x240005a8

08000760 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc1_results,
		uint16_t *hk_adc3_results) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b090      	sub	sp, #64	; 0x40
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]

	uint8_t hk_buf[38];									// GUI Structure

	hk_buf[0] = hk_sync;                     			// HK SYNC 0xCC MSB
 800076c:	23cc      	movs	r3, #204	; 0xcc
 800076e:	753b      	strb	r3, [r7, #20]
	hk_buf[1] = hk_sync;                     			// HK SYNC 0xCC LSB
 8000770:	23cc      	movs	r3, #204	; 0xcc
 8000772:	757b      	strb	r3, [r7, #21]
	hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <send_hk_packet+0x70>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	75bb      	strb	r3, [r7, #22]
	hk_buf[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <send_hk_packet+0x70>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	75fb      	strb	r3, [r7, #23]
//	hk_buf[34] = ((hk_adc1_results[4] & 0xFF00) >> 8);	// HK n150vmon MSB
//	hk_buf[35] = (hk_adc1_results[4] & 0xFF);			// HK n150vmon LSB
//	hk_buf[36] = ((hk_adc1_results[5] & 0xFF00) >> 8);	// HK n800vmon MSB
//	hk_buf[37] = (hk_adc1_results[5] & 0xFF);			// HK n800vmon LSB

	for (int i = 4; i < 38; i++){
 8000788:	2304      	movs	r3, #4
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800078c:	e00b      	b.n	80007a6 <send_hk_packet+0x46>
		hk_buf[i] = (SysTick->VAL)&(0xff);
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <send_hk_packet+0x74>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	b2d9      	uxtb	r1, r3
 8000794:	f107 0214 	add.w	r2, r7, #20
 8000798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800079a:	4413      	add	r3, r2
 800079c:	460a      	mov	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < 38; i++){
 80007a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a2:	3301      	adds	r3, #1
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a8:	2b25      	cmp	r3, #37	; 0x25
 80007aa:	ddf0      	ble.n	800078e <send_hk_packet+0x2e>
	}

	HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 80007ac:	f107 0114 	add.w	r1, r7, #20
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	2226      	movs	r2, #38	; 0x26
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <send_hk_packet+0x78>)
 80007b6:	f00d f863 	bl	800d880 <HAL_UART_Transmit>
	hk_seq++;
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <send_hk_packet+0x70>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <send_hk_packet+0x70>)
 80007c4:	801a      	strh	r2, [r3, #0]

}
 80007c6:	bf00      	nop
 80007c8:	3740      	adds	r7, #64	; 0x40
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	240006d0 	.word	0x240006d0
 80007d4:	e000e010 	.word	0xe000e010
 80007d8:	240005a8 	.word	0x240005a8

080007dc <send_pmt_packet>:
/**
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint8_t *pmt_spi) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

	uint8_t pmt_buf[6];

	pmt_buf[0] = pmt_sync;						// PMT SYNC MSB 0xBB
 80007e4:	23bb      	movs	r3, #187	; 0xbb
 80007e6:	723b      	strb	r3, [r7, #8]
	pmt_buf[1] = pmt_sync;						// PMT SYNC LSB 0xBB
 80007e8:	23bb      	movs	r3, #187	; 0xbb
 80007ea:	727b      	strb	r3, [r7, #9]
	pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);		// PMT SEQ # MSB
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <send_pmt_packet+0x54>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	72bb      	strb	r3, [r7, #10]
	pmt_buf[3] = (pmt_seq & 0xFF);				// PMT SEQ # LSB
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <send_pmt_packet+0x54>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	72fb      	strb	r3, [r7, #11]
	pmt_buf[4] = pmt_spi[0];					// PMT eADC MSB
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	733b      	strb	r3, [r7, #12]
	pmt_buf[5] = pmt_spi[1];					// PMT eADC LSB
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 800080c:	f107 0108 	add.w	r1, r7, #8
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	2206      	movs	r2, #6
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <send_pmt_packet+0x58>)
 8000816:	f00d f833 	bl	800d880 <HAL_UART_Transmit>
	pmt_seq++;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <send_pmt_packet+0x54>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <send_pmt_packet+0x54>)
 8000824:	801a      	strh	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	240006ce 	.word	0x240006ce
 8000834:	240005a8 	.word	0x240005a8

08000838 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b0a5      	sub	sp, #148	; 0x94
 800083c:	af1e      	add	r7, sp, #120	; 0x78
 800083e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a33      	ldr	r2, [pc, #204]	; (8000910 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d120      	bne.n	800088a <HAL_TIM_OC_DelayElapsedCallback+0x52>
		if (PMT_ON) {
 8000848:	4b32      	ldr	r3, [pc, #200]	; (8000914 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d05b      	beq.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xd0>

			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000850:	bf00      	nop
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	4830      	ldr	r0, [pc, #192]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000858:	f006 ff78 	bl	800774c <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f7      	bne.n	8000852 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
			}

			uint8_t *spi1_results = spi(hspi1);
 8000862:	4c2e      	ldr	r4, [pc, #184]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8000864:	4668      	mov	r0, sp
 8000866:	f104 0310 	add.w	r3, r4, #16
 800086a:	2278      	movs	r2, #120	; 0x78
 800086c:	4619      	mov	r1, r3
 800086e:	f00f fce5 	bl	801023c <memcpy>
 8000872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000876:	f7ff fec3 	bl	8000600 <spi>
 800087a:	60f8      	str	r0, [r7, #12]

			send_pmt_packet(spi1_results);
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f7ff ffad 	bl	80007dc <send_pmt_packet>

			free(spi1_results);
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f00f fbe2 	bl	801004c <free>
//			free(hk_adc1_results);
//			free(hk_adc3_results);

		}
	}
}
 8000888:	e03e      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xd0>
	} else if (htim == &htim2) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a24      	ldr	r2, [pc, #144]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12d      	bne.n	80008ee <HAL_TIM_OC_DelayElapsedCallback+0xb6>
		if (ERPA_ON) {
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d036      	beq.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xd0>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800089a:	bf00      	nop
 800089c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a0:	4821      	ldr	r0, [pc, #132]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80008a2:	f006 ff53 	bl	800774c <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f7      	bne.n	800089c <HAL_TIM_OC_DelayElapsedCallback+0x64>
			uint8_t *spi2_results = spi(hspi2);
 80008ac:	4c1f      	ldr	r4, [pc, #124]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80008ae:	4668      	mov	r0, sp
 80008b0:	f104 0310 	add.w	r3, r4, #16
 80008b4:	2278      	movs	r2, #120	; 0x78
 80008b6:	4619      	mov	r1, r3
 80008b8:	f00f fcc0 	bl	801023c <memcpy>
 80008bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008c0:	f7ff fe9e 	bl	8000600 <spi>
 80008c4:	6178      	str	r0, [r7, #20]
			uint16_t *erpa_adc_results = erpa_adc();
 80008c6:	f7ff fee3 	bl	8000690 <erpa_adc>
 80008ca:	6138      	str	r0, [r7, #16]
			if (!auto_sweep){
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
				set_erpa_sweep();
 80008d4:	f7ff fec2 	bl	800065c <set_erpa_sweep>
			send_erpa_packet(spi2_results, erpa_adc_results);
 80008d8:	6939      	ldr	r1, [r7, #16]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff fef4 	bl	80006c8 <send_erpa_packet>
			free(spi2_results);
 80008e0:	6978      	ldr	r0, [r7, #20]
 80008e2:	f00f fbb3 	bl	801004c <free>
			free(erpa_adc_results);
 80008e6:	6938      	ldr	r0, [r7, #16]
 80008e8:	f00f fbb0 	bl	801004c <free>
}
 80008ec:	e00c      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xd0>
	} else if (htim == &htim4) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d108      	bne.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xd0>
		if (HK_ON) {
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xd0>
			send_hk_packet(NULL, NULL, NULL);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff2c 	bl	8000760 <send_hk_packet>
}
 8000908:	bf00      	nop
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	240004c4 	.word	0x240004c4
 8000914:	240006d2 	.word	0x240006d2
 8000918:	58020000 	.word	0x58020000
 800091c:	240003b4 	.word	0x240003b4
 8000920:	24000510 	.word	0x24000510
 8000924:	240006d3 	.word	0x240006d3
 8000928:	58020400 	.word	0x58020400
 800092c:	2400043c 	.word	0x2400043c
 8000930:	240006c8 	.word	0x240006c8
 8000934:	2400055c 	.word	0x2400055c
 8000938:	240006d4 	.word	0x240006d4

0800093c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	49bf      	ldr	r1, [pc, #764]	; (8000c44 <HAL_UART_RxCpltCallback+0x308>)
 8000948:	48bf      	ldr	r0, [pc, #764]	; (8000c48 <HAL_UART_RxCpltCallback+0x30c>)
 800094a:	f00d f827 	bl	800d99c <HAL_UART_Receive_IT>
	unsigned char key = rx_buf[0];
 800094e:	4bbd      	ldr	r3, [pc, #756]	; (8000c44 <HAL_UART_RxCpltCallback+0x308>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	2b25      	cmp	r3, #37	; 0x25
 8000958:	f200 816f 	bhi.w	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <HAL_UART_RxCpltCallback+0x28>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000acd 	.word	0x08000acd
 8000968:	08000ae9 	.word	0x08000ae9
 800096c:	08000b05 	.word	0x08000b05
 8000970:	08000b25 	.word	0x08000b25
 8000974:	08000b45 	.word	0x08000b45
 8000978:	08000b61 	.word	0x08000b61
 800097c:	08000b81 	.word	0x08000b81
 8000980:	08000ba1 	.word	0x08000ba1
 8000984:	08000c3b 	.word	0x08000c3b
 8000988:	08000c3b 	.word	0x08000c3b
 800098c:	08000a0b 	.word	0x08000a0b
 8000990:	080009fd 	.word	0x080009fd
 8000994:	08000bbd 	.word	0x08000bbd
 8000998:	08000bcd 	.word	0x08000bcd
 800099c:	08000bed 	.word	0x08000bed
 80009a0:	08000c0d 	.word	0x08000c0d
 80009a4:	08000bdd 	.word	0x08000bdd
 80009a8:	08000bfd 	.word	0x08000bfd
 80009ac:	08000c1d 	.word	0x08000c1d
 80009b0:	08000adb 	.word	0x08000adb
 80009b4:	08000af7 	.word	0x08000af7
 80009b8:	08000b15 	.word	0x08000b15
 80009bc:	08000b35 	.word	0x08000b35
 80009c0:	08000b53 	.word	0x08000b53
 80009c4:	08000b71 	.word	0x08000b71
 80009c8:	08000b91 	.word	0x08000b91
 80009cc:	08000baf 	.word	0x08000baf
 80009d0:	08000a19 	.word	0x08000a19
 80009d4:	08000a31 	.word	0x08000a31
 80009d8:	08000a49 	.word	0x08000a49
 80009dc:	08000c3b 	.word	0x08000c3b
 80009e0:	08000c3b 	.word	0x08000c3b
 80009e4:	08000c3b 	.word	0x08000c3b
 80009e8:	08000c3b 	.word	0x08000c3b
 80009ec:	08000c3b 	.word	0x08000c3b
 80009f0:	08000c3b 	.word	0x08000c3b
 80009f4:	08000a85 	.word	0x08000a85
 80009f8:	08000aa9 	.word	0x08000aa9
	case 0x0B: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80009fc:	4b93      	ldr	r3, [pc, #588]	; (8000c4c <HAL_UART_RxCpltCallback+0x310>)
 80009fe:	2104      	movs	r1, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f006 feba 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000a08:	e117      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0A: {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a0a:	4b90      	ldr	r3, [pc, #576]	; (8000c4c <HAL_UART_RxCpltCallback+0x310>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f006 feb3 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000a16:	e110      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x1B: {
		if (step < 17) {
 8000a18:	4b8d      	ldr	r3, [pc, #564]	; (8000c50 <HAL_UART_RxCpltCallback+0x314>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b10      	cmp	r3, #16
 8000a1e:	f200 8105 	bhi.w	8000c2c <HAL_UART_RxCpltCallback+0x2f0>
			step+=2;
 8000a22:	4b8b      	ldr	r3, [pc, #556]	; (8000c50 <HAL_UART_RxCpltCallback+0x314>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3302      	adds	r3, #2
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b89      	ldr	r3, [pc, #548]	; (8000c50 <HAL_UART_RxCpltCallback+0x314>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a2e:	e0fd      	b.n	8000c2c <HAL_UART_RxCpltCallback+0x2f0>
	}
	case 0x1C: {
		if (step > 3) {
 8000a30:	4b87      	ldr	r3, [pc, #540]	; (8000c50 <HAL_UART_RxCpltCallback+0x314>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	f240 80fb 	bls.w	8000c30 <HAL_UART_RxCpltCallback+0x2f4>
			step-=2;
 8000a3a:	4b85      	ldr	r3, [pc, #532]	; (8000c50 <HAL_UART_RxCpltCallback+0x314>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b83      	ldr	r3, [pc, #524]	; (8000c50 <HAL_UART_RxCpltCallback+0x314>)
 8000a44:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a46:	e0f3      	b.n	8000c30 <HAL_UART_RxCpltCallback+0x2f4>
	}
	case 0x1D: {
		if (!auto_sweep) {
 8000a48:	4b82      	ldr	r3, [pc, #520]	; (8000c54 <HAL_UART_RxCpltCallback+0x318>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10e      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0x132>
			auto_sweep = 1;
 8000a50:	4b80      	ldr	r3, [pc, #512]	; (8000c54 <HAL_UART_RxCpltCallback+0x318>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000a56:	4880      	ldr	r0, [pc, #512]	; (8000c58 <HAL_UART_RxCpltCallback+0x31c>)
 8000a58:	f00b f9e0 	bl	800be1c <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, SIZE, DAC_ALIGN_12B_R);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2320      	movs	r3, #32
 8000a62:	4a7e      	ldr	r2, [pc, #504]	; (8000c5c <HAL_UART_RxCpltCallback+0x320>)
 8000a64:	2100      	movs	r1, #0
 8000a66:	487e      	ldr	r0, [pc, #504]	; (8000c60 <HAL_UART_RxCpltCallback+0x324>)
 8000a68:	f003 fb62 	bl	8004130 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 8000a6c:	e0e5      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
			auto_sweep = 0;
 8000a6e:	4b79      	ldr	r3, [pc, #484]	; (8000c54 <HAL_UART_RxCpltCallback+0x318>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000a74:	4878      	ldr	r0, [pc, #480]	; (8000c58 <HAL_UART_RxCpltCallback+0x31c>)
 8000a76:	f00b fa41 	bl	800befc <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4878      	ldr	r0, [pc, #480]	; (8000c60 <HAL_UART_RxCpltCallback+0x324>)
 8000a7e:	f003 fc17 	bl	80042b0 <HAL_DAC_Stop_DMA>
		break;
 8000a82:	e0da      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x24: {
		if (cadence <= 50000){
 8000a84:	4b77      	ldr	r3, [pc, #476]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	f200 80d1 	bhi.w	8000c34 <HAL_UART_RxCpltCallback+0x2f8>
			cadence *= 2;
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4a72      	ldr	r2, [pc, #456]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000a9a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa0:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000aa6:	e0c5      	b.n	8000c34 <HAL_UART_RxCpltCallback+0x2f8>
	}
	case 0x25: {
		if (cadence >= 6250){
 8000aa8:	4b6e      	ldr	r3, [pc, #440]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	f240 80c1 	bls.w	8000c38 <HAL_UART_RxCpltCallback+0x2fc>
			cadence /= 2;
 8000ab6:	4b6b      	ldr	r3, [pc, #428]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	4a69      	ldr	r2, [pc, #420]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000abe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	4b67      	ldr	r3, [pc, #412]	; (8000c64 <HAL_UART_RxCpltCallback+0x328>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000aca:	e0b5      	b.n	8000c38 <HAL_UART_RxCpltCallback+0x2fc>
	}
	case 0x00: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000acc:	4b5f      	ldr	r3, [pc, #380]	; (8000c4c <HAL_UART_RxCpltCallback+0x310>)
 8000ace:	2120      	movs	r1, #32
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f006 fe52 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000ad8:	e0af      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x13: {
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000ada:	4b5c      	ldr	r3, [pc, #368]	; (8000c4c <HAL_UART_RxCpltCallback+0x310>)
 8000adc:	2120      	movs	r1, #32
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 fe4b 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000ae6:	e0a8      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x01: {

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000ae8:	4b58      	ldr	r3, [pc, #352]	; (8000c4c <HAL_UART_RxCpltCallback+0x310>)
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	2201      	movs	r2, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f006 fe44 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000af4:	e0a1      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x14: {
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000af6:	4b55      	ldr	r3, [pc, #340]	; (8000c4c <HAL_UART_RxCpltCallback+0x310>)
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fe3d 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b02:	e09a      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x02: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b04:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f006 fe35 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b12:	e092      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x15: {
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b14:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f006 fe2d 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b22:	e08a      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x03: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b24:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 fe25 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b32:	e082      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x16: {
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f006 fe1d 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b42:	e07a      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x04: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f006 fe16 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b50:	e073      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x17: {
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	2200      	movs	r2, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f006 fe0f 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b5e:	e06c      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x05: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b60:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	2201      	movs	r2, #1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 fe07 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b6e:	e064      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x18: {
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b70:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	2200      	movs	r2, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 fdff 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b7e:	e05c      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x06: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2201      	movs	r2, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f006 fdf7 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b8e:	e054      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x19: {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b90:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	2200      	movs	r2, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f006 fdef 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000b9e:	e04c      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x07: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba0:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 fde8 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000bac:	e045      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x1A: {
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <HAL_UART_RxCpltCallback+0x32c>)
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 fde1 	bl	800777c <HAL_GPIO_WritePin>
		break;
 8000bba:	e03e      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0C: {
		HAL_SuspendTick();
 8000bbc:	f001 fcea 	bl	8002594 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f006 ff28 	bl	8007a18 <HAL_PWR_EnterSTOPMode>
		NVIC_SystemReset();
 8000bc8:	f7ff fd04 	bl	80005d4 <__NVIC_SystemReset>
		break;
	}
	case 0x0D: {
		PMT_ON = 1;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_UART_RxCpltCallback+0x330>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4826      	ldr	r0, [pc, #152]	; (8000c70 <HAL_UART_RxCpltCallback+0x334>)
 8000bd6:	f00b f9b9 	bl	800bf4c <HAL_TIM_OC_Start_IT>
		break;
 8000bda:	e02e      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x10: {
		PMT_ON = 0;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <HAL_UART_RxCpltCallback+0x330>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000be2:	2100      	movs	r1, #0
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <HAL_UART_RxCpltCallback+0x334>)
 8000be6:	f00b fb0b 	bl	800c200 <HAL_TIM_OC_Stop_IT>

		break;
 8000bea:	e026      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0E: {
		ERPA_ON = 1;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_UART_RxCpltCallback+0x338>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000bf2:	210c      	movs	r1, #12
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <HAL_UART_RxCpltCallback+0x31c>)
 8000bf6:	f00b f9a9 	bl	800bf4c <HAL_TIM_OC_Start_IT>
		break;
 8000bfa:	e01e      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x11: {
		ERPA_ON = 0;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_UART_RxCpltCallback+0x338>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c02:	210c      	movs	r1, #12
 8000c04:	4814      	ldr	r0, [pc, #80]	; (8000c58 <HAL_UART_RxCpltCallback+0x31c>)
 8000c06:	f00b fafb 	bl	800c200 <HAL_TIM_OC_Stop_IT>

		break;
 8000c0a:	e016      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x0F: {
		HK_ON = 1;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_UART_RxCpltCallback+0x33c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000c12:	2100      	movs	r1, #0
 8000c14:	4819      	ldr	r0, [pc, #100]	; (8000c7c <HAL_UART_RxCpltCallback+0x340>)
 8000c16:	f00b f999 	bl	800bf4c <HAL_TIM_OC_Start_IT>

		break;
 8000c1a:	e00e      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
	}
	case 0x12: {
		HK_ON = 0;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_UART_RxCpltCallback+0x33c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <HAL_UART_RxCpltCallback+0x340>)
 8000c26:	f00b f991 	bl	800bf4c <HAL_TIM_OC_Start_IT>

		break;
 8000c2a:	e006      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000c2c:	bf00      	nop
 8000c2e:	e004      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000c30:	bf00      	nop
 8000c32:	e002      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <HAL_UART_RxCpltCallback+0x2fe>
		break;
 8000c38:	bf00      	nop
	}
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2400063c 	.word	0x2400063c
 8000c48:	240005a8 	.word	0x240005a8
 8000c4c:	58020400 	.word	0x58020400
 8000c50:	24000084 	.word	0x24000084
 8000c54:	240006c8 	.word	0x240006c8
 8000c58:	24000510 	.word	0x24000510
 8000c5c:	24000000 	.word	0x24000000
 8000c60:	240002d4 	.word	0x240002d4
 8000c64:	24000080 	.word	0x24000080
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	240006d2 	.word	0x240006d2
 8000c70:	240004c4 	.word	0x240004c4
 8000c74:	240006d3 	.word	0x240006d3
 8000c78:	240006d4 	.word	0x240006d4
 8000c7c:	2400055c 	.word	0x2400055c

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c84:	f001 fbf4 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c88:	f000 f876 	bl	8000d78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c8c:	f000 f8fa 	bl	8000e84 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 fdce 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c94:	f000 fd9c 	bl	80017d0 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c98:	f000 fad8 	bl	800124c <MX_DAC1_Init>
  MX_ADC1_Init();
 8000c9c:	f000 f922 	bl	8000ee4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000ca0:	f000 fa42 	bl	8001128 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fc84 	bl	80015b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ca8:	f000 fbf2 	bl	8001490 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000cac:	f000 fb00 	bl	80012b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cb0:	f000 fb3e 	bl	8001330 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000cb4:	f000 fb94 	bl	80013e0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000cb8:	f000 fd3e 	bl	8001738 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000cbc:	f000 fcee 	bl	800169c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 312;
 8000cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000cc8:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000cca:	210c      	movs	r1, #12
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <main+0xdc>)
 8000cce:	f00b fbd3 	bl	800c478 <HAL_TIM_PWM_Start>




  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8000cd2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cda:	4821      	ldr	r0, [pc, #132]	; (8000d60 <main+0xe0>)
 8000cdc:	f002 ff5e 	bl	8003b9c <HAL_ADCEx_Calibration_Start>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <main+0x6a>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 8000ce6:	f000 fe1d 	bl	8001924 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1Data,
 8000cea:	220b      	movs	r2, #11
 8000cec:	491d      	ldr	r1, [pc, #116]	; (8000d64 <main+0xe4>)
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <main+0xe0>)
 8000cf0:	f002 f832 	bl	8002d58 <HAL_ADC_Start_DMA>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <main+0x7e>
  	ADC1NumChannels) != HAL_OK) {
  		Error_Handler();
 8000cfa:	f000 fe13 	bl	8001924 <Error_Handler>
  	}

  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8000cfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <main+0xe8>)
 8000d08:	f002 ff48 	bl	8003b9c <HAL_ADCEx_Calibration_Start>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <main+0x96>
  			ADC_SINGLE_ENDED) != HAL_OK) {
  		/* Calibration Error */
  		Error_Handler();
 8000d12:	f000 fe07 	bl	8001924 <Error_Handler>
  	}

  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3Data,
 8000d16:	2204      	movs	r2, #4
 8000d18:	4914      	ldr	r1, [pc, #80]	; (8000d6c <main+0xec>)
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <main+0xe8>)
 8000d1c:	f002 f81c 	bl	8002d58 <HAL_ADC_Start_DMA>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <main+0xaa>
  	ADC3NumChannels) != HAL_OK) {
  		Error_Handler();
 8000d26:	f000 fdfd 	bl	8001924 <Error_Handler>
  	}

  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8000d2a:	bf00      	nop
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <main+0xf0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d0f7      	beq.n	8000d2c <main+0xac>
  		;
  	while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 8000d3c:	bf00      	nop
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <main+0xf0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d4c:	d1f7      	bne.n	8000d3e <main+0xbe>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4908      	ldr	r1, [pc, #32]	; (8000d74 <main+0xf4>)
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <main+0xf0>)
 8000d54:	f00c fe22 	bl	800d99c <HAL_UART_Receive_IT>
 8000d58:	e7f9      	b.n	8000d4e <main+0xce>
 8000d5a:	bf00      	nop
 8000d5c:	24000510 	.word	0x24000510
 8000d60:	2400011c 	.word	0x2400011c
 8000d64:	240006a0 	.word	0x240006a0
 8000d68:	24000180 	.word	0x24000180
 8000d6c:	240006c0 	.word	0x240006c0
 8000d70:	240005a8 	.word	0x240005a8
 8000d74:	2400063c 	.word	0x2400063c

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09c      	sub	sp, #112	; 0x70
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	224c      	movs	r2, #76	; 0x4c
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00f fa14 	bl	80101b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2220      	movs	r2, #32
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00f fa0e 	bl	80101b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f006 fe79 	bl	8007a90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <SystemClock_Config+0x100>)
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <SystemClock_Config+0x100>)
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dae:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <SystemClock_Config+0x100>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <SystemClock_Config+0x104>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc0:	4a2e      	ldr	r2, [pc, #184]	; (8000e7c <SystemClock_Config+0x104>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <SystemClock_Config+0x104>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd4:	bf00      	nop
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <SystemClock_Config+0x104>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de2:	d1f8      	bne.n	8000dd6 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <SystemClock_Config+0x108>)
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <SystemClock_Config+0x108>)
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df0:	2302      	movs	r3, #2
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e00:	2300      	movs	r3, #0
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fe6b 	bl	8007b04 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e34:	f000 fd76 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	233f      	movs	r3, #63	; 0x3f
 8000e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f007 faaa 	bl	80083b8 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e6a:	f000 fd5b 	bl	8001924 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3770      	adds	r7, #112	; 0x70
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58024800 	.word	0x58024800
 8000e80:	58024400 	.word	0x58024400

08000e84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b0      	sub	sp, #192	; 0xc0
 8000e88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	22c0      	movs	r2, #192	; 0xc0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00f f98f 	bl	80101b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000eb6:	23c0      	movs	r3, #192	; 0xc0
 8000eb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000eba:	2320      	movs	r3, #32
 8000ebc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000ebe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f007 fdff 	bl	8008ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ed8:	f000 fd24 	bl	8001924 <Error_Handler>
  }
}
 8000edc:	bf00      	nop
 8000ede:	37c0      	adds	r7, #192	; 0xc0
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f08:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f0a:	4a7b      	ldr	r2, [pc, #492]	; (80010f8 <MX_ADC1_Init+0x214>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f0e:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f10:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f16:	4b77      	ldr	r3, [pc, #476]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f22:	4b74      	ldr	r3, [pc, #464]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f28:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f2e:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000f34:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f36:	220b      	movs	r2, #11
 8000f38:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f46:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f4c:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f52:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f5a:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f60:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f68:	4862      	ldr	r0, [pc, #392]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f6a:	f001 fd53 	bl	8002a14 <HAL_ADC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 fcd6 	bl	8001924 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	485c      	ldr	r0, [pc, #368]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000f84:	f002 fe6e 	bl	8003c64 <HAL_ADCEx_MultiModeConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f8e:	f000 fcc9 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f92:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <MX_ADC1_Init+0x218>)
 8000f94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f96:	2306      	movs	r3, #6
 8000f98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fa2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	484f      	ldr	r0, [pc, #316]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000fb6:	f001 ffb1 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000fc0:	f000 fcb0 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fc4:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <MX_ADC1_Init+0x21c>)
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc8:	230c      	movs	r3, #12
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4848      	ldr	r0, [pc, #288]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000fd2:	f001 ffa3 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000fdc:	f000 fca2 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <MX_ADC1_Init+0x220>)
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4841      	ldr	r0, [pc, #260]	; (80010f4 <MX_ADC1_Init+0x210>)
 8000fee:	f001 ff95 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000ff8:	f000 fc94 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <MX_ADC1_Init+0x224>)
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001000:	2318      	movs	r3, #24
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	483a      	ldr	r0, [pc, #232]	; (80010f4 <MX_ADC1_Init+0x210>)
 800100a:	f001 ff87 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001014:	f000 fc86 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <MX_ADC1_Init+0x228>)
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4833      	ldr	r0, [pc, #204]	; (80010f4 <MX_ADC1_Init+0x210>)
 8001028:	f001 ff78 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001032:	f000 fc77 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <MX_ADC1_Init+0x22c>)
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800103a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	482b      	ldr	r0, [pc, #172]	; (80010f4 <MX_ADC1_Init+0x210>)
 8001046:	f001 ff69 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001050:	f000 fc68 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <MX_ADC1_Init+0x230>)
 8001056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001058:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800105c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4824      	ldr	r0, [pc, #144]	; (80010f4 <MX_ADC1_Init+0x210>)
 8001064:	f001 ff5a 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800106e:	f000 fc59 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <MX_ADC1_Init+0x234>)
 8001074:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001076:	f44f 7389 	mov.w	r3, #274	; 0x112
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	481c      	ldr	r0, [pc, #112]	; (80010f4 <MX_ADC1_Init+0x210>)
 8001082:	f001 ff4b 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800108c:	f000 fc4a 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_ADC1_Init+0x238>)
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001094:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001098:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <MX_ADC1_Init+0x210>)
 80010a0:	f001 ff3c 	bl	8002f1c <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80010aa:	f000 fc3b 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC1_Init+0x23c>)
 80010b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80010b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_ADC1_Init+0x210>)
 80010be:	f001 ff2d 	bl	8002f1c <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80010c8:	f000 fc2c 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_ADC1_Init+0x240>)
 80010ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80010d0:	f240 2306 	movw	r3, #518	; 0x206
 80010d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0x210>)
 80010dc:	f001 ff1e 	bl	8002f1c <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80010e6:	f000 fc1d 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400011c 	.word	0x2400011c
 80010f8:	40022000 	.word	0x40022000
 80010fc:	0c900008 	.word	0x0c900008
 8001100:	10c00010 	.word	0x10c00010
 8001104:	14f00020 	.word	0x14f00020
 8001108:	1d500080 	.word	0x1d500080
 800110c:	21800100 	.word	0x21800100
 8001110:	25b00200 	.word	0x25b00200
 8001114:	2a000400 	.word	0x2a000400
 8001118:	2e300800 	.word	0x2e300800
 800111c:	3ac04000 	.word	0x3ac04000
 8001120:	3ef08000 	.word	0x3ef08000
 8001124:	47520000 	.word	0x47520000

08001128 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <MX_ADC3_Init+0x110>)
 8001142:	4a3e      	ldr	r2, [pc, #248]	; (800123c <MX_ADC3_Init+0x114>)
 8001144:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <MX_ADC3_Init+0x110>)
 8001148:	2208      	movs	r2, #8
 800114a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800114c:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <MX_ADC3_Init+0x110>)
 800114e:	2201      	movs	r2, #1
 8001150:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <MX_ADC3_Init+0x110>)
 8001154:	2204      	movs	r2, #4
 8001156:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <MX_ADC3_Init+0x110>)
 800115a:	2200      	movs	r2, #0
 800115c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <MX_ADC3_Init+0x110>)
 8001160:	2201      	movs	r2, #1
 8001162:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <MX_ADC3_Init+0x110>)
 8001166:	2204      	movs	r2, #4
 8001168:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <MX_ADC3_Init+0x110>)
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <MX_ADC3_Init+0x110>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <MX_ADC3_Init+0x110>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <MX_ADC3_Init+0x110>)
 800117e:	2203      	movs	r2, #3
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_ADC3_Init+0x110>)
 8001184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_ADC3_Init+0x110>)
 800118c:	2200      	movs	r2, #0
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_ADC3_Init+0x110>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001198:	4827      	ldr	r0, [pc, #156]	; (8001238 <MX_ADC3_Init+0x110>)
 800119a:	f001 fc3b 	bl	8002a14 <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80011a4:	f000 fbbe 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MX_ADC3_Init+0x118>)
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2306      	movs	r3, #6
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80011b0:	2307      	movs	r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ba:	2304      	movs	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <MX_ADC3_Init+0x110>)
 80011cc:	f001 fea6 	bl	8002f1c <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80011d6:	f000 fba5 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_ADC3_Init+0x11c>)
 80011dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011de:	230c      	movs	r3, #12
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <MX_ADC3_Init+0x110>)
 80011e8:	f001 fe98 	bl	8002f1c <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80011f2:	f000 fb97 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011fa:	2312      	movs	r3, #18
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_ADC3_Init+0x110>)
 8001204:	f001 fe8a 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800120e:	f000 fb89 	bl	8001924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_ADC3_Init+0x120>)
 8001214:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001216:	2318      	movs	r3, #24
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_ADC3_Init+0x110>)
 8001220:	f001 fe7c 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800122a:	f000 fb7b 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000180 	.word	0x24000180
 800123c:	58026000 	.word	0x58026000
 8001240:	cb840000 	.word	0xcb840000
 8001244:	cfb80000 	.word	0xcfb80000
 8001248:	04300002 	.word	0x04300002

0800124c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2224      	movs	r2, #36	; 0x24
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f00e ffab 	bl	80101b4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_DAC1_Init+0x5c>)
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_DAC1_Init+0x60>)
 8001262:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <MX_DAC1_Init+0x5c>)
 8001266:	f002 feea 	bl	800403e <HAL_DAC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001270:	f000 fb58 	bl	8001924 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001278:	230a      	movs	r3, #10
 800127a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_DAC1_Init+0x5c>)
 8001290:	f003 f8a4 	bl	80043dc <HAL_DAC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800129a:	f000 fb43 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	240002d4 	.word	0x240002d4
 80012ac:	40007400 	.word	0x40007400

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_I2C1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <MX_I2C1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_I2C1_Init+0x74>)
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <MX_I2C1_Init+0x7c>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_I2C1_Init+0x74>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_I2C1_Init+0x74>)
 80012ec:	f006 fa60 	bl	80077b0 <HAL_I2C_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012f6:	f000 fb15 	bl	8001924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <MX_I2C1_Init+0x74>)
 80012fe:	f006 faf3 	bl	80078e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 fb0c 	bl	8001924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_I2C1_Init+0x74>)
 8001310:	f006 fb35 	bl	800797e <HAL_I2CEx_ConfigDigitalFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 fb03 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24000360 	.word	0x24000360
 8001328:	40005400 	.word	0x40005400
 800132c:	00506682 	.word	0x00506682

08001330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001336:	4a29      	ldr	r2, [pc, #164]	; (80013dc <MX_SPI1_Init+0xac>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800133c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001348:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800134c:	220f      	movs	r2, #15
 800134e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800135e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001362:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001366:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800136a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_SPI1_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_SPI1_Init+0xa8>)
 800139a:	2200      	movs	r2, #0
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_SPI1_Init+0xa8>)
 80013c4:	f00a f882 	bl	800b4cc <HAL_SPI_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80013ce:	f000 faa9 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	240003b4 	.word	0x240003b4
 80013dc:	40013000 	.word	0x40013000

080013e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <MX_SPI2_Init+0xa8>)
 80013e6:	4a29      	ldr	r2, [pc, #164]	; (800148c <MX_SPI2_Init+0xac>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_SPI2_Init+0xa8>)
 80013ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_SPI2_Init+0xa8>)
 80013f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_SPI2_Init+0xa8>)
 80013fc:	220f      	movs	r2, #15
 80013fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_SPI2_Init+0xa8>)
 800140e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001412:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001416:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800141a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_SPI2_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_SPI2_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_SPI2_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001444:	2200      	movs	r2, #0
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_SPI2_Init+0xa8>)
 800144a:	2200      	movs	r2, #0
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001450:	2200      	movs	r2, #0
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001456:	2200      	movs	r2, #0
 8001458:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_SPI2_Init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_SPI2_Init+0xa8>)
 800146e:	2200      	movs	r2, #0
 8001470:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_SPI2_Init+0xa8>)
 8001474:	f00a f82a 	bl	800b4cc <HAL_SPI_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800147e:	f000 fa51 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2400043c 	.word	0x2400043c
 800148c:	40003800 	.word	0x40003800

08001490 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b096      	sub	sp, #88	; 0x58
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	222c      	movs	r2, #44	; 0x2c
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00e fe79 	bl	80101b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014c4:	4a39      	ldr	r2, [pc, #228]	; (80015ac <MX_TIM1_Init+0x11c>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014ca:	225f      	movs	r2, #95	; 0x5f
 80014cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014d6:	f24f 4223 	movw	r2, #62499	; 0xf423
 80014da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ee:	482e      	ldr	r0, [pc, #184]	; (80015a8 <MX_TIM1_Init+0x118>)
 80014f0:	f00a ff6a 	bl	800c3c8 <HAL_TIM_PWM_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 fa13 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800150a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800150e:	4619      	mov	r1, r3
 8001510:	4825      	ldr	r0, [pc, #148]	; (80015a8 <MX_TIM1_Init+0x118>)
 8001512:	f00c f83b 	bl	800d58c <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800151c:	f000 fa02 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001520:	2360      	movs	r3, #96	; 0x60
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001524:	f240 13df 	movw	r3, #479	; 0x1df
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152a:	2300      	movs	r3, #0
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM1_Init+0x118>)
 8001548:	f00b f9ac 	bl	800c8a4 <HAL_TIM_PWM_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001552:	f000 f9e7 	bl	8001924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800156a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM1_Init+0x118>)
 800158c:	f00c f88c 	bl	800d6a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001596:	f000 f9c5 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM1_Init+0x118>)
 800159c:	f000 fd1c 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3758      	adds	r7, #88	; 0x58
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	240004c4 	.word	0x240004c4
 80015ac:	40010000 	.word	0x40010000

080015b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015ec:	222f      	movs	r2, #47	; 0x2f
 80015ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015f8:	f640 4234 	movw	r2, #3124	; 0xc34
 80015fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160a:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM2_Init+0xe8>)
 800160c:	f00a fbaf 	bl	800bd6e <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001616:	f000 f985 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001628:	f00b fa50 	bl	800cacc <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001632:	f000 f977 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001636:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001638:	f00a fec6 	bl	800c3c8 <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001642:	f000 f96f 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001646:	2320      	movs	r3, #32
 8001648:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001656:	f00b ff99 	bl	800d58c <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001660:	f000 f960 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	220c      	movs	r2, #12
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM2_Init+0xe8>)
 800167c:	f00b f912 	bl	800c8a4 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001686:	f000 f94d 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM2_Init+0xe8>)
 800168c:	f000 fca4 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000510 	.word	0x24000510

0800169c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_TIM4_Init+0x94>)
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <MX_TIM4_Init+0x98>)
 80016be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_TIM4_Init+0x94>)
 80016c2:	222f      	movs	r2, #47	; 0x2f
 80016c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM4_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_TIM4_Init+0x94>)
 80016ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_TIM4_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM4_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <MX_TIM4_Init+0x94>)
 80016e2:	f00a fb44 	bl	800bd6e <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80016ec:	f000 f91a 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_TIM4_Init+0x94>)
 80016fe:	f00b f9e5 	bl	800cacc <HAL_TIM_ConfigClockSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001708:	f000 f90c 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM4_Init+0x94>)
 800171a:	f00b ff37 	bl	800d58c <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001724:	f000 f8fe 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2400055c 	.word	0x2400055c
 8001734:	40000800 	.word	0x40000800

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <MX_USART1_UART_Init+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001744:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001782:	f00c f82d 	bl	800d7e0 <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 f8ca 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001794:	f00e fb87 	bl	800fea6 <HAL_UARTEx_SetTxFifoThreshold>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800179e:	f000 f8c1 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 80017a6:	f00e fbbc 	bl	800ff22 <HAL_UARTEx_SetRxFifoThreshold>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f000 f8b8 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f00e fb3d 	bl	800fe34 <HAL_UARTEx_DisableFifoMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 f8b0 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	240005a8 	.word	0x240005a8
 80017cc:	40011000 	.word	0x40011000

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_DMA_Init+0x5c>)
 80017d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_DMA_Init+0x5c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	200b      	movs	r0, #11
 80017fa:	f002 fbec 	bl	8003fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017fe:	200b      	movs	r0, #11
 8001800:	f002 fc03 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	200c      	movs	r0, #12
 800180a:	f002 fbe4 	bl	8003fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800180e:	200c      	movs	r0, #12
 8001810:	f002 fbfb 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2010      	movs	r0, #16
 800181a:	f002 fbdc 	bl	8003fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800181e:	2010      	movs	r0, #16
 8001820:	f002 fbf3 	bl	800400a <HAL_NVIC_EnableIRQ>

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <MX_GPIO_Init+0xe8>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <MX_GPIO_Init+0xe8>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a23      	ldr	r2, [pc, #140]	; (8001918 <MX_GPIO_Init+0xe8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80018c4:	4815      	ldr	r0, [pc, #84]	; (800191c <MX_GPIO_Init+0xec>)
 80018c6:	f005 ff59 	bl	800777c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2164      	movs	r1, #100	; 0x64
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_GPIO_Init+0xf0>)
 80018d0:	f005 ff54 	bl	800777c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018d4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80018d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_GPIO_Init+0xec>)
 80018ee:	f005 fd7d 	bl	80073ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_GPIO_Init+0xf0>)
 800190a:	f005 fd6f 	bl	80073ec <HAL_GPIO_Init>

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	58020800 	.word	0x58020800
 8001920:	58020400 	.word	0x58020400

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_MspInit+0x30>)
 8001938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x30>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x30>)
 8001948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	58024400 	.word	0x58024400

08001964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7b      	ldr	r2, [pc, #492]	; (8001b70 <HAL_ADC_MspInit+0x20c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	f040 8091 	bne.w	8001aaa <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001988:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 800198a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198e:	4a79      	ldr	r2, [pc, #484]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001990:	f043 0320 	orr.w	r3, r3, #32
 8001994:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 800199a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d4:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001a00:	2333      	movs	r3, #51	; 0x33
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	4859      	ldr	r0, [pc, #356]	; (8001b78 <HAL_ADC_MspInit+0x214>)
 8001a14:	f005 fcea 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001a18:	23ce      	movs	r3, #206	; 0xce
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4854      	ldr	r0, [pc, #336]	; (8001b7c <HAL_ADC_MspInit+0x218>)
 8001a2c:	f005 fcde 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a30:	2303      	movs	r3, #3
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a34:	2303      	movs	r3, #3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	484f      	ldr	r0, [pc, #316]	; (8001b80 <HAL_ADC_MspInit+0x21c>)
 8001a44:	f005 fcd2 	bl	80073ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a48:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a4a:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_ADC_MspInit+0x224>)
 8001a4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a50:	2209      	movs	r2, #9
 8001a52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a60:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a8e:	f002 fe71 	bl	8004774 <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001a98:	f7ff ff44 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a39      	ldr	r2, [pc, #228]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa2:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001aa8:	e05e      	b.n	8001b68 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_ADC_MspInit+0x228>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d159      	bne.n	8001b68 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001af0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001af4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001af8:	f000 fd68 	bl	80025cc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b00:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b04:	f000 fd62 	bl	80025cc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_ADC_MspInit+0x230>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b10:	2273      	movs	r2, #115	; 0x73
 8001b12:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b4e:	f002 fe11 	bl	8004774 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001b58:	f7ff fee4 	bl	8001924 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b68:	bf00      	nop
 8001b6a:	3738      	adds	r7, #56	; 0x38
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40022000 	.word	0x40022000
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020000 	.word	0x58020000
 8001b80:	58020400 	.word	0x58020400
 8001b84:	240001e4 	.word	0x240001e4
 8001b88:	40020010 	.word	0x40020010
 8001b8c:	58026000 	.word	0x58026000
 8001b90:	2400025c 	.word	0x2400025c
 8001b94:	40020028 	.word	0x40020028

08001b98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_DAC_MspInit+0xe0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d159      	bne.n	8001c6e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_DAC_MspInit+0xe4>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <HAL_DAC_MspInit+0xe4>)
 8001bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_DAC_MspInit+0xe4>)
 8001bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_DAC_MspInit+0xe4>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_DAC_MspInit+0xe4>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_DAC_MspInit+0xe4>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	481d      	ldr	r0, [pc, #116]	; (8001c80 <HAL_DAC_MspInit+0xe8>)
 8001c0a:	f005 fbef 	bl	80073ec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_DAC_MspInit+0xf0>)
 8001c12:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c16:	2243      	movs	r2, #67	; 0x43
 8001c18:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c34:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c44:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c54:	f002 fd8e 	bl	8004774 <HAL_DMA_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001c5e:	f7ff fe61 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_DAC_MspInit+0xec>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40007400 	.word	0x40007400
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58020000 	.word	0x58020000
 8001c84:	240002e8 	.word	0x240002e8
 8001c88:	40020088 	.word	0x40020088

08001c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ba      	sub	sp, #232	; 0xe8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	22c0      	movs	r2, #192	; 0xc0
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00e fa81 	bl	80101b4 <memset>
  if(hi2c->Instance==I2C1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_I2C_MspInit+0xc8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d146      	bne.n	8001d4a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cbc:	f04f 0208 	mov.w	r2, #8
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 fefc 	bl	8008ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001cde:	f7ff fe21 	bl	8001924 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_I2C_MspInit+0xcc>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_I2C_MspInit+0xcc>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_I2C_MspInit+0xcc>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <HAL_I2C_MspInit+0xd0>)
 8001d28:	f005 fb60 	bl	80073ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_I2C_MspInit+0xcc>)
 8001d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_I2C_MspInit+0xcc>)
 8001d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_I2C_MspInit+0xcc>)
 8001d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	37e8      	adds	r7, #232	; 0xe8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40005400 	.word	0x40005400
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	58020400 	.word	0x58020400

08001d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0bc      	sub	sp, #240	; 0xf0
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	22c0      	movs	r2, #192	; 0xc0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00e fa17 	bl	80101b4 <memset>
  if(hspi->Instance==SPI1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_SPI_MspInit+0x15c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d145      	bne.n	8001e1c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 fe93 	bl	8008ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001db0:	f7ff fdb8 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db4:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dba:	4a41      	ldr	r2, [pc, #260]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	4a39      	ldr	r2, [pc, #228]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001df0:	2318      	movs	r3, #24
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e12:	4619      	mov	r1, r3
 8001e14:	482b      	ldr	r0, [pc, #172]	; (8001ec4 <HAL_SPI_MspInit+0x164>)
 8001e16:	f005 fae9 	bl	80073ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e1a:	e04a      	b.n	8001eb2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_SPI_MspInit+0x168>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d145      	bne.n	8001eb2 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f006 fe48 	bl	8008ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8001e46:	f7ff fd6d 	bl	8001924 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_SPI_MspInit+0x160>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea0:	2305      	movs	r3, #5
 8001ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_SPI_MspInit+0x164>)
 8001eae:	f005 fa9d 	bl	80073ec <HAL_GPIO_Init>
}
 8001eb2:	bf00      	nop
 8001eb4:	37f0      	adds	r7, #240	; 0xf0
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40013000 	.word	0x40013000
 8001ec0:	58024400 	.word	0x58024400
 8001ec4:	58020400 	.word	0x58020400
 8001ec8:	40003800 	.word	0x40003800

08001ecc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_TIM_PWM_MspInit+0x78>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12e      	bne.n	8001f3c <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2018      	movs	r0, #24
 8001f02:	f002 f868 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001f06:	2018      	movs	r0, #24
 8001f08:	f002 f87f 	bl	800400a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2019      	movs	r0, #25
 8001f12:	f002 f860 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f16:	2019      	movs	r0, #25
 8001f18:	f002 f877 	bl	800400a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	201a      	movs	r0, #26
 8001f22:	f002 f858 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001f26:	201a      	movs	r0, #26
 8001f28:	f002 f86f 	bl	800400a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	201b      	movs	r0, #27
 8001f32:	f002 f850 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f36:	201b      	movs	r0, #27
 8001f38:	f002 f867 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40010000 	.word	0x40010000
 8001f48:	58024400 	.word	0x58024400

08001f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d117      	bne.n	8001f8e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_TIM_Base_MspInit+0x84>)
 8001f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f64:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <HAL_TIM_Base_MspInit+0x84>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_TIM_Base_MspInit+0x84>)
 8001f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2101      	movs	r1, #1
 8001f80:	201c      	movs	r0, #28
 8001f82:	f002 f828 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f86:	201c      	movs	r0, #28
 8001f88:	f002 f83f 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f8c:	e01b      	b.n	8001fc6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_TIM_Base_MspInit+0x88>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d116      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_TIM_Base_MspInit+0x84>)
 8001f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_TIM_Base_MspInit+0x84>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_Base_MspInit+0x84>)
 8001faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2101      	movs	r1, #1
 8001fba:	201e      	movs	r0, #30
 8001fbc:	f002 f80b 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fc0:	201e      	movs	r0, #30
 8001fc2:	f002 f822 	bl	800400a <HAL_NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	40000800 	.word	0x40000800

08001fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a26      	ldr	r2, [pc, #152]	; (8002090 <HAL_TIM_MspPostInit+0xb8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d120      	bne.n	800203c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_TIM_MspPostInit+0xbc>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002000:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_TIM_MspPostInit+0xbc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_TIM_MspPostInit+0xbc>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800202a:	2301      	movs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <HAL_TIM_MspPostInit+0xc0>)
 8002036:	f005 f9d9 	bl	80073ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800203a:	e024      	b.n	8002086 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d11f      	bne.n	8002086 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_TIM_MspPostInit+0xbc>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_TIM_MspPostInit+0xbc>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_TIM_MspPostInit+0xbc>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002076:	2301      	movs	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4806      	ldr	r0, [pc, #24]	; (800209c <HAL_TIM_MspPostInit+0xc4>)
 8002082:	f005 f9b3 	bl	80073ec <HAL_GPIO_Init>
}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	58024400 	.word	0x58024400
 8002098:	58020000 	.word	0x58020000
 800209c:	58020400 	.word	0x58020400

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0ba      	sub	sp, #232	; 0xe8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	22c0      	movs	r2, #192	; 0xc0
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00e f877 	bl	80101b4 <memset>
  if(huart->Instance==USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_UART_MspInit+0xd8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d14e      	bne.n	800216e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020d0:	f04f 0201 	mov.w	r2, #1
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f006 fcf2 	bl	8008ad0 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020f2:	f7ff fc17 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_UART_MspInit+0xdc>)
 80020f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_UART_MspInit+0xdc>)
 80020fe:	f043 0310 	orr.w	r3, r3, #16
 8002102:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_UART_MspInit+0xdc>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_UART_MspInit+0xdc>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_UART_MspInit+0xdc>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_UART_MspInit+0xdc>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800214c:	2307      	movs	r3, #7
 800214e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002156:	4619      	mov	r1, r3
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <HAL_UART_MspInit+0xe0>)
 800215a:	f005 f947 	bl	80073ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2025      	movs	r0, #37	; 0x25
 8002164:	f001 ff37 	bl	8003fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002168:	2025      	movs	r0, #37	; 0x25
 800216a:	f001 ff4e 	bl	800400a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800216e:	bf00      	nop
 8002170:	37e8      	adds	r7, #232	; 0xe8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40011000 	.word	0x40011000
 800217c:	58024400 	.word	0x58024400
 8002180:	58020000 	.word	0x58020000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d0:	f000 f9c0 	bl	8002554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Stream0_IRQHandler+0x10>)
 80021de:	f003 fdf3 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	240001e4 	.word	0x240001e4

080021ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Stream1_IRQHandler+0x10>)
 80021f2:	f003 fde9 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2400025c 	.word	0x2400025c

08002200 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Stream5_IRQHandler+0x10>)
 8002206:	f003 fddf 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	240002e8 	.word	0x240002e8

08002214 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM1_BRK_IRQHandler+0x10>)
 800221a:	f00a fa3b 	bl	800c694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	240004c4 	.word	0x240004c4

08002228 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <TIM1_UP_IRQHandler+0x10>)
 800222e:	f00a fa31 	bl	800c694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	240004c4 	.word	0x240004c4

0800223c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002242:	f00a fa27 	bl	800c694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	240004c4 	.word	0x240004c4

08002250 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM1_CC_IRQHandler+0x10>)
 8002256:	f00a fa1d 	bl	800c694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	240004c4 	.word	0x240004c4

08002264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM2_IRQHandler+0x10>)
 800226a:	f00a fa13 	bl	800c694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	24000510 	.word	0x24000510

08002278 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM4_IRQHandler+0x10>)
 800227e:	f00a fa09 	bl	800c694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2400055c 	.word	0x2400055c

0800228c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART1_IRQHandler+0x10>)
 8002292:	f00b fbcf 	bl	800da34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	240005a8 	.word	0x240005a8

080022a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d0:	f00d ff88 	bl	80101e4 <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24080000 	.word	0x24080000
 8002300:	00000400 	.word	0x00000400
 8002304:	240006d8 	.word	0x240006d8
 8002308:	24000828 	.word	0x24000828

0800230c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <SystemInit+0xe4>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	4a36      	ldr	r2, [pc, #216]	; (80023f0 <SystemInit+0xe4>)
 8002318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <SystemInit+0xe8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	2b06      	cmp	r3, #6
 800232a:	d807      	bhi.n	800233c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <SystemInit+0xe8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 030f 	bic.w	r3, r3, #15
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <SystemInit+0xe8>)
 8002336:	f043 0307 	orr.w	r3, r3, #7
 800233a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <SystemInit+0xec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <SystemInit+0xec>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <SystemInit+0xec>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <SystemInit+0xec>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4929      	ldr	r1, [pc, #164]	; (80023f8 <SystemInit+0xec>)
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <SystemInit+0xf0>)
 8002356:	4013      	ands	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <SystemInit+0xe8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <SystemInit+0xe8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 030f 	bic.w	r3, r3, #15
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <SystemInit+0xe8>)
 8002370:	f043 0307 	orr.w	r3, r3, #7
 8002374:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <SystemInit+0xec>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <SystemInit+0xec>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <SystemInit+0xec>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <SystemInit+0xec>)
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <SystemInit+0xf4>)
 800238c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <SystemInit+0xec>)
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <SystemInit+0xf8>)
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <SystemInit+0xec>)
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <SystemInit+0xfc>)
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <SystemInit+0xec>)
 800239c:	2200      	movs	r2, #0
 800239e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <SystemInit+0xec>)
 80023a2:	4a19      	ldr	r2, [pc, #100]	; (8002408 <SystemInit+0xfc>)
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <SystemInit+0xec>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <SystemInit+0xec>)
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <SystemInit+0xfc>)
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <SystemInit+0xec>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <SystemInit+0xec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <SystemInit+0xec>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <SystemInit+0xec>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <SystemInit+0x100>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <SystemInit+0x104>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d6:	d202      	bcs.n	80023de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <SystemInit+0x108>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <SystemInit+0x10c>)
 80023e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00
 80023f4:	52002000 	.word	0x52002000
 80023f8:	58024400 	.word	0x58024400
 80023fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002400:	02020200 	.word	0x02020200
 8002404:	01ff0000 	.word	0x01ff0000
 8002408:	01010280 	.word	0x01010280
 800240c:	5c001000 	.word	0x5c001000
 8002410:	ffff0000 	.word	0xffff0000
 8002414:	51008108 	.word	0x51008108
 8002418:	52004000 	.word	0x52004000

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002420:	f7ff ff74 	bl	800230c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002424:	480c      	ldr	r0, [pc, #48]	; (8002458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002426:	490d      	ldr	r1, [pc, #52]	; (800245c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800242c:	e002      	b.n	8002434 <LoopCopyDataInit>

0800242e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002432:	3304      	adds	r3, #4

08002434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002438:	d3f9      	bcc.n	800242e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800243c:	4c0a      	ldr	r4, [pc, #40]	; (8002468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002440:	e001      	b.n	8002446 <LoopFillZerobss>

08002442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002444:	3204      	adds	r2, #4

08002446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002448:	d3fb      	bcc.n	8002442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800244a:	f00d fed1 	bl	80101f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7fe fc17 	bl	8000c80 <main>
  bx  lr
 8002452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002458:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800245c:	240000e8 	.word	0x240000e8
  ldr r2, =_sidata
 8002460:	08010358 	.word	0x08010358
  ldr r2, =_sbss
 8002464:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002468:	24000828 	.word	0x24000828

0800246c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC3_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002476:	2003      	movs	r0, #3
 8002478:	f001 fda2 	bl	8003fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800247c:	f006 f952 	bl	8008724 <HAL_RCC_GetSysClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_Init+0x68>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	4913      	ldr	r1, [pc, #76]	; (80024dc <HAL_Init+0x6c>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_Init+0x68>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_Init+0x6c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <HAL_Init+0x70>)
 80024b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <HAL_Init+0x74>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ba:	200f      	movs	r0, #15
 80024bc:	f000 f814 	bl	80024e8 <HAL_InitTick>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e002      	b.n	80024d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ca:	f7ff fa31 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	58024400 	.word	0x58024400
 80024dc:	08010308 	.word	0x08010308
 80024e0:	2400008c 	.word	0x2400008c
 80024e4:	24000088 	.word	0x24000088

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_InitTick+0x60>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e021      	b.n	8002540 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_InitTick+0x64>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_InitTick+0x60>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250a:	fbb3 f3f1 	udiv	r3, r3, r1
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fd87 	bl	8004026 <HAL_SYSTICK_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e00e      	b.n	8002540 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d80a      	bhi.n	800253e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002528:	2200      	movs	r2, #0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002530:	f001 fd51 	bl	8003fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_InitTick+0x68>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	24000094 	.word	0x24000094
 800254c:	24000088 	.word	0x24000088
 8002550:	24000090 	.word	0x24000090

08002554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x20>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x24>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_IncTick+0x24>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	24000094 	.word	0x24000094
 8002578:	240006dc 	.word	0x240006dc

0800257c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_GetTick+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	240006dc 	.word	0x240006dc

08002594 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_SuspendTick+0x1c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_SuspendTick+0x1c>)
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetREVID+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0c1b      	lsrs	r3, r3, #16
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	5c001000 	.word	0x5c001000

080025cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	58000400 	.word	0x58000400

080025f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	611a      	str	r2, [r3, #16]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b087      	sub	sp, #28
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3360      	adds	r3, #96	; 0x60
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]
  }
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3330      	adds	r3, #48	; 0x30
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	211f      	movs	r1, #31
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	f003 011f 	and.w	r1, r3, #31
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f023 0203 	bic.w	r2, r3, #3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3314      	adds	r3, #20
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0e5b      	lsrs	r3, r3, #25
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	0d1b      	lsrs	r3, r3, #20
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2107      	movs	r1, #7
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	0d1b      	lsrs	r3, r3, #20
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	431a      	orrs	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0318 	and.w	r3, r3, #24
 8002826:	4908      	ldr	r1, [pc, #32]	; (8002848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002828:	40d9      	lsrs	r1, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	400b      	ands	r3, r1
 800282e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002832:	431a      	orrs	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	000fffff 	.word	0x000fffff

0800284c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 031f 	and.w	r3, r3, #31
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002876:	4013      	ands	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6093      	str	r3, [r2, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	5fffffc0 	.word	0x5fffffc0

0800288c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800289c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	6fffffc0 	.word	0x6fffffc0

080028dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <LL_ADC_Enable+0x24>)
 8002912:	4013      	ands	r3, r2
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	7fffffc0 	.word	0x7fffffc0

0800292c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <LL_ADC_Disable+0x24>)
 800293a:	4013      	ands	r3, r2
 800293c:	f043 0202 	orr.w	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	7fffffc0 	.word	0x7fffffc0

08002954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_ADC_IsEnabled+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_IsEnabled+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d101      	bne.n	8002992 <LL_ADC_IsDisableOngoing+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_IsDisableOngoing+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <LL_ADC_REG_StartConversion+0x24>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	f043 0204 	orr.w	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	7fffffc0 	.word	0x7fffffc0

080029c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d101      	bne.n	80029e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d101      	bne.n	8002a06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e18f      	b.n	8002d4e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fe ff91 	bl	8001964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff19 	bl	800288c <LL_ADC_IsDeepPowerDownEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff feff 	bl	8002868 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff34 	bl	80028dc <LL_ADC_IsInternalRegulatorEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d114      	bne.n	8002aa4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff18 	bl	80028b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a84:	4b87      	ldr	r3, [pc, #540]	; (8002ca4 <HAL_ADC_Init+0x290>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	4a87      	ldr	r2, [pc, #540]	; (8002ca8 <HAL_ADC_Init+0x294>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff17 	bl	80028dc <LL_ADC_IsInternalRegulatorEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff77 	bl	80029c8 <LL_ADC_REG_IsConversionOngoing>
 8002ada:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8129 	bne.w	8002d3c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 8125 	bne.w	8002d3c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff24 	bl	8002954 <LL_ADC_IsEnabled>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d136      	bne.n	8002b80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a65      	ldr	r2, [pc, #404]	; (8002cac <HAL_ADC_Init+0x298>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_ADC_Init+0x112>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a63      	ldr	r2, [pc, #396]	; (8002cb0 <HAL_ADC_Init+0x29c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10e      	bne.n	8002b44 <HAL_ADC_Init+0x130>
 8002b26:	4861      	ldr	r0, [pc, #388]	; (8002cac <HAL_ADC_Init+0x298>)
 8002b28:	f7ff ff14 	bl	8002954 <LL_ADC_IsEnabled>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	4860      	ldr	r0, [pc, #384]	; (8002cb0 <HAL_ADC_Init+0x29c>)
 8002b30:	f7ff ff10 	bl	8002954 <LL_ADC_IsEnabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4323      	orrs	r3, r4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e008      	b.n	8002b56 <HAL_ADC_Init+0x142>
 8002b44:	485b      	ldr	r0, [pc, #364]	; (8002cb4 <HAL_ADC_Init+0x2a0>)
 8002b46:	f7ff ff05 	bl	8002954 <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a53      	ldr	r2, [pc, #332]	; (8002cac <HAL_ADC_Init+0x298>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_Init+0x15a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_ADC_Init+0x29c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Init+0x15e>
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_ADC_Init+0x2a4>)
 8002b70:	e000      	b.n	8002b74 <HAL_ADC_Init+0x160>
 8002b72:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_ADC_Init+0x2a8>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff fd3c 	bl	80025f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002b80:	f7ff fd18 	bl	80025b4 <HAL_GetREVID>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d914      	bls.n	8002bb8 <HAL_ADC_Init+0x1a4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d110      	bne.n	8002bb8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7d5b      	ldrb	r3, [r3, #21]
 8002b9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ba0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ba6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7f1b      	ldrb	r3, [r3, #28]
 8002bac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002bae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bb0:	f043 030c 	orr.w	r3, r3, #12
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e00d      	b.n	8002bd4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7d5b      	ldrb	r3, [r3, #21]
 8002bbc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bc2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002bc8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7f1b      	ldrb	r3, [r3, #28]
 8002bce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7f1b      	ldrb	r3, [r3, #28]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	045b      	lsls	r3, r3, #17
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_ADC_Init+0x2ac>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	69b9      	ldr	r1, [r7, #24]
 8002c16:	430b      	orrs	r3, r1
 8002c18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fed2 	bl	80029c8 <LL_ADC_REG_IsConversionOngoing>
 8002c24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fedf 	bl	80029ee <LL_ADC_INJ_IsConversionOngoing>
 8002c30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d15f      	bne.n	8002cf8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d15c      	bne.n	8002cf8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7d1b      	ldrb	r3, [r3, #20]
 8002c42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_ADC_Init+0x2b0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d130      	bne.n	8002ccc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_ADC_Init+0x2b4>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0411      	lsls	r1, r2, #16
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c8c:	4311      	orrs	r1, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c92:	430a      	orrs	r2, r1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	611a      	str	r2, [r3, #16]
 8002ca0:	e01c      	b.n	8002cdc <HAL_ADC_Init+0x2c8>
 8002ca2:	bf00      	nop
 8002ca4:	24000088 	.word	0x24000088
 8002ca8:	053e2d63 	.word	0x053e2d63
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40022100 	.word	0x40022100
 8002cb4:	58026000 	.word	0x58026000
 8002cb8:	40022300 	.word	0x40022300
 8002cbc:	58026300 	.word	0x58026300
 8002cc0:	fff0c003 	.word	0xfff0c003
 8002cc4:	ffffbffc 	.word	0xffffbffc
 8002cc8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fdec 	bl	80038d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10c      	bne.n	8002d1a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f023 010f 	bic.w	r1, r3, #15
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
 8002d18:	e007      	b.n	8002d2a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 020f 	bic.w	r2, r2, #15
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f023 0303 	bic.w	r3, r3, #3
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
 8002d3a:	e007      	b.n	8002d4c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	bf00      	nop

08002d58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a55      	ldr	r2, [pc, #340]	; (8002ec0 <HAL_ADC_Start_DMA+0x168>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_Start_DMA+0x20>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a54      	ldr	r2, [pc, #336]	; (8002ec4 <HAL_ADC_Start_DMA+0x16c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_Start_DMA+0x24>
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_ADC_Start_DMA+0x170>)
 8002d7a:	e000      	b.n	8002d7e <HAL_ADC_Start_DMA+0x26>
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_ADC_Start_DMA+0x174>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fd64 	bl	800284c <LL_ADC_GetMultimode>
 8002d84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fe1c 	bl	80029c8 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 808c 	bne.w	8002eb0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Start_DMA+0x4e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e087      	b.n	8002eb6 <HAL_ADC_Start_DMA+0x15e>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d002      	beq.n	8002dc0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d170      	bne.n	8002ea2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fc07 	bl	80035d4 <ADC_Enable>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d163      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd4:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <HAL_ADC_Start_DMA+0x178>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <HAL_ADC_Start_DMA+0x16c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d002      	beq.n	8002df0 <HAL_ADC_Start_DMA+0x98>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_Start_DMA+0x9a>
 8002df0:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <HAL_ADC_Start_DMA+0x168>)
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d002      	beq.n	8002e00 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f023 0206 	bic.w	r2, r3, #6
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_ADC_Start_DMA+0x17c>)
 8002e32:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <HAL_ADC_Start_DMA+0x180>)
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_ADC_Start_DMA+0x184>)
 8002e42:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	221c      	movs	r2, #28
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0210 	orr.w	r2, r2, #16
 8002e62:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f7ff fc89 	bl	8002786 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3340      	adds	r3, #64	; 0x40
 8002e7e:	4619      	mov	r1, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f001 ffd2 	bl	8004e2c <HAL_DMA_Start_IT>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fd85 	bl	80029a0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e96:	e00d      	b.n	8002eb4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002ea0:	e008      	b.n	8002eb4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002eae:	e001      	b.n	8002eb4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40022100 	.word	0x40022100
 8002ec8:	40022300 	.word	0x40022300
 8002ecc:	58026300 	.word	0x58026300
 8002ed0:	fffff0fe 	.word	0xfffff0fe
 8002ed4:	080037a7 	.word	0x080037a7
 8002ed8:	0800387f 	.word	0x0800387f
 8002edc:	0800389b 	.word	0x0800389b

08002ee0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b0a1      	sub	sp, #132	; 0x84
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_ADC_ConfigChannel+0x1b0>)
 8002f36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x2a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e32e      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x688>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fd38 	bl	80029c8 <LL_ADC_REG_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8313 	bne.w	8003586 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db2c      	blt.n	8002fc2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d108      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x6a>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2201      	movs	r2, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	e016      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x98>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f96:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	69d1      	ldr	r1, [r2, #28]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f7ff fbad 	bl	800272e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fcf5 	bl	80029c8 <LL_ADC_REG_IsConversionOngoing>
 8002fde:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fd02 	bl	80029ee <LL_ADC_INJ_IsConversionOngoing>
 8002fea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80b8 	bne.w	8003164 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 80b4 	bne.w	8003164 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	461a      	mov	r2, r3
 800300a:	f7ff fbcf 	bl	80027ac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800301a:	d10b      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x118>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	e01d      	b.n	8003070 <HAL_ADC_ConfigChannel+0x154>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <HAL_ADC_ConfigChannel+0x13e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	e00a      	b.n	8003070 <HAL_ADC_ConfigChannel+0x154>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d02c      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003088:	f7ff faea 	bl	8002660 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	7e5b      	ldrb	r3, [r3, #25]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x186>
 800309c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x188>
 80030a2:	2300      	movs	r3, #0
 80030a4:	461a      	mov	r2, r3
 80030a6:	f7ff fb14 	bl	80026d2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6919      	ldr	r1, [r3, #16]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1a4>
 80030ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030be:	e000      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x1a6>
 80030c0:	2300      	movs	r3, #0
 80030c2:	461a      	mov	r2, r3
 80030c4:	f7ff faec 	bl	80026a0 <LL_ADC_SetDataRightShift>
 80030c8:	e04c      	b.n	8003164 <HAL_ADC_ConfigChannel+0x248>
 80030ca:	bf00      	nop
 80030cc:	47ff0000 	.word	0x47ff0000
 80030d0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	069b      	lsls	r3, r3, #26
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d107      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	429a      	cmp	r2, r3
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800313e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003162:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fbf3 	bl	8002954 <LL_ADC_IsEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 8211 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	f7ff fb3e 	bl	8002804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4aa1      	ldr	r2, [pc, #644]	; (8003414 <HAL_ADC_ConfigChannel+0x4f8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	f040 812e 	bne.w	80033f0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x2a0>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	3301      	adds	r3, #1
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2b09      	cmp	r3, #9
 80031b2:	bf94      	ite	ls
 80031b4:	2301      	movls	r3, #1
 80031b6:	2300      	movhi	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e019      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x2d4>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80031d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2b09      	cmp	r3, #9
 80031e8:	bf94      	ite	ls
 80031ea:	2301      	movls	r3, #1
 80031ec:	2300      	movhi	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d079      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x2f4>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	069b      	lsls	r3, r3, #26
 800320a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320e:	e015      	b.n	800323c <HAL_ADC_ConfigChannel+0x320>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800321e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003220:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	069b      	lsls	r3, r3, #26
 8003238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_ConfigChannel+0x340>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	3301      	adds	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	e017      	b.n	800328c <HAL_ADC_ConfigChannel+0x370>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800326e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003274:	2320      	movs	r3, #32
 8003276:	e003      	b.n	8003280 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	ea42 0103 	orr.w	r1, r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x396>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	051b      	lsls	r3, r3, #20
 80032b0:	e018      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x3c8>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80032ca:	2320      	movs	r3, #32
 80032cc:	e003      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e4:	430b      	orrs	r3, r1
 80032e6:	e07e      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x3e8>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	3301      	adds	r3, #1
 80032fc:	069b      	lsls	r3, r3, #26
 80032fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003302:	e015      	b.n	8003330 <HAL_ADC_ConfigChannel+0x414>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	069b      	lsls	r3, r3, #26
 800332c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x434>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	e017      	b.n	8003380 <HAL_ADC_ConfigChannel+0x464>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	61bb      	str	r3, [r7, #24]
  return result;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e003      	b.n	8003374 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2101      	movs	r1, #1
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	ea42 0103 	orr.w	r1, r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x490>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	3301      	adds	r3, #1
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	3b1e      	subs	r3, #30
 80033a4:	051b      	lsls	r3, r3, #20
 80033a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033aa:	e01b      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x4c8>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	60fb      	str	r3, [r7, #12]
  return result;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f003 021f 	and.w	r2, r3, #31
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	3b1e      	subs	r3, #30
 80033de:	051b      	lsls	r3, r3, #20
 80033e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e4:	430b      	orrs	r3, r1
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	6892      	ldr	r2, [r2, #8]
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7ff f9de 	bl	80027ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f280 80cf 	bge.w	8003598 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a06      	ldr	r2, [pc, #24]	; (8003418 <HAL_ADC_ConfigChannel+0x4fc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_ADC_ConfigChannel+0x4f2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_ADC_ConfigChannel+0x500>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10a      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x508>
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <HAL_ADC_ConfigChannel+0x504>)
 8003410:	e009      	b.n	8003426 <HAL_ADC_ConfigChannel+0x50a>
 8003412:	bf00      	nop
 8003414:	47ff0000 	.word	0x47ff0000
 8003418:	40022000 	.word	0x40022000
 800341c:	40022100 	.word	0x40022100
 8003420:	40022300 	.word	0x40022300
 8003424:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_ADC_ConfigChannel+0x690>)
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f90c 	bl	8002644 <LL_ADC_GetCommonPathInternalCh>
 800342c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5f      	ldr	r2, [pc, #380]	; (80035b0 <HAL_ADC_ConfigChannel+0x694>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x526>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5d      	ldr	r2, [pc, #372]	; (80035b4 <HAL_ADC_ConfigChannel+0x698>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10e      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x544>
 8003442:	485b      	ldr	r0, [pc, #364]	; (80035b0 <HAL_ADC_ConfigChannel+0x694>)
 8003444:	f7ff fa86 	bl	8002954 <LL_ADC_IsEnabled>
 8003448:	4604      	mov	r4, r0
 800344a:	485a      	ldr	r0, [pc, #360]	; (80035b4 <HAL_ADC_ConfigChannel+0x698>)
 800344c:	f7ff fa82 	bl	8002954 <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	4323      	orrs	r3, r4
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e008      	b.n	8003472 <HAL_ADC_ConfigChannel+0x556>
 8003460:	4855      	ldr	r0, [pc, #340]	; (80035b8 <HAL_ADC_ConfigChannel+0x69c>)
 8003462:	f7ff fa77 	bl	8002954 <LL_ADC_IsEnabled>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d07d      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a50      	ldr	r2, [pc, #320]	; (80035bc <HAL_ADC_ConfigChannel+0x6a0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d130      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x5c6>
 8003480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12b      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4a      	ldr	r2, [pc, #296]	; (80035b8 <HAL_ADC_ConfigChannel+0x69c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	f040 8081 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a45      	ldr	r2, [pc, #276]	; (80035b0 <HAL_ADC_ConfigChannel+0x694>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x58e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <HAL_ADC_ConfigChannel+0x698>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x592>
 80034aa:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <HAL_ADC_ConfigChannel+0x6a4>)
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x594>
 80034ae:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <HAL_ADC_ConfigChannel+0x690>)
 80034b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7ff f8b0 	bl	800261e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_ADC_ConfigChannel+0x6a8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <HAL_ADC_ConfigChannel+0x6ac>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	3301      	adds	r3, #1
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034d2:	e002      	b.n	80034da <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e0:	e05a      	b.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_ADC_ConfigChannel+0x6b0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d11e      	bne.n	800352a <HAL_ADC_ConfigChannel+0x60e>
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d119      	bne.n	800352a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <HAL_ADC_ConfigChannel+0x69c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d14b      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <HAL_ADC_ConfigChannel+0x694>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x5f8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_ADC_ConfigChannel+0x698>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x5fc>
 8003514:	4a2a      	ldr	r2, [pc, #168]	; (80035c0 <HAL_ADC_ConfigChannel+0x6a4>)
 8003516:	e000      	b.n	800351a <HAL_ADC_ConfigChannel+0x5fe>
 8003518:	4a24      	ldr	r2, [pc, #144]	; (80035ac <HAL_ADC_ConfigChannel+0x690>)
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f7ff f87b 	bl	800261e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003528:	e036      	b.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_ADC_ConfigChannel+0x6b4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d131      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12c      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_ADC_ConfigChannel+0x69c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d127      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <HAL_ADC_ConfigChannel+0x694>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_ADC_ConfigChannel+0x640>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_ADC_ConfigChannel+0x698>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x644>
 800355c:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_ADC_ConfigChannel+0x6a4>)
 800355e:	e000      	b.n	8003562 <HAL_ADC_ConfigChannel+0x646>
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_ADC_ConfigChannel+0x690>)
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7ff f857 	bl	800261e <LL_ADC_SetCommonPathInternalCh>
 8003570:	e012      	b.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003584:	e008      	b.n	8003598 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3784      	adds	r7, #132	; 0x84
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	58026300 	.word	0x58026300
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40022100 	.word	0x40022100
 80035b8:	58026000 	.word	0x58026000
 80035bc:	cb840000 	.word	0xcb840000
 80035c0:	40022300 	.word	0x40022300
 80035c4:	24000088 	.word	0x24000088
 80035c8:	053e2d63 	.word	0x053e2d63
 80035cc:	c7520000 	.word	0xc7520000
 80035d0:	cfb80000 	.word	0xcfb80000

080035d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f9b7 	bl	8002954 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d16e      	bne.n	80036ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <ADC_Enable+0x100>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e05a      	b.n	80036cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f972 	bl	8002904 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003620:	f7fe ffac 	bl	800257c <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <ADC_Enable+0x104>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <ADC_Enable+0x66>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <ADC_Enable+0x108>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <ADC_Enable+0x6a>
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <ADC_Enable+0x10c>)
 800363c:	e000      	b.n	8003640 <ADC_Enable+0x6c>
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <ADC_Enable+0x110>)
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f903 	bl	800284c <LL_ADC_GetMultimode>
 8003646:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a23      	ldr	r2, [pc, #140]	; (80036dc <ADC_Enable+0x108>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d002      	beq.n	8003658 <ADC_Enable+0x84>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e000      	b.n	800365a <ADC_Enable+0x86>
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <ADC_Enable+0x104>)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	4293      	cmp	r3, r2
 8003660:	d02c      	beq.n	80036bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d130      	bne.n	80036ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003668:	e028      	b.n	80036bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f970 	bl	8002954 <LL_ADC_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f940 	bl	8002904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003684:	f7fe ff7a 	bl	800257c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d914      	bls.n	80036bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00d      	beq.n	80036bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0210 	orr.w	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e007      	b.n	80036cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d1cf      	bne.n	800366a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	8000003f 	.word	0x8000003f
 80036d8:	40022000 	.word	0x40022000
 80036dc:	40022100 	.word	0x40022100
 80036e0:	40022300 	.word	0x40022300
 80036e4:	58026300 	.word	0x58026300

080036e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f940 	bl	800297a <LL_ADC_IsDisableOngoing>
 80036fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff f927 	bl	8002954 <LL_ADC_IsEnabled>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d047      	beq.n	800379c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d144      	bne.n	800379c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030d 	and.w	r3, r3, #13
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10c      	bne.n	800373a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f901 	bl	800292c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2203      	movs	r2, #3
 8003730:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003732:	f7fe ff23 	bl	800257c <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003738:	e029      	b.n	800378e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f043 0210 	orr.w	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f043 0201 	orr.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e023      	b.n	800379e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003756:	f7fe ff11 	bl	800257c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d914      	bls.n	800378e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e007      	b.n	800379e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1dc      	bne.n	8003756 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d14b      	bne.n	8003858 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d021      	beq.n	800381e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe ff92 	bl	8002708 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d032      	beq.n	8003850 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d12b      	bne.n	8003850 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11f      	bne.n	8003850 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
 800381c:	e018      	b.n	8003850 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fb45 	bl	8002ee0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003856:	e00e      	b.n	8003876 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff fb4f 	bl	8002f08 <HAL_ADC_ErrorCallback>
}
 800386a:	e004      	b.n	8003876 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff fb31 	bl	8002ef4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	f043 0204 	orr.w	r2, r3, #4
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff fb21 	bl	8002f08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <ADC_ConfigureBoostMode+0x1f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <ADC_ConfigureBoostMode+0x1c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a79      	ldr	r2, [pc, #484]	; (8003acc <ADC_ConfigureBoostMode+0x1fc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d109      	bne.n	8003900 <ADC_ConfigureBoostMode+0x30>
 80038ec:	4b78      	ldr	r3, [pc, #480]	; (8003ad0 <ADC_ConfigureBoostMode+0x200>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e008      	b.n	8003912 <ADC_ConfigureBoostMode+0x42>
 8003900:	4b74      	ldr	r3, [pc, #464]	; (8003ad4 <ADC_ConfigureBoostMode+0x204>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01c      	beq.n	8003950 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003916:	f005 f87f 	bl	8008a18 <HAL_RCC_GetHCLKFreq>
 800391a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003924:	d010      	beq.n	8003948 <ADC_ConfigureBoostMode+0x78>
 8003926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800392a:	d873      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x144>
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d002      	beq.n	8003938 <ADC_ConfigureBoostMode+0x68>
 8003932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003936:	d16d      	bne.n	8003a14 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	60fb      	str	r3, [r7, #12]
        break;
 8003946:	e068      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	60fb      	str	r3, [r7, #12]
        break;
 800394e:	e064      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003950:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	f006 fac4 	bl	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq>
 800395c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003966:	d051      	beq.n	8003a0c <ADC_ConfigureBoostMode+0x13c>
 8003968:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800396c:	d854      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 800396e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003972:	d047      	beq.n	8003a04 <ADC_ConfigureBoostMode+0x134>
 8003974:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003978:	d84e      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 800397a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800397e:	d03d      	beq.n	80039fc <ADC_ConfigureBoostMode+0x12c>
 8003980:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003984:	d848      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 8003986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800398a:	d033      	beq.n	80039f4 <ADC_ConfigureBoostMode+0x124>
 800398c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003990:	d842      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 8003992:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003996:	d029      	beq.n	80039ec <ADC_ConfigureBoostMode+0x11c>
 8003998:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800399c:	d83c      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 800399e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039a2:	d01a      	beq.n	80039da <ADC_ConfigureBoostMode+0x10a>
 80039a4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039a8:	d836      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 80039aa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039ae:	d014      	beq.n	80039da <ADC_ConfigureBoostMode+0x10a>
 80039b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039b4:	d830      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ba:	d00e      	beq.n	80039da <ADC_ConfigureBoostMode+0x10a>
 80039bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c0:	d82a      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 80039c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039c6:	d008      	beq.n	80039da <ADC_ConfigureBoostMode+0x10a>
 80039c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039cc:	d824      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x148>
 80039ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d2:	d002      	beq.n	80039da <ADC_ConfigureBoostMode+0x10a>
 80039d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039d8:	d11e      	bne.n	8003a18 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	0c9b      	lsrs	r3, r3, #18
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	60fb      	str	r3, [r7, #12]
        break;
 80039ea:	e016      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	60fb      	str	r3, [r7, #12]
        break;
 80039f2:	e012      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	60fb      	str	r3, [r7, #12]
        break;
 80039fa:	e00e      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	60fb      	str	r3, [r7, #12]
        break;
 8003a02:	e00a      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	09db      	lsrs	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
        break;
 8003a0a:	e006      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	60fb      	str	r3, [r7, #12]
        break;
 8003a12:	e002      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a18:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a1a:	f7fe fdcb 	bl	80025b4 <HAL_GetREVID>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d815      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <ADC_ConfigureBoostMode+0x208>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d908      	bls.n	8003a42 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a40:	e03e      	b.n	8003ac0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	e035      	b.n	8003ac0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <ADC_ConfigureBoostMode+0x20c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d808      	bhi.n	8003a74 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	e025      	b.n	8003ac0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <ADC_ConfigureBoostMode+0x210>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d80a      	bhi.n	8003a92 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	e016      	b.n	8003ac0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <ADC_ConfigureBoostMode+0x214>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d80a      	bhi.n	8003ab0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	e007      	b.n	8003ac0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40022000 	.word	0x40022000
 8003acc:	40022100 	.word	0x40022100
 8003ad0:	40022300 	.word	0x40022300
 8003ad4:	58026300 	.word	0x58026300
 8003ad8:	01312d00 	.word	0x01312d00
 8003adc:	005f5e10 	.word	0x005f5e10
 8003ae0:	00bebc20 	.word	0x00bebc20
 8003ae4:	017d7840 	.word	0x017d7840

08003ae8 <LL_ADC_IsEnabled>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <LL_ADC_IsEnabled+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_ADC_IsEnabled+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <LL_ADC_StartCalibration>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <LL_ADC_StartCalibration+0x38>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b30:	430a      	orrs	r2, r1
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	3ffeffc0 	.word	0x3ffeffc0

08003b4c <LL_ADC_IsCalibrationOnGoing>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b60:	d101      	bne.n	8003b66 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d101      	bne.n	8003b8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_ADCEx_Calibration_Start+0x1e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e04c      	b.n	8003c54 <HAL_ADCEx_Calibration_Start+0xb8>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff fd90 	bl	80036e8 <ADC_Disable>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d135      	bne.n	8003c3e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff90 	bl	8003b10 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bf0:	e014      	b.n	8003c1c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d30d      	bcc.n	8003c1c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	f023 0312 	bic.w	r3, r3, #18
 8003c08:	f043 0210 	orr.w	r2, r3, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e01b      	b.n	8003c54 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff93 	bl	8003b4c <LL_ADC_IsCalibrationOnGoing>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e2      	bne.n	8003bf2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f023 0303 	bic.w	r3, r3, #3
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
 8003c3c:	e005      	b.n	8003c4a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	ffffeefd 	.word	0xffffeefd
 8003c60:	25c3f800 	.word	0x25c3f800

08003c64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b09f      	sub	sp, #124	; 0x7c
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0be      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5c      	ldr	r2, [pc, #368]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d102      	bne.n	8003ca2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	e001      	b.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e09d      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ff54 	bl	8003b74 <LL_ADC_REG_IsConversionOngoing>
 8003ccc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff4e 	bl	8003b74 <LL_ADC_REG_IsConversionOngoing>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d17f      	bne.n	8003dde <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d17c      	bne.n	8003dde <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a46      	ldr	r2, [pc, #280]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003cf8:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cfa:	e000      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003cfc:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003cfe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d039      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10e      	bne.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d2e:	4836      	ldr	r0, [pc, #216]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d30:	f7ff feda 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003d34:	4604      	mov	r4, r0
 8003d36:	4835      	ldr	r0, [pc, #212]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d38:	f7ff fed6 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4323      	orrs	r3, r4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e008      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003d4c:	4832      	ldr	r0, [pc, #200]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d4e:	f7ff fecb 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d047      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7a:	e03a      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10e      	bne.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003d9c:	481a      	ldr	r0, [pc, #104]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d9e:	f7ff fea3 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003da2:	4604      	mov	r4, r0
 8003da4:	4819      	ldr	r0, [pc, #100]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003da6:	f7ff fe9f 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4323      	orrs	r3, r4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	e008      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003dba:	4817      	ldr	r0, [pc, #92]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dbc:	f7ff fe94 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dda:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ddc:	e009      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003df0:	e000      	b.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003df2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	377c      	adds	r7, #124	; 0x7c
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd90      	pop	{r4, r7, pc}
 8003e08:	40022000 	.word	0x40022000
 8003e0c:	40022100 	.word	0x40022100
 8003e10:	40022300 	.word	0x40022300
 8003e14:	58026300 	.word	0x58026300
 8003e18:	58026000 	.word	0x58026000
 8003e1c:	fffff0e0 	.word	0xfffff0e0

08003e20 <__NVIC_SetPriorityGrouping>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <__NVIC_SetPriorityGrouping+0x40>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <__NVIC_SetPriorityGrouping+0x44>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <__NVIC_SetPriorityGrouping+0x40>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00
 8003e64:	05fa0000 	.word	0x05fa0000

08003e68 <__NVIC_GetPriorityGrouping>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <__NVIC_GetPriorityGrouping+0x18>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0307 	and.w	r3, r3, #7
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <__NVIC_EnableIRQ>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	db0b      	blt.n	8003eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	4907      	ldr	r1, [pc, #28]	; (8003ebc <__NVIC_EnableIRQ+0x38>)
 8003e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000e100 	.word	0xe000e100

08003ec0 <__NVIC_SetPriority>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	db0a      	blt.n	8003eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	490c      	ldr	r1, [pc, #48]	; (8003f0c <__NVIC_SetPriority+0x4c>)
 8003eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ee8:	e00a      	b.n	8003f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4908      	ldr	r1, [pc, #32]	; (8003f10 <__NVIC_SetPriority+0x50>)
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3b04      	subs	r3, #4
 8003ef8:	0112      	lsls	r2, r2, #4
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	440b      	add	r3, r1
 8003efe:	761a      	strb	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e100 	.word	0xe000e100
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <NVIC_EncodePriority>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f1c3 0307 	rsb	r3, r3, #7
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	bf28      	it	cs
 8003f32:	2304      	movcs	r3, #4
 8003f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d902      	bls.n	8003f44 <NVIC_EncodePriority+0x30>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3b03      	subs	r3, #3
 8003f42:	e000      	b.n	8003f46 <NVIC_EncodePriority+0x32>
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	401a      	ands	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43d9      	mvns	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	4313      	orrs	r3, r2
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f8c:	d301      	bcc.n	8003f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e00f      	b.n	8003fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <SysTick_Config+0x40>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f9a:	210f      	movs	r1, #15
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa0:	f7ff ff8e 	bl	8003ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <SysTick_Config+0x40>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <SysTick_Config+0x40>)
 8003fac:	2207      	movs	r2, #7
 8003fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	e000e010 	.word	0xe000e010

08003fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff29 	bl	8003e20 <__NVIC_SetPriorityGrouping>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe4:	f7ff ff40 	bl	8003e68 <__NVIC_GetPriorityGrouping>
 8003fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	6978      	ldr	r0, [r7, #20]
 8003ff0:	f7ff ff90 	bl	8003f14 <NVIC_EncodePriority>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff5f 	bl	8003ec0 <__NVIC_SetPriority>
}
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff33 	bl	8003e84 <__NVIC_EnableIRQ>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff ffa4 	bl	8003f7c <SysTick_Config>
 8004034:	4603      	mov	r3, r0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e014      	b.n	800407a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	791b      	ldrb	r3, [r3, #4]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fd fd99 	bl	8001b98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e046      	b.n	8004124 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	795b      	ldrb	r3, [r3, #5]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_DAC_Start+0x20>
 800409e:	2302      	movs	r3, #2
 80040a0:	e040      	b.n	8004124 <HAL_DAC_Start+0xa2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2201      	movs	r2, #1
 80040bc:	409a      	lsls	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10f      	bne.n	80040ec <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d11d      	bne.n	8004116 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e014      	b.n	8004116 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2102      	movs	r1, #2
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	429a      	cmp	r2, r3
 8004104:	d107      	bne.n	8004116 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0202 	orr.w	r2, r2, #2
 8004114:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0a2      	b.n	800428e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	795b      	ldrb	r3, [r3, #5]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_DAC_Start_DMA+0x24>
 8004150:	2302      	movs	r3, #2
 8004152:	e09c      	b.n	800428e <HAL_DAC_Start_DMA+0x15e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d129      	bne.n	80041ba <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4a4b      	ldr	r2, [pc, #300]	; (8004298 <HAL_DAC_Start_DMA+0x168>)
 800416c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_DAC_Start_DMA+0x16c>)
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4a49      	ldr	r2, [pc, #292]	; (80042a0 <HAL_DAC_Start_DMA+0x170>)
 800417c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800418c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_DAC_Start_DMA+0x6c>
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d005      	beq.n	80041a6 <HAL_DAC_Start_DMA+0x76>
 800419a:	e009      	b.n	80041b0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	613b      	str	r3, [r7, #16]
        break;
 80041a4:	e033      	b.n	800420e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	613b      	str	r3, [r7, #16]
        break;
 80041ae:	e02e      	b.n	800420e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3310      	adds	r3, #16
 80041b6:	613b      	str	r3, [r7, #16]
        break;
 80041b8:	e029      	b.n	800420e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <HAL_DAC_Start_DMA+0x174>)
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <HAL_DAC_Start_DMA+0x178>)
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4a37      	ldr	r2, [pc, #220]	; (80042ac <HAL_DAC_Start_DMA+0x17c>)
 80041d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041e0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_DAC_Start_DMA+0xc0>
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d005      	beq.n	80041fa <HAL_DAC_Start_DMA+0xca>
 80041ee:	e009      	b.n	8004204 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	613b      	str	r3, [r7, #16]
        break;
 80041f8:	e009      	b.n	800420e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3318      	adds	r3, #24
 8004200:	613b      	str	r3, [r7, #16]
        break;
 8004202:	e004      	b.n	800420e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	331c      	adds	r3, #28
 800420a:	613b      	str	r3, [r7, #16]
        break;
 800420c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d111      	bne.n	8004238 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004222:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6898      	ldr	r0, [r3, #8]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	f000 fdfd 	bl	8004e2c <HAL_DMA_Start_IT>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]
 8004236:	e010      	b.n	800425a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004246:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68d8      	ldr	r0, [r3, #12]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	f000 fdeb 	bl	8004e2c <HAL_DMA_Start_IT>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2201      	movs	r2, #1
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e005      	b.n	800428c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	08004661 	.word	0x08004661
 800429c:	08004683 	.word	0x08004683
 80042a0:	0800469f 	.word	0x0800469f
 80042a4:	08004709 	.word	0x08004709
 80042a8:	0800472b 	.word	0x0800472b
 80042ac:	08004747 	.word	0x08004747

080042b0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e03e      	b.n	8004342 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43da      	mvns	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	400a      	ands	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2201      	movs	r2, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43da      	mvns	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	400a      	ands	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fff9 	bl	8005300 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e00c      	b.n	800433a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 ffeb 	bl	8005300 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004338:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e015      	b.n	8004392 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d105      	bne.n	800437e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	3308      	adds	r3, #8
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e004      	b.n	8004388 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	3314      	adds	r3, #20
 8004386:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	461a      	mov	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_DAC_ConfigChannel+0x1e>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e12a      	b.n	8004654 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	795b      	ldrb	r3, [r3, #5]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_DAC_ConfigChannel+0x2e>
 8004406:	2302      	movs	r3, #2
 8004408:	e124      	b.n	8004654 <HAL_DAC_ConfigChannel+0x278>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2202      	movs	r2, #2
 8004414:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b04      	cmp	r3, #4
 800441c:	d17a      	bne.n	8004514 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800441e:	f7fe f8ad 	bl	800257c <HAL_GetTick>
 8004422:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d13d      	bne.n	80044a6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800442a:	e018      	b.n	800445e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800442c:	f7fe f8a6 	bl	800257c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d911      	bls.n	800445e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	4b86      	ldr	r3, [pc, #536]	; (800465c <HAL_DAC_ConfigChannel+0x280>)
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f043 0208 	orr.w	r2, r3, #8
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2203      	movs	r2, #3
 8004458:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0fa      	b.n	8004654 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004464:	4b7d      	ldr	r3, [pc, #500]	; (800465c <HAL_DAC_ConfigChannel+0x280>)
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1df      	bne.n	800442c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6992      	ldr	r2, [r2, #24]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
 8004476:	e020      	b.n	80044ba <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004478:	f7fe f880 	bl	800257c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d90f      	bls.n	80044a6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	da0a      	bge.n	80044a6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f043 0208 	orr.w	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2203      	movs	r2, #3
 80044a0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0d6      	b.n	8004654 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	dbe3      	blt.n	8004478 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	6992      	ldr	r2, [r2, #24]
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	ea02 0103 	and.w	r1, r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	409a      	lsls	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	21ff      	movs	r1, #255	; 0xff
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	ea02 0103 	and.w	r1, r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d11d      	bne.n	8004558 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	221f      	movs	r2, #31
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2207      	movs	r2, #7
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d102      	bne.n	8004582 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
 8004580:	e00f      	b.n	80045a2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d102      	bne.n	8004590 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800458a:	2301      	movs	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e008      	b.n	80045a2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004598:	2301      	movs	r3, #1
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	e001      	b.n	80045a2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43da      	mvns	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	400a      	ands	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	22c0      	movs	r2, #192	; 0xc0
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	400a      	ands	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20008000 	.word	0x20008000

08004660 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fe95 	bl	800439e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	711a      	strb	r2, [r3, #4]
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fe8e 	bl	80043b2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f043 0204 	orr.w	r2, r3, #4
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fe84 	bl	80043c6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	711a      	strb	r2, [r3, #4]
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ffd8 	bl	80046cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	711a      	strb	r2, [r3, #4]
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ffd1 	bl	80046e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f043 0204 	orr.w	r2, r3, #4
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff ffc7 	bl	80046f4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	711a      	strb	r2, [r3, #4]
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800477c:	f7fd fefe 	bl	800257c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e316      	b.n	8004dba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_DMA_Init+0x1b8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d04a      	beq.n	800482c <HAL_DMA_Init+0xb8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_DMA_Init+0x1bc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d045      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a63      	ldr	r2, [pc, #396]	; (8004934 <HAL_DMA_Init+0x1c0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d040      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a62      	ldr	r2, [pc, #392]	; (8004938 <HAL_DMA_Init+0x1c4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d03b      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a60      	ldr	r2, [pc, #384]	; (800493c <HAL_DMA_Init+0x1c8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d036      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5f      	ldr	r2, [pc, #380]	; (8004940 <HAL_DMA_Init+0x1cc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d031      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5d      	ldr	r2, [pc, #372]	; (8004944 <HAL_DMA_Init+0x1d0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d02c      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5c      	ldr	r2, [pc, #368]	; (8004948 <HAL_DMA_Init+0x1d4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d027      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5a      	ldr	r2, [pc, #360]	; (800494c <HAL_DMA_Init+0x1d8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d022      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a59      	ldr	r2, [pc, #356]	; (8004950 <HAL_DMA_Init+0x1dc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a57      	ldr	r2, [pc, #348]	; (8004954 <HAL_DMA_Init+0x1e0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <HAL_DMA_Init+0xb8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a56      	ldr	r2, [pc, #344]	; (8004958 <HAL_DMA_Init+0x1e4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_DMA_Init+0xb8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_DMA_Init+0x1e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_DMA_Init+0xb8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a53      	ldr	r2, [pc, #332]	; (8004960 <HAL_DMA_Init+0x1ec>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_DMA_Init+0xb8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a51      	ldr	r2, [pc, #324]	; (8004964 <HAL_DMA_Init+0x1f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_DMA_Init+0xb8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a50      	ldr	r2, [pc, #320]	; (8004968 <HAL_DMA_Init+0x1f4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_DMA_Init+0xbc>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_DMA_Init+0xbe>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 813b 	beq.w	8004aae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a37      	ldr	r2, [pc, #220]	; (800492c <HAL_DMA_Init+0x1b8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d04a      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a36      	ldr	r2, [pc, #216]	; (8004930 <HAL_DMA_Init+0x1bc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d045      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a34      	ldr	r2, [pc, #208]	; (8004934 <HAL_DMA_Init+0x1c0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d040      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a33      	ldr	r2, [pc, #204]	; (8004938 <HAL_DMA_Init+0x1c4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d03b      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a31      	ldr	r2, [pc, #196]	; (800493c <HAL_DMA_Init+0x1c8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d036      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a30      	ldr	r2, [pc, #192]	; (8004940 <HAL_DMA_Init+0x1cc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d031      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2e      	ldr	r2, [pc, #184]	; (8004944 <HAL_DMA_Init+0x1d0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02c      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_DMA_Init+0x1d4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d027      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2b      	ldr	r2, [pc, #172]	; (800494c <HAL_DMA_Init+0x1d8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <HAL_DMA_Init+0x1dc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d01d      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a28      	ldr	r2, [pc, #160]	; (8004954 <HAL_DMA_Init+0x1e0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a27      	ldr	r2, [pc, #156]	; (8004958 <HAL_DMA_Init+0x1e4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a25      	ldr	r2, [pc, #148]	; (800495c <HAL_DMA_Init+0x1e8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a24      	ldr	r2, [pc, #144]	; (8004960 <HAL_DMA_Init+0x1ec>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_DMA_Init+0x1f0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_DMA_Init+0x174>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_DMA_Init+0x1f4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d108      	bne.n	80048fa <HAL_DMA_Init+0x186>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e007      	b.n	800490a <HAL_DMA_Init+0x196>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800490a:	e02f      	b.n	800496c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800490c:	f7fd fe36 	bl	800257c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b05      	cmp	r3, #5
 8004918:	d928      	bls.n	800496c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2203      	movs	r2, #3
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e246      	b.n	8004dba <HAL_DMA_Init+0x646>
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1c8      	bne.n	800490c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4b83      	ldr	r3, [pc, #524]	; (8004b94 <HAL_DMA_Init+0x420>)
 8004986:	4013      	ands	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004992:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d107      	bne.n	80049d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	4313      	orrs	r3, r2
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049d0:	4b71      	ldr	r3, [pc, #452]	; (8004b98 <HAL_DMA_Init+0x424>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b71      	ldr	r3, [pc, #452]	; (8004b9c <HAL_DMA_Init+0x428>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049dc:	d328      	bcc.n	8004a30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b28      	cmp	r3, #40	; 0x28
 80049e4:	d903      	bls.n	80049ee <HAL_DMA_Init+0x27a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b2e      	cmp	r3, #46	; 0x2e
 80049ec:	d917      	bls.n	8004a1e <HAL_DMA_Init+0x2aa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b3e      	cmp	r3, #62	; 0x3e
 80049f4:	d903      	bls.n	80049fe <HAL_DMA_Init+0x28a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b42      	cmp	r3, #66	; 0x42
 80049fc:	d90f      	bls.n	8004a1e <HAL_DMA_Init+0x2aa>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b46      	cmp	r3, #70	; 0x46
 8004a04:	d903      	bls.n	8004a0e <HAL_DMA_Init+0x29a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b48      	cmp	r3, #72	; 0x48
 8004a0c:	d907      	bls.n	8004a1e <HAL_DMA_Init+0x2aa>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b4e      	cmp	r3, #78	; 0x4e
 8004a14:	d905      	bls.n	8004a22 <HAL_DMA_Init+0x2ae>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b52      	cmp	r3, #82	; 0x52
 8004a1c:	d801      	bhi.n	8004a22 <HAL_DMA_Init+0x2ae>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_DMA_Init+0x2b0>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d117      	bne.n	8004a8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f002 fb33 	bl	80070d8 <DMA_CheckFifoParam>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2240      	movs	r2, #64	; 0x40
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e197      	b.n	8004dba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f002 fa6e 	bl	8006f74 <DMA_CalcBaseAndBitshift>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	223f      	movs	r2, #63	; 0x3f
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	e0cd      	b.n	8004c4a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3b      	ldr	r2, [pc, #236]	; (8004ba0 <HAL_DMA_Init+0x42c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a39      	ldr	r2, [pc, #228]	; (8004ba4 <HAL_DMA_Init+0x430>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01d      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <HAL_DMA_Init+0x434>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a36      	ldr	r2, [pc, #216]	; (8004bac <HAL_DMA_Init+0x438>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a35      	ldr	r2, [pc, #212]	; (8004bb0 <HAL_DMA_Init+0x43c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a33      	ldr	r2, [pc, #204]	; (8004bb4 <HAL_DMA_Init+0x440>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a32      	ldr	r2, [pc, #200]	; (8004bb8 <HAL_DMA_Init+0x444>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_DMA_Init+0x38a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <HAL_DMA_Init+0x448>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_DMA_Init+0x38e>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_DMA_Init+0x390>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8097 	beq.w	8004c38 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a24      	ldr	r2, [pc, #144]	; (8004ba0 <HAL_DMA_Init+0x42c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d021      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <HAL_DMA_Init+0x430>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01c      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <HAL_DMA_Init+0x434>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d017      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <HAL_DMA_Init+0x438>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d012      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <HAL_DMA_Init+0x43c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00d      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_DMA_Init+0x440>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d008      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <HAL_DMA_Init+0x444>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <HAL_DMA_Init+0x3e4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <HAL_DMA_Init+0x448>)
 8004b56:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <HAL_DMA_Init+0x44c>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d021      	beq.n	8004bc4 <HAL_DMA_Init+0x450>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b80      	cmp	r3, #128	; 0x80
 8004b86:	d102      	bne.n	8004b8e <HAL_DMA_Init+0x41a>
 8004b88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b8c:	e01b      	b.n	8004bc6 <HAL_DMA_Init+0x452>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e019      	b.n	8004bc6 <HAL_DMA_Init+0x452>
 8004b92:	bf00      	nop
 8004b94:	fe10803f 	.word	0xfe10803f
 8004b98:	5c001000 	.word	0x5c001000
 8004b9c:	ffff0000 	.word	0xffff0000
 8004ba0:	58025408 	.word	0x58025408
 8004ba4:	5802541c 	.word	0x5802541c
 8004ba8:	58025430 	.word	0x58025430
 8004bac:	58025444 	.word	0x58025444
 8004bb0:	58025458 	.word	0x58025458
 8004bb4:	5802546c 	.word	0x5802546c
 8004bb8:	58025480 	.word	0x58025480
 8004bbc:	58025494 	.word	0x58025494
 8004bc0:	fffe000f 	.word	0xfffe000f
 8004bc4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68d2      	ldr	r2, [r2, #12]
 8004bca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004bf4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b6e      	ldr	r3, [pc, #440]	; (8004dc4 <HAL_DMA_Init+0x650>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	4a6e      	ldr	r2, [pc, #440]	; (8004dc8 <HAL_DMA_Init+0x654>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	009a      	lsls	r2, r3, #2
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f002 f9a9 	bl	8006f74 <DMA_CalcBaseAndBitshift>
 8004c22:	4603      	mov	r3, r0
 8004c24:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2201      	movs	r2, #1
 8004c30:	409a      	lsls	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	e008      	b.n	8004c4a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2240      	movs	r2, #64	; 0x40
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0b7      	b.n	8004dba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a5f      	ldr	r2, [pc, #380]	; (8004dcc <HAL_DMA_Init+0x658>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5d      	ldr	r2, [pc, #372]	; (8004dd0 <HAL_DMA_Init+0x65c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a5c      	ldr	r2, [pc, #368]	; (8004dd4 <HAL_DMA_Init+0x660>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5a      	ldr	r2, [pc, #360]	; (8004dd8 <HAL_DMA_Init+0x664>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a59      	ldr	r2, [pc, #356]	; (8004ddc <HAL_DMA_Init+0x668>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a57      	ldr	r2, [pc, #348]	; (8004de0 <HAL_DMA_Init+0x66c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a56      	ldr	r2, [pc, #344]	; (8004de4 <HAL_DMA_Init+0x670>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a54      	ldr	r2, [pc, #336]	; (8004de8 <HAL_DMA_Init+0x674>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a53      	ldr	r2, [pc, #332]	; (8004dec <HAL_DMA_Init+0x678>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a51      	ldr	r2, [pc, #324]	; (8004df0 <HAL_DMA_Init+0x67c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <HAL_DMA_Init+0x680>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a4e      	ldr	r2, [pc, #312]	; (8004df8 <HAL_DMA_Init+0x684>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a4d      	ldr	r2, [pc, #308]	; (8004dfc <HAL_DMA_Init+0x688>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a4b      	ldr	r2, [pc, #300]	; (8004e00 <HAL_DMA_Init+0x68c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a4a      	ldr	r2, [pc, #296]	; (8004e04 <HAL_DMA_Init+0x690>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a48      	ldr	r2, [pc, #288]	; (8004e08 <HAL_DMA_Init+0x694>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a47      	ldr	r2, [pc, #284]	; (8004e0c <HAL_DMA_Init+0x698>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a45      	ldr	r2, [pc, #276]	; (8004e10 <HAL_DMA_Init+0x69c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a44      	ldr	r2, [pc, #272]	; (8004e14 <HAL_DMA_Init+0x6a0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a42      	ldr	r2, [pc, #264]	; (8004e18 <HAL_DMA_Init+0x6a4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a41      	ldr	r2, [pc, #260]	; (8004e1c <HAL_DMA_Init+0x6a8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a3f      	ldr	r2, [pc, #252]	; (8004e20 <HAL_DMA_Init+0x6ac>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3e      	ldr	r2, [pc, #248]	; (8004e24 <HAL_DMA_Init+0x6b0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_DMA_Init+0x5c6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <HAL_DMA_Init+0x6b4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_DMA_Init+0x5ca>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_DMA_Init+0x5cc>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d032      	beq.n	8004daa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f002 fa43 	bl	80071d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d102      	bne.n	8004d58 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d6c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d010      	beq.n	8004d98 <HAL_DMA_Init+0x624>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d80c      	bhi.n	8004d98 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f002 fac0 	bl	8007304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	e008      	b.n	8004daa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	a7fdabf8 	.word	0xa7fdabf8
 8004dc8:	cccccccd 	.word	0xcccccccd
 8004dcc:	40020010 	.word	0x40020010
 8004dd0:	40020028 	.word	0x40020028
 8004dd4:	40020040 	.word	0x40020040
 8004dd8:	40020058 	.word	0x40020058
 8004ddc:	40020070 	.word	0x40020070
 8004de0:	40020088 	.word	0x40020088
 8004de4:	400200a0 	.word	0x400200a0
 8004de8:	400200b8 	.word	0x400200b8
 8004dec:	40020410 	.word	0x40020410
 8004df0:	40020428 	.word	0x40020428
 8004df4:	40020440 	.word	0x40020440
 8004df8:	40020458 	.word	0x40020458
 8004dfc:	40020470 	.word	0x40020470
 8004e00:	40020488 	.word	0x40020488
 8004e04:	400204a0 	.word	0x400204a0
 8004e08:	400204b8 	.word	0x400204b8
 8004e0c:	58025408 	.word	0x58025408
 8004e10:	5802541c 	.word	0x5802541c
 8004e14:	58025430 	.word	0x58025430
 8004e18:	58025444 	.word	0x58025444
 8004e1c:	58025458 	.word	0x58025458
 8004e20:	5802546c 	.word	0x5802546c
 8004e24:	58025480 	.word	0x58025480
 8004e28:	58025494 	.word	0x58025494

08004e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e226      	b.n	8005296 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_DMA_Start_IT+0x2a>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e21f      	b.n	8005296 <HAL_DMA_Start_IT+0x46a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	f040 820a 	bne.w	8005280 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a68      	ldr	r2, [pc, #416]	; (8005020 <HAL_DMA_Start_IT+0x1f4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d04a      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a66      	ldr	r2, [pc, #408]	; (8005024 <HAL_DMA_Start_IT+0x1f8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d045      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a65      	ldr	r2, [pc, #404]	; (8005028 <HAL_DMA_Start_IT+0x1fc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d040      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a63      	ldr	r2, [pc, #396]	; (800502c <HAL_DMA_Start_IT+0x200>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d03b      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a62      	ldr	r2, [pc, #392]	; (8005030 <HAL_DMA_Start_IT+0x204>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d036      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a60      	ldr	r2, [pc, #384]	; (8005034 <HAL_DMA_Start_IT+0x208>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d031      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a5f      	ldr	r2, [pc, #380]	; (8005038 <HAL_DMA_Start_IT+0x20c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d02c      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5d      	ldr	r2, [pc, #372]	; (800503c <HAL_DMA_Start_IT+0x210>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d027      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5c      	ldr	r2, [pc, #368]	; (8005040 <HAL_DMA_Start_IT+0x214>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d022      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a5a      	ldr	r2, [pc, #360]	; (8005044 <HAL_DMA_Start_IT+0x218>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01d      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a59      	ldr	r2, [pc, #356]	; (8005048 <HAL_DMA_Start_IT+0x21c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d018      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a57      	ldr	r2, [pc, #348]	; (800504c <HAL_DMA_Start_IT+0x220>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a56      	ldr	r2, [pc, #344]	; (8005050 <HAL_DMA_Start_IT+0x224>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00e      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a54      	ldr	r2, [pc, #336]	; (8005054 <HAL_DMA_Start_IT+0x228>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a53      	ldr	r2, [pc, #332]	; (8005058 <HAL_DMA_Start_IT+0x22c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_DMA_Start_IT+0xee>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a51      	ldr	r2, [pc, #324]	; (800505c <HAL_DMA_Start_IT+0x230>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <HAL_DMA_Start_IT+0x100>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e007      	b.n	8004f3c <HAL_DMA_Start_IT+0x110>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f001 fe6a 	bl	8006c1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a34      	ldr	r2, [pc, #208]	; (8005020 <HAL_DMA_Start_IT+0x1f4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a33      	ldr	r2, [pc, #204]	; (8005024 <HAL_DMA_Start_IT+0x1f8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a31      	ldr	r2, [pc, #196]	; (8005028 <HAL_DMA_Start_IT+0x1fc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a30      	ldr	r2, [pc, #192]	; (800502c <HAL_DMA_Start_IT+0x200>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <HAL_DMA_Start_IT+0x204>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <HAL_DMA_Start_IT+0x208>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2b      	ldr	r2, [pc, #172]	; (8005038 <HAL_DMA_Start_IT+0x20c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2a      	ldr	r2, [pc, #168]	; (800503c <HAL_DMA_Start_IT+0x210>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <HAL_DMA_Start_IT+0x214>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a27      	ldr	r2, [pc, #156]	; (8005044 <HAL_DMA_Start_IT+0x218>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a25      	ldr	r2, [pc, #148]	; (8005048 <HAL_DMA_Start_IT+0x21c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <HAL_DMA_Start_IT+0x220>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_DMA_Start_IT+0x224>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a21      	ldr	r2, [pc, #132]	; (8005054 <HAL_DMA_Start_IT+0x228>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <HAL_DMA_Start_IT+0x22c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x1bc>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	; (800505c <HAL_DMA_Start_IT+0x230>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Start_IT+0x1c0>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_DMA_Start_IT+0x1c2>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d036      	beq.n	8005060 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 021e 	bic.w	r2, r3, #30
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0216 	orr.w	r2, r2, #22
 8005004:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d03e      	beq.n	800508c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0208 	orr.w	r2, r2, #8
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e035      	b.n	800508c <HAL_DMA_Start_IT+0x260>
 8005020:	40020010 	.word	0x40020010
 8005024:	40020028 	.word	0x40020028
 8005028:	40020040 	.word	0x40020040
 800502c:	40020058 	.word	0x40020058
 8005030:	40020070 	.word	0x40020070
 8005034:	40020088 	.word	0x40020088
 8005038:	400200a0 	.word	0x400200a0
 800503c:	400200b8 	.word	0x400200b8
 8005040:	40020410 	.word	0x40020410
 8005044:	40020428 	.word	0x40020428
 8005048:	40020440 	.word	0x40020440
 800504c:	40020458 	.word	0x40020458
 8005050:	40020470 	.word	0x40020470
 8005054:	40020488 	.word	0x40020488
 8005058:	400204a0 	.word	0x400204a0
 800505c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 020e 	bic.w	r2, r3, #14
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 020a 	orr.w	r2, r2, #10
 8005072:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0204 	orr.w	r2, r2, #4
 800508a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a83      	ldr	r2, [pc, #524]	; (80052a0 <HAL_DMA_Start_IT+0x474>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d072      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a82      	ldr	r2, [pc, #520]	; (80052a4 <HAL_DMA_Start_IT+0x478>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d06d      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a80      	ldr	r2, [pc, #512]	; (80052a8 <HAL_DMA_Start_IT+0x47c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d068      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a7f      	ldr	r2, [pc, #508]	; (80052ac <HAL_DMA_Start_IT+0x480>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d063      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a7d      	ldr	r2, [pc, #500]	; (80052b0 <HAL_DMA_Start_IT+0x484>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d05e      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a7c      	ldr	r2, [pc, #496]	; (80052b4 <HAL_DMA_Start_IT+0x488>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d059      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7a      	ldr	r2, [pc, #488]	; (80052b8 <HAL_DMA_Start_IT+0x48c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d054      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a79      	ldr	r2, [pc, #484]	; (80052bc <HAL_DMA_Start_IT+0x490>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04f      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a77      	ldr	r2, [pc, #476]	; (80052c0 <HAL_DMA_Start_IT+0x494>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d04a      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a76      	ldr	r2, [pc, #472]	; (80052c4 <HAL_DMA_Start_IT+0x498>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d045      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a74      	ldr	r2, [pc, #464]	; (80052c8 <HAL_DMA_Start_IT+0x49c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d040      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a73      	ldr	r2, [pc, #460]	; (80052cc <HAL_DMA_Start_IT+0x4a0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d03b      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a71      	ldr	r2, [pc, #452]	; (80052d0 <HAL_DMA_Start_IT+0x4a4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d036      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_DMA_Start_IT+0x4a8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d031      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6e      	ldr	r2, [pc, #440]	; (80052d8 <HAL_DMA_Start_IT+0x4ac>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d02c      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6d      	ldr	r2, [pc, #436]	; (80052dc <HAL_DMA_Start_IT+0x4b0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d027      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6b      	ldr	r2, [pc, #428]	; (80052e0 <HAL_DMA_Start_IT+0x4b4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_DMA_Start_IT+0x4b8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d01d      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a68      	ldr	r2, [pc, #416]	; (80052e8 <HAL_DMA_Start_IT+0x4bc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a67      	ldr	r2, [pc, #412]	; (80052ec <HAL_DMA_Start_IT+0x4c0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a65      	ldr	r2, [pc, #404]	; (80052f0 <HAL_DMA_Start_IT+0x4c4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a64      	ldr	r2, [pc, #400]	; (80052f4 <HAL_DMA_Start_IT+0x4c8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a62      	ldr	r2, [pc, #392]	; (80052f8 <HAL_DMA_Start_IT+0x4cc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_DMA_Start_IT+0x350>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a61      	ldr	r2, [pc, #388]	; (80052fc <HAL_DMA_Start_IT+0x4d0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_DMA_Start_IT+0x354>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_DMA_Start_IT+0x356>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01a      	beq.n	80051bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a37      	ldr	r2, [pc, #220]	; (80052a0 <HAL_DMA_Start_IT+0x474>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a36      	ldr	r2, [pc, #216]	; (80052a4 <HAL_DMA_Start_IT+0x478>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <HAL_DMA_Start_IT+0x47c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a33      	ldr	r2, [pc, #204]	; (80052ac <HAL_DMA_Start_IT+0x480>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_DMA_Start_IT+0x484>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a30      	ldr	r2, [pc, #192]	; (80052b4 <HAL_DMA_Start_IT+0x488>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2e      	ldr	r2, [pc, #184]	; (80052b8 <HAL_DMA_Start_IT+0x48c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2d      	ldr	r2, [pc, #180]	; (80052bc <HAL_DMA_Start_IT+0x490>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2b      	ldr	r2, [pc, #172]	; (80052c0 <HAL_DMA_Start_IT+0x494>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <HAL_DMA_Start_IT+0x498>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a28      	ldr	r2, [pc, #160]	; (80052c8 <HAL_DMA_Start_IT+0x49c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a27      	ldr	r2, [pc, #156]	; (80052cc <HAL_DMA_Start_IT+0x4a0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <HAL_DMA_Start_IT+0x4a4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a24      	ldr	r2, [pc, #144]	; (80052d4 <HAL_DMA_Start_IT+0x4a8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_DMA_Start_IT+0x4ac>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_Start_IT+0x430>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	; (80052dc <HAL_DMA_Start_IT+0x4b0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <HAL_DMA_Start_IT+0x442>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e012      	b.n	8005294 <HAL_DMA_Start_IT+0x468>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e009      	b.n	8005294 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005286:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40020010 	.word	0x40020010
 80052a4:	40020028 	.word	0x40020028
 80052a8:	40020040 	.word	0x40020040
 80052ac:	40020058 	.word	0x40020058
 80052b0:	40020070 	.word	0x40020070
 80052b4:	40020088 	.word	0x40020088
 80052b8:	400200a0 	.word	0x400200a0
 80052bc:	400200b8 	.word	0x400200b8
 80052c0:	40020410 	.word	0x40020410
 80052c4:	40020428 	.word	0x40020428
 80052c8:	40020440 	.word	0x40020440
 80052cc:	40020458 	.word	0x40020458
 80052d0:	40020470 	.word	0x40020470
 80052d4:	40020488 	.word	0x40020488
 80052d8:	400204a0 	.word	0x400204a0
 80052dc:	400204b8 	.word	0x400204b8
 80052e0:	58025408 	.word	0x58025408
 80052e4:	5802541c 	.word	0x5802541c
 80052e8:	58025430 	.word	0x58025430
 80052ec:	58025444 	.word	0x58025444
 80052f0:	58025458 	.word	0x58025458
 80052f4:	5802546c 	.word	0x5802546c
 80052f8:	58025480 	.word	0x58025480
 80052fc:	58025494 	.word	0x58025494

08005300 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005308:	f7fd f938 	bl	800257c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e2dc      	b.n	80058d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d008      	beq.n	8005336 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e2cd      	b.n	80058d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a76      	ldr	r2, [pc, #472]	; (8005514 <HAL_DMA_Abort+0x214>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d04a      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a74      	ldr	r2, [pc, #464]	; (8005518 <HAL_DMA_Abort+0x218>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d045      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a73      	ldr	r2, [pc, #460]	; (800551c <HAL_DMA_Abort+0x21c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d040      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a71      	ldr	r2, [pc, #452]	; (8005520 <HAL_DMA_Abort+0x220>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d03b      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a70      	ldr	r2, [pc, #448]	; (8005524 <HAL_DMA_Abort+0x224>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d036      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a6e      	ldr	r2, [pc, #440]	; (8005528 <HAL_DMA_Abort+0x228>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d031      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6d      	ldr	r2, [pc, #436]	; (800552c <HAL_DMA_Abort+0x22c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d02c      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6b      	ldr	r2, [pc, #428]	; (8005530 <HAL_DMA_Abort+0x230>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d027      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a6a      	ldr	r2, [pc, #424]	; (8005534 <HAL_DMA_Abort+0x234>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a68      	ldr	r2, [pc, #416]	; (8005538 <HAL_DMA_Abort+0x238>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01d      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a67      	ldr	r2, [pc, #412]	; (800553c <HAL_DMA_Abort+0x23c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a65      	ldr	r2, [pc, #404]	; (8005540 <HAL_DMA_Abort+0x240>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a64      	ldr	r2, [pc, #400]	; (8005544 <HAL_DMA_Abort+0x244>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a62      	ldr	r2, [pc, #392]	; (8005548 <HAL_DMA_Abort+0x248>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a61      	ldr	r2, [pc, #388]	; (800554c <HAL_DMA_Abort+0x24c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_DMA_Abort+0xd6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a5f      	ldr	r2, [pc, #380]	; (8005550 <HAL_DMA_Abort+0x250>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <HAL_DMA_Abort+0xda>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_DMA_Abort+0xdc>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d013      	beq.n	8005408 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 021e 	bic.w	r2, r2, #30
 80053ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e00a      	b.n	800541e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 020e 	bic.w	r2, r2, #14
 8005416:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3c      	ldr	r2, [pc, #240]	; (8005514 <HAL_DMA_Abort+0x214>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d072      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3a      	ldr	r2, [pc, #232]	; (8005518 <HAL_DMA_Abort+0x218>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d06d      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a39      	ldr	r2, [pc, #228]	; (800551c <HAL_DMA_Abort+0x21c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d068      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a37      	ldr	r2, [pc, #220]	; (8005520 <HAL_DMA_Abort+0x220>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d063      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a36      	ldr	r2, [pc, #216]	; (8005524 <HAL_DMA_Abort+0x224>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d05e      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a34      	ldr	r2, [pc, #208]	; (8005528 <HAL_DMA_Abort+0x228>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d059      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a33      	ldr	r2, [pc, #204]	; (800552c <HAL_DMA_Abort+0x22c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d054      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a31      	ldr	r2, [pc, #196]	; (8005530 <HAL_DMA_Abort+0x230>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d04f      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a30      	ldr	r2, [pc, #192]	; (8005534 <HAL_DMA_Abort+0x234>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d04a      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <HAL_DMA_Abort+0x238>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d045      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2d      	ldr	r2, [pc, #180]	; (800553c <HAL_DMA_Abort+0x23c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d040      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_DMA_Abort+0x240>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d03b      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <HAL_DMA_Abort+0x244>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d036      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <HAL_DMA_Abort+0x248>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d031      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_DMA_Abort+0x24c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d02c      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <HAL_DMA_Abort+0x250>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d027      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a24      	ldr	r2, [pc, #144]	; (8005554 <HAL_DMA_Abort+0x254>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d022      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_DMA_Abort+0x258>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01d      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_DMA_Abort+0x25c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_DMA_Abort+0x260>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_DMA_Abort+0x264>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_DMA_Abort+0x268>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_DMA_Abort+0x26c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_DMA_Abort+0x20e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_DMA_Abort+0x270>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d132      	bne.n	8005574 <HAL_DMA_Abort+0x274>
 800550e:	2301      	movs	r3, #1
 8005510:	e031      	b.n	8005576 <HAL_DMA_Abort+0x276>
 8005512:	bf00      	nop
 8005514:	40020010 	.word	0x40020010
 8005518:	40020028 	.word	0x40020028
 800551c:	40020040 	.word	0x40020040
 8005520:	40020058 	.word	0x40020058
 8005524:	40020070 	.word	0x40020070
 8005528:	40020088 	.word	0x40020088
 800552c:	400200a0 	.word	0x400200a0
 8005530:	400200b8 	.word	0x400200b8
 8005534:	40020410 	.word	0x40020410
 8005538:	40020428 	.word	0x40020428
 800553c:	40020440 	.word	0x40020440
 8005540:	40020458 	.word	0x40020458
 8005544:	40020470 	.word	0x40020470
 8005548:	40020488 	.word	0x40020488
 800554c:	400204a0 	.word	0x400204a0
 8005550:	400204b8 	.word	0x400204b8
 8005554:	58025408 	.word	0x58025408
 8005558:	5802541c 	.word	0x5802541c
 800555c:	58025430 	.word	0x58025430
 8005560:	58025444 	.word	0x58025444
 8005564:	58025458 	.word	0x58025458
 8005568:	5802546c 	.word	0x5802546c
 800556c:	58025480 	.word	0x58025480
 8005570:	58025494 	.word	0x58025494
 8005574:	2300      	movs	r3, #0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005588:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6d      	ldr	r2, [pc, #436]	; (8005744 <HAL_DMA_Abort+0x444>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04a      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a6b      	ldr	r2, [pc, #428]	; (8005748 <HAL_DMA_Abort+0x448>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d045      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a6a      	ldr	r2, [pc, #424]	; (800574c <HAL_DMA_Abort+0x44c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a68      	ldr	r2, [pc, #416]	; (8005750 <HAL_DMA_Abort+0x450>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d03b      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a67      	ldr	r2, [pc, #412]	; (8005754 <HAL_DMA_Abort+0x454>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d036      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a65      	ldr	r2, [pc, #404]	; (8005758 <HAL_DMA_Abort+0x458>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a64      	ldr	r2, [pc, #400]	; (800575c <HAL_DMA_Abort+0x45c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d02c      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a62      	ldr	r2, [pc, #392]	; (8005760 <HAL_DMA_Abort+0x460>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d027      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a61      	ldr	r2, [pc, #388]	; (8005764 <HAL_DMA_Abort+0x464>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5f      	ldr	r2, [pc, #380]	; (8005768 <HAL_DMA_Abort+0x468>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a5e      	ldr	r2, [pc, #376]	; (800576c <HAL_DMA_Abort+0x46c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5c      	ldr	r2, [pc, #368]	; (8005770 <HAL_DMA_Abort+0x470>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a5b      	ldr	r2, [pc, #364]	; (8005774 <HAL_DMA_Abort+0x474>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a59      	ldr	r2, [pc, #356]	; (8005778 <HAL_DMA_Abort+0x478>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_DMA_Abort+0x47c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_DMA_Abort+0x32a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a56      	ldr	r2, [pc, #344]	; (8005780 <HAL_DMA_Abort+0x480>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d108      	bne.n	800563c <HAL_DMA_Abort+0x33c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <HAL_DMA_Abort+0x34c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800564c:	e013      	b.n	8005676 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800564e:	f7fc ff95 	bl	800257c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b05      	cmp	r3, #5
 800565a:	d90c      	bls.n	8005676 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2203      	movs	r2, #3
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e12d      	b.n	80058d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2f      	ldr	r2, [pc, #188]	; (8005744 <HAL_DMA_Abort+0x444>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d04a      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <HAL_DMA_Abort+0x448>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d045      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2c      	ldr	r2, [pc, #176]	; (800574c <HAL_DMA_Abort+0x44c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d040      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <HAL_DMA_Abort+0x450>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d03b      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a29      	ldr	r2, [pc, #164]	; (8005754 <HAL_DMA_Abort+0x454>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d036      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a27      	ldr	r2, [pc, #156]	; (8005758 <HAL_DMA_Abort+0x458>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d031      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a26      	ldr	r2, [pc, #152]	; (800575c <HAL_DMA_Abort+0x45c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d02c      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a24      	ldr	r2, [pc, #144]	; (8005760 <HAL_DMA_Abort+0x460>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d027      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a23      	ldr	r2, [pc, #140]	; (8005764 <HAL_DMA_Abort+0x464>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a21      	ldr	r2, [pc, #132]	; (8005768 <HAL_DMA_Abort+0x468>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01d      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a20      	ldr	r2, [pc, #128]	; (800576c <HAL_DMA_Abort+0x46c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <HAL_DMA_Abort+0x470>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_DMA_Abort+0x474>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_DMA_Abort+0x478>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_DMA_Abort+0x47c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_DMA_Abort+0x422>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_DMA_Abort+0x480>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_DMA_Abort+0x426>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_DMA_Abort+0x428>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d02b      	beq.n	8005784 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005730:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	223f      	movs	r2, #63	; 0x3f
 800573c:	409a      	lsls	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	e02a      	b.n	800579a <HAL_DMA_Abort+0x49a>
 8005744:	40020010 	.word	0x40020010
 8005748:	40020028 	.word	0x40020028
 800574c:	40020040 	.word	0x40020040
 8005750:	40020058 	.word	0x40020058
 8005754:	40020070 	.word	0x40020070
 8005758:	40020088 	.word	0x40020088
 800575c:	400200a0 	.word	0x400200a0
 8005760:	400200b8 	.word	0x400200b8
 8005764:	40020410 	.word	0x40020410
 8005768:	40020428 	.word	0x40020428
 800576c:	40020440 	.word	0x40020440
 8005770:	40020458 	.word	0x40020458
 8005774:	40020470 	.word	0x40020470
 8005778:	40020488 	.word	0x40020488
 800577c:	400204a0 	.word	0x400204a0
 8005780:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2201      	movs	r2, #1
 8005794:	409a      	lsls	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a4f      	ldr	r2, [pc, #316]	; (80058dc <HAL_DMA_Abort+0x5dc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d072      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a4d      	ldr	r2, [pc, #308]	; (80058e0 <HAL_DMA_Abort+0x5e0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d06d      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a4c      	ldr	r2, [pc, #304]	; (80058e4 <HAL_DMA_Abort+0x5e4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d068      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a4a      	ldr	r2, [pc, #296]	; (80058e8 <HAL_DMA_Abort+0x5e8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d063      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a49      	ldr	r2, [pc, #292]	; (80058ec <HAL_DMA_Abort+0x5ec>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d05e      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a47      	ldr	r2, [pc, #284]	; (80058f0 <HAL_DMA_Abort+0x5f0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d059      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a46      	ldr	r2, [pc, #280]	; (80058f4 <HAL_DMA_Abort+0x5f4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d054      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a44      	ldr	r2, [pc, #272]	; (80058f8 <HAL_DMA_Abort+0x5f8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04f      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a43      	ldr	r2, [pc, #268]	; (80058fc <HAL_DMA_Abort+0x5fc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a41      	ldr	r2, [pc, #260]	; (8005900 <HAL_DMA_Abort+0x600>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a40      	ldr	r2, [pc, #256]	; (8005904 <HAL_DMA_Abort+0x604>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d040      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a3e      	ldr	r2, [pc, #248]	; (8005908 <HAL_DMA_Abort+0x608>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a3d      	ldr	r2, [pc, #244]	; (800590c <HAL_DMA_Abort+0x60c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d036      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a3b      	ldr	r2, [pc, #236]	; (8005910 <HAL_DMA_Abort+0x610>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a3a      	ldr	r2, [pc, #232]	; (8005914 <HAL_DMA_Abort+0x614>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d02c      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a38      	ldr	r2, [pc, #224]	; (8005918 <HAL_DMA_Abort+0x618>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a37      	ldr	r2, [pc, #220]	; (800591c <HAL_DMA_Abort+0x61c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a35      	ldr	r2, [pc, #212]	; (8005920 <HAL_DMA_Abort+0x620>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a34      	ldr	r2, [pc, #208]	; (8005924 <HAL_DMA_Abort+0x624>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a32      	ldr	r2, [pc, #200]	; (8005928 <HAL_DMA_Abort+0x628>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a31      	ldr	r2, [pc, #196]	; (800592c <HAL_DMA_Abort+0x62c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <HAL_DMA_Abort+0x630>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2e      	ldr	r2, [pc, #184]	; (8005934 <HAL_DMA_Abort+0x634>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_DMA_Abort+0x58a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <HAL_DMA_Abort+0x638>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_DMA_Abort+0x58e>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_DMA_Abort+0x590>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d015      	beq.n	80058c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800589c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40020010 	.word	0x40020010
 80058e0:	40020028 	.word	0x40020028
 80058e4:	40020040 	.word	0x40020040
 80058e8:	40020058 	.word	0x40020058
 80058ec:	40020070 	.word	0x40020070
 80058f0:	40020088 	.word	0x40020088
 80058f4:	400200a0 	.word	0x400200a0
 80058f8:	400200b8 	.word	0x400200b8
 80058fc:	40020410 	.word	0x40020410
 8005900:	40020428 	.word	0x40020428
 8005904:	40020440 	.word	0x40020440
 8005908:	40020458 	.word	0x40020458
 800590c:	40020470 	.word	0x40020470
 8005910:	40020488 	.word	0x40020488
 8005914:	400204a0 	.word	0x400204a0
 8005918:	400204b8 	.word	0x400204b8
 800591c:	58025408 	.word	0x58025408
 8005920:	5802541c 	.word	0x5802541c
 8005924:	58025430 	.word	0x58025430
 8005928:	58025444 	.word	0x58025444
 800592c:	58025458 	.word	0x58025458
 8005930:	5802546c 	.word	0x5802546c
 8005934:	58025480 	.word	0x58025480
 8005938:	58025494 	.word	0x58025494

0800593c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e237      	b.n	8005dbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d004      	beq.n	8005964 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e22c      	b.n	8005dbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a5c      	ldr	r2, [pc, #368]	; (8005adc <HAL_DMA_Abort_IT+0x1a0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d04a      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5b      	ldr	r2, [pc, #364]	; (8005ae0 <HAL_DMA_Abort_IT+0x1a4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d045      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a59      	ldr	r2, [pc, #356]	; (8005ae4 <HAL_DMA_Abort_IT+0x1a8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d040      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a58      	ldr	r2, [pc, #352]	; (8005ae8 <HAL_DMA_Abort_IT+0x1ac>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d03b      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a56      	ldr	r2, [pc, #344]	; (8005aec <HAL_DMA_Abort_IT+0x1b0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d036      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a55      	ldr	r2, [pc, #340]	; (8005af0 <HAL_DMA_Abort_IT+0x1b4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d031      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a53      	ldr	r2, [pc, #332]	; (8005af4 <HAL_DMA_Abort_IT+0x1b8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d02c      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <HAL_DMA_Abort_IT+0x1bc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d027      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a50      	ldr	r2, [pc, #320]	; (8005afc <HAL_DMA_Abort_IT+0x1c0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d022      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a4f      	ldr	r2, [pc, #316]	; (8005b00 <HAL_DMA_Abort_IT+0x1c4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d01d      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a4d      	ldr	r2, [pc, #308]	; (8005b04 <HAL_DMA_Abort_IT+0x1c8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a4c      	ldr	r2, [pc, #304]	; (8005b08 <HAL_DMA_Abort_IT+0x1cc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4a      	ldr	r2, [pc, #296]	; (8005b0c <HAL_DMA_Abort_IT+0x1d0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a49      	ldr	r2, [pc, #292]	; (8005b10 <HAL_DMA_Abort_IT+0x1d4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a47      	ldr	r2, [pc, #284]	; (8005b14 <HAL_DMA_Abort_IT+0x1d8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_DMA_Abort_IT+0xc8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a46      	ldr	r2, [pc, #280]	; (8005b18 <HAL_DMA_Abort_IT+0x1dc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_DMA_Abort_IT+0xcc>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_DMA_Abort_IT+0xce>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8086 	beq.w	8005b1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2204      	movs	r2, #4
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2f      	ldr	r2, [pc, #188]	; (8005adc <HAL_DMA_Abort_IT+0x1a0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d04a      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <HAL_DMA_Abort_IT+0x1a4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d045      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <HAL_DMA_Abort_IT+0x1a8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d040      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <HAL_DMA_Abort_IT+0x1ac>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d03b      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <HAL_DMA_Abort_IT+0x1b0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d036      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <HAL_DMA_Abort_IT+0x1b4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d031      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <HAL_DMA_Abort_IT+0x1b8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02c      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a25      	ldr	r2, [pc, #148]	; (8005af8 <HAL_DMA_Abort_IT+0x1bc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d027      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <HAL_DMA_Abort_IT+0x1c0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d022      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a22      	ldr	r2, [pc, #136]	; (8005b00 <HAL_DMA_Abort_IT+0x1c4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01d      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <HAL_DMA_Abort_IT+0x1c8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d018      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <HAL_DMA_Abort_IT+0x1cc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_DMA_Abort_IT+0x1d0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00e      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_DMA_Abort_IT+0x1d4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d009      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <HAL_DMA_Abort_IT+0x1d8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x17c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a19      	ldr	r2, [pc, #100]	; (8005b18 <HAL_DMA_Abort_IT+0x1dc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <HAL_DMA_Abort_IT+0x18e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e178      	b.n	8005dbc <HAL_DMA_Abort_IT+0x480>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e16f      	b.n	8005dbc <HAL_DMA_Abort_IT+0x480>
 8005adc:	40020010 	.word	0x40020010
 8005ae0:	40020028 	.word	0x40020028
 8005ae4:	40020040 	.word	0x40020040
 8005ae8:	40020058 	.word	0x40020058
 8005aec:	40020070 	.word	0x40020070
 8005af0:	40020088 	.word	0x40020088
 8005af4:	400200a0 	.word	0x400200a0
 8005af8:	400200b8 	.word	0x400200b8
 8005afc:	40020410 	.word	0x40020410
 8005b00:	40020428 	.word	0x40020428
 8005b04:	40020440 	.word	0x40020440
 8005b08:	40020458 	.word	0x40020458
 8005b0c:	40020470 	.word	0x40020470
 8005b10:	40020488 	.word	0x40020488
 8005b14:	400204a0 	.word	0x400204a0
 8005b18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 020e 	bic.w	r2, r2, #14
 8005b2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a6c      	ldr	r2, [pc, #432]	; (8005ce4 <HAL_DMA_Abort_IT+0x3a8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04a      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6b      	ldr	r2, [pc, #428]	; (8005ce8 <HAL_DMA_Abort_IT+0x3ac>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d045      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a69      	ldr	r2, [pc, #420]	; (8005cec <HAL_DMA_Abort_IT+0x3b0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d040      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a68      	ldr	r2, [pc, #416]	; (8005cf0 <HAL_DMA_Abort_IT+0x3b4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d03b      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a66      	ldr	r2, [pc, #408]	; (8005cf4 <HAL_DMA_Abort_IT+0x3b8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d036      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a65      	ldr	r2, [pc, #404]	; (8005cf8 <HAL_DMA_Abort_IT+0x3bc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d031      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a63      	ldr	r2, [pc, #396]	; (8005cfc <HAL_DMA_Abort_IT+0x3c0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d02c      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a62      	ldr	r2, [pc, #392]	; (8005d00 <HAL_DMA_Abort_IT+0x3c4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d027      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a60      	ldr	r2, [pc, #384]	; (8005d04 <HAL_DMA_Abort_IT+0x3c8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a5f      	ldr	r2, [pc, #380]	; (8005d08 <HAL_DMA_Abort_IT+0x3cc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d01d      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a5d      	ldr	r2, [pc, #372]	; (8005d0c <HAL_DMA_Abort_IT+0x3d0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a5c      	ldr	r2, [pc, #368]	; (8005d10 <HAL_DMA_Abort_IT+0x3d4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a5a      	ldr	r2, [pc, #360]	; (8005d14 <HAL_DMA_Abort_IT+0x3d8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a59      	ldr	r2, [pc, #356]	; (8005d18 <HAL_DMA_Abort_IT+0x3dc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a57      	ldr	r2, [pc, #348]	; (8005d1c <HAL_DMA_Abort_IT+0x3e0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_DMA_Abort_IT+0x290>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a56      	ldr	r2, [pc, #344]	; (8005d20 <HAL_DMA_Abort_IT+0x3e4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <HAL_DMA_Abort_IT+0x2a2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e007      	b.n	8005bee <HAL_DMA_Abort_IT+0x2b2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a3c      	ldr	r2, [pc, #240]	; (8005ce4 <HAL_DMA_Abort_IT+0x3a8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d072      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a3a      	ldr	r2, [pc, #232]	; (8005ce8 <HAL_DMA_Abort_IT+0x3ac>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d06d      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a39      	ldr	r2, [pc, #228]	; (8005cec <HAL_DMA_Abort_IT+0x3b0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d068      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a37      	ldr	r2, [pc, #220]	; (8005cf0 <HAL_DMA_Abort_IT+0x3b4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d063      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a36      	ldr	r2, [pc, #216]	; (8005cf4 <HAL_DMA_Abort_IT+0x3b8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d05e      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a34      	ldr	r2, [pc, #208]	; (8005cf8 <HAL_DMA_Abort_IT+0x3bc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d059      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <HAL_DMA_Abort_IT+0x3c0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d054      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a31      	ldr	r2, [pc, #196]	; (8005d00 <HAL_DMA_Abort_IT+0x3c4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d04f      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a30      	ldr	r2, [pc, #192]	; (8005d04 <HAL_DMA_Abort_IT+0x3c8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d04a      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <HAL_DMA_Abort_IT+0x3cc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d045      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2d      	ldr	r2, [pc, #180]	; (8005d0c <HAL_DMA_Abort_IT+0x3d0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d040      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a2b      	ldr	r2, [pc, #172]	; (8005d10 <HAL_DMA_Abort_IT+0x3d4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d03b      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <HAL_DMA_Abort_IT+0x3d8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d036      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <HAL_DMA_Abort_IT+0x3dc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d031      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <HAL_DMA_Abort_IT+0x3e0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d02c      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <HAL_DMA_Abort_IT+0x3e4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d027      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <HAL_DMA_Abort_IT+0x3e8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <HAL_DMA_Abort_IT+0x3ec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01d      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <HAL_DMA_Abort_IT+0x3f0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <HAL_DMA_Abort_IT+0x3f4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <HAL_DMA_Abort_IT+0x3f8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	; (8005d38 <HAL_DMA_Abort_IT+0x3fc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_DMA_Abort_IT+0x400>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_DMA_Abort_IT+0x3a2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <HAL_DMA_Abort_IT+0x404>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d132      	bne.n	8005d44 <HAL_DMA_Abort_IT+0x408>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e031      	b.n	8005d46 <HAL_DMA_Abort_IT+0x40a>
 8005ce2:	bf00      	nop
 8005ce4:	40020010 	.word	0x40020010
 8005ce8:	40020028 	.word	0x40020028
 8005cec:	40020040 	.word	0x40020040
 8005cf0:	40020058 	.word	0x40020058
 8005cf4:	40020070 	.word	0x40020070
 8005cf8:	40020088 	.word	0x40020088
 8005cfc:	400200a0 	.word	0x400200a0
 8005d00:	400200b8 	.word	0x400200b8
 8005d04:	40020410 	.word	0x40020410
 8005d08:	40020428 	.word	0x40020428
 8005d0c:	40020440 	.word	0x40020440
 8005d10:	40020458 	.word	0x40020458
 8005d14:	40020470 	.word	0x40020470
 8005d18:	40020488 	.word	0x40020488
 8005d1c:	400204a0 	.word	0x400204a0
 8005d20:	400204b8 	.word	0x400204b8
 8005d24:	58025408 	.word	0x58025408
 8005d28:	5802541c 	.word	0x5802541c
 8005d2c:	58025430 	.word	0x58025430
 8005d30:	58025444 	.word	0x58025444
 8005d34:	58025458 	.word	0x58025458
 8005d38:	5802546c 	.word	0x5802546c
 8005d3c:	58025480 	.word	0x58025480
 8005d40:	58025494 	.word	0x58025494
 8005d44:	2300      	movs	r3, #0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d028      	beq.n	8005d9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2201      	movs	r2, #1
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dd4:	4b67      	ldr	r3, [pc, #412]	; (8005f74 <HAL_DMA_IRQHandler+0x1ac>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a67      	ldr	r2, [pc, #412]	; (8005f78 <HAL_DMA_IRQHandler+0x1b0>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a5f      	ldr	r2, [pc, #380]	; (8005f7c <HAL_DMA_IRQHandler+0x1b4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d04a      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5d      	ldr	r2, [pc, #372]	; (8005f80 <HAL_DMA_IRQHandler+0x1b8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d045      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5c      	ldr	r2, [pc, #368]	; (8005f84 <HAL_DMA_IRQHandler+0x1bc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d040      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5a      	ldr	r2, [pc, #360]	; (8005f88 <HAL_DMA_IRQHandler+0x1c0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d03b      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a59      	ldr	r2, [pc, #356]	; (8005f8c <HAL_DMA_IRQHandler+0x1c4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d036      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a57      	ldr	r2, [pc, #348]	; (8005f90 <HAL_DMA_IRQHandler+0x1c8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d031      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a56      	ldr	r2, [pc, #344]	; (8005f94 <HAL_DMA_IRQHandler+0x1cc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d02c      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a54      	ldr	r2, [pc, #336]	; (8005f98 <HAL_DMA_IRQHandler+0x1d0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a53      	ldr	r2, [pc, #332]	; (8005f9c <HAL_DMA_IRQHandler+0x1d4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a51      	ldr	r2, [pc, #324]	; (8005fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a50      	ldr	r2, [pc, #320]	; (8005fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a4e      	ldr	r2, [pc, #312]	; (8005fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a4d      	ldr	r2, [pc, #308]	; (8005fac <HAL_DMA_IRQHandler+0x1e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a4b      	ldr	r2, [pc, #300]	; (8005fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xd2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a48      	ldr	r2, [pc, #288]	; (8005fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_DMA_IRQHandler+0xd6>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 842b 	beq.w	80066fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2208      	movs	r2, #8
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80a2 	beq.w	8006000 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2e      	ldr	r2, [pc, #184]	; (8005f7c <HAL_DMA_IRQHandler+0x1b4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d04a      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <HAL_DMA_IRQHandler+0x1b8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d045      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2b      	ldr	r2, [pc, #172]	; (8005f84 <HAL_DMA_IRQHandler+0x1bc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d040      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <HAL_DMA_IRQHandler+0x1c0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d03b      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a28      	ldr	r2, [pc, #160]	; (8005f8c <HAL_DMA_IRQHandler+0x1c4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d036      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a27      	ldr	r2, [pc, #156]	; (8005f90 <HAL_DMA_IRQHandler+0x1c8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d031      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <HAL_DMA_IRQHandler+0x1cc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d02c      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <HAL_DMA_IRQHandler+0x1d0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d027      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_DMA_IRQHandler+0x1d4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d022      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d01d      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d018      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <HAL_DMA_IRQHandler+0x1e4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d009      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x194>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d12f      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x1f4>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf14      	ite	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	2300      	moveq	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	e02e      	b.n	8005fd0 <HAL_DMA_IRQHandler+0x208>
 8005f72:	bf00      	nop
 8005f74:	24000088 	.word	0x24000088
 8005f78:	1b4e81b5 	.word	0x1b4e81b5
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2208      	movs	r2, #8
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	f043 0201 	orr.w	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d06e      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a69      	ldr	r2, [pc, #420]	; (80061c0 <HAL_DMA_IRQHandler+0x3f8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d04a      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <HAL_DMA_IRQHandler+0x3fc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d045      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a66      	ldr	r2, [pc, #408]	; (80061c8 <HAL_DMA_IRQHandler+0x400>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d040      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a64      	ldr	r2, [pc, #400]	; (80061cc <HAL_DMA_IRQHandler+0x404>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d03b      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a63      	ldr	r2, [pc, #396]	; (80061d0 <HAL_DMA_IRQHandler+0x408>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d036      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a61      	ldr	r2, [pc, #388]	; (80061d4 <HAL_DMA_IRQHandler+0x40c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d031      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a60      	ldr	r2, [pc, #384]	; (80061d8 <HAL_DMA_IRQHandler+0x410>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d02c      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5e      	ldr	r2, [pc, #376]	; (80061dc <HAL_DMA_IRQHandler+0x414>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d027      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a5d      	ldr	r2, [pc, #372]	; (80061e0 <HAL_DMA_IRQHandler+0x418>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a5b      	ldr	r2, [pc, #364]	; (80061e4 <HAL_DMA_IRQHandler+0x41c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01d      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a5a      	ldr	r2, [pc, #360]	; (80061e8 <HAL_DMA_IRQHandler+0x420>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a58      	ldr	r2, [pc, #352]	; (80061ec <HAL_DMA_IRQHandler+0x424>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a57      	ldr	r2, [pc, #348]	; (80061f0 <HAL_DMA_IRQHandler+0x428>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a55      	ldr	r2, [pc, #340]	; (80061f4 <HAL_DMA_IRQHandler+0x42c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a54      	ldr	r2, [pc, #336]	; (80061f8 <HAL_DMA_IRQHandler+0x430>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x2ee>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a52      	ldr	r2, [pc, #328]	; (80061fc <HAL_DMA_IRQHandler+0x434>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10a      	bne.n	80060cc <HAL_DMA_IRQHandler+0x304>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e003      	b.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00d      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2201      	movs	r2, #1
 80060e2:	409a      	lsls	r2, r3
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	f043 0202 	orr.w	r2, r3, #2
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	2204      	movs	r2, #4
 80060fe:	409a      	lsls	r2, r3
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	4013      	ands	r3, r2
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 808f 	beq.w	8006228 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <HAL_DMA_IRQHandler+0x3f8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d04a      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <HAL_DMA_IRQHandler+0x3fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d045      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <HAL_DMA_IRQHandler+0x400>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d040      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <HAL_DMA_IRQHandler+0x404>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d03b      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <HAL_DMA_IRQHandler+0x408>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d036      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a24      	ldr	r2, [pc, #144]	; (80061d4 <HAL_DMA_IRQHandler+0x40c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d031      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <HAL_DMA_IRQHandler+0x410>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d02c      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a21      	ldr	r2, [pc, #132]	; (80061dc <HAL_DMA_IRQHandler+0x414>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d027      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <HAL_DMA_IRQHandler+0x418>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <HAL_DMA_IRQHandler+0x41c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <HAL_DMA_IRQHandler+0x420>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_DMA_IRQHandler+0x424>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_DMA_IRQHandler+0x428>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <HAL_DMA_IRQHandler+0x42c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <HAL_DMA_IRQHandler+0x430>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_DMA_IRQHandler+0x3e2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a15      	ldr	r2, [pc, #84]	; (80061fc <HAL_DMA_IRQHandler+0x434>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d12a      	bne.n	8006200 <HAL_DMA_IRQHandler+0x438>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e023      	b.n	8006208 <HAL_DMA_IRQHandler+0x440>
 80061c0:	40020010 	.word	0x40020010
 80061c4:	40020028 	.word	0x40020028
 80061c8:	40020040 	.word	0x40020040
 80061cc:	40020058 	.word	0x40020058
 80061d0:	40020070 	.word	0x40020070
 80061d4:	40020088 	.word	0x40020088
 80061d8:	400200a0 	.word	0x400200a0
 80061dc:	400200b8 	.word	0x400200b8
 80061e0:	40020410 	.word	0x40020410
 80061e4:	40020428 	.word	0x40020428
 80061e8:	40020440 	.word	0x40020440
 80061ec:	40020458 	.word	0x40020458
 80061f0:	40020470 	.word	0x40020470
 80061f4:	40020488 	.word	0x40020488
 80061f8:	400204a0 	.word	0x400204a0
 80061fc:	400204b8 	.word	0x400204b8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2204      	movs	r2, #4
 8006216:	409a      	lsls	r2, r3
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006220:	f043 0204 	orr.w	r2, r3, #4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	2210      	movs	r2, #16
 8006232:	409a      	lsls	r2, r3
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80a6 	beq.w	800638a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a85      	ldr	r2, [pc, #532]	; (8006458 <HAL_DMA_IRQHandler+0x690>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d04a      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a83      	ldr	r2, [pc, #524]	; (800645c <HAL_DMA_IRQHandler+0x694>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d045      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a82      	ldr	r2, [pc, #520]	; (8006460 <HAL_DMA_IRQHandler+0x698>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d040      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a80      	ldr	r2, [pc, #512]	; (8006464 <HAL_DMA_IRQHandler+0x69c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d03b      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a7f      	ldr	r2, [pc, #508]	; (8006468 <HAL_DMA_IRQHandler+0x6a0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d036      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a7d      	ldr	r2, [pc, #500]	; (800646c <HAL_DMA_IRQHandler+0x6a4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d031      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a7c      	ldr	r2, [pc, #496]	; (8006470 <HAL_DMA_IRQHandler+0x6a8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d02c      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a7a      	ldr	r2, [pc, #488]	; (8006474 <HAL_DMA_IRQHandler+0x6ac>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d027      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a79      	ldr	r2, [pc, #484]	; (8006478 <HAL_DMA_IRQHandler+0x6b0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a77      	ldr	r2, [pc, #476]	; (800647c <HAL_DMA_IRQHandler+0x6b4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a76      	ldr	r2, [pc, #472]	; (8006480 <HAL_DMA_IRQHandler+0x6b8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a74      	ldr	r2, [pc, #464]	; (8006484 <HAL_DMA_IRQHandler+0x6bc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a73      	ldr	r2, [pc, #460]	; (8006488 <HAL_DMA_IRQHandler+0x6c0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a71      	ldr	r2, [pc, #452]	; (800648c <HAL_DMA_IRQHandler+0x6c4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a70      	ldr	r2, [pc, #448]	; (8006490 <HAL_DMA_IRQHandler+0x6c8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_DMA_IRQHandler+0x516>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6e      	ldr	r2, [pc, #440]	; (8006494 <HAL_DMA_IRQHandler+0x6cc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10a      	bne.n	80062f4 <HAL_DMA_IRQHandler+0x52c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e009      	b.n	8006308 <HAL_DMA_IRQHandler+0x540>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bf14      	ite	ne
 8006302:	2301      	movne	r3, #1
 8006304:	2300      	moveq	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d03e      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	2210      	movs	r2, #16
 8006316:	409a      	lsls	r2, r3
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d018      	beq.n	800635c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d108      	bne.n	800634a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d024      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
 8006348:	e01f      	b.n	800638a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01b      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	e016      	b.n	800638a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d107      	bne.n	800637a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0208 	bic.w	r2, r2, #8
 8006378:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2220      	movs	r2, #32
 8006394:	409a      	lsls	r2, r3
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8110 	beq.w	80065c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <HAL_DMA_IRQHandler+0x690>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_DMA_IRQHandler+0x694>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a29      	ldr	r2, [pc, #164]	; (8006460 <HAL_DMA_IRQHandler+0x698>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_DMA_IRQHandler+0x69c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a26      	ldr	r2, [pc, #152]	; (8006468 <HAL_DMA_IRQHandler+0x6a0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_DMA_IRQHandler+0x6a4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a23      	ldr	r2, [pc, #140]	; (8006470 <HAL_DMA_IRQHandler+0x6a8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_DMA_IRQHandler+0x6ac>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <HAL_DMA_IRQHandler+0x6b0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1f      	ldr	r2, [pc, #124]	; (800647c <HAL_DMA_IRQHandler+0x6b4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <HAL_DMA_IRQHandler+0x6b8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_DMA_IRQHandler+0x6bc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1a      	ldr	r2, [pc, #104]	; (8006488 <HAL_DMA_IRQHandler+0x6c0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_DMA_IRQHandler+0x6c4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a17      	ldr	r2, [pc, #92]	; (8006490 <HAL_DMA_IRQHandler+0x6c8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_IRQHandler+0x678>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <HAL_DMA_IRQHandler+0x6cc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d12b      	bne.n	8006498 <HAL_DMA_IRQHandler+0x6d0>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e02a      	b.n	80064ac <HAL_DMA_IRQHandler+0x6e4>
 8006456:	bf00      	nop
 8006458:	40020010 	.word	0x40020010
 800645c:	40020028 	.word	0x40020028
 8006460:	40020040 	.word	0x40020040
 8006464:	40020058 	.word	0x40020058
 8006468:	40020070 	.word	0x40020070
 800646c:	40020088 	.word	0x40020088
 8006470:	400200a0 	.word	0x400200a0
 8006474:	400200b8 	.word	0x400200b8
 8006478:	40020410 	.word	0x40020410
 800647c:	40020428 	.word	0x40020428
 8006480:	40020440 	.word	0x40020440
 8006484:	40020458 	.word	0x40020458
 8006488:	40020470 	.word	0x40020470
 800648c:	40020488 	.word	0x40020488
 8006490:	400204a0 	.word	0x400204a0
 8006494:	400204b8 	.word	0x400204b8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8087 	beq.w	80065c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2220      	movs	r2, #32
 80064bc:	409a      	lsls	r2, r3
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d139      	bne.n	8006542 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0216 	bic.w	r2, r2, #22
 80064dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <HAL_DMA_IRQHandler+0x736>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0208 	bic.w	r2, r2, #8
 800650c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	223f      	movs	r2, #63	; 0x3f
 8006518:	409a      	lsls	r2, r3
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 834a 	beq.w	8006bcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
          }
          return;
 8006540:	e344      	b.n	8006bcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d018      	beq.n	8006582 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	2b00      	cmp	r3, #0
 8006564:	d02c      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	e027      	b.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d023      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
 8006580:	e01e      	b.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10f      	bne.n	80065b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0210 	bic.w	r2, r2, #16
 800659e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8306 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8088 	beq.w	80066e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2204      	movs	r2, #4
 80065dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a7a      	ldr	r2, [pc, #488]	; (80067d0 <HAL_DMA_IRQHandler+0xa08>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d04a      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a79      	ldr	r2, [pc, #484]	; (80067d4 <HAL_DMA_IRQHandler+0xa0c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d045      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a77      	ldr	r2, [pc, #476]	; (80067d8 <HAL_DMA_IRQHandler+0xa10>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d040      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a76      	ldr	r2, [pc, #472]	; (80067dc <HAL_DMA_IRQHandler+0xa14>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d03b      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a74      	ldr	r2, [pc, #464]	; (80067e0 <HAL_DMA_IRQHandler+0xa18>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d036      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a73      	ldr	r2, [pc, #460]	; (80067e4 <HAL_DMA_IRQHandler+0xa1c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d031      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a71      	ldr	r2, [pc, #452]	; (80067e8 <HAL_DMA_IRQHandler+0xa20>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02c      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a70      	ldr	r2, [pc, #448]	; (80067ec <HAL_DMA_IRQHandler+0xa24>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d027      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6e      	ldr	r2, [pc, #440]	; (80067f0 <HAL_DMA_IRQHandler+0xa28>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d022      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6d      	ldr	r2, [pc, #436]	; (80067f4 <HAL_DMA_IRQHandler+0xa2c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d01d      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6b      	ldr	r2, [pc, #428]	; (80067f8 <HAL_DMA_IRQHandler+0xa30>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <HAL_DMA_IRQHandler+0xa34>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a68      	ldr	r2, [pc, #416]	; (8006800 <HAL_DMA_IRQHandler+0xa38>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a67      	ldr	r2, [pc, #412]	; (8006804 <HAL_DMA_IRQHandler+0xa3c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a65      	ldr	r2, [pc, #404]	; (8006808 <HAL_DMA_IRQHandler+0xa40>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_DMA_IRQHandler+0x8b8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a64      	ldr	r2, [pc, #400]	; (800680c <HAL_DMA_IRQHandler+0xa44>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <HAL_DMA_IRQHandler+0x8ca>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e007      	b.n	80066a2 <HAL_DMA_IRQHandler+0x8da>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d307      	bcc.n	80066be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f2      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x8da>
 80066bc:	e000      	b.n	80066c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2203      	movs	r2, #3
 80066d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066d6:	e003      	b.n	80066e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8272 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
 80066fa:	e26c      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a43      	ldr	r2, [pc, #268]	; (8006810 <HAL_DMA_IRQHandler+0xa48>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d022      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a42      	ldr	r2, [pc, #264]	; (8006814 <HAL_DMA_IRQHandler+0xa4c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d01d      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a40      	ldr	r2, [pc, #256]	; (8006818 <HAL_DMA_IRQHandler+0xa50>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d018      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a3f      	ldr	r2, [pc, #252]	; (800681c <HAL_DMA_IRQHandler+0xa54>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <HAL_DMA_IRQHandler+0xa58>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00e      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3c      	ldr	r2, [pc, #240]	; (8006824 <HAL_DMA_IRQHandler+0xa5c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3a      	ldr	r2, [pc, #232]	; (8006828 <HAL_DMA_IRQHandler+0xa60>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <HAL_DMA_IRQHandler+0x984>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a39      	ldr	r2, [pc, #228]	; (800682c <HAL_DMA_IRQHandler+0xa64>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d101      	bne.n	8006750 <HAL_DMA_IRQHandler+0x988>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_DMA_IRQHandler+0x98a>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 823f 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2204      	movs	r2, #4
 800676a:	409a      	lsls	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80cd 	beq.w	8006910 <HAL_DMA_IRQHandler+0xb48>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80c7 	beq.w	8006910 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2204      	movs	r2, #4
 800678c:	409a      	lsls	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d049      	beq.n	8006830 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8210 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b8:	e20a      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8206 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067cc:	e200      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xe08>
 80067ce:	bf00      	nop
 80067d0:	40020010 	.word	0x40020010
 80067d4:	40020028 	.word	0x40020028
 80067d8:	40020040 	.word	0x40020040
 80067dc:	40020058 	.word	0x40020058
 80067e0:	40020070 	.word	0x40020070
 80067e4:	40020088 	.word	0x40020088
 80067e8:	400200a0 	.word	0x400200a0
 80067ec:	400200b8 	.word	0x400200b8
 80067f0:	40020410 	.word	0x40020410
 80067f4:	40020428 	.word	0x40020428
 80067f8:	40020440 	.word	0x40020440
 80067fc:	40020458 	.word	0x40020458
 8006800:	40020470 	.word	0x40020470
 8006804:	40020488 	.word	0x40020488
 8006808:	400204a0 	.word	0x400204a0
 800680c:	400204b8 	.word	0x400204b8
 8006810:	58025408 	.word	0x58025408
 8006814:	5802541c 	.word	0x5802541c
 8006818:	58025430 	.word	0x58025430
 800681c:	58025444 	.word	0x58025444
 8006820:	58025458 	.word	0x58025458
 8006824:	5802546c 	.word	0x5802546c
 8006828:	58025480 	.word	0x58025480
 800682c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d160      	bne.n	80068fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7f      	ldr	r2, [pc, #508]	; (8006a3c <HAL_DMA_IRQHandler+0xc74>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d04a      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7d      	ldr	r2, [pc, #500]	; (8006a40 <HAL_DMA_IRQHandler+0xc78>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d045      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a7c      	ldr	r2, [pc, #496]	; (8006a44 <HAL_DMA_IRQHandler+0xc7c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d040      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a7a      	ldr	r2, [pc, #488]	; (8006a48 <HAL_DMA_IRQHandler+0xc80>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d03b      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a79      	ldr	r2, [pc, #484]	; (8006a4c <HAL_DMA_IRQHandler+0xc84>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d036      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a77      	ldr	r2, [pc, #476]	; (8006a50 <HAL_DMA_IRQHandler+0xc88>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d031      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a76      	ldr	r2, [pc, #472]	; (8006a54 <HAL_DMA_IRQHandler+0xc8c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d02c      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a74      	ldr	r2, [pc, #464]	; (8006a58 <HAL_DMA_IRQHandler+0xc90>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d027      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a73      	ldr	r2, [pc, #460]	; (8006a5c <HAL_DMA_IRQHandler+0xc94>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a71      	ldr	r2, [pc, #452]	; (8006a60 <HAL_DMA_IRQHandler+0xc98>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a70      	ldr	r2, [pc, #448]	; (8006a64 <HAL_DMA_IRQHandler+0xc9c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a6e      	ldr	r2, [pc, #440]	; (8006a68 <HAL_DMA_IRQHandler+0xca0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a6d      	ldr	r2, [pc, #436]	; (8006a6c <HAL_DMA_IRQHandler+0xca4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a6b      	ldr	r2, [pc, #428]	; (8006a70 <HAL_DMA_IRQHandler+0xca8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a6a      	ldr	r2, [pc, #424]	; (8006a74 <HAL_DMA_IRQHandler+0xcac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_IRQHandler+0xb12>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a68      	ldr	r2, [pc, #416]	; (8006a78 <HAL_DMA_IRQHandler+0xcb0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d108      	bne.n	80068ec <HAL_DMA_IRQHandler+0xb24>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0208 	bic.w	r2, r2, #8
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e007      	b.n	80068fc <HAL_DMA_IRQHandler+0xb34>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0204 	bic.w	r2, r2, #4
 80068fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8165 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800690e:	e15f      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2202      	movs	r2, #2
 800691a:	409a      	lsls	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80c5 	beq.w	8006ab0 <HAL_DMA_IRQHandler+0xce8>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80bf 	beq.w	8006ab0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2202      	movs	r2, #2
 800693c:	409a      	lsls	r2, r3
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d018      	beq.n	800697e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 813a 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006968:	e134      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8130 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800697c:	e12a      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 8089 	bne.w	8006a9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <HAL_DMA_IRQHandler+0xc74>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d04a      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a29      	ldr	r2, [pc, #164]	; (8006a40 <HAL_DMA_IRQHandler+0xc78>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d045      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a28      	ldr	r2, [pc, #160]	; (8006a44 <HAL_DMA_IRQHandler+0xc7c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d040      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a26      	ldr	r2, [pc, #152]	; (8006a48 <HAL_DMA_IRQHandler+0xc80>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d03b      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <HAL_DMA_IRQHandler+0xc84>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d036      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a23      	ldr	r2, [pc, #140]	; (8006a50 <HAL_DMA_IRQHandler+0xc88>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d031      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a22      	ldr	r2, [pc, #136]	; (8006a54 <HAL_DMA_IRQHandler+0xc8c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d02c      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a20      	ldr	r2, [pc, #128]	; (8006a58 <HAL_DMA_IRQHandler+0xc90>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d027      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <HAL_DMA_IRQHandler+0xc94>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1d      	ldr	r2, [pc, #116]	; (8006a60 <HAL_DMA_IRQHandler+0xc98>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01d      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <HAL_DMA_IRQHandler+0xc9c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1a      	ldr	r2, [pc, #104]	; (8006a68 <HAL_DMA_IRQHandler+0xca0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <HAL_DMA_IRQHandler+0xca4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a17      	ldr	r2, [pc, #92]	; (8006a70 <HAL_DMA_IRQHandler+0xca8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a16      	ldr	r2, [pc, #88]	; (8006a74 <HAL_DMA_IRQHandler+0xcac>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xc62>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <HAL_DMA_IRQHandler+0xcb0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d128      	bne.n	8006a7c <HAL_DMA_IRQHandler+0xcb4>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0214 	bic.w	r2, r2, #20
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e027      	b.n	8006a8c <HAL_DMA_IRQHandler+0xcc4>
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 020a 	bic.w	r2, r2, #10
 8006a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8097 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aae:	e091      	b.n	8006bd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	2208      	movs	r2, #8
 8006aba:	409a      	lsls	r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8088 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8082 	beq.w	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	; (8006bdc <HAL_DMA_IRQHandler+0xe14>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d04a      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a3f      	ldr	r2, [pc, #252]	; (8006be0 <HAL_DMA_IRQHandler+0xe18>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d045      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a3e      	ldr	r2, [pc, #248]	; (8006be4 <HAL_DMA_IRQHandler+0xe1c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d040      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a3c      	ldr	r2, [pc, #240]	; (8006be8 <HAL_DMA_IRQHandler+0xe20>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d03b      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a3b      	ldr	r2, [pc, #236]	; (8006bec <HAL_DMA_IRQHandler+0xe24>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d036      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a39      	ldr	r2, [pc, #228]	; (8006bf0 <HAL_DMA_IRQHandler+0xe28>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d031      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a38      	ldr	r2, [pc, #224]	; (8006bf4 <HAL_DMA_IRQHandler+0xe2c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d02c      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a36      	ldr	r2, [pc, #216]	; (8006bf8 <HAL_DMA_IRQHandler+0xe30>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d027      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a35      	ldr	r2, [pc, #212]	; (8006bfc <HAL_DMA_IRQHandler+0xe34>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d022      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <HAL_DMA_IRQHandler+0xe38>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d01d      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a32      	ldr	r2, [pc, #200]	; (8006c04 <HAL_DMA_IRQHandler+0xe3c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d018      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a30      	ldr	r2, [pc, #192]	; (8006c08 <HAL_DMA_IRQHandler+0xe40>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <HAL_DMA_IRQHandler+0xe44>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00e      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <HAL_DMA_IRQHandler+0xe48>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2c      	ldr	r2, [pc, #176]	; (8006c14 <HAL_DMA_IRQHandler+0xe4c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_DMA_IRQHandler+0xdaa>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <HAL_DMA_IRQHandler+0xe50>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d108      	bne.n	8006b84 <HAL_DMA_IRQHandler+0xdbc>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 021c 	bic.w	r2, r2, #28
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e007      	b.n	8006b94 <HAL_DMA_IRQHandler+0xdcc>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 020e 	bic.w	r2, r2, #14
 8006b92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	e004      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bcc:	bf00      	nop
 8006bce:	e002      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bd6:	3728      	adds	r7, #40	; 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40020010 	.word	0x40020010
 8006be0:	40020028 	.word	0x40020028
 8006be4:	40020040 	.word	0x40020040
 8006be8:	40020058 	.word	0x40020058
 8006bec:	40020070 	.word	0x40020070
 8006bf0:	40020088 	.word	0x40020088
 8006bf4:	400200a0 	.word	0x400200a0
 8006bf8:	400200b8 	.word	0x400200b8
 8006bfc:	40020410 	.word	0x40020410
 8006c00:	40020428 	.word	0x40020428
 8006c04:	40020440 	.word	0x40020440
 8006c08:	40020458 	.word	0x40020458
 8006c0c:	40020470 	.word	0x40020470
 8006c10:	40020488 	.word	0x40020488
 8006c14:	400204a0 	.word	0x400204a0
 8006c18:	400204b8 	.word	0x400204b8

08006c1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a7f      	ldr	r2, [pc, #508]	; (8006e38 <DMA_SetConfig+0x21c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d072      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a7d      	ldr	r2, [pc, #500]	; (8006e3c <DMA_SetConfig+0x220>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d06d      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7c      	ldr	r2, [pc, #496]	; (8006e40 <DMA_SetConfig+0x224>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d068      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a7a      	ldr	r2, [pc, #488]	; (8006e44 <DMA_SetConfig+0x228>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d063      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a79      	ldr	r2, [pc, #484]	; (8006e48 <DMA_SetConfig+0x22c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d05e      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a77      	ldr	r2, [pc, #476]	; (8006e4c <DMA_SetConfig+0x230>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d059      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a76      	ldr	r2, [pc, #472]	; (8006e50 <DMA_SetConfig+0x234>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d054      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a74      	ldr	r2, [pc, #464]	; (8006e54 <DMA_SetConfig+0x238>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d04f      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a73      	ldr	r2, [pc, #460]	; (8006e58 <DMA_SetConfig+0x23c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d04a      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a71      	ldr	r2, [pc, #452]	; (8006e5c <DMA_SetConfig+0x240>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d045      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a70      	ldr	r2, [pc, #448]	; (8006e60 <DMA_SetConfig+0x244>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d040      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a6e      	ldr	r2, [pc, #440]	; (8006e64 <DMA_SetConfig+0x248>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d03b      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a6d      	ldr	r2, [pc, #436]	; (8006e68 <DMA_SetConfig+0x24c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d036      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a6b      	ldr	r2, [pc, #428]	; (8006e6c <DMA_SetConfig+0x250>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d031      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a6a      	ldr	r2, [pc, #424]	; (8006e70 <DMA_SetConfig+0x254>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d02c      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <DMA_SetConfig+0x258>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d027      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a67      	ldr	r2, [pc, #412]	; (8006e78 <DMA_SetConfig+0x25c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d022      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a65      	ldr	r2, [pc, #404]	; (8006e7c <DMA_SetConfig+0x260>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01d      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a64      	ldr	r2, [pc, #400]	; (8006e80 <DMA_SetConfig+0x264>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a62      	ldr	r2, [pc, #392]	; (8006e84 <DMA_SetConfig+0x268>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a61      	ldr	r2, [pc, #388]	; (8006e88 <DMA_SetConfig+0x26c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00e      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a5f      	ldr	r2, [pc, #380]	; (8006e8c <DMA_SetConfig+0x270>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d009      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a5e      	ldr	r2, [pc, #376]	; (8006e90 <DMA_SetConfig+0x274>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <DMA_SetConfig+0x10a>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a5c      	ldr	r2, [pc, #368]	; (8006e94 <DMA_SetConfig+0x278>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d101      	bne.n	8006d2a <DMA_SetConfig+0x10e>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <DMA_SetConfig+0x110>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00d      	beq.n	8006d4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a39      	ldr	r2, [pc, #228]	; (8006e38 <DMA_SetConfig+0x21c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d04a      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <DMA_SetConfig+0x220>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d045      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a36      	ldr	r2, [pc, #216]	; (8006e40 <DMA_SetConfig+0x224>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d040      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a35      	ldr	r2, [pc, #212]	; (8006e44 <DMA_SetConfig+0x228>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d03b      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <DMA_SetConfig+0x22c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d036      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <DMA_SetConfig+0x230>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d031      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <DMA_SetConfig+0x234>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02c      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <DMA_SetConfig+0x238>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d027      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <DMA_SetConfig+0x23c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d022      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <DMA_SetConfig+0x240>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01d      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <DMA_SetConfig+0x244>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <DMA_SetConfig+0x248>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <DMA_SetConfig+0x24c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a26      	ldr	r2, [pc, #152]	; (8006e6c <DMA_SetConfig+0x250>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <DMA_SetConfig+0x254>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <DMA_SetConfig+0x1d0>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <DMA_SetConfig+0x258>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d101      	bne.n	8006df0 <DMA_SetConfig+0x1d4>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <DMA_SetConfig+0x1d6>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d059      	beq.n	8006eaa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	223f      	movs	r2, #63	; 0x3f
 8006e00:	409a      	lsls	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d138      	bne.n	8006e98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e36:	e086      	b.n	8006f46 <DMA_SetConfig+0x32a>
 8006e38:	40020010 	.word	0x40020010
 8006e3c:	40020028 	.word	0x40020028
 8006e40:	40020040 	.word	0x40020040
 8006e44:	40020058 	.word	0x40020058
 8006e48:	40020070 	.word	0x40020070
 8006e4c:	40020088 	.word	0x40020088
 8006e50:	400200a0 	.word	0x400200a0
 8006e54:	400200b8 	.word	0x400200b8
 8006e58:	40020410 	.word	0x40020410
 8006e5c:	40020428 	.word	0x40020428
 8006e60:	40020440 	.word	0x40020440
 8006e64:	40020458 	.word	0x40020458
 8006e68:	40020470 	.word	0x40020470
 8006e6c:	40020488 	.word	0x40020488
 8006e70:	400204a0 	.word	0x400204a0
 8006e74:	400204b8 	.word	0x400204b8
 8006e78:	58025408 	.word	0x58025408
 8006e7c:	5802541c 	.word	0x5802541c
 8006e80:	58025430 	.word	0x58025430
 8006e84:	58025444 	.word	0x58025444
 8006e88:	58025458 	.word	0x58025458
 8006e8c:	5802546c 	.word	0x5802546c
 8006e90:	58025480 	.word	0x58025480
 8006e94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
}
 8006ea8:	e04d      	b.n	8006f46 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <DMA_SetConfig+0x338>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d022      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a27      	ldr	r2, [pc, #156]	; (8006f58 <DMA_SetConfig+0x33c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01d      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <DMA_SetConfig+0x340>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a24      	ldr	r2, [pc, #144]	; (8006f60 <DMA_SetConfig+0x344>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a23      	ldr	r2, [pc, #140]	; (8006f64 <DMA_SetConfig+0x348>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <DMA_SetConfig+0x34c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <DMA_SetConfig+0x350>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <DMA_SetConfig+0x2de>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <DMA_SetConfig+0x354>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <DMA_SetConfig+0x2e2>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <DMA_SetConfig+0x2e4>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d020      	beq.n	8006f46 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d108      	bne.n	8006f36 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	60da      	str	r2, [r3, #12]
}
 8006f34:	e007      	b.n	8006f46 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	60da      	str	r2, [r3, #12]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	58025408 	.word	0x58025408
 8006f58:	5802541c 	.word	0x5802541c
 8006f5c:	58025430 	.word	0x58025430
 8006f60:	58025444 	.word	0x58025444
 8006f64:	58025458 	.word	0x58025458
 8006f68:	5802546c 	.word	0x5802546c
 8006f6c:	58025480 	.word	0x58025480
 8006f70:	58025494 	.word	0x58025494

08006f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a42      	ldr	r2, [pc, #264]	; (800708c <DMA_CalcBaseAndBitshift+0x118>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d04a      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a41      	ldr	r2, [pc, #260]	; (8007090 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d045      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a3f      	ldr	r2, [pc, #252]	; (8007094 <DMA_CalcBaseAndBitshift+0x120>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d040      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a3e      	ldr	r2, [pc, #248]	; (8007098 <DMA_CalcBaseAndBitshift+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d03b      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a3c      	ldr	r2, [pc, #240]	; (800709c <DMA_CalcBaseAndBitshift+0x128>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d036      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a3b      	ldr	r2, [pc, #236]	; (80070a0 <DMA_CalcBaseAndBitshift+0x12c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d031      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a39      	ldr	r2, [pc, #228]	; (80070a4 <DMA_CalcBaseAndBitshift+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02c      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <DMA_CalcBaseAndBitshift+0x134>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d027      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a36      	ldr	r2, [pc, #216]	; (80070ac <DMA_CalcBaseAndBitshift+0x138>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d022      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d01d      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <DMA_CalcBaseAndBitshift+0x140>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d018      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a32      	ldr	r2, [pc, #200]	; (80070b8 <DMA_CalcBaseAndBitshift+0x144>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a30      	ldr	r2, [pc, #192]	; (80070bc <DMA_CalcBaseAndBitshift+0x148>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00e      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d009      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <DMA_CalcBaseAndBitshift+0x150>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <DMA_CalcBaseAndBitshift+0xa8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <DMA_CalcBaseAndBitshift+0x154>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d101      	bne.n	8007020 <DMA_CalcBaseAndBitshift+0xac>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <DMA_CalcBaseAndBitshift+0xae>
 8007020:	2300      	movs	r3, #0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d024      	beq.n	8007070 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	3b10      	subs	r3, #16
 800702e:	4a27      	ldr	r2, [pc, #156]	; (80070cc <DMA_CalcBaseAndBitshift+0x158>)
 8007030:	fba2 2303 	umull	r2, r3, r2, r3
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007040:	5cd3      	ldrb	r3, [r2, r3]
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d908      	bls.n	8007060 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007056:	4013      	ands	r3, r2
 8007058:	1d1a      	adds	r2, r3, #4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	659a      	str	r2, [r3, #88]	; 0x58
 800705e:	e00d      	b.n	800707c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	4b1b      	ldr	r3, [pc, #108]	; (80070d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007068:	4013      	ands	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6593      	str	r3, [r2, #88]	; 0x58
 800706e:	e005      	b.n	800707c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40020010 	.word	0x40020010
 8007090:	40020028 	.word	0x40020028
 8007094:	40020040 	.word	0x40020040
 8007098:	40020058 	.word	0x40020058
 800709c:	40020070 	.word	0x40020070
 80070a0:	40020088 	.word	0x40020088
 80070a4:	400200a0 	.word	0x400200a0
 80070a8:	400200b8 	.word	0x400200b8
 80070ac:	40020410 	.word	0x40020410
 80070b0:	40020428 	.word	0x40020428
 80070b4:	40020440 	.word	0x40020440
 80070b8:	40020458 	.word	0x40020458
 80070bc:	40020470 	.word	0x40020470
 80070c0:	40020488 	.word	0x40020488
 80070c4:	400204a0 	.word	0x400204a0
 80070c8:	400204b8 	.word	0x400204b8
 80070cc:	aaaaaaab 	.word	0xaaaaaaab
 80070d0:	08010318 	.word	0x08010318
 80070d4:	fffffc00 	.word	0xfffffc00

080070d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d120      	bne.n	800712e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d858      	bhi.n	80071a6 <DMA_CheckFifoParam+0xce>
 80070f4:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <DMA_CheckFifoParam+0x24>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	0800711f 	.word	0x0800711f
 8007104:	0800710d 	.word	0x0800710d
 8007108:	080071a7 	.word	0x080071a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d048      	beq.n	80071aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800711c:	e045      	b.n	80071aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007126:	d142      	bne.n	80071ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800712c:	e03f      	b.n	80071ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007136:	d123      	bne.n	8007180 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	2b03      	cmp	r3, #3
 800713e:	d838      	bhi.n	80071b2 <DMA_CheckFifoParam+0xda>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <DMA_CheckFifoParam+0x70>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007159 	.word	0x08007159
 800714c:	0800715f 	.word	0x0800715f
 8007150:	08007159 	.word	0x08007159
 8007154:	08007171 	.word	0x08007171
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
        break;
 800715c:	e030      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d025      	beq.n	80071b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800716e:	e022      	b.n	80071b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007178:	d11f      	bne.n	80071ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800717e:	e01c      	b.n	80071ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	2b02      	cmp	r3, #2
 8007186:	d902      	bls.n	800718e <DMA_CheckFifoParam+0xb6>
 8007188:	2b03      	cmp	r3, #3
 800718a:	d003      	beq.n	8007194 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800718c:	e018      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]
        break;
 8007192:	e015      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
    break;
 80071a4:	e00b      	b.n	80071be <DMA_CheckFifoParam+0xe6>
        break;
 80071a6:	bf00      	nop
 80071a8:	e00a      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        break;
 80071aa:	bf00      	nop
 80071ac:	e008      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        break;
 80071ae:	bf00      	nop
 80071b0:	e006      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        break;
 80071b2:	bf00      	nop
 80071b4:	e004      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        break;
 80071b6:	bf00      	nop
 80071b8:	e002      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
        break;
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <DMA_CheckFifoParam+0xe8>
    break;
 80071be:	bf00      	nop
    }
  }

  return status;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop

080071d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a38      	ldr	r2, [pc, #224]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d022      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a36      	ldr	r2, [pc, #216]	; (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01d      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a35      	ldr	r2, [pc, #212]	; (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d018      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a33      	ldr	r2, [pc, #204]	; (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a32      	ldr	r2, [pc, #200]	; (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00e      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a30      	ldr	r2, [pc, #192]	; (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d009      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2d      	ldr	r2, [pc, #180]	; (80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d101      	bne.n	8007232 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01a      	beq.n	800726e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3b08      	subs	r3, #8
 8007240:	4a28      	ldr	r2, [pc, #160]	; (80072e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007242:	fba2 2303 	umull	r2, r3, r2, r3
 8007246:	091b      	lsrs	r3, r3, #4
 8007248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a24      	ldr	r2, [pc, #144]	; (80072ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800725c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	2201      	movs	r2, #1
 8007266:	409a      	lsls	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800726c:	e024      	b.n	80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	3b10      	subs	r3, #16
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007278:	fba2 2303 	umull	r2, r3, r2, r3
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d806      	bhi.n	8007296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d902      	bls.n	8007296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3308      	adds	r3, #8
 8007294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4b18      	ldr	r3, [pc, #96]	; (80072fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a16      	ldr	r2, [pc, #88]	; (8007300 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2201      	movs	r2, #1
 80072b2:	409a      	lsls	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	58025408 	.word	0x58025408
 80072c8:	5802541c 	.word	0x5802541c
 80072cc:	58025430 	.word	0x58025430
 80072d0:	58025444 	.word	0x58025444
 80072d4:	58025458 	.word	0x58025458
 80072d8:	5802546c 	.word	0x5802546c
 80072dc:	58025480 	.word	0x58025480
 80072e0:	58025494 	.word	0x58025494
 80072e4:	cccccccd 	.word	0xcccccccd
 80072e8:	16009600 	.word	0x16009600
 80072ec:	58025880 	.word	0x58025880
 80072f0:	aaaaaaab 	.word	0xaaaaaaab
 80072f4:	400204b8 	.word	0x400204b8
 80072f8:	4002040f 	.word	0x4002040f
 80072fc:	10008200 	.word	0x10008200
 8007300:	40020880 	.word	0x40020880

08007304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04a      	beq.n	80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d847      	bhi.n	80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a25      	ldr	r2, [pc, #148]	; (80073bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d022      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d01d      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d018      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1f      	ldr	r2, [pc, #124]	; (80073cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00e      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d009      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d101      	bne.n	8007374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4b17      	ldr	r3, [pc, #92]	; (80073dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800738c:	671a      	str	r2, [r3, #112]	; 0x70
 800738e:	e009      	b.n	80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	461a      	mov	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80073a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2201      	movs	r2, #1
 80073aa:	409a      	lsls	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80073b0:	bf00      	nop
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	58025408 	.word	0x58025408
 80073c0:	5802541c 	.word	0x5802541c
 80073c4:	58025430 	.word	0x58025430
 80073c8:	58025444 	.word	0x58025444
 80073cc:	58025458 	.word	0x58025458
 80073d0:	5802546c 	.word	0x5802546c
 80073d4:	58025480 	.word	0x58025480
 80073d8:	58025494 	.word	0x58025494
 80073dc:	1600963f 	.word	0x1600963f
 80073e0:	58025940 	.word	0x58025940
 80073e4:	1000823f 	.word	0x1000823f
 80073e8:	40020940 	.word	0x40020940

080073ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073fa:	4b89      	ldr	r3, [pc, #548]	; (8007620 <HAL_GPIO_Init+0x234>)
 80073fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073fe:	e194      	b.n	800772a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	2101      	movs	r1, #1
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	fa01 f303 	lsl.w	r3, r1, r3
 800740c:	4013      	ands	r3, r2
 800740e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8186 	beq.w	8007724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d005      	beq.n	8007430 <HAL_GPIO_Init+0x44>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d130      	bne.n	8007492 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	2203      	movs	r2, #3
 800743c:	fa02 f303 	lsl.w	r3, r2, r3
 8007440:	43db      	mvns	r3, r3
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	4013      	ands	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	4313      	orrs	r3, r2
 8007458:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007466:	2201      	movs	r2, #1
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 0201 	and.w	r2, r3, #1
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4313      	orrs	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d017      	beq.n	80074ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	2203      	movs	r2, #3
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d123      	bne.n	8007522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	08da      	lsrs	r2, r3, #3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3208      	adds	r2, #8
 80074e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	220f      	movs	r2, #15
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	08da      	lsrs	r2, r3, #3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3208      	adds	r2, #8
 800751c:	69b9      	ldr	r1, [r7, #24]
 800751e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	2203      	movs	r2, #3
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43db      	mvns	r3, r3
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	4013      	ands	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f003 0203 	and.w	r2, r3, #3
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80e0 	beq.w	8007724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007564:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <HAL_GPIO_Init+0x238>)
 8007566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800756a:	4a2e      	ldr	r2, [pc, #184]	; (8007624 <HAL_GPIO_Init+0x238>)
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007574:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <HAL_GPIO_Init+0x238>)
 8007576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007582:	4a29      	ldr	r2, [pc, #164]	; (8007628 <HAL_GPIO_Init+0x23c>)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	089b      	lsrs	r3, r3, #2
 8007588:	3302      	adds	r3, #2
 800758a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	220f      	movs	r2, #15
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	43db      	mvns	r3, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	4013      	ands	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a20      	ldr	r2, [pc, #128]	; (800762c <HAL_GPIO_Init+0x240>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d052      	beq.n	8007654 <HAL_GPIO_Init+0x268>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <HAL_GPIO_Init+0x244>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d031      	beq.n	800761a <HAL_GPIO_Init+0x22e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <HAL_GPIO_Init+0x248>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d02b      	beq.n	8007616 <HAL_GPIO_Init+0x22a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <HAL_GPIO_Init+0x24c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d025      	beq.n	8007612 <HAL_GPIO_Init+0x226>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1c      	ldr	r2, [pc, #112]	; (800763c <HAL_GPIO_Init+0x250>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01f      	beq.n	800760e <HAL_GPIO_Init+0x222>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <HAL_GPIO_Init+0x254>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d019      	beq.n	800760a <HAL_GPIO_Init+0x21e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <HAL_GPIO_Init+0x258>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d013      	beq.n	8007606 <HAL_GPIO_Init+0x21a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a19      	ldr	r2, [pc, #100]	; (8007648 <HAL_GPIO_Init+0x25c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00d      	beq.n	8007602 <HAL_GPIO_Init+0x216>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a18      	ldr	r2, [pc, #96]	; (800764c <HAL_GPIO_Init+0x260>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <HAL_GPIO_Init+0x212>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a17      	ldr	r2, [pc, #92]	; (8007650 <HAL_GPIO_Init+0x264>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d101      	bne.n	80075fa <HAL_GPIO_Init+0x20e>
 80075f6:	2309      	movs	r3, #9
 80075f8:	e02d      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 80075fa:	230a      	movs	r3, #10
 80075fc:	e02b      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 80075fe:	2308      	movs	r3, #8
 8007600:	e029      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 8007602:	2307      	movs	r3, #7
 8007604:	e027      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 8007606:	2306      	movs	r3, #6
 8007608:	e025      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 800760a:	2305      	movs	r3, #5
 800760c:	e023      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 800760e:	2304      	movs	r3, #4
 8007610:	e021      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 8007612:	2303      	movs	r3, #3
 8007614:	e01f      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 8007616:	2302      	movs	r3, #2
 8007618:	e01d      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 800761a:	2301      	movs	r3, #1
 800761c:	e01b      	b.n	8007656 <HAL_GPIO_Init+0x26a>
 800761e:	bf00      	nop
 8007620:	58000080 	.word	0x58000080
 8007624:	58024400 	.word	0x58024400
 8007628:	58000400 	.word	0x58000400
 800762c:	58020000 	.word	0x58020000
 8007630:	58020400 	.word	0x58020400
 8007634:	58020800 	.word	0x58020800
 8007638:	58020c00 	.word	0x58020c00
 800763c:	58021000 	.word	0x58021000
 8007640:	58021400 	.word	0x58021400
 8007644:	58021800 	.word	0x58021800
 8007648:	58021c00 	.word	0x58021c00
 800764c:	58022000 	.word	0x58022000
 8007650:	58022400 	.word	0x58022400
 8007654:	2300      	movs	r3, #0
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	f002 0203 	and.w	r2, r2, #3
 800765c:	0092      	lsls	r2, r2, #2
 800765e:	4093      	lsls	r3, r2
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4313      	orrs	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007666:	4938      	ldr	r1, [pc, #224]	; (8007748 <HAL_GPIO_Init+0x35c>)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	089b      	lsrs	r3, r3, #2
 800766c:	3302      	adds	r3, #2
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	43db      	mvns	r3, r3
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	4013      	ands	r3, r2
 8007684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800769a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	4013      	ands	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	43db      	mvns	r3, r3
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4013      	ands	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	43db      	mvns	r3, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3301      	adds	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f ae63 	bne.w	8007400 <HAL_GPIO_Init+0x14>
  }
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	3724      	adds	r7, #36	; 0x24
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	58000400 	.word	0x58000400

0800774c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	887b      	ldrh	r3, [r7, #2]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
 8007768:	e001      	b.n	800776e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	807b      	strh	r3, [r7, #2]
 8007788:	4613      	mov	r3, r2
 800778a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800778c:	787b      	ldrb	r3, [r7, #1]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007792:	887a      	ldrh	r2, [r7, #2]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007798:	e003      	b.n	80077a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800779a:	887b      	ldrh	r3, [r7, #2]
 800779c:	041a      	lsls	r2, r3, #16
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	619a      	str	r2, [r3, #24]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e08b      	b.n	80078da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fa fa58 	bl	8001c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2224      	movs	r2, #36	; 0x24
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007800:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007810:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d107      	bne.n	800782a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	e006      	b.n	8007838 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007836:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d108      	bne.n	8007852 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800784e:	605a      	str	r2, [r3, #4]
 8007850:	e007      	b.n	8007862 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6859      	ldr	r1, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <HAL_I2C_Init+0x134>)
 800786e:	430b      	orrs	r3, r1
 8007870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1a      	ldr	r2, [r3, #32]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	02008000 	.word	0x02008000

080078e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d138      	bne.n	8007970 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007908:	2302      	movs	r3, #2
 800790a:	e032      	b.n	8007972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	; 0x24
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800793a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6819      	ldr	r1, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b20      	cmp	r3, #32
 8007992:	d139      	bne.n	8007a08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800799e:	2302      	movs	r3, #2
 80079a0:	e033      	b.n	8007a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2224      	movs	r2, #36	; 0x24
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0201 	bic.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007a24:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <HAL_PWR_EnterSTOPMode+0x70>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f023 0201 	bic.w	r2, r3, #1
 8007a2c:	4916      	ldr	r1, [pc, #88]	; (8007a88 <HAL_PWR_EnterSTOPMode+0x70>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007a34:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <HAL_PWR_EnterSTOPMode+0x70>)
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	4a13      	ldr	r2, [pc, #76]	; (8007a88 <HAL_PWR_EnterSTOPMode+0x70>)
 8007a3a:	f023 0305 	bic.w	r3, r3, #5
 8007a3e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8007a40:	4b11      	ldr	r3, [pc, #68]	; (8007a88 <HAL_PWR_EnterSTOPMode+0x70>)
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <HAL_PWR_EnterSTOPMode+0x70>)
 8007a46:	f023 0302 	bic.w	r3, r3, #2
 8007a4a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <HAL_PWR_EnterSTOPMode+0x74>)
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	4a0e      	ldr	r2, [pc, #56]	; (8007a8c <HAL_PWR_EnterSTOPMode+0x74>)
 8007a52:	f043 0304 	orr.w	r3, r3, #4
 8007a56:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a58:	f3bf 8f4f 	dsb	sy
}
 8007a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a5e:	f3bf 8f6f 	isb	sy
}
 8007a62:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8007a6a:	bf30      	wfi
 8007a6c:	e000      	b.n	8007a70 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8007a6e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007a70:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <HAL_PWR_EnterSTOPMode+0x74>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	4a05      	ldr	r2, [pc, #20]	; (8007a8c <HAL_PWR_EnterSTOPMode+0x74>)
 8007a76:	f023 0304 	bic.w	r3, r3, #4
 8007a7a:	6113      	str	r3, [r2, #16]
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	58024800 	.word	0x58024800
 8007a8c:	e000ed00 	.word	0xe000ed00

08007a90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a98:	4b19      	ldr	r3, [pc, #100]	; (8007b00 <HAL_PWREx_ConfigSupply+0x70>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d00a      	beq.n	8007aba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007aa4:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <HAL_PWREx_ConfigSupply+0x70>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d001      	beq.n	8007ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e01f      	b.n	8007af6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e01d      	b.n	8007af6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007aba:	4b11      	ldr	r3, [pc, #68]	; (8007b00 <HAL_PWREx_ConfigSupply+0x70>)
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f023 0207 	bic.w	r2, r3, #7
 8007ac2:	490f      	ldr	r1, [pc, #60]	; (8007b00 <HAL_PWREx_ConfigSupply+0x70>)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007aca:	f7fa fd57 	bl	800257c <HAL_GetTick>
 8007ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ad0:	e009      	b.n	8007ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ad2:	f7fa fd53 	bl	800257c <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae0:	d901      	bls.n	8007ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e007      	b.n	8007af6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <HAL_PWREx_ConfigSupply+0x70>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af2:	d1ee      	bne.n	8007ad2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	58024800 	.word	0x58024800

08007b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08c      	sub	sp, #48	; 0x30
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f000 bc48 	b.w	80083a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 8088 	beq.w	8007c36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b26:	4b99      	ldr	r3, [pc, #612]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b30:	4b96      	ldr	r3, [pc, #600]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d007      	beq.n	8007b4c <HAL_RCC_OscConfig+0x48>
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	2b18      	cmp	r3, #24
 8007b40:	d111      	bne.n	8007b66 <HAL_RCC_OscConfig+0x62>
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d10c      	bne.n	8007b66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b4c:	4b8f      	ldr	r3, [pc, #572]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d06d      	beq.n	8007c34 <HAL_RCC_OscConfig+0x130>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d169      	bne.n	8007c34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f000 bc21 	b.w	80083a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6e:	d106      	bne.n	8007b7e <HAL_RCC_OscConfig+0x7a>
 8007b70:	4b86      	ldr	r3, [pc, #536]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a85      	ldr	r2, [pc, #532]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	e02e      	b.n	8007bdc <HAL_RCC_OscConfig+0xd8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10c      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x9c>
 8007b86:	4b81      	ldr	r3, [pc, #516]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a80      	ldr	r2, [pc, #512]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	4b7e      	ldr	r3, [pc, #504]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a7d      	ldr	r2, [pc, #500]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	e01d      	b.n	8007bdc <HAL_RCC_OscConfig+0xd8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba8:	d10c      	bne.n	8007bc4 <HAL_RCC_OscConfig+0xc0>
 8007baa:	4b78      	ldr	r3, [pc, #480]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a77      	ldr	r2, [pc, #476]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	4b75      	ldr	r3, [pc, #468]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a74      	ldr	r2, [pc, #464]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	e00b      	b.n	8007bdc <HAL_RCC_OscConfig+0xd8>
 8007bc4:	4b71      	ldr	r3, [pc, #452]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a70      	ldr	r2, [pc, #448]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	4b6e      	ldr	r3, [pc, #440]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a6d      	ldr	r2, [pc, #436]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d013      	beq.n	8007c0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be4:	f7fa fcca 	bl	800257c <HAL_GetTick>
 8007be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bec:	f7fa fcc6 	bl	800257c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b64      	cmp	r3, #100	; 0x64
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e3d4      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bfe:	4b63      	ldr	r3, [pc, #396]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0xe8>
 8007c0a:	e014      	b.n	8007c36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0c:	f7fa fcb6 	bl	800257c <HAL_GetTick>
 8007c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c14:	f7fa fcb2 	bl	800257c <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b64      	cmp	r3, #100	; 0x64
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e3c0      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c26:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f0      	bne.n	8007c14 <HAL_RCC_OscConfig+0x110>
 8007c32:	e000      	b.n	8007c36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80ca 	beq.w	8007dd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c44:	4b51      	ldr	r3, [pc, #324]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c4e:	4b4f      	ldr	r3, [pc, #316]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_RCC_OscConfig+0x166>
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	2b18      	cmp	r3, #24
 8007c5e:	d156      	bne.n	8007d0e <HAL_RCC_OscConfig+0x20a>
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d151      	bne.n	8007d0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c6a:	4b48      	ldr	r3, [pc, #288]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_RCC_OscConfig+0x17e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e392      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c82:	4b42      	ldr	r3, [pc, #264]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 0219 	bic.w	r2, r3, #25
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	493f      	ldr	r1, [pc, #252]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c94:	f7fa fc72 	bl	800257c <HAL_GetTick>
 8007c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c9c:	f7fa fc6e 	bl	800257c <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e37c      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cae:	4b37      	ldr	r3, [pc, #220]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cba:	f7fa fc7b 	bl	80025b4 <HAL_GetREVID>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d817      	bhi.n	8007cf8 <HAL_RCC_OscConfig+0x1f4>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b40      	cmp	r3, #64	; 0x40
 8007cce:	d108      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x1de>
 8007cd0:	4b2e      	ldr	r3, [pc, #184]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cd8:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ce0:	e07a      	b.n	8007dd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce2:	4b2a      	ldr	r3, [pc, #168]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	031b      	lsls	r3, r3, #12
 8007cf0:	4926      	ldr	r1, [pc, #152]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf6:	e06f      	b.n	8007dd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf8:	4b24      	ldr	r3, [pc, #144]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	061b      	lsls	r3, r3, #24
 8007d06:	4921      	ldr	r1, [pc, #132]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d0c:	e064      	b.n	8007dd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d047      	beq.n	8007da6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d16:	4b1d      	ldr	r3, [pc, #116]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 0219 	bic.w	r2, r3, #25
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	491a      	ldr	r1, [pc, #104]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d28:	f7fa fc28 	bl	800257c <HAL_GetTick>
 8007d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d2e:	e008      	b.n	8007d42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d30:	f7fa fc24 	bl	800257c <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e332      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f0      	beq.n	8007d30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d4e:	f7fa fc31 	bl	80025b4 <HAL_GetREVID>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d819      	bhi.n	8007d90 <HAL_RCC_OscConfig+0x28c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d108      	bne.n	8007d76 <HAL_RCC_OscConfig+0x272>
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d6c:	4a07      	ldr	r2, [pc, #28]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d72:	6053      	str	r3, [r2, #4]
 8007d74:	e030      	b.n	8007dd8 <HAL_RCC_OscConfig+0x2d4>
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	031b      	lsls	r3, r3, #12
 8007d84:	4901      	ldr	r1, [pc, #4]	; (8007d8c <HAL_RCC_OscConfig+0x288>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	604b      	str	r3, [r1, #4]
 8007d8a:	e025      	b.n	8007dd8 <HAL_RCC_OscConfig+0x2d4>
 8007d8c:	58024400 	.word	0x58024400
 8007d90:	4b9a      	ldr	r3, [pc, #616]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	061b      	lsls	r3, r3, #24
 8007d9e:	4997      	ldr	r1, [pc, #604]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	604b      	str	r3, [r1, #4]
 8007da4:	e018      	b.n	8007dd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007da6:	4b95      	ldr	r3, [pc, #596]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a94      	ldr	r2, [pc, #592]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db2:	f7fa fbe3 	bl	800257c <HAL_GetTick>
 8007db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007db8:	e008      	b.n	8007dcc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dba:	f7fa fbdf 	bl	800257c <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e2ed      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dcc:	4b8b      	ldr	r3, [pc, #556]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1f0      	bne.n	8007dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80a9 	beq.w	8007f38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de6:	4b85      	ldr	r3, [pc, #532]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007df0:	4b82      	ldr	r3, [pc, #520]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d007      	beq.n	8007e0c <HAL_RCC_OscConfig+0x308>
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2b18      	cmp	r3, #24
 8007e00:	d13a      	bne.n	8007e78 <HAL_RCC_OscConfig+0x374>
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d135      	bne.n	8007e78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e0c:	4b7b      	ldr	r3, [pc, #492]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_RCC_OscConfig+0x320>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e2c1      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e24:	f7fa fbc6 	bl	80025b4 <HAL_GetREVID>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d817      	bhi.n	8007e62 <HAL_RCC_OscConfig+0x35e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d108      	bne.n	8007e4c <HAL_RCC_OscConfig+0x348>
 8007e3a:	4b70      	ldr	r3, [pc, #448]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e42:	4a6e      	ldr	r2, [pc, #440]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e4a:	e075      	b.n	8007f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e4c:	4b6b      	ldr	r3, [pc, #428]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	069b      	lsls	r3, r3, #26
 8007e5a:	4968      	ldr	r1, [pc, #416]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e60:	e06a      	b.n	8007f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e62:	4b66      	ldr	r3, [pc, #408]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	061b      	lsls	r3, r3, #24
 8007e70:	4962      	ldr	r1, [pc, #392]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e76:	e05f      	b.n	8007f38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d042      	beq.n	8007f06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e80:	4b5e      	ldr	r3, [pc, #376]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a5d      	ldr	r2, [pc, #372]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8c:	f7fa fb76 	bl	800257c <HAL_GetTick>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e94:	f7fa fb72 	bl	800257c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e280      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ea6:	4b55      	ldr	r3, [pc, #340]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eb2:	f7fa fb7f 	bl	80025b4 <HAL_GetREVID>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d817      	bhi.n	8007ef0 <HAL_RCC_OscConfig+0x3ec>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d108      	bne.n	8007eda <HAL_RCC_OscConfig+0x3d6>
 8007ec8:	4b4c      	ldr	r3, [pc, #304]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ed0:	4a4a      	ldr	r2, [pc, #296]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ed6:	6053      	str	r3, [r2, #4]
 8007ed8:	e02e      	b.n	8007f38 <HAL_RCC_OscConfig+0x434>
 8007eda:	4b48      	ldr	r3, [pc, #288]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	069b      	lsls	r3, r3, #26
 8007ee8:	4944      	ldr	r1, [pc, #272]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	604b      	str	r3, [r1, #4]
 8007eee:	e023      	b.n	8007f38 <HAL_RCC_OscConfig+0x434>
 8007ef0:	4b42      	ldr	r3, [pc, #264]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	061b      	lsls	r3, r3, #24
 8007efe:	493f      	ldr	r1, [pc, #252]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60cb      	str	r3, [r1, #12]
 8007f04:	e018      	b.n	8007f38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f06:	4b3d      	ldr	r3, [pc, #244]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a3c      	ldr	r2, [pc, #240]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f12:	f7fa fb33 	bl	800257c <HAL_GetTick>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007f1a:	f7fa fb2f 	bl	800257c <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e23d      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f2c:	4b33      	ldr	r3, [pc, #204]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f0      	bne.n	8007f1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d036      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d019      	beq.n	8007f80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f4c:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f50:	4a2a      	ldr	r2, [pc, #168]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f58:	f7fa fb10 	bl	800257c <HAL_GetTick>
 8007f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f60:	f7fa fb0c 	bl	800257c <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e21a      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f72:	4b22      	ldr	r3, [pc, #136]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0x45c>
 8007f7e:	e018      	b.n	8007fb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f80:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f84:	4a1d      	ldr	r2, [pc, #116]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8c:	f7fa faf6 	bl	800257c <HAL_GetTick>
 8007f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f94:	f7fa faf2 	bl	800257c <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e200      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fa6:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1f0      	bne.n	8007f94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d039      	beq.n	8008032 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01c      	beq.n	8008000 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fd2:	f7fa fad3 	bl	800257c <HAL_GetTick>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fd8:	e008      	b.n	8007fec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fda:	f7fa facf 	bl	800257c <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d901      	bls.n	8007fec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e1dd      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fec:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <HAL_RCC_OscConfig+0x4f8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f0      	beq.n	8007fda <HAL_RCC_OscConfig+0x4d6>
 8007ff8:	e01b      	b.n	8008032 <HAL_RCC_OscConfig+0x52e>
 8007ffa:	bf00      	nop
 8007ffc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008000:	4b9b      	ldr	r3, [pc, #620]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a9a      	ldr	r2, [pc, #616]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800800a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800800c:	f7fa fab6 	bl	800257c <HAL_GetTick>
 8008010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008014:	f7fa fab2 	bl	800257c <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e1c0      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008026:	4b92      	ldr	r3, [pc, #584]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f0      	bne.n	8008014 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8081 	beq.w	8008142 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008040:	4b8c      	ldr	r3, [pc, #560]	; (8008274 <HAL_RCC_OscConfig+0x770>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a8b      	ldr	r2, [pc, #556]	; (8008274 <HAL_RCC_OscConfig+0x770>)
 8008046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800804c:	f7fa fa96 	bl	800257c <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008054:	f7fa fa92 	bl	800257c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b64      	cmp	r3, #100	; 0x64
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e1a0      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008066:	4b83      	ldr	r3, [pc, #524]	; (8008274 <HAL_RCC_OscConfig+0x770>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d106      	bne.n	8008088 <HAL_RCC_OscConfig+0x584>
 800807a:	4b7d      	ldr	r3, [pc, #500]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	4a7c      	ldr	r2, [pc, #496]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008080:	f043 0301 	orr.w	r3, r3, #1
 8008084:	6713      	str	r3, [r2, #112]	; 0x70
 8008086:	e02d      	b.n	80080e4 <HAL_RCC_OscConfig+0x5e0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10c      	bne.n	80080aa <HAL_RCC_OscConfig+0x5a6>
 8008090:	4b77      	ldr	r3, [pc, #476]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	4a76      	ldr	r2, [pc, #472]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	6713      	str	r3, [r2, #112]	; 0x70
 800809c:	4b74      	ldr	r3, [pc, #464]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a0:	4a73      	ldr	r2, [pc, #460]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080a2:	f023 0304 	bic.w	r3, r3, #4
 80080a6:	6713      	str	r3, [r2, #112]	; 0x70
 80080a8:	e01c      	b.n	80080e4 <HAL_RCC_OscConfig+0x5e0>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d10c      	bne.n	80080cc <HAL_RCC_OscConfig+0x5c8>
 80080b2:	4b6f      	ldr	r3, [pc, #444]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	4a6e      	ldr	r2, [pc, #440]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080b8:	f043 0304 	orr.w	r3, r3, #4
 80080bc:	6713      	str	r3, [r2, #112]	; 0x70
 80080be:	4b6c      	ldr	r3, [pc, #432]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c2:	4a6b      	ldr	r2, [pc, #428]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	6713      	str	r3, [r2, #112]	; 0x70
 80080ca:	e00b      	b.n	80080e4 <HAL_RCC_OscConfig+0x5e0>
 80080cc:	4b68      	ldr	r3, [pc, #416]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d0:	4a67      	ldr	r2, [pc, #412]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	6713      	str	r3, [r2, #112]	; 0x70
 80080d8:	4b65      	ldr	r3, [pc, #404]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	4a64      	ldr	r2, [pc, #400]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80080de:	f023 0304 	bic.w	r3, r3, #4
 80080e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d015      	beq.n	8008118 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ec:	f7fa fa46 	bl	800257c <HAL_GetTick>
 80080f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080f2:	e00a      	b.n	800810a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f4:	f7fa fa42 	bl	800257c <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e14e      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800810a:	4b59      	ldr	r3, [pc, #356]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0ee      	beq.n	80080f4 <HAL_RCC_OscConfig+0x5f0>
 8008116:	e014      	b.n	8008142 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008118:	f7fa fa30 	bl	800257c <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800811e:	e00a      	b.n	8008136 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008120:	f7fa fa2c 	bl	800257c <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	f241 3288 	movw	r2, #5000	; 0x1388
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e138      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008136:	4b4e      	ldr	r3, [pc, #312]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1ee      	bne.n	8008120 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 812d 	beq.w	80083a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800814c:	4b48      	ldr	r3, [pc, #288]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008154:	2b18      	cmp	r3, #24
 8008156:	f000 80bd 	beq.w	80082d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b02      	cmp	r3, #2
 8008160:	f040 809e 	bne.w	80082a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008164:	4b42      	ldr	r3, [pc, #264]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a41      	ldr	r2, [pc, #260]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800816a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800816e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008170:	f7fa fa04 	bl	800257c <HAL_GetTick>
 8008174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008178:	f7fa fa00 	bl	800257c <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e10e      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800818a:	4b39      	ldr	r3, [pc, #228]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f0      	bne.n	8008178 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008196:	4b36      	ldr	r3, [pc, #216]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800819a:	4b37      	ldr	r3, [pc, #220]	; (8008278 <HAL_RCC_OscConfig+0x774>)
 800819c:	4013      	ands	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081a6:	0112      	lsls	r2, r2, #4
 80081a8:	430a      	orrs	r2, r1
 80081aa:	4931      	ldr	r1, [pc, #196]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	628b      	str	r3, [r1, #40]	; 0x28
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b4:	3b01      	subs	r3, #1
 80081b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081be:	3b01      	subs	r3, #1
 80081c0:	025b      	lsls	r3, r3, #9
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	431a      	orrs	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	3b01      	subs	r3, #1
 80081cc:	041b      	lsls	r3, r3, #16
 80081ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	3b01      	subs	r3, #1
 80081da:	061b      	lsls	r3, r3, #24
 80081dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081e0:	4923      	ldr	r1, [pc, #140]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80081e6:	4b22      	ldr	r3, [pc, #136]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a21      	ldr	r2, [pc, #132]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081f2:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 80081f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f6:	4b21      	ldr	r3, [pc, #132]	; (800827c <HAL_RCC_OscConfig+0x778>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	491b      	ldr	r1, [pc, #108]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008206:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	f023 020c 	bic.w	r2, r3, #12
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	4917      	ldr	r1, [pc, #92]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008214:	4313      	orrs	r3, r2
 8008216:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008218:	4b15      	ldr	r3, [pc, #84]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	f023 0202 	bic.w	r2, r3, #2
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008224:	4912      	ldr	r1, [pc, #72]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008226:	4313      	orrs	r3, r2
 8008228:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800822a:	4b11      	ldr	r3, [pc, #68]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	4a10      	ldr	r2, [pc, #64]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008236:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	4a0d      	ldr	r2, [pc, #52]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800823c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008246:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800824c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800824e:	4b08      	ldr	r3, [pc, #32]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	4a07      	ldr	r2, [pc, #28]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800825a:	4b05      	ldr	r3, [pc, #20]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a04      	ldr	r2, [pc, #16]	; (8008270 <HAL_RCC_OscConfig+0x76c>)
 8008260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008266:	f7fa f989 	bl	800257c <HAL_GetTick>
 800826a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800826c:	e011      	b.n	8008292 <HAL_RCC_OscConfig+0x78e>
 800826e:	bf00      	nop
 8008270:	58024400 	.word	0x58024400
 8008274:	58024800 	.word	0x58024800
 8008278:	fffffc0c 	.word	0xfffffc0c
 800827c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008280:	f7fa f97c 	bl	800257c <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e08a      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008292:	4b47      	ldr	r3, [pc, #284]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f0      	beq.n	8008280 <HAL_RCC_OscConfig+0x77c>
 800829e:	e082      	b.n	80083a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a0:	4b43      	ldr	r3, [pc, #268]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a42      	ldr	r2, [pc, #264]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 80082a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fa f966 	bl	800257c <HAL_GetTick>
 80082b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b4:	f7fa f962 	bl	800257c <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e070      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082c6:	4b3a      	ldr	r3, [pc, #232]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f0      	bne.n	80082b4 <HAL_RCC_OscConfig+0x7b0>
 80082d2:	e068      	b.n	80083a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082d4:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082da:	4b35      	ldr	r3, [pc, #212]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d031      	beq.n	800834c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f003 0203 	and.w	r2, r3, #3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d12a      	bne.n	800834c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008302:	429a      	cmp	r2, r3
 8008304:	d122      	bne.n	800834c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008312:	429a      	cmp	r2, r3
 8008314:	d11a      	bne.n	800834c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	0a5b      	lsrs	r3, r3, #9
 800831a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008324:	429a      	cmp	r2, r3
 8008326:	d111      	bne.n	800834c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	0c1b      	lsrs	r3, r3, #16
 800832c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008336:	429a      	cmp	r2, r3
 8008338:	d108      	bne.n	800834c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	0e1b      	lsrs	r3, r3, #24
 800833e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008346:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008348:	429a      	cmp	r2, r3
 800834a:	d001      	beq.n	8008350 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e02b      	b.n	80083a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008350:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 8008352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008354:	08db      	lsrs	r3, r3, #3
 8008356:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800835a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	d01f      	beq.n	80083a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 8008368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836a:	4a11      	ldr	r2, [pc, #68]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 800836c:	f023 0301 	bic.w	r3, r3, #1
 8008370:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008372:	f7fa f903 	bl	800257c <HAL_GetTick>
 8008376:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008378:	bf00      	nop
 800837a:	f7fa f8ff 	bl	800257c <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	4293      	cmp	r3, r2
 8008384:	d0f9      	beq.n	800837a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 8008388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <HAL_RCC_OscConfig+0x8b0>)
 800838c:	4013      	ands	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008392:	00d2      	lsls	r2, r2, #3
 8008394:	4906      	ldr	r1, [pc, #24]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 8008396:	4313      	orrs	r3, r2
 8008398:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <HAL_RCC_OscConfig+0x8ac>)
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3730      	adds	r7, #48	; 0x30
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	58024400 	.word	0x58024400
 80083b4:	ffff0007 	.word	0xffff0007

080083b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e19c      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083cc:	4b8a      	ldr	r3, [pc, #552]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d910      	bls.n	80083fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083da:	4b87      	ldr	r3, [pc, #540]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f023 020f 	bic.w	r2, r3, #15
 80083e2:	4985      	ldr	r1, [pc, #532]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b83      	ldr	r3, [pc, #524]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d001      	beq.n	80083fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e184      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d010      	beq.n	800842a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	4b7b      	ldr	r3, [pc, #492]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008414:	429a      	cmp	r2, r3
 8008416:	d908      	bls.n	800842a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008418:	4b78      	ldr	r3, [pc, #480]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	4975      	ldr	r1, [pc, #468]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008426:	4313      	orrs	r3, r2
 8008428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d010      	beq.n	8008458 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	4b70      	ldr	r3, [pc, #448]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008442:	429a      	cmp	r2, r3
 8008444:	d908      	bls.n	8008458 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008446:	4b6d      	ldr	r3, [pc, #436]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	496a      	ldr	r1, [pc, #424]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008454:	4313      	orrs	r3, r2
 8008456:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0310 	and.w	r3, r3, #16
 8008460:	2b00      	cmp	r3, #0
 8008462:	d010      	beq.n	8008486 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699a      	ldr	r2, [r3, #24]
 8008468:	4b64      	ldr	r3, [pc, #400]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008470:	429a      	cmp	r2, r3
 8008472:	d908      	bls.n	8008486 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008474:	4b61      	ldr	r3, [pc, #388]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	495e      	ldr	r1, [pc, #376]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008482:	4313      	orrs	r3, r2
 8008484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d010      	beq.n	80084b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69da      	ldr	r2, [r3, #28]
 8008496:	4b59      	ldr	r3, [pc, #356]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800849e:	429a      	cmp	r2, r3
 80084a0:	d908      	bls.n	80084b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80084a2:	4b56      	ldr	r3, [pc, #344]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	4953      	ldr	r1, [pc, #332]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d010      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	4b4d      	ldr	r3, [pc, #308]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d908      	bls.n	80084e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d0:	4b4a      	ldr	r3, [pc, #296]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f023 020f 	bic.w	r2, r3, #15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	4947      	ldr	r1, [pc, #284]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d055      	beq.n	800859a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084ee:	4b43      	ldr	r3, [pc, #268]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4940      	ldr	r1, [pc, #256]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d107      	bne.n	8008518 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008508:	4b3c      	ldr	r3, [pc, #240]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d121      	bne.n	8008558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e0f6      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d107      	bne.n	8008530 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008520:	4b36      	ldr	r3, [pc, #216]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d115      	bne.n	8008558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e0ea      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d107      	bne.n	8008548 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008538:	4b30      	ldr	r3, [pc, #192]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e0de      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008548:	4b2c      	ldr	r3, [pc, #176]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e0d6      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f023 0207 	bic.w	r2, r3, #7
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4925      	ldr	r1, [pc, #148]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 8008566:	4313      	orrs	r3, r2
 8008568:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856a:	f7fa f807 	bl	800257c <HAL_GetTick>
 800856e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008570:	e00a      	b.n	8008588 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008572:	f7fa f803 	bl	800257c <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008580:	4293      	cmp	r3, r2
 8008582:	d901      	bls.n	8008588 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e0be      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008588:	4b1c      	ldr	r3, [pc, #112]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	429a      	cmp	r2, r3
 8008598:	d1eb      	bne.n	8008572 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d010      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d208      	bcs.n	80085c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085b6:	4b11      	ldr	r3, [pc, #68]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	f023 020f 	bic.w	r2, r3, #15
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	490e      	ldr	r1, [pc, #56]	; (80085fc <HAL_RCC_ClockConfig+0x244>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d214      	bcs.n	8008600 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f023 020f 	bic.w	r2, r3, #15
 80085de:	4906      	ldr	r1, [pc, #24]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085e6:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <HAL_RCC_ClockConfig+0x240>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d005      	beq.n	8008600 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e086      	b.n	8008706 <HAL_RCC_ClockConfig+0x34e>
 80085f8:	52002000 	.word	0x52002000
 80085fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d010      	beq.n	800862e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691a      	ldr	r2, [r3, #16]
 8008610:	4b3f      	ldr	r3, [pc, #252]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008618:	429a      	cmp	r2, r3
 800861a:	d208      	bcs.n	800862e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800861c:	4b3c      	ldr	r3, [pc, #240]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	4939      	ldr	r1, [pc, #228]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 800862a:	4313      	orrs	r3, r2
 800862c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d010      	beq.n	800865c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	4b34      	ldr	r3, [pc, #208]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008646:	429a      	cmp	r2, r3
 8008648:	d208      	bcs.n	800865c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800864a:	4b31      	ldr	r3, [pc, #196]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	492e      	ldr	r1, [pc, #184]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 8008658:	4313      	orrs	r3, r2
 800865a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	d010      	beq.n	800868a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	4b28      	ldr	r3, [pc, #160]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008674:	429a      	cmp	r2, r3
 8008676:	d208      	bcs.n	800868a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008678:	4b25      	ldr	r3, [pc, #148]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	4922      	ldr	r1, [pc, #136]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 8008686:	4313      	orrs	r3, r2
 8008688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d010      	beq.n	80086b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69da      	ldr	r2, [r3, #28]
 800869a:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d208      	bcs.n	80086b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	4917      	ldr	r1, [pc, #92]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80086b8:	f000 f834 	bl	8008724 <HAL_RCC_GetSysClockFreq>
 80086bc:	4602      	mov	r2, r0
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	4912      	ldr	r1, [pc, #72]	; (8008714 <HAL_RCC_ClockConfig+0x35c>)
 80086ca:	5ccb      	ldrb	r3, [r1, r3]
 80086cc:	f003 031f 	and.w	r3, r3, #31
 80086d0:	fa22 f303 	lsr.w	r3, r2, r3
 80086d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <HAL_RCC_ClockConfig+0x358>)
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	4a0d      	ldr	r2, [pc, #52]	; (8008714 <HAL_RCC_ClockConfig+0x35c>)
 80086e0:	5cd3      	ldrb	r3, [r2, r3]
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <HAL_RCC_ClockConfig+0x360>)
 80086ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086f0:	4a0a      	ldr	r2, [pc, #40]	; (800871c <HAL_RCC_ClockConfig+0x364>)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <HAL_RCC_ClockConfig+0x368>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f9 fef4 	bl	80024e8 <HAL_InitTick>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	58024400 	.word	0x58024400
 8008714:	08010308 	.word	0x08010308
 8008718:	2400008c 	.word	0x2400008c
 800871c:	24000088 	.word	0x24000088
 8008720:	24000090 	.word	0x24000090

08008724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008724:	b480      	push	{r7}
 8008726:	b089      	sub	sp, #36	; 0x24
 8008728:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800872a:	4bb3      	ldr	r3, [pc, #716]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008732:	2b18      	cmp	r3, #24
 8008734:	f200 8155 	bhi.w	80089e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <HAL_RCC_GetSysClockFreq+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	080087a5 	.word	0x080087a5
 8008744:	080089e3 	.word	0x080089e3
 8008748:	080089e3 	.word	0x080089e3
 800874c:	080089e3 	.word	0x080089e3
 8008750:	080089e3 	.word	0x080089e3
 8008754:	080089e3 	.word	0x080089e3
 8008758:	080089e3 	.word	0x080089e3
 800875c:	080089e3 	.word	0x080089e3
 8008760:	080087cb 	.word	0x080087cb
 8008764:	080089e3 	.word	0x080089e3
 8008768:	080089e3 	.word	0x080089e3
 800876c:	080089e3 	.word	0x080089e3
 8008770:	080089e3 	.word	0x080089e3
 8008774:	080089e3 	.word	0x080089e3
 8008778:	080089e3 	.word	0x080089e3
 800877c:	080089e3 	.word	0x080089e3
 8008780:	080087d1 	.word	0x080087d1
 8008784:	080089e3 	.word	0x080089e3
 8008788:	080089e3 	.word	0x080089e3
 800878c:	080089e3 	.word	0x080089e3
 8008790:	080089e3 	.word	0x080089e3
 8008794:	080089e3 	.word	0x080089e3
 8008798:	080089e3 	.word	0x080089e3
 800879c:	080089e3 	.word	0x080089e3
 80087a0:	080087d7 	.word	0x080087d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a4:	4b94      	ldr	r3, [pc, #592]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d009      	beq.n	80087c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087b0:	4b91      	ldr	r3, [pc, #580]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	08db      	lsrs	r3, r3, #3
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	4a90      	ldr	r2, [pc, #576]	; (80089fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
 80087c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80087c2:	e111      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80087c4:	4b8d      	ldr	r3, [pc, #564]	; (80089fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087c6:	61bb      	str	r3, [r7, #24]
      break;
 80087c8:	e10e      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80087ca:	4b8d      	ldr	r3, [pc, #564]	; (8008a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087cc:	61bb      	str	r3, [r7, #24]
      break;
 80087ce:	e10b      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80087d0:	4b8c      	ldr	r3, [pc, #560]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80087d2:	61bb      	str	r3, [r7, #24]
      break;
 80087d4:	e108      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087d6:	4b88      	ldr	r3, [pc, #544]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80087e0:	4b85      	ldr	r3, [pc, #532]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	091b      	lsrs	r3, r3, #4
 80087e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087ec:	4b82      	ldr	r3, [pc, #520]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087f6:	4b80      	ldr	r3, [pc, #512]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	08db      	lsrs	r3, r3, #3
 80087fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	fb02 f303 	mul.w	r3, r2, r3
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 80e1 	beq.w	80089dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b02      	cmp	r3, #2
 800881e:	f000 8083 	beq.w	8008928 <HAL_RCC_GetSysClockFreq+0x204>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b02      	cmp	r3, #2
 8008826:	f200 80a1 	bhi.w	800896c <HAL_RCC_GetSysClockFreq+0x248>
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <HAL_RCC_GetSysClockFreq+0x114>
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d056      	beq.n	80088e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008836:	e099      	b.n	800896c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008838:	4b6f      	ldr	r3, [pc, #444]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0320 	and.w	r3, r3, #32
 8008840:	2b00      	cmp	r3, #0
 8008842:	d02d      	beq.n	80088a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008844:	4b6c      	ldr	r3, [pc, #432]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	4a6b      	ldr	r2, [pc, #428]	; (80089fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
 8008854:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b62      	ldr	r3, [pc, #392]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008882:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800889e:	e087      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008a0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b51      	ldr	r3, [pc, #324]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088e2:	e065      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b40      	ldr	r3, [pc, #256]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a02 	vldr	s12, [r7, #8]
 800890a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008926:	e043      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008a14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b2f      	ldr	r3, [pc, #188]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a02 	vldr	s12, [r7, #8]
 800894e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800896a:	e021      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b1e      	ldr	r3, [pc, #120]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008992:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80089b0:	4b11      	ldr	r3, [pc, #68]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b4:	0a5b      	lsrs	r3, r3, #9
 80089b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ba:	3301      	adds	r3, #1
 80089bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d4:	ee17 3a90 	vmov	r3, s15
 80089d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80089da:	e005      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
      break;
 80089e0:	e002      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80089e2:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089e4:	61bb      	str	r3, [r7, #24]
      break;
 80089e6:	bf00      	nop
  }

  return sysclockfreq;
 80089e8:	69bb      	ldr	r3, [r7, #24]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3724      	adds	r7, #36	; 0x24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	58024400 	.word	0x58024400
 80089fc:	03d09000 	.word	0x03d09000
 8008a00:	003d0900 	.word	0x003d0900
 8008a04:	017d7840 	.word	0x017d7840
 8008a08:	46000000 	.word	0x46000000
 8008a0c:	4c742400 	.word	0x4c742400
 8008a10:	4a742400 	.word	0x4a742400
 8008a14:	4bbebc20 	.word	0x4bbebc20

08008a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a1e:	f7ff fe81 	bl	8008724 <HAL_RCC_GetSysClockFreq>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	0a1b      	lsrs	r3, r3, #8
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	490f      	ldr	r1, [pc, #60]	; (8008a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8008a30:	5ccb      	ldrb	r3, [r1, r3]
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8008a46:	5cd3      	ldrb	r3, [r2, r3]
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a52:	4a07      	ldr	r2, [pc, #28]	; (8008a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a56:	4a07      	ldr	r2, [pc, #28]	; (8008a74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	08010308 	.word	0x08010308
 8008a70:	2400008c 	.word	0x2400008c
 8008a74:	24000088 	.word	0x24000088

08008a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a7c:	f7ff ffcc 	bl	8008a18 <HAL_RCC_GetHCLKFreq>
 8008a80:	4602      	mov	r2, r0
 8008a82:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	091b      	lsrs	r3, r3, #4
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	4904      	ldr	r1, [pc, #16]	; (8008aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a8e:	5ccb      	ldrb	r3, [r1, r3]
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	58024400 	.word	0x58024400
 8008aa0:	08010308 	.word	0x08010308

08008aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008aa8:	f7ff ffb6 	bl	8008a18 <HAL_RCC_GetHCLKFreq>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	4904      	ldr	r1, [pc, #16]	; (8008acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008aba:	5ccb      	ldrb	r3, [r1, r3]
 8008abc:	f003 031f 	and.w	r3, r3, #31
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	08010308 	.word	0x08010308

08008ad0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad4:	b0ca      	sub	sp, #296	; 0x128
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008adc:	2300      	movs	r3, #0
 8008ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008af4:	2500      	movs	r5, #0
 8008af6:	ea54 0305 	orrs.w	r3, r4, r5
 8008afa:	d049      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b06:	d02f      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b0c:	d828      	bhi.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b12:	d01a      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b18:	d822      	bhi.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b22:	d007      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b24:	e01c      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b26:	4bb8      	ldr	r3, [pc, #736]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4ab7      	ldr	r2, [pc, #732]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b32:	e01a      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b38:	3308      	adds	r3, #8
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f002 fb61 	bl	800b204 <RCCEx_PLL2_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b48:	e00f      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4e:	3328      	adds	r3, #40	; 0x28
 8008b50:	2102      	movs	r1, #2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 fc08 	bl	800b368 <RCCEx_PLL3_Config>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b5e:	e004      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b66:	e000      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b72:	4ba5      	ldr	r3, [pc, #660]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b80:	4aa1      	ldr	r2, [pc, #644]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b82:	430b      	orrs	r3, r1
 8008b84:	6513      	str	r3, [r2, #80]	; 0x50
 8008b86:	e003      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008b9c:	f04f 0900 	mov.w	r9, #0
 8008ba0:	ea58 0309 	orrs.w	r3, r8, r9
 8008ba4:	d047      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d82a      	bhi.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bb0:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb6:	bf00      	nop
 8008bb8:	08008bcd 	.word	0x08008bcd
 8008bbc:	08008bdb 	.word	0x08008bdb
 8008bc0:	08008bf1 	.word	0x08008bf1
 8008bc4:	08008c0f 	.word	0x08008c0f
 8008bc8:	08008c0f 	.word	0x08008c0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bcc:	4b8e      	ldr	r3, [pc, #568]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	4a8d      	ldr	r2, [pc, #564]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd8:	e01a      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bde:	3308      	adds	r3, #8
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f002 fb0e 	bl	800b204 <RCCEx_PLL2_Config>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bee:	e00f      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf4:	3328      	adds	r3, #40	; 0x28
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 fbb5 	bl	800b368 <RCCEx_PLL3_Config>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c04:	e004      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c0c:	e000      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c18:	4b7b      	ldr	r3, [pc, #492]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1c:	f023 0107 	bic.w	r1, r3, #7
 8008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c26:	4a78      	ldr	r2, [pc, #480]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	6513      	str	r3, [r2, #80]	; 0x50
 8008c2c:	e003      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008c42:	f04f 0b00 	mov.w	fp, #0
 8008c46:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c4a:	d04c      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c56:	d030      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5c:	d829      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8008c60:	d02d      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c62:	2bc0      	cmp	r3, #192	; 0xc0
 8008c64:	d825      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c66:	2b80      	cmp	r3, #128	; 0x80
 8008c68:	d018      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008c6a:	2b80      	cmp	r3, #128	; 0x80
 8008c6c:	d821      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008c72:	2b40      	cmp	r3, #64	; 0x40
 8008c74:	d007      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008c76:	e01c      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c78:	4b63      	ldr	r3, [pc, #396]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	4a62      	ldr	r2, [pc, #392]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c84:	e01c      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 fab8 	bl	800b204 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e011      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca0:	3328      	adds	r3, #40	; 0x28
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 fb5f 	bl	800b368 <RCCEx_PLL3_Config>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cb0:	e006      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cb8:	e002      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cc8:	4b4f      	ldr	r3, [pc, #316]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd6:	4a4c      	ldr	r2, [pc, #304]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	6513      	str	r3, [r2, #80]	; 0x50
 8008cdc:	e003      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008cf2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008cfc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008d00:	460b      	mov	r3, r1
 8008d02:	4313      	orrs	r3, r2
 8008d04:	d053      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d12:	d035      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008d14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d18:	d82e      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d1e:	d031      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d24:	d828      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d2a:	d01a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d30:	d822      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d3a:	d007      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d3c:	e01c      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3e:	4b32      	ldr	r3, [pc, #200]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	4a31      	ldr	r2, [pc, #196]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d4a:	e01c      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	3308      	adds	r3, #8
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f002 fa55 	bl	800b204 <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d60:	e011      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d66:	3328      	adds	r3, #40	; 0x28
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fafc 	bl	800b368 <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d76:	e006      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d7e:	e002      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d8e:	4b1e      	ldr	r3, [pc, #120]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d9e:	4a1a      	ldr	r2, [pc, #104]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da0:	430b      	orrs	r3, r1
 8008da2:	6593      	str	r3, [r2, #88]	; 0x58
 8008da4:	e003      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008dba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008dc4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	d056      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dda:	d038      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008de0:	d831      	bhi.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008de2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008de6:	d034      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dec:	d82b      	bhi.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008df2:	d01d      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008df8:	d825      	bhi.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d006      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e02:	d00a      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e04:	e01f      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e0c:	4ba2      	ldr	r3, [pc, #648]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	4aa1      	ldr	r2, [pc, #644]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e18:	e01c      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1e:	3308      	adds	r3, #8
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f002 f9ee 	bl	800b204 <RCCEx_PLL2_Config>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e2e:	e011      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e34:	3328      	adds	r3, #40	; 0x28
 8008e36:	2100      	movs	r1, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 fa95 	bl	800b368 <RCCEx_PLL3_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e44:	e006      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e4c:	e002      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e5c:	4b8e      	ldr	r3, [pc, #568]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e6c:	4a8a      	ldr	r2, [pc, #552]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	6593      	str	r3, [r2, #88]	; 0x58
 8008e72:	e003      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008e96:	460b      	mov	r3, r1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d03a      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea2:	2b30      	cmp	r3, #48	; 0x30
 8008ea4:	d01f      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ea6:	2b30      	cmp	r3, #48	; 0x30
 8008ea8:	d819      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d00c      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	d815      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d019      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008eb6:	2b10      	cmp	r3, #16
 8008eb8:	d111      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eba:	4b77      	ldr	r3, [pc, #476]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a76      	ldr	r2, [pc, #472]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ec6:	e011      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ecc:	3308      	adds	r3, #8
 8008ece:	2102      	movs	r1, #2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 f997 	bl	800b204 <RCCEx_PLL2_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008edc:	e006      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ee4:	e002      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ef4:	4b68      	ldr	r3, [pc, #416]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f02:	4a65      	ldr	r2, [pc, #404]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f04:	430b      	orrs	r3, r1
 8008f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f08:	e003      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008f1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008f22:	2300      	movs	r3, #0
 8008f24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	d051      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f3c:	d035      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f42:	d82e      	bhi.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f48:	d031      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f4e:	d828      	bhi.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f54:	d01a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f5a:	d822      	bhi.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f64:	d007      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008f66:	e01c      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f68:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	4a4a      	ldr	r2, [pc, #296]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f74:	e01c      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f002 f940 	bl	800b204 <RCCEx_PLL2_Config>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f8a:	e011      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f90:	3328      	adds	r3, #40	; 0x28
 8008f92:	2100      	movs	r1, #0
 8008f94:	4618      	mov	r0, r3
 8008f96:	f002 f9e7 	bl	800b368 <RCCEx_PLL3_Config>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fa0:	e006      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fa8:	e002      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008faa:	bf00      	nop
 8008fac:	e000      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fb8:	4b37      	ldr	r3, [pc, #220]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc6:	4a34      	ldr	r2, [pc, #208]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	6513      	str	r3, [r2, #80]	; 0x50
 8008fcc:	e003      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	d056      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009000:	d033      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009006:	d82c      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800900c:	d02f      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800900e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009012:	d826      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009014:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009018:	d02b      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800901a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800901e:	d820      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009024:	d012      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800902a:	d81a      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d022      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009034:	d115      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903a:	3308      	adds	r3, #8
 800903c:	2101      	movs	r1, #1
 800903e:	4618      	mov	r0, r3
 8009040:	f002 f8e0 	bl	800b204 <RCCEx_PLL2_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800904a:	e015      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009050:	3328      	adds	r3, #40	; 0x28
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f002 f987 	bl	800b368 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009060:	e00a      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009068:	e006      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800906a:	bf00      	nop
 800906c:	e004      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800906e:	bf00      	nop
 8009070:	e002      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009072:	bf00      	nop
 8009074:	e000      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10d      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009084:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800908e:	4a02      	ldr	r2, [pc, #8]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009090:	430b      	orrs	r3, r1
 8009092:	6513      	str	r3, [r2, #80]	; 0x50
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009096:	bf00      	nop
 8009098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80090b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090b4:	2300      	movs	r3, #0
 80090b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80090be:	460b      	mov	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d055      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090d0:	d033      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80090d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090d6:	d82c      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090dc:	d02f      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80090de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e2:	d826      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090e8:	d02b      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80090ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090ee:	d820      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f4:	d012      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80090f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fa:	d81a      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d022      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009104:	d115      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910a:	3308      	adds	r3, #8
 800910c:	2101      	movs	r1, #1
 800910e:	4618      	mov	r0, r3
 8009110:	f002 f878 	bl	800b204 <RCCEx_PLL2_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800911a:	e015      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009120:	3328      	adds	r3, #40	; 0x28
 8009122:	2101      	movs	r1, #1
 8009124:	4618      	mov	r0, r3
 8009126:	f002 f91f 	bl	800b368 <RCCEx_PLL3_Config>
 800912a:	4603      	mov	r3, r0
 800912c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009130:	e00a      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009138:	e006      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800913a:	bf00      	nop
 800913c:	e004      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009150:	4ba3      	ldr	r3, [pc, #652]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009154:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009160:	4a9f      	ldr	r2, [pc, #636]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009162:	430b      	orrs	r3, r1
 8009164:	6593      	str	r3, [r2, #88]	; 0x58
 8009166:	e003      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800916c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800917c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800918a:	460b      	mov	r3, r1
 800918c:	4313      	orrs	r3, r2
 800918e:	d037      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800919a:	d00e      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800919c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a0:	d816      	bhi.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d018      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80091a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091aa:	d111      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ac:	4b8c      	ldr	r3, [pc, #560]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	4a8b      	ldr	r2, [pc, #556]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091b8:	e00f      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091be:	3308      	adds	r3, #8
 80091c0:	2101      	movs	r1, #1
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 f81e 	bl	800b204 <RCCEx_PLL2_Config>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091ce:	e004      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091d6:	e000      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80091d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091e2:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80091ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f0:	4a7b      	ldr	r2, [pc, #492]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091f2:	430b      	orrs	r3, r1
 80091f4:	6513      	str	r3, [r2, #80]	; 0x50
 80091f6:	e003      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800920c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009210:	2300      	movs	r3, #0
 8009212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009216:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800921a:	460b      	mov	r3, r1
 800921c:	4313      	orrs	r3, r2
 800921e:	d039      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009226:	2b03      	cmp	r3, #3
 8009228:	d81c      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800922a:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800922c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009230:	0800926d 	.word	0x0800926d
 8009234:	08009241 	.word	0x08009241
 8009238:	0800924f 	.word	0x0800924f
 800923c:	0800926d 	.word	0x0800926d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009240:	4b67      	ldr	r3, [pc, #412]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	4a66      	ldr	r2, [pc, #408]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800924a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800924c:	e00f      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009252:	3308      	adds	r3, #8
 8009254:	2102      	movs	r1, #2
 8009256:	4618      	mov	r0, r3
 8009258:	f001 ffd4 	bl	800b204 <RCCEx_PLL2_Config>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009262:	e004      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800926a:	e000      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800926c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009276:	4b5a      	ldr	r3, [pc, #360]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927a:	f023 0103 	bic.w	r1, r3, #3
 800927e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009284:	4a56      	ldr	r2, [pc, #344]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009286:	430b      	orrs	r3, r1
 8009288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800928a:	e003      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009290:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80092a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80092ae:	460b      	mov	r3, r1
 80092b0:	4313      	orrs	r3, r2
 80092b2:	f000 809f 	beq.w	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092b6:	4b4b      	ldr	r3, [pc, #300]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a4a      	ldr	r2, [pc, #296]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092c2:	f7f9 f95b 	bl	800257c <HAL_GetTick>
 80092c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092ca:	e00b      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092cc:	f7f9 f956 	bl	800257c <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b64      	cmp	r3, #100	; 0x64
 80092da:	d903      	bls.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092e2:	e005      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092e4:	4b3f      	ldr	r3, [pc, #252]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0ed      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80092f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d179      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092f8:	4b39      	ldr	r3, [pc, #228]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009304:	4053      	eors	r3, r2
 8009306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800930a:	2b00      	cmp	r3, #0
 800930c:	d015      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800930e:	4b34      	ldr	r3, [pc, #208]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009316:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800931a:	4b31      	ldr	r3, [pc, #196]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931e:	4a30      	ldr	r2, [pc, #192]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009324:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932a:	4a2d      	ldr	r2, [pc, #180]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800932c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009330:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009332:	4a2b      	ldr	r2, [pc, #172]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009338:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009346:	d118      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009348:	f7f9 f918 	bl	800257c <HAL_GetTick>
 800934c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009350:	e00d      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009352:	f7f9 f913 	bl	800257c <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009362:	429a      	cmp	r2, r3
 8009364:	d903      	bls.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800936c:	e005      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800936e:	4b1c      	ldr	r3, [pc, #112]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0eb      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800937a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800937e:	2b00      	cmp	r3, #0
 8009380:	d129      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800938a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009392:	d10e      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009394:	4b12      	ldr	r3, [pc, #72]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800939c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093a4:	091a      	lsrs	r2, r3, #4
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	4a0d      	ldr	r2, [pc, #52]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6113      	str	r3, [r2, #16]
 80093b0:	e005      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093bc:	6113      	str	r3, [r2, #16]
 80093be:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ce:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d0:	430b      	orrs	r3, r1
 80093d2:	6713      	str	r3, [r2, #112]	; 0x70
 80093d4:	e00e      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80093de:	e009      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80093e0:	58024400 	.word	0x58024400
 80093e4:	58024800 	.word	0x58024800
 80093e8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f002 0301 	and.w	r3, r2, #1
 8009400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009404:	2300      	movs	r3, #0
 8009406:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800940a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800940e:	460b      	mov	r3, r1
 8009410:	4313      	orrs	r3, r2
 8009412:	f000 8089 	beq.w	8009528 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800941c:	2b28      	cmp	r3, #40	; 0x28
 800941e:	d86b      	bhi.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	08009501 	.word	0x08009501
 800942c:	080094f9 	.word	0x080094f9
 8009430:	080094f9 	.word	0x080094f9
 8009434:	080094f9 	.word	0x080094f9
 8009438:	080094f9 	.word	0x080094f9
 800943c:	080094f9 	.word	0x080094f9
 8009440:	080094f9 	.word	0x080094f9
 8009444:	080094f9 	.word	0x080094f9
 8009448:	080094cd 	.word	0x080094cd
 800944c:	080094f9 	.word	0x080094f9
 8009450:	080094f9 	.word	0x080094f9
 8009454:	080094f9 	.word	0x080094f9
 8009458:	080094f9 	.word	0x080094f9
 800945c:	080094f9 	.word	0x080094f9
 8009460:	080094f9 	.word	0x080094f9
 8009464:	080094f9 	.word	0x080094f9
 8009468:	080094e3 	.word	0x080094e3
 800946c:	080094f9 	.word	0x080094f9
 8009470:	080094f9 	.word	0x080094f9
 8009474:	080094f9 	.word	0x080094f9
 8009478:	080094f9 	.word	0x080094f9
 800947c:	080094f9 	.word	0x080094f9
 8009480:	080094f9 	.word	0x080094f9
 8009484:	080094f9 	.word	0x080094f9
 8009488:	08009501 	.word	0x08009501
 800948c:	080094f9 	.word	0x080094f9
 8009490:	080094f9 	.word	0x080094f9
 8009494:	080094f9 	.word	0x080094f9
 8009498:	080094f9 	.word	0x080094f9
 800949c:	080094f9 	.word	0x080094f9
 80094a0:	080094f9 	.word	0x080094f9
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009501 	.word	0x08009501
 80094ac:	080094f9 	.word	0x080094f9
 80094b0:	080094f9 	.word	0x080094f9
 80094b4:	080094f9 	.word	0x080094f9
 80094b8:	080094f9 	.word	0x080094f9
 80094bc:	080094f9 	.word	0x080094f9
 80094c0:	080094f9 	.word	0x080094f9
 80094c4:	080094f9 	.word	0x080094f9
 80094c8:	08009501 	.word	0x08009501
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d0:	3308      	adds	r3, #8
 80094d2:	2101      	movs	r1, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 fe95 	bl	800b204 <RCCEx_PLL2_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094e0:	e00f      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e6:	3328      	adds	r3, #40	; 0x28
 80094e8:	2101      	movs	r1, #1
 80094ea:	4618      	mov	r0, r3
 80094ec:	f001 ff3c 	bl	800b368 <RCCEx_PLL3_Config>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094f6:	e004      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094fe:	e000      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800950a:	4bbf      	ldr	r3, [pc, #764]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009518:	4abb      	ldr	r2, [pc, #748]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800951a:	430b      	orrs	r3, r1
 800951c:	6553      	str	r3, [r2, #84]	; 0x54
 800951e:	e003      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f002 0302 	and.w	r3, r2, #2
 8009534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800953e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009542:	460b      	mov	r3, r1
 8009544:	4313      	orrs	r3, r2
 8009546:	d041      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800954e:	2b05      	cmp	r3, #5
 8009550:	d824      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009552:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	080095a5 	.word	0x080095a5
 800955c:	08009571 	.word	0x08009571
 8009560:	08009587 	.word	0x08009587
 8009564:	080095a5 	.word	0x080095a5
 8009568:	080095a5 	.word	0x080095a5
 800956c:	080095a5 	.word	0x080095a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009574:	3308      	adds	r3, #8
 8009576:	2101      	movs	r1, #1
 8009578:	4618      	mov	r0, r3
 800957a:	f001 fe43 	bl	800b204 <RCCEx_PLL2_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009584:	e00f      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958a:	3328      	adds	r3, #40	; 0x28
 800958c:	2101      	movs	r1, #1
 800958e:	4618      	mov	r0, r3
 8009590:	f001 feea 	bl	800b368 <RCCEx_PLL3_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800959a:	e004      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80095a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095ae:	4b96      	ldr	r3, [pc, #600]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b2:	f023 0107 	bic.w	r1, r3, #7
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095bc:	4a92      	ldr	r2, [pc, #584]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095be:	430b      	orrs	r3, r1
 80095c0:	6553      	str	r3, [r2, #84]	; 0x54
 80095c2:	e003      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f002 0304 	and.w	r3, r2, #4
 80095d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095dc:	2300      	movs	r3, #0
 80095de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4313      	orrs	r3, r2
 80095ea:	d044      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095f4:	2b05      	cmp	r3, #5
 80095f6:	d825      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80095f8:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	0800964d 	.word	0x0800964d
 8009604:	08009619 	.word	0x08009619
 8009608:	0800962f 	.word	0x0800962f
 800960c:	0800964d 	.word	0x0800964d
 8009610:	0800964d 	.word	0x0800964d
 8009614:	0800964d 	.word	0x0800964d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961c:	3308      	adds	r3, #8
 800961e:	2101      	movs	r1, #1
 8009620:	4618      	mov	r0, r3
 8009622:	f001 fdef 	bl	800b204 <RCCEx_PLL2_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800962c:	e00f      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009632:	3328      	adds	r3, #40	; 0x28
 8009634:	2101      	movs	r1, #1
 8009636:	4618      	mov	r0, r3
 8009638:	f001 fe96 	bl	800b368 <RCCEx_PLL3_Config>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009642:	e004      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800964a:	e000      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800964c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009656:	4b6c      	ldr	r3, [pc, #432]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965a:	f023 0107 	bic.w	r1, r3, #7
 800965e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009666:	4a68      	ldr	r2, [pc, #416]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009668:	430b      	orrs	r3, r1
 800966a:	6593      	str	r3, [r2, #88]	; 0x58
 800966c:	e003      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f002 0320 	and.w	r3, r2, #32
 8009682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009686:	2300      	movs	r3, #0
 8009688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800968c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009690:	460b      	mov	r3, r1
 8009692:	4313      	orrs	r3, r2
 8009694:	d055      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a2:	d033      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80096a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a8:	d82c      	bhi.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ae:	d02f      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b4:	d826      	bhi.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096ba:	d02b      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80096bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096c0:	d820      	bhi.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c6:	d012      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80096c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096cc:	d81a      	bhi.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d022      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80096d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d6:	d115      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096dc:	3308      	adds	r3, #8
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 fd8f 	bl	800b204 <RCCEx_PLL2_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096ec:	e015      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f2:	3328      	adds	r3, #40	; 0x28
 80096f4:	2102      	movs	r1, #2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fe36 	bl	800b368 <RCCEx_PLL3_Config>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009702:	e00a      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800970a:	e006      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800970c:	bf00      	nop
 800970e:	e004      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009710:	bf00      	nop
 8009712:	e002      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009714:	bf00      	nop
 8009716:	e000      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800971a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009722:	4b39      	ldr	r3, [pc, #228]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009726:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009732:	4a35      	ldr	r2, [pc, #212]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009734:	430b      	orrs	r3, r1
 8009736:	6553      	str	r3, [r2, #84]	; 0x54
 8009738:	e003      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800973e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800974e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009752:	2300      	movs	r3, #0
 8009754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009758:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800975c:	460b      	mov	r3, r1
 800975e:	4313      	orrs	r3, r2
 8009760:	d058      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800976a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800976e:	d033      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009770:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009774:	d82c      	bhi.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977a:	d02f      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800977c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009780:	d826      	bhi.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009786:	d02b      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800978c:	d820      	bhi.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800978e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009792:	d012      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009798:	d81a      	bhi.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d022      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800979e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a2:	d115      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a8:	3308      	adds	r3, #8
 80097aa:	2100      	movs	r1, #0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 fd29 	bl	800b204 <RCCEx_PLL2_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097b8:	e015      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097be:	3328      	adds	r3, #40	; 0x28
 80097c0:	2102      	movs	r1, #2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f001 fdd0 	bl	800b368 <RCCEx_PLL3_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097ce:	e00a      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097d6:	e006      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097d8:	bf00      	nop
 80097da:	e004      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097dc:	bf00      	nop
 80097de:	e002      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097e0:	bf00      	nop
 80097e2:	e000      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10e      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097ee:	4b06      	ldr	r3, [pc, #24]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097fe:	4a02      	ldr	r2, [pc, #8]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009800:	430b      	orrs	r3, r1
 8009802:	6593      	str	r3, [r2, #88]	; 0x58
 8009804:	e006      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009806:	bf00      	nop
 8009808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009824:	2300      	movs	r3, #0
 8009826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800982a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800982e:	460b      	mov	r3, r1
 8009830:	4313      	orrs	r3, r2
 8009832:	d055      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800983c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009840:	d033      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009842:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009846:	d82c      	bhi.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984c:	d02f      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800984e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009852:	d826      	bhi.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009854:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009858:	d02b      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800985a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800985e:	d820      	bhi.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009864:	d012      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986a:	d81a      	bhi.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800986c:	2b00      	cmp	r3, #0
 800986e:	d022      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009874:	d115      	bne.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987a:	3308      	adds	r3, #8
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f001 fcc0 	bl	800b204 <RCCEx_PLL2_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800988a:	e015      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009890:	3328      	adds	r3, #40	; 0x28
 8009892:	2102      	movs	r1, #2
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fd67 	bl	800b368 <RCCEx_PLL3_Config>
 800989a:	4603      	mov	r3, r0
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098a0:	e00a      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098a8:	e006      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098aa:	bf00      	nop
 80098ac:	e004      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098ae:	bf00      	nop
 80098b0:	e002      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10b      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098c0:	4ba1      	ldr	r3, [pc, #644]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098d0:	4a9d      	ldr	r2, [pc, #628]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098d2:	430b      	orrs	r3, r1
 80098d4:	6593      	str	r3, [r2, #88]	; 0x58
 80098d6:	e003      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80098e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f002 0308 	and.w	r3, r2, #8
 80098ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098f0:	2300      	movs	r3, #0
 80098f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80098fa:	460b      	mov	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	d01e      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990c:	d10c      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800990e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009912:	3328      	adds	r3, #40	; 0x28
 8009914:	2102      	movs	r1, #2
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fd26 	bl	800b368 <RCCEx_PLL3_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009928:	4b87      	ldr	r3, [pc, #540]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800992a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009938:	4a83      	ldr	r2, [pc, #524]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800993a:	430b      	orrs	r3, r1
 800993c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f002 0310 	and.w	r3, r2, #16
 800994a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800994e:	2300      	movs	r3, #0
 8009950:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009954:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009958:	460b      	mov	r3, r1
 800995a:	4313      	orrs	r3, r2
 800995c:	d01e      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996a:	d10c      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009970:	3328      	adds	r3, #40	; 0x28
 8009972:	2102      	movs	r1, #2
 8009974:	4618      	mov	r0, r3
 8009976:	f001 fcf7 	bl	800b368 <RCCEx_PLL3_Config>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009986:	4b70      	ldr	r3, [pc, #448]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009996:	4a6c      	ldr	r2, [pc, #432]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009998:	430b      	orrs	r3, r1
 800999a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800999c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80099a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099ac:	2300      	movs	r3, #0
 80099ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80099b6:	460b      	mov	r3, r1
 80099b8:	4313      	orrs	r3, r2
 80099ba:	d03e      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c8:	d022      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80099ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ce:	d81b      	bhi.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80099d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d8:	d00b      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80099da:	e015      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e0:	3308      	adds	r3, #8
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fc0d 	bl	800b204 <RCCEx_PLL2_Config>
 80099ea:	4603      	mov	r3, r0
 80099ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099f0:	e00f      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f6:	3328      	adds	r3, #40	; 0x28
 80099f8:	2102      	movs	r1, #2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 fcb4 	bl	800b368 <RCCEx_PLL3_Config>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a06:	e004      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a0e:	e000      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10b      	bne.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a1a:	4b4b      	ldr	r3, [pc, #300]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a2a:	4a47      	ldr	r2, [pc, #284]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8009a30:	e003      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009a46:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a48:	2300      	movs	r3, #0
 8009a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009a50:	460b      	mov	r3, r1
 8009a52:	4313      	orrs	r3, r2
 8009a54:	d03b      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a62:	d01f      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009a64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a68:	d818      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a6e:	d003      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a74:	d007      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009a76:	e011      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a78:	4b33      	ldr	r3, [pc, #204]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	4a32      	ldr	r2, [pc, #200]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a84:	e00f      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8a:	3328      	adds	r3, #40	; 0x28
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 fc6a 	bl	800b368 <RCCEx_PLL3_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a9a:	e004      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aae:	4b26      	ldr	r3, [pc, #152]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abe:	4a22      	ldr	r2, [pc, #136]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6553      	str	r3, [r2, #84]	; 0x54
 8009ac4:	e003      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009ada:	673b      	str	r3, [r7, #112]	; 0x70
 8009adc:	2300      	movs	r3, #0
 8009ade:	677b      	str	r3, [r7, #116]	; 0x74
 8009ae0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	d034      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af8:	d007      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009afa:	e011      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009afc:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	4a11      	ldr	r2, [pc, #68]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b08:	e00e      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0e:	3308      	adds	r3, #8
 8009b10:	2102      	movs	r1, #2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 fb76 	bl	800b204 <RCCEx_PLL2_Config>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b1e:	e003      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10d      	bne.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b30:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3e:	4a02      	ldr	r2, [pc, #8]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b40:	430b      	orrs	r3, r1
 8009b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b44:	e006      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b46:	bf00      	nop
 8009b48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b62:	2300      	movs	r3, #0
 8009b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	d00c      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b74:	3328      	adds	r3, #40	; 0x28
 8009b76:	2102      	movs	r1, #2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 fbf5 	bl	800b368 <RCCEx_PLL3_Config>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009b96:	663b      	str	r3, [r7, #96]	; 0x60
 8009b98:	2300      	movs	r3, #0
 8009b9a:	667b      	str	r3, [r7, #100]	; 0x64
 8009b9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	d038      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb2:	d018      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb8:	d811      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bbe:	d014      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc4:	d80b      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d011      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bce:	d106      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd0:	4bc3      	ldr	r3, [pc, #780]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	4ac2      	ldr	r2, [pc, #776]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009bdc:	e008      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009be4:	e004      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10b      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bf8:	4bb9      	ldr	r3, [pc, #740]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c08:	4ab5      	ldr	r2, [pc, #724]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	6553      	str	r3, [r2, #84]	; 0x54
 8009c0e:	e003      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009c24:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c26:	2300      	movs	r3, #0
 8009c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4313      	orrs	r3, r2
 8009c32:	d009      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c34:	4baa      	ldr	r3, [pc, #680]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c42:	4aa7      	ldr	r2, [pc, #668]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c44:	430b      	orrs	r3, r1
 8009c46:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009c54:	653b      	str	r3, [r7, #80]	; 0x50
 8009c56:	2300      	movs	r3, #0
 8009c58:	657b      	str	r3, [r7, #84]	; 0x54
 8009c5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4313      	orrs	r3, r2
 8009c62:	d00a      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c64:	4b9e      	ldr	r3, [pc, #632]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c74:	4a9a      	ldr	r2, [pc, #616]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c76:	430b      	orrs	r3, r1
 8009c78:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c88:	2300      	movs	r3, #0
 8009c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c8c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009c90:	460b      	mov	r3, r1
 8009c92:	4313      	orrs	r3, r2
 8009c94:	d009      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c96:	4b92      	ldr	r3, [pc, #584]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c9a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca4:	4a8e      	ldr	r2, [pc, #568]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8009cb8:	2300      	movs	r3, #0
 8009cba:	647b      	str	r3, [r7, #68]	; 0x44
 8009cbc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	d00e      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cc6:	4b86      	ldr	r3, [pc, #536]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	4a85      	ldr	r2, [pc, #532]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ccc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cd0:	6113      	str	r3, [r2, #16]
 8009cd2:	4b83      	ldr	r3, [pc, #524]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cd4:	6919      	ldr	r1, [r3, #16]
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009cde:	4a80      	ldr	r2, [pc, #512]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	d009      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d00:	4b77      	ldr	r3, [pc, #476]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d04:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	4a74      	ldr	r2, [pc, #464]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d10:	430b      	orrs	r3, r1
 8009d12:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009d20:	633b      	str	r3, [r7, #48]	; 0x30
 8009d22:	2300      	movs	r3, #0
 8009d24:	637b      	str	r3, [r7, #52]	; 0x34
 8009d26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	d00a      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d30:	4b6b      	ldr	r3, [pc, #428]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d34:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d40:	4a67      	ldr	r2, [pc, #412]	; (8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d42:	430b      	orrs	r3, r1
 8009d44:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	2100      	movs	r1, #0
 8009d50:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	d011      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	3308      	adds	r3, #8
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fa4a 	bl	800b204 <RCCEx_PLL2_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	6239      	str	r1, [r7, #32]
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
 8009d98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	d011      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da6:	3308      	adds	r3, #8
 8009da8:	2101      	movs	r1, #1
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 fa2a 	bl	800b204 <RCCEx_PLL2_Config>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	2100      	movs	r1, #0
 8009dd0:	61b9      	str	r1, [r7, #24]
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	61fb      	str	r3, [r7, #28]
 8009dd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4313      	orrs	r3, r2
 8009de0:	d011      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de6:	3308      	adds	r3, #8
 8009de8:	2102      	movs	r1, #2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fa0a 	bl	800b204 <RCCEx_PLL2_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6139      	str	r1, [r7, #16]
 8009e12:	f003 0308 	and.w	r3, r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	d011      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e26:	3328      	adds	r3, #40	; 0x28
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 fa9c 	bl	800b368 <RCCEx_PLL3_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	2100      	movs	r1, #0
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	f003 0310 	and.w	r3, r3, #16
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	d011      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e66:	3328      	adds	r3, #40	; 0x28
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 fa7c 	bl	800b368 <RCCEx_PLL3_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6039      	str	r1, [r7, #0]
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	d011      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea6:	3328      	adds	r3, #40	; 0x28
 8009ea8:	2102      	movs	r1, #2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 fa5c 	bl	800b368 <RCCEx_PLL3_Config>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009ec6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009eda:	46bd      	mov	sp, r7
 8009edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ee0:	58024400 	.word	0x58024400

08009ee4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b090      	sub	sp, #64	; 0x40
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ef2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009ef6:	430b      	orrs	r3, r1
 8009ef8:	f040 8094 	bne.w	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009efc:	4b9e      	ldr	r3, [pc, #632]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	f200 8087 	bhi.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f0e:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009f29 	.word	0x08009f29
 8009f18:	08009f51 	.word	0x08009f51
 8009f1c:	08009f79 	.word	0x08009f79
 8009f20:	0800a015 	.word	0x0800a015
 8009f24:	08009fa1 	.word	0x08009fa1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f28:	4b93      	ldr	r3, [pc, #588]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f34:	d108      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f001 f810 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f44:	f000 bd45 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4c:	f000 bd41 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f50:	4b89      	ldr	r3, [pc, #548]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f5c:	d108      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f5e:	f107 0318 	add.w	r3, r7, #24
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fd54 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f6c:	f000 bd31 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f74:	f000 bd2d 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f78:	4b7f      	ldr	r3, [pc, #508]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f84:	d108      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f86:	f107 030c 	add.w	r3, r7, #12
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 fe94 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f94:	f000 bd1d 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f9c:	f000 bd19 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fa0:	4b75      	ldr	r3, [pc, #468]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fa8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009faa:	4b73      	ldr	r3, [pc, #460]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d10c      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fbc:	4b6e      	ldr	r3, [pc, #440]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	08db      	lsrs	r3, r3, #3
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	4a6d      	ldr	r2, [pc, #436]	; (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fce:	e01f      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fd0:	4b69      	ldr	r3, [pc, #420]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fdc:	d106      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fe4:	d102      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fe6:	4b66      	ldr	r3, [pc, #408]	; (800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fea:	e011      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fec:	4b62      	ldr	r3, [pc, #392]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ff8:	d106      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a000:	d102      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a002:	4b60      	ldr	r3, [pc, #384]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a006:	e003      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a00c:	f000 bce1 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a010:	f000 bcdf 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a014:	4b5c      	ldr	r3, [pc, #368]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a018:	f000 bcdb 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a020:	f000 bcd7 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a028:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a02c:	430b      	orrs	r3, r1
 800a02e:	f040 80ad 	bne.w	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a032:	4b51      	ldr	r3, [pc, #324]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a036:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a03a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a042:	d056      	beq.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04a:	f200 8090 	bhi.w	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	2bc0      	cmp	r3, #192	; 0xc0
 800a052:	f000 8088 	beq.w	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	2bc0      	cmp	r3, #192	; 0xc0
 800a05a:	f200 8088 	bhi.w	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	2b80      	cmp	r3, #128	; 0x80
 800a062:	d032      	beq.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	f200 8081 	bhi.w	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d014      	beq.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a078:	e079      	b.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a07a:	4b3f      	ldr	r3, [pc, #252]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a086:	d108      	bne.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 ff67 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a096:	f000 bc9c 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09e:	f000 bc98 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0a2:	4b35      	ldr	r3, [pc, #212]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0ae:	d108      	bne.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b0:	f107 0318 	add.w	r3, r7, #24
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 fcab 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0be:	f000 bc88 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c6:	f000 bc84 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ca:	4b2b      	ldr	r3, [pc, #172]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d6:	d108      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fdeb 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e6:	f000 bc74 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ee:	f000 bc70 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0f2:	4b21      	ldr	r3, [pc, #132]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b04      	cmp	r3, #4
 800a106:	d10c      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d109      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a10e:	4b1a      	ldr	r3, [pc, #104]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	08db      	lsrs	r3, r3, #3
 800a114:	f003 0303 	and.w	r3, r3, #3
 800a118:	4a18      	ldr	r2, [pc, #96]	; (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a11a:	fa22 f303 	lsr.w	r3, r2, r3
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a120:	e01f      	b.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a122:	4b15      	ldr	r3, [pc, #84]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a12e:	d106      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a136:	d102      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a138:	4b11      	ldr	r3, [pc, #68]	; (800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a13c:	e011      	b.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a13e:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a14a:	d106      	bne.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a152:	d102      	bne.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a154:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a158:	e003      	b.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a15e:	f000 bc38 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a162:	f000 bc36 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a16a:	f000 bc32 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a172:	f000 bc2e 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a176:	bf00      	nop
 800a178:	58024400 	.word	0x58024400
 800a17c:	03d09000 	.word	0x03d09000
 800a180:	003d0900 	.word	0x003d0900
 800a184:	017d7840 	.word	0x017d7840
 800a188:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a190:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a194:	430b      	orrs	r3, r1
 800a196:	f040 809c 	bne.w	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a19a:	4b9e      	ldr	r3, [pc, #632]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a1a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1aa:	d054      	beq.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1b2:	f200 808b 	bhi.w	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1bc:	f000 8083 	beq.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1c6:	f200 8081 	bhi.w	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1d0:	d02f      	beq.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1d8:	d878      	bhi.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1e6:	d012      	beq.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a1e8:	e070      	b.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1ea:	4b8a      	ldr	r3, [pc, #552]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1f6:	d107      	bne.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 feaf 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a206:	e3e4      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a20c:	e3e1      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a20e:	4b81      	ldr	r3, [pc, #516]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a21a:	d107      	bne.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a21c:	f107 0318 	add.w	r3, r7, #24
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fbf5 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a22a:	e3d2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a230:	e3cf      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a232:	4b78      	ldr	r3, [pc, #480]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a23e:	d107      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a240:	f107 030c 	add.w	r3, r7, #12
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fd37 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a24e:	e3c0      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a254:	e3bd      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a256:	4b6f      	ldr	r3, [pc, #444]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a25e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a260:	4b6c      	ldr	r3, [pc, #432]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d10c      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d109      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a272:	4b68      	ldr	r3, [pc, #416]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	08db      	lsrs	r3, r3, #3
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	4a66      	ldr	r2, [pc, #408]	; (800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a27e:	fa22 f303 	lsr.w	r3, r2, r3
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a284:	e01e      	b.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a286:	4b63      	ldr	r3, [pc, #396]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a292:	d106      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a29a:	d102      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a29c:	4b5f      	ldr	r3, [pc, #380]	; (800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a0:	e010      	b.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2a2:	4b5c      	ldr	r3, [pc, #368]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2ae:	d106      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b6:	d102      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2b8:	4b59      	ldr	r3, [pc, #356]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2bc:	e002      	b.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a2c2:	e386      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2c4:	e385      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2c6:	4b57      	ldr	r3, [pc, #348]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ca:	e382      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d0:	e37f      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	f040 80a7 	bne.w	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a2e0:	4b4c      	ldr	r3, [pc, #304]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a2e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2f0:	d055      	beq.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2f8:	f200 8096 	bhi.w	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a302:	f000 8084 	beq.w	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a30c:	f200 808c 	bhi.w	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a316:	d030      	beq.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a31e:	f200 8083 	bhi.w	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a32e:	d012      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a330:	e07a      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a332:	4b38      	ldr	r3, [pc, #224]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a33a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a33e:	d107      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fe0b 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a34e:	e340      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a354:	e33d      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a356:	4b2f      	ldr	r3, [pc, #188]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a35e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a362:	d107      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a364:	f107 0318 	add.w	r3, r7, #24
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 fb51 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a372:	e32e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a378:	e32b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a37a:	4b26      	ldr	r3, [pc, #152]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a386:	d107      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a388:	f107 030c 	add.w	r3, r7, #12
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 fc93 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a396:	e31c      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39c:	e319      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a39e:	4b1d      	ldr	r3, [pc, #116]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3a8:	4b1a      	ldr	r3, [pc, #104]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d10c      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d109      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3ba:	4b16      	ldr	r3, [pc, #88]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	4a14      	ldr	r2, [pc, #80]	; (800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3cc:	e01e      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3da:	d106      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3e2:	d102      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e8:	e010      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3ea:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3f6:	d106      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3fe:	d102      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a402:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a404:	e002      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a40a:	e2e2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a40c:	e2e1      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a412:	e2de      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a414:	58024400 	.word	0x58024400
 800a418:	03d09000 	.word	0x03d09000
 800a41c:	003d0900 	.word	0x003d0900
 800a420:	017d7840 	.word	0x017d7840
 800a424:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a42c:	e2d1      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a432:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a436:	430b      	orrs	r3, r1
 800a438:	f040 809c 	bne.w	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a43c:	4b93      	ldr	r3, [pc, #588]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a440:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a444:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a44c:	d054      	beq.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a454:	f200 808b 	bhi.w	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a45e:	f000 8083 	beq.w	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a468:	f200 8081 	bhi.w	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a472:	d02f      	beq.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a47a:	d878      	bhi.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d004      	beq.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a488:	d012      	beq.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a48a:	e070      	b.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a48c:	4b7f      	ldr	r3, [pc, #508]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a498:	d107      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fd5e 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a8:	e293      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ae:	e290      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4b0:	4b76      	ldr	r3, [pc, #472]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4bc:	d107      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4be:	f107 0318 	add.w	r3, r7, #24
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 faa4 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4cc:	e281      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4d2:	e27e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4d4:	4b6d      	ldr	r3, [pc, #436]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4e0:	d107      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e2:	f107 030c 	add.w	r3, r7, #12
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fbe6 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f0:	e26f      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f6:	e26c      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4f8:	4b64      	ldr	r3, [pc, #400]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a500:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a502:	4b62      	ldr	r3, [pc, #392]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d10c      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a514:	4b5d      	ldr	r3, [pc, #372]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	08db      	lsrs	r3, r3, #3
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	4a5c      	ldr	r2, [pc, #368]	; (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a526:	e01e      	b.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a528:	4b58      	ldr	r3, [pc, #352]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a534:	d106      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a53c:	d102      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a53e:	4b55      	ldr	r3, [pc, #340]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a542:	e010      	b.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a544:	4b51      	ldr	r3, [pc, #324]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a54c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a550:	d106      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a558:	d102      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a55a:	4b4f      	ldr	r3, [pc, #316]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a55c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55e:	e002      	b.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a564:	e235      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a566:	e234      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a568:	4b4c      	ldr	r3, [pc, #304]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56c:	e231      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a572:	e22e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a574:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a578:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a57c:	430b      	orrs	r3, r1
 800a57e:	f040 808f 	bne.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a582:	4b42      	ldr	r3, [pc, #264]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a586:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a58a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a592:	d06b      	beq.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a59a:	d874      	bhi.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5a2:	d056      	beq.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5aa:	d86c      	bhi.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5b2:	d03b      	beq.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5ba:	d864      	bhi.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5c2:	d021      	beq.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5ca:	d85c      	bhi.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d004      	beq.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d8:	d004      	beq.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a5da:	e054      	b.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5dc:	f7fe fa4c 	bl	8008a78 <HAL_RCC_GetPCLK1Freq>
 800a5e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5e2:	e1f6      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e4:	4b29      	ldr	r3, [pc, #164]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5f0:	d107      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f2:	f107 0318 	add.w	r3, r7, #24
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fa0a 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a600:	e1e7      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a606:	e1e4      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a608:	4b20      	ldr	r3, [pc, #128]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a614:	d107      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a616:	f107 030c 	add.w	r3, r7, #12
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 fb4c 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a624:	e1d5      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a62a:	e1d2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a62c:	4b17      	ldr	r3, [pc, #92]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b04      	cmp	r3, #4
 800a636:	d109      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	f003 0303 	and.w	r3, r3, #3
 800a642:	4a13      	ldr	r2, [pc, #76]	; (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a644:	fa22 f303 	lsr.w	r3, r2, r3
 800a648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64a:	e1c2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a650:	e1bf      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a652:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a65e:	d102      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a660:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a664:	e1b5      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a66a:	e1b2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a66c:	4b07      	ldr	r3, [pc, #28]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a678:	d102      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a67a:	4b07      	ldr	r3, [pc, #28]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a67e:	e1a8      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a684:	e1a5      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a68a:	e1a2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a68c:	58024400 	.word	0x58024400
 800a690:	03d09000 	.word	0x03d09000
 800a694:	003d0900 	.word	0x003d0900
 800a698:	017d7840 	.word	0x017d7840
 800a69c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	d173      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a6ac:	4b9c      	ldr	r3, [pc, #624]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6bc:	d02f      	beq.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c4:	d863      	bhi.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d2:	d012      	beq.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a6d4:	e05b      	b.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d6:	4b92      	ldr	r3, [pc, #584]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e4:	f107 0318 	add.w	r3, r7, #24
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 f991 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f2:	e16e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f8:	e16b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6fa:	4b89      	ldr	r3, [pc, #548]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a706:	d107      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a708:	f107 030c 	add.w	r3, r7, #12
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fad3 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a716:	e15c      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a71c:	e159      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a71e:	4b80      	ldr	r3, [pc, #512]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a726:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a728:	4b7d      	ldr	r3, [pc, #500]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b04      	cmp	r3, #4
 800a732:	d10c      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a736:	2b00      	cmp	r3, #0
 800a738:	d109      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a73a:	4b79      	ldr	r3, [pc, #484]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	08db      	lsrs	r3, r3, #3
 800a740:	f003 0303 	and.w	r3, r3, #3
 800a744:	4a77      	ldr	r2, [pc, #476]	; (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a746:	fa22 f303 	lsr.w	r3, r2, r3
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a74c:	e01e      	b.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a74e:	4b74      	ldr	r3, [pc, #464]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a75a:	d106      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a762:	d102      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a764:	4b70      	ldr	r3, [pc, #448]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a768:	e010      	b.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a76a:	4b6d      	ldr	r3, [pc, #436]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a776:	d106      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77e:	d102      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a780:	4b6a      	ldr	r3, [pc, #424]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a784:	e002      	b.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a78a:	e122      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a78c:	e121      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a792:	e11e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a794:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a798:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a79c:	430b      	orrs	r3, r1
 800a79e:	d133      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7a0:	4b5f      	ldr	r3, [pc, #380]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d004      	beq.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b6:	d012      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a7b8:	e023      	b.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7ba:	4b59      	ldr	r3, [pc, #356]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7c6:	d107      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fbc7 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d6:	e0fc      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7dc:	e0f9      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7de:	4b50      	ldr	r3, [pc, #320]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7ea:	d107      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ec:	f107 0318 	add.w	r3, r7, #24
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 f90d 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fa:	e0ea      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a800:	e0e7      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a806:	e0e4      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a80c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a810:	430b      	orrs	r3, r1
 800a812:	f040 808d 	bne.w	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a816:	4b42      	ldr	r3, [pc, #264]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a81e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a826:	d06b      	beq.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a82e:	d874      	bhi.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a836:	d056      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d86c      	bhi.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a842:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a846:	d03b      	beq.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a84e:	d864      	bhi.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a856:	d021      	beq.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85e:	d85c      	bhi.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a86c:	d004      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a86e:	e054      	b.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a870:	f000 f8b8 	bl	800a9e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a874:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a876:	e0ac      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a878:	4b29      	ldr	r3, [pc, #164]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a884:	d107      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a886:	f107 0318 	add.w	r3, r7, #24
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 f8c0 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a894:	e09d      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89a:	e09a      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a89c:	4b20      	ldr	r3, [pc, #128]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a8:	d107      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8aa:	f107 030c 	add.w	r3, r7, #12
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fa02 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b8:	e08b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8be:	e088      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8c0:	4b17      	ldr	r3, [pc, #92]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d109      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	08db      	lsrs	r3, r3, #3
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	4a13      	ldr	r2, [pc, #76]	; (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8de:	e078      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e4:	e075      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8e6:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f2:	d102      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a8f4:	4b0c      	ldr	r3, [pc, #48]	; (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f8:	e06b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fe:	e068      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a90c:	d102      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a912:	e05e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a918:	e05b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91e:	e058      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a920:	58024400 	.word	0x58024400
 800a924:	03d09000 	.word	0x03d09000
 800a928:	003d0900 	.word	0x003d0900
 800a92c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a934:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a938:	430b      	orrs	r3, r1
 800a93a:	d148      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a93c:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a944:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a94c:	d02a      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a954:	d838      	bhi.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a962:	d00d      	beq.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a964:	e030      	b.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a966:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a972:	d102      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a974:	4b1a      	ldr	r3, [pc, #104]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a978:	e02b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a97e:	e028      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a980:	4b16      	ldr	r3, [pc, #88]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a98c:	d107      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fae4 	bl	800af60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a99c:	e019      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a2:	e016      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b0:	d107      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b2:	f107 0318 	add.w	r3, r7, #24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f82a 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c0:	e007      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9c6:	e004      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9cc:	e001      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3740      	adds	r7, #64	; 0x40
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	017d7840 	.word	0x017d7840

0800a9e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9e8:	f7fe f816 	bl	8008a18 <HAL_RCC_GetHCLKFreq>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	091b      	lsrs	r3, r3, #4
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	4904      	ldr	r1, [pc, #16]	; (800aa0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9fa:	5ccb      	ldrb	r3, [r1, r3]
 800a9fc:	f003 031f 	and.w	r3, r3, #31
 800aa00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	58024400 	.word	0x58024400
 800aa0c:	08010308 	.word	0x08010308

0800aa10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b089      	sub	sp, #36	; 0x24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa18:	4ba1      	ldr	r3, [pc, #644]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1c:	f003 0303 	and.w	r3, r3, #3
 800aa20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa22:	4b9f      	ldr	r3, [pc, #636]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	0b1b      	lsrs	r3, r3, #12
 800aa28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa2e:	4b9c      	ldr	r3, [pc, #624]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	091b      	lsrs	r3, r3, #4
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa3a:	4b99      	ldr	r3, [pc, #612]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3e:	08db      	lsrs	r3, r3, #3
 800aa40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	fb02 f303 	mul.w	r3, r2, r3
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 8111 	beq.w	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	f000 8083 	beq.w	800ab6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	f200 80a1 	bhi.w	800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d056      	beq.n	800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa7a:	e099      	b.n	800abb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa7c:	4b88      	ldr	r3, [pc, #544]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0320 	and.w	r3, r3, #32
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d02d      	beq.n	800aae4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa88:	4b85      	ldr	r3, [pc, #532]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	08db      	lsrs	r3, r3, #3
 800aa8e:	f003 0303 	and.w	r3, r3, #3
 800aa92:	4a84      	ldr	r2, [pc, #528]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa94:	fa22 f303 	lsr.w	r3, r2, r3
 800aa98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	ee07 3a90 	vmov	s15, r3
 800aaa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab2:	4b7b      	ldr	r3, [pc, #492]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aade:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aae2:	e087      	b.n	800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aaf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf6:	4b6a      	ldr	r3, [pc, #424]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab26:	e065      	b.n	800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3a:	4b59      	ldr	r3, [pc, #356]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab6a:	e043      	b.n	800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7e:	4b48      	ldr	r3, [pc, #288]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abae:	e021      	b.n	800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc2:	4b37      	ldr	r3, [pc, #220]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800abf4:	4b2a      	ldr	r3, [pc, #168]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	0a5b      	lsrs	r3, r3, #9
 800abfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1a:	ee17 2a90 	vmov	r2, s15
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac22:	4b1f      	ldr	r3, [pc, #124]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	0c1b      	lsrs	r3, r3, #16
 800ac28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac48:	ee17 2a90 	vmov	r2, s15
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac50:	4b13      	ldr	r3, [pc, #76]	; (800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	0e1b      	lsrs	r3, r3, #24
 800ac56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac76:	ee17 2a90 	vmov	r2, s15
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac7e:	e008      	b.n	800ac92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	609a      	str	r2, [r3, #8]
}
 800ac92:	bf00      	nop
 800ac94:	3724      	adds	r7, #36	; 0x24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	58024400 	.word	0x58024400
 800aca4:	03d09000 	.word	0x03d09000
 800aca8:	46000000 	.word	0x46000000
 800acac:	4c742400 	.word	0x4c742400
 800acb0:	4a742400 	.word	0x4a742400
 800acb4:	4bbebc20 	.word	0x4bbebc20

0800acb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800acb8:	b480      	push	{r7}
 800acba:	b089      	sub	sp, #36	; 0x24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acc0:	4ba1      	ldr	r3, [pc, #644]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	f003 0303 	and.w	r3, r3, #3
 800acc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acca:	4b9f      	ldr	r3, [pc, #636]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	0d1b      	lsrs	r3, r3, #20
 800acd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acd6:	4b9c      	ldr	r3, [pc, #624]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	f003 0301 	and.w	r3, r3, #1
 800ace0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ace2:	4b99      	ldr	r3, [pc, #612]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	fb02 f303 	mul.w	r3, r2, r3
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 8111 	beq.w	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	f000 8083 	beq.w	800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	f200 80a1 	bhi.w	800ae58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d003      	beq.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d056      	beq.n	800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad22:	e099      	b.n	800ae58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad24:	4b88      	ldr	r3, [pc, #544]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d02d      	beq.n	800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad30:	4b85      	ldr	r3, [pc, #532]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	08db      	lsrs	r3, r3, #3
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	4a84      	ldr	r2, [pc, #528]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5a:	4b7b      	ldr	r3, [pc, #492]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad8a:	e087      	b.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad9e:	4b6a      	ldr	r3, [pc, #424]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adae:	ed97 6a03 	vldr	s12, [r7, #12]
 800adb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adce:	e065      	b.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ade2:	4b59      	ldr	r3, [pc, #356]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800adf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae12:	e043      	b.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae26:	4b48      	ldr	r3, [pc, #288]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae56:	e021      	b.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6a:	4b37      	ldr	r3, [pc, #220]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae9c:	4b2a      	ldr	r3, [pc, #168]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea0:	0a5b      	lsrs	r3, r3, #9
 800aea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec2:	ee17 2a90 	vmov	r2, s15
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aeca:	4b1f      	ldr	r3, [pc, #124]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	0c1b      	lsrs	r3, r3, #16
 800aed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed4:	ee07 3a90 	vmov	s15, r3
 800aed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aedc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef0:	ee17 2a90 	vmov	r2, s15
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aef8:	4b13      	ldr	r3, [pc, #76]	; (800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	0e1b      	lsrs	r3, r3, #24
 800aefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af12:	edd7 6a07 	vldr	s13, [r7, #28]
 800af16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af1e:	ee17 2a90 	vmov	r2, s15
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af26:	e008      	b.n	800af3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	609a      	str	r2, [r3, #8]
}
 800af3a:	bf00      	nop
 800af3c:	3724      	adds	r7, #36	; 0x24
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
 800af4c:	03d09000 	.word	0x03d09000
 800af50:	46000000 	.word	0x46000000
 800af54:	4c742400 	.word	0x4c742400
 800af58:	4a742400 	.word	0x4a742400
 800af5c:	4bbebc20 	.word	0x4bbebc20

0800af60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af60:	b480      	push	{r7}
 800af62:	b089      	sub	sp, #36	; 0x24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af68:	4ba0      	ldr	r3, [pc, #640]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af72:	4b9e      	ldr	r3, [pc, #632]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af76:	091b      	lsrs	r3, r3, #4
 800af78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af7c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af7e:	4b9b      	ldr	r3, [pc, #620]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af88:	4b98      	ldr	r3, [pc, #608]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8c:	08db      	lsrs	r3, r3, #3
 800af8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	fb02 f303 	mul.w	r3, r2, r3
 800af98:	ee07 3a90 	vmov	s15, r3
 800af9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 8111 	beq.w	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	f000 8083 	beq.w	800b0ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	f200 80a1 	bhi.w	800b0fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d056      	beq.n	800b076 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afc8:	e099      	b.n	800b0fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afca:	4b88      	ldr	r3, [pc, #544]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d02d      	beq.n	800b032 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afd6:	4b85      	ldr	r3, [pc, #532]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	08db      	lsrs	r3, r3, #3
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	4a83      	ldr	r2, [pc, #524]	; (800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afe2:	fa22 f303 	lsr.w	r3, r2, r3
 800afe6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	ee07 3a90 	vmov	s15, r3
 800aff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b000:	4b7a      	ldr	r3, [pc, #488]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b010:	ed97 6a03 	vldr	s12, [r7, #12]
 800b014:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b030:	e087      	b.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b044:	4b69      	ldr	r3, [pc, #420]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04c:	ee07 3a90 	vmov	s15, r3
 800b050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b054:	ed97 6a03 	vldr	s12, [r7, #12]
 800b058:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b070:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b074:	e065      	b.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	ee07 3a90 	vmov	s15, r3
 800b07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b080:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b088:	4b58      	ldr	r3, [pc, #352]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b090:	ee07 3a90 	vmov	s15, r3
 800b094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b098:	ed97 6a03 	vldr	s12, [r7, #12]
 800b09c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0b8:	e043      	b.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	ee07 3a90 	vmov	s15, r3
 800b0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b200 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0cc:	4b47      	ldr	r3, [pc, #284]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d4:	ee07 3a90 	vmov	s15, r3
 800b0d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0fc:	e021      	b.n	800b142 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	ee07 3a90 	vmov	s15, r3
 800b104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b108:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b10c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b110:	4b36      	ldr	r3, [pc, #216]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b120:	ed97 6a03 	vldr	s12, [r7, #12]
 800b124:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b140:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b142:	4b2a      	ldr	r3, [pc, #168]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b146:	0a5b      	lsrs	r3, r3, #9
 800b148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b14c:	ee07 3a90 	vmov	s15, r3
 800b150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b15c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b168:	ee17 2a90 	vmov	r2, s15
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b170:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b174:	0c1b      	lsrs	r3, r3, #16
 800b176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b18a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b18e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b196:	ee17 2a90 	vmov	r2, s15
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a2:	0e1b      	lsrs	r3, r3, #24
 800b1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a8:	ee07 3a90 	vmov	s15, r3
 800b1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c4:	ee17 2a90 	vmov	r2, s15
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1cc:	e008      	b.n	800b1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	609a      	str	r2, [r3, #8]
}
 800b1e0:	bf00      	nop
 800b1e2:	3724      	adds	r7, #36	; 0x24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	58024400 	.word	0x58024400
 800b1f0:	03d09000 	.word	0x03d09000
 800b1f4:	46000000 	.word	0x46000000
 800b1f8:	4c742400 	.word	0x4c742400
 800b1fc:	4a742400 	.word	0x4a742400
 800b200:	4bbebc20 	.word	0x4bbebc20

0800b204 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b212:	4b53      	ldr	r3, [pc, #332]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b216:	f003 0303 	and.w	r3, r3, #3
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d101      	bne.n	800b222 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e099      	b.n	800b356 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b222:	4b4f      	ldr	r3, [pc, #316]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a4e      	ldr	r2, [pc, #312]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b228:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b22c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b22e:	f7f7 f9a5 	bl	800257c <HAL_GetTick>
 800b232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b234:	e008      	b.n	800b248 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b236:	f7f7 f9a1 	bl	800257c <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	2b02      	cmp	r3, #2
 800b242:	d901      	bls.n	800b248 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e086      	b.n	800b356 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b248:	4b45      	ldr	r3, [pc, #276]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1f0      	bne.n	800b236 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b254:	4b42      	ldr	r3, [pc, #264]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	031b      	lsls	r3, r3, #12
 800b262:	493f      	ldr	r1, [pc, #252]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b264:	4313      	orrs	r3, r2
 800b266:	628b      	str	r3, [r1, #40]	; 0x28
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	3b01      	subs	r3, #1
 800b278:	025b      	lsls	r3, r3, #9
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	3b01      	subs	r3, #1
 800b284:	041b      	lsls	r3, r3, #16
 800b286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	3b01      	subs	r3, #1
 800b292:	061b      	lsls	r3, r3, #24
 800b294:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b298:	4931      	ldr	r1, [pc, #196]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b29e:	4b30      	ldr	r3, [pc, #192]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	492d      	ldr	r1, [pc, #180]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2b0:	4b2b      	ldr	r3, [pc, #172]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	f023 0220 	bic.w	r2, r3, #32
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	4928      	ldr	r1, [pc, #160]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2c2:	4b27      	ldr	r3, [pc, #156]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	4a26      	ldr	r2, [pc, #152]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2c8:	f023 0310 	bic.w	r3, r3, #16
 800b2cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2d2:	4b24      	ldr	r3, [pc, #144]	; (800b364 <RCCEx_PLL2_Config+0x160>)
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	69d2      	ldr	r2, [r2, #28]
 800b2da:	00d2      	lsls	r2, r2, #3
 800b2dc:	4920      	ldr	r1, [pc, #128]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2e2:	4b1f      	ldr	r3, [pc, #124]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e6:	4a1e      	ldr	r2, [pc, #120]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2e8:	f043 0310 	orr.w	r3, r3, #16
 800b2ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d106      	bne.n	800b302 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2f4:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	4a19      	ldr	r2, [pc, #100]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b2fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b300:	e00f      	b.n	800b322 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d106      	bne.n	800b316 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b308:	4b15      	ldr	r3, [pc, #84]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	4a14      	ldr	r2, [pc, #80]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b30e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b312:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b314:	e005      	b.n	800b322 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b316:	4b12      	ldr	r3, [pc, #72]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31a:	4a11      	ldr	r2, [pc, #68]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b31c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b320:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a0e      	ldr	r2, [pc, #56]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32e:	f7f7 f925 	bl	800257c <HAL_GetTick>
 800b332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b334:	e008      	b.n	800b348 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b336:	f7f7 f921 	bl	800257c <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d901      	bls.n	800b348 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e006      	b.n	800b356 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <RCCEx_PLL2_Config+0x15c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d0f0      	beq.n	800b336 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	58024400 	.word	0x58024400
 800b364:	ffff0007 	.word	0xffff0007

0800b368 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b376:	4b53      	ldr	r3, [pc, #332]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37a:	f003 0303 	and.w	r3, r3, #3
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d101      	bne.n	800b386 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e099      	b.n	800b4ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b386:	4b4f      	ldr	r3, [pc, #316]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a4e      	ldr	r2, [pc, #312]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b38c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b392:	f7f7 f8f3 	bl	800257c <HAL_GetTick>
 800b396:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b398:	e008      	b.n	800b3ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b39a:	f7f7 f8ef 	bl	800257c <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d901      	bls.n	800b3ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e086      	b.n	800b4ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3ac:	4b45      	ldr	r3, [pc, #276]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f0      	bne.n	800b39a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3b8:	4b42      	ldr	r3, [pc, #264]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	051b      	lsls	r3, r3, #20
 800b3c6:	493f      	ldr	r1, [pc, #252]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	628b      	str	r3, [r1, #40]	; 0x28
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	025b      	lsls	r3, r3, #9
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	041b      	lsls	r3, r3, #16
 800b3ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	061b      	lsls	r3, r3, #24
 800b3f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3fc:	4931      	ldr	r1, [pc, #196]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b3fe:	4313      	orrs	r3, r2
 800b400:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b402:	4b30      	ldr	r3, [pc, #192]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	492d      	ldr	r1, [pc, #180]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b410:	4313      	orrs	r3, r2
 800b412:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b414:	4b2b      	ldr	r3, [pc, #172]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	4928      	ldr	r1, [pc, #160]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b422:	4313      	orrs	r3, r2
 800b424:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b426:	4b27      	ldr	r3, [pc, #156]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42a:	4a26      	ldr	r2, [pc, #152]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b432:	4b24      	ldr	r3, [pc, #144]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b436:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <RCCEx_PLL3_Config+0x160>)
 800b438:	4013      	ands	r3, r2
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	69d2      	ldr	r2, [r2, #28]
 800b43e:	00d2      	lsls	r2, r2, #3
 800b440:	4920      	ldr	r1, [pc, #128]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b442:	4313      	orrs	r3, r2
 800b444:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b446:	4b1f      	ldr	r3, [pc, #124]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44a:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b44c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d106      	bne.n	800b466 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b458:	4b1a      	ldr	r3, [pc, #104]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	4a19      	ldr	r2, [pc, #100]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b45e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b462:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b464:	e00f      	b.n	800b486 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d106      	bne.n	800b47a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b46c:	4b15      	ldr	r3, [pc, #84]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	4a14      	ldr	r2, [pc, #80]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b472:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b476:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b478:	e005      	b.n	800b486 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47e:	4a11      	ldr	r2, [pc, #68]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b484:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b486:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a0e      	ldr	r2, [pc, #56]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b48c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b492:	f7f7 f873 	bl	800257c <HAL_GetTick>
 800b496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b498:	e008      	b.n	800b4ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b49a:	f7f7 f86f 	bl	800257c <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d901      	bls.n	800b4ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e006      	b.n	800b4ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <RCCEx_PLL3_Config+0x15c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0f0      	beq.n	800b49a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	58024400 	.word	0x58024400
 800b4c8:	ffff0007 	.word	0xffff0007

0800b4cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e10f      	b.n	800b6fe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a87      	ldr	r2, [pc, #540]	; (800b708 <HAL_SPI_Init+0x23c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00f      	beq.n	800b50e <HAL_SPI_Init+0x42>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a86      	ldr	r2, [pc, #536]	; (800b70c <HAL_SPI_Init+0x240>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00a      	beq.n	800b50e <HAL_SPI_Init+0x42>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a84      	ldr	r2, [pc, #528]	; (800b710 <HAL_SPI_Init+0x244>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d005      	beq.n	800b50e <HAL_SPI_Init+0x42>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	2b0f      	cmp	r3, #15
 800b508:	d901      	bls.n	800b50e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e0f7      	b.n	800b6fe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fc12 	bl	800bd38 <SPI_GetPacketSize>
 800b514:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a7b      	ldr	r2, [pc, #492]	; (800b708 <HAL_SPI_Init+0x23c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d00c      	beq.n	800b53a <HAL_SPI_Init+0x6e>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a79      	ldr	r2, [pc, #484]	; (800b70c <HAL_SPI_Init+0x240>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d007      	beq.n	800b53a <HAL_SPI_Init+0x6e>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a78      	ldr	r2, [pc, #480]	; (800b710 <HAL_SPI_Init+0x244>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d002      	beq.n	800b53a <HAL_SPI_Init+0x6e>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b08      	cmp	r3, #8
 800b538:	d811      	bhi.n	800b55e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b53e:	4a72      	ldr	r2, [pc, #456]	; (800b708 <HAL_SPI_Init+0x23c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d009      	beq.n	800b558 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a70      	ldr	r2, [pc, #448]	; (800b70c <HAL_SPI_Init+0x240>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d004      	beq.n	800b558 <HAL_SPI_Init+0x8c>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a6f      	ldr	r2, [pc, #444]	; (800b710 <HAL_SPI_Init+0x244>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d104      	bne.n	800b562 <HAL_SPI_Init+0x96>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b10      	cmp	r3, #16
 800b55c:	d901      	bls.n	800b562 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e0cd      	b.n	800b6fe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d106      	bne.n	800b57c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7f6 fbf2 	bl	8001d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0201 	bic.w	r2, r2, #1
 800b592:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b59e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5a8:	d119      	bne.n	800b5de <HAL_SPI_Init+0x112>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5b2:	d103      	bne.n	800b5bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10c      	bne.n	800b5de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5cc:	d107      	bne.n	800b5de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00f      	beq.n	800b60a <HAL_SPI_Init+0x13e>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	2b06      	cmp	r3, #6
 800b5f0:	d90b      	bls.n	800b60a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	e007      	b.n	800b61a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b618:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	69da      	ldr	r2, [r3, #28]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b622:	431a      	orrs	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	431a      	orrs	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62c:	ea42 0103 	orr.w	r1, r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	431a      	orrs	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64a:	431a      	orrs	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	699b      	ldr	r3, [r3, #24]
 800b650:	431a      	orrs	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	431a      	orrs	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	431a      	orrs	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	431a      	orrs	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	431a      	orrs	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b67a:	ea42 0103 	orr.w	r1, r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d113      	bne.n	800b6ba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f022 0201 	bic.w	r2, r2, #1
 800b6c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	40013000 	.word	0x40013000
 800b70c:	40003800 	.word	0x40003800
 800b710:	40003c00 	.word	0x40003c00

0800b714 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	4613      	mov	r3, r2
 800b722:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b728:	095b      	lsrs	r3, r3, #5
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	3301      	adds	r3, #1
 800b72e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3330      	adds	r3, #48	; 0x30
 800b736:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b738:	f7f6 ff20 	bl	800257c <HAL_GetTick>
 800b73c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b01      	cmp	r3, #1
 800b748:	d001      	beq.n	800b74e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b74a:	2302      	movs	r3, #2
 800b74c:	e250      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <HAL_SPI_Receive+0x46>
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e248      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_SPI_Receive+0x58>
 800b768:	2302      	movs	r3, #2
 800b76a:	e241      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2204      	movs	r2, #4
 800b778:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	88fa      	ldrh	r2, [r7, #6]
 800b78e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	88fa      	ldrh	r2, [r7, #6]
 800b796:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b7c4:	d108      	bne.n	800b7d8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	e009      	b.n	800b7ec <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b7ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	4b95      	ldr	r3, [pc, #596]	; (800ba48 <HAL_SPI_Receive+0x334>)
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	88f9      	ldrh	r1, [r7, #6]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	6812      	ldr	r2, [r2, #0]
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b818:	d107      	bne.n	800b82a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b828:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	2b0f      	cmp	r3, #15
 800b830:	d96c      	bls.n	800b90c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b832:	e064      	b.n	800b8fe <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	2b01      	cmp	r3, #1
 800b848:	d114      	bne.n	800b874 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b852:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b854:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b85a:	1d1a      	adds	r2, r3, #4
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b872:	e044      	b.n	800b8fe <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	8bfa      	ldrh	r2, [r7, #30]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d919      	bls.n	800b8b6 <HAL_SPI_Receive+0x1a2>
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d014      	beq.n	800b8b6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b896:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b89c:	1d1a      	adds	r2, r3, #4
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b8b4:	e023      	b.n	800b8fe <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8b6:	f7f6 fe61 	bl	800257c <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d803      	bhi.n	800b8ce <HAL_SPI_Receive+0x1ba>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8cc:	d102      	bne.n	800b8d4 <HAL_SPI_Receive+0x1c0>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d114      	bne.n	800b8fe <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f98f 	bl	800bbf8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e178      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b904:	b29b      	uxth	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d194      	bne.n	800b834 <HAL_SPI_Receive+0x120>
 800b90a:	e15e      	b.n	800bbca <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	2b07      	cmp	r3, #7
 800b912:	f240 8153 	bls.w	800bbbc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b916:	e08f      	b.n	800ba38 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d114      	bne.n	800b958 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	8812      	ldrh	r2, [r2, #0]
 800b936:	b292      	uxth	r2, r2
 800b938:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b93e:	1c9a      	adds	r2, r3, #2
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	3b01      	subs	r3, #1
 800b94e:	b29a      	uxth	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b956:	e06f      	b.n	800ba38 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b95e:	b29b      	uxth	r3, r3
 800b960:	8bfa      	ldrh	r2, [r7, #30]
 800b962:	429a      	cmp	r2, r3
 800b964:	d924      	bls.n	800b9b0 <HAL_SPI_Receive+0x29c>
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d01f      	beq.n	800b9b0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	8812      	ldrh	r2, [r2, #0]
 800b978:	b292      	uxth	r2, r2
 800b97a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b980:	1c9a      	adds	r2, r3, #2
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	8812      	ldrh	r2, [r2, #0]
 800b98e:	b292      	uxth	r2, r2
 800b990:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b996:	1c9a      	adds	r2, r3, #2
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	3b02      	subs	r3, #2
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9ae:	e043      	b.n	800ba38 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d119      	bne.n	800b9f0 <HAL_SPI_Receive+0x2dc>
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d014      	beq.n	800b9f0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	8812      	ldrh	r2, [r2, #0]
 800b9ce:	b292      	uxth	r2, r2
 800b9d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9d6:	1c9a      	adds	r2, r3, #2
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9ee:	e023      	b.n	800ba38 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9f0:	f7f6 fdc4 	bl	800257c <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d803      	bhi.n	800ba08 <HAL_SPI_Receive+0x2f4>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba06:	d102      	bne.n	800ba0e <HAL_SPI_Receive+0x2fa>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d114      	bne.n	800ba38 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 f8f2 	bl	800bbf8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e0db      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f47f af69 	bne.w	800b918 <HAL_SPI_Receive+0x204>
 800ba46:	e0c0      	b.n	800bbca <HAL_SPI_Receive+0x4b6>
 800ba48:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d117      	bne.n	800ba92 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	3b01      	subs	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba90:	e094      	b.n	800bbbc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	8bfa      	ldrh	r2, [r7, #30]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d946      	bls.n	800bb2e <HAL_SPI_Receive+0x41a>
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d041      	beq.n	800bb2e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bab6:	7812      	ldrb	r2, [r2, #0]
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bad2:	7812      	ldrb	r2, [r2, #0]
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baee:	7812      	ldrb	r2, [r2, #0]
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb0a:	7812      	ldrb	r2, [r2, #0]
 800bb0c:	b2d2      	uxtb	r2, r2
 800bb0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	3b04      	subs	r3, #4
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb2c:	e046      	b.n	800bbbc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d81c      	bhi.n	800bb74 <HAL_SPI_Receive+0x460>
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d017      	beq.n	800bb74 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb50:	7812      	ldrb	r2, [r2, #0]
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb5a:	1c5a      	adds	r2, r3, #1
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb72:	e023      	b.n	800bbbc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb74:	f7f6 fd02 	bl	800257c <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d803      	bhi.n	800bb8c <HAL_SPI_Receive+0x478>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb8a:	d102      	bne.n	800bb92 <HAL_SPI_Receive+0x47e>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d114      	bne.n	800bbbc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 f830 	bl	800bbf8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e019      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f47f af41 	bne.w	800ba4c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f814 	bl	800bbf8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e000      	b.n	800bbf0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bbee:	2300      	movs	r3, #0
  }
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3720      	adds	r7, #32
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	699a      	ldr	r2, [r3, #24]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0208 	orr.w	r2, r2, #8
 800bc16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699a      	ldr	r2, [r3, #24]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f042 0210 	orr.w	r2, r2, #16
 800bc26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f022 0201 	bic.w	r2, r2, #1
 800bc36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6919      	ldr	r1, [r3, #16]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b3c      	ldr	r3, [pc, #240]	; (800bd34 <SPI_CloseTransfer+0x13c>)
 800bc44:	400b      	ands	r3, r1
 800bc46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bc56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b04      	cmp	r3, #4
 800bc62:	d014      	beq.n	800bc8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f003 0320 	and.w	r3, r3, #32
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00f      	beq.n	800bc8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	699a      	ldr	r2, [r3, #24]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f042 0220 	orr.w	r2, r2, #32
 800bc8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d014      	beq.n	800bcc4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00f      	beq.n	800bcc4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcaa:	f043 0204 	orr.w	r2, r3, #4
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	699a      	ldr	r2, [r3, #24]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcc2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00f      	beq.n	800bcee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcd4:	f043 0201 	orr.w	r2, r3, #1
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	699a      	ldr	r2, [r3, #24]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00f      	beq.n	800bd18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcfe:	f043 0208 	orr.w	r2, r3, #8
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699a      	ldr	r2, [r3, #24]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bd28:	bf00      	nop
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	fffffc90 	.word	0xfffffc90

0800bd38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	3301      	adds	r3, #1
 800bd48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	3307      	adds	r3, #7
 800bd56:	08db      	lsrs	r3, r3, #3
 800bd58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b082      	sub	sp, #8
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e049      	b.n	800be14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7f6 f8d9 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	3304      	adds	r3, #4
 800bdaa:	4619      	mov	r1, r3
 800bdac:	4610      	mov	r0, r2
 800bdae:	f000 ffad 	bl	800cd0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d001      	beq.n	800be34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e04c      	b.n	800bece <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a26      	ldr	r2, [pc, #152]	; (800bedc <HAL_TIM_Base_Start+0xc0>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d022      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be4e:	d01d      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a22      	ldr	r2, [pc, #136]	; (800bee0 <HAL_TIM_Base_Start+0xc4>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d018      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a21      	ldr	r2, [pc, #132]	; (800bee4 <HAL_TIM_Base_Start+0xc8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d013      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a1f      	ldr	r2, [pc, #124]	; (800bee8 <HAL_TIM_Base_Start+0xcc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00e      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a1e      	ldr	r2, [pc, #120]	; (800beec <HAL_TIM_Base_Start+0xd0>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d009      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a1c      	ldr	r2, [pc, #112]	; (800bef0 <HAL_TIM_Base_Start+0xd4>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d004      	beq.n	800be8c <HAL_TIM_Base_Start+0x70>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a1b      	ldr	r2, [pc, #108]	; (800bef4 <HAL_TIM_Base_Start+0xd8>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d115      	bne.n	800beb8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	689a      	ldr	r2, [r3, #8]
 800be92:	4b19      	ldr	r3, [pc, #100]	; (800bef8 <HAL_TIM_Base_Start+0xdc>)
 800be94:	4013      	ands	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b06      	cmp	r3, #6
 800be9c:	d015      	beq.n	800beca <HAL_TIM_Base_Start+0xae>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea4:	d011      	beq.n	800beca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f042 0201 	orr.w	r2, r2, #1
 800beb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beb6:	e008      	b.n	800beca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f042 0201 	orr.w	r2, r2, #1
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	e000      	b.n	800becc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40010000 	.word	0x40010000
 800bee0:	40000400 	.word	0x40000400
 800bee4:	40000800 	.word	0x40000800
 800bee8:	40000c00 	.word	0x40000c00
 800beec:	40010400 	.word	0x40010400
 800bef0:	40001800 	.word	0x40001800
 800bef4:	40014000 	.word	0x40014000
 800bef8:	00010007 	.word	0x00010007

0800befc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6a1a      	ldr	r2, [r3, #32]
 800bf0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf0e:	4013      	ands	r3, r2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10f      	bne.n	800bf34 <HAL_TIM_Base_Stop+0x38>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6a1a      	ldr	r2, [r3, #32]
 800bf1a:	f240 4344 	movw	r3, #1092	; 0x444
 800bf1e:	4013      	ands	r3, r2
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d107      	bne.n	800bf34 <HAL_TIM_Base_Stop+0x38>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f022 0201 	bic.w	r2, r2, #1
 800bf32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
	...

0800bf4c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d109      	bne.n	800bf74 <HAL_TIM_OC_Start_IT+0x28>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	bf14      	ite	ne
 800bf6c:	2301      	movne	r3, #1
 800bf6e:	2300      	moveq	r3, #0
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	e03c      	b.n	800bfee <HAL_TIM_OC_Start_IT+0xa2>
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d109      	bne.n	800bf8e <HAL_TIM_OC_Start_IT+0x42>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	bf14      	ite	ne
 800bf86:	2301      	movne	r3, #1
 800bf88:	2300      	moveq	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	e02f      	b.n	800bfee <HAL_TIM_OC_Start_IT+0xa2>
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d109      	bne.n	800bfa8 <HAL_TIM_OC_Start_IT+0x5c>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	bf14      	ite	ne
 800bfa0:	2301      	movne	r3, #1
 800bfa2:	2300      	moveq	r3, #0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	e022      	b.n	800bfee <HAL_TIM_OC_Start_IT+0xa2>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2b0c      	cmp	r3, #12
 800bfac:	d109      	bne.n	800bfc2 <HAL_TIM_OC_Start_IT+0x76>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	bf14      	ite	ne
 800bfba:	2301      	movne	r3, #1
 800bfbc:	2300      	moveq	r3, #0
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	e015      	b.n	800bfee <HAL_TIM_OC_Start_IT+0xa2>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b10      	cmp	r3, #16
 800bfc6:	d109      	bne.n	800bfdc <HAL_TIM_OC_Start_IT+0x90>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	bf14      	ite	ne
 800bfd4:	2301      	movne	r3, #1
 800bfd6:	2300      	moveq	r3, #0
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	e008      	b.n	800bfee <HAL_TIM_OC_Start_IT+0xa2>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	bf14      	ite	ne
 800bfe8:	2301      	movne	r3, #1
 800bfea:	2300      	moveq	r3, #0
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e0ec      	b.n	800c1d0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d104      	bne.n	800c006 <HAL_TIM_OC_Start_IT+0xba>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c004:	e023      	b.n	800c04e <HAL_TIM_OC_Start_IT+0x102>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d104      	bne.n	800c016 <HAL_TIM_OC_Start_IT+0xca>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c014:	e01b      	b.n	800c04e <HAL_TIM_OC_Start_IT+0x102>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d104      	bne.n	800c026 <HAL_TIM_OC_Start_IT+0xda>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c024:	e013      	b.n	800c04e <HAL_TIM_OC_Start_IT+0x102>
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b0c      	cmp	r3, #12
 800c02a:	d104      	bne.n	800c036 <HAL_TIM_OC_Start_IT+0xea>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c034:	e00b      	b.n	800c04e <HAL_TIM_OC_Start_IT+0x102>
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b10      	cmp	r3, #16
 800c03a:	d104      	bne.n	800c046 <HAL_TIM_OC_Start_IT+0xfa>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2202      	movs	r2, #2
 800c040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c044:	e003      	b.n	800c04e <HAL_TIM_OC_Start_IT+0x102>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2202      	movs	r2, #2
 800c04a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b0c      	cmp	r3, #12
 800c052:	d841      	bhi.n	800c0d8 <HAL_TIM_OC_Start_IT+0x18c>
 800c054:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <HAL_TIM_OC_Start_IT+0x110>)
 800c056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05a:	bf00      	nop
 800c05c:	0800c091 	.word	0x0800c091
 800c060:	0800c0d9 	.word	0x0800c0d9
 800c064:	0800c0d9 	.word	0x0800c0d9
 800c068:	0800c0d9 	.word	0x0800c0d9
 800c06c:	0800c0a3 	.word	0x0800c0a3
 800c070:	0800c0d9 	.word	0x0800c0d9
 800c074:	0800c0d9 	.word	0x0800c0d9
 800c078:	0800c0d9 	.word	0x0800c0d9
 800c07c:	0800c0b5 	.word	0x0800c0b5
 800c080:	0800c0d9 	.word	0x0800c0d9
 800c084:	0800c0d9 	.word	0x0800c0d9
 800c088:	0800c0d9 	.word	0x0800c0d9
 800c08c:	0800c0c7 	.word	0x0800c0c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68da      	ldr	r2, [r3, #12]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f042 0202 	orr.w	r2, r2, #2
 800c09e:	60da      	str	r2, [r3, #12]
      break;
 800c0a0:	e01d      	b.n	800c0de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f042 0204 	orr.w	r2, r2, #4
 800c0b0:	60da      	str	r2, [r3, #12]
      break;
 800c0b2:	e014      	b.n	800c0de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68da      	ldr	r2, [r3, #12]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f042 0208 	orr.w	r2, r2, #8
 800c0c2:	60da      	str	r2, [r3, #12]
      break;
 800c0c4:	e00b      	b.n	800c0de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f042 0210 	orr.w	r2, r2, #16
 800c0d4:	60da      	str	r2, [r3, #12]
      break;
 800c0d6:	e002      	b.n	800c0de <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	73fb      	strb	r3, [r7, #15]
      break;
 800c0dc:	bf00      	nop
  }

  if (status == HAL_OK)
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d174      	bne.n	800c1ce <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f001 fa27 	bl	800d540 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a38      	ldr	r2, [pc, #224]	; (800c1d8 <HAL_TIM_OC_Start_IT+0x28c>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d013      	beq.n	800c124 <HAL_TIM_OC_Start_IT+0x1d8>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a36      	ldr	r2, [pc, #216]	; (800c1dc <HAL_TIM_OC_Start_IT+0x290>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d00e      	beq.n	800c124 <HAL_TIM_OC_Start_IT+0x1d8>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a35      	ldr	r2, [pc, #212]	; (800c1e0 <HAL_TIM_OC_Start_IT+0x294>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d009      	beq.n	800c124 <HAL_TIM_OC_Start_IT+0x1d8>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a33      	ldr	r2, [pc, #204]	; (800c1e4 <HAL_TIM_OC_Start_IT+0x298>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d004      	beq.n	800c124 <HAL_TIM_OC_Start_IT+0x1d8>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a32      	ldr	r2, [pc, #200]	; (800c1e8 <HAL_TIM_OC_Start_IT+0x29c>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d101      	bne.n	800c128 <HAL_TIM_OC_Start_IT+0x1dc>
 800c124:	2301      	movs	r3, #1
 800c126:	e000      	b.n	800c12a <HAL_TIM_OC_Start_IT+0x1de>
 800c128:	2300      	movs	r3, #0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d007      	beq.n	800c13e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c13c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a25      	ldr	r2, [pc, #148]	; (800c1d8 <HAL_TIM_OC_Start_IT+0x28c>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d022      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c150:	d01d      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a25      	ldr	r2, [pc, #148]	; (800c1ec <HAL_TIM_OC_Start_IT+0x2a0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d018      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a23      	ldr	r2, [pc, #140]	; (800c1f0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d013      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a22      	ldr	r2, [pc, #136]	; (800c1f4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d00e      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a19      	ldr	r2, [pc, #100]	; (800c1dc <HAL_TIM_OC_Start_IT+0x290>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d009      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a1e      	ldr	r2, [pc, #120]	; (800c1f8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d004      	beq.n	800c18e <HAL_TIM_OC_Start_IT+0x242>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a15      	ldr	r2, [pc, #84]	; (800c1e0 <HAL_TIM_OC_Start_IT+0x294>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d115      	bne.n	800c1ba <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	4b19      	ldr	r3, [pc, #100]	; (800c1fc <HAL_TIM_OC_Start_IT+0x2b0>)
 800c196:	4013      	ands	r3, r2
 800c198:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2b06      	cmp	r3, #6
 800c19e:	d015      	beq.n	800c1cc <HAL_TIM_OC_Start_IT+0x280>
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1a6:	d011      	beq.n	800c1cc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f042 0201 	orr.w	r2, r2, #1
 800c1b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b8:	e008      	b.n	800c1cc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	e000      	b.n	800c1ce <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	40010000 	.word	0x40010000
 800c1dc:	40010400 	.word	0x40010400
 800c1e0:	40014000 	.word	0x40014000
 800c1e4:	40014400 	.word	0x40014400
 800c1e8:	40014800 	.word	0x40014800
 800c1ec:	40000400 	.word	0x40000400
 800c1f0:	40000800 	.word	0x40000800
 800c1f4:	40000c00 	.word	0x40000c00
 800c1f8:	40001800 	.word	0x40001800
 800c1fc:	00010007 	.word	0x00010007

0800c200 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b0c      	cmp	r3, #12
 800c212:	d841      	bhi.n	800c298 <HAL_TIM_OC_Stop_IT+0x98>
 800c214:	a201      	add	r2, pc, #4	; (adr r2, 800c21c <HAL_TIM_OC_Stop_IT+0x1c>)
 800c216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21a:	bf00      	nop
 800c21c:	0800c251 	.word	0x0800c251
 800c220:	0800c299 	.word	0x0800c299
 800c224:	0800c299 	.word	0x0800c299
 800c228:	0800c299 	.word	0x0800c299
 800c22c:	0800c263 	.word	0x0800c263
 800c230:	0800c299 	.word	0x0800c299
 800c234:	0800c299 	.word	0x0800c299
 800c238:	0800c299 	.word	0x0800c299
 800c23c:	0800c275 	.word	0x0800c275
 800c240:	0800c299 	.word	0x0800c299
 800c244:	0800c299 	.word	0x0800c299
 800c248:	0800c299 	.word	0x0800c299
 800c24c:	0800c287 	.word	0x0800c287
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68da      	ldr	r2, [r3, #12]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 0202 	bic.w	r2, r2, #2
 800c25e:	60da      	str	r2, [r3, #12]
      break;
 800c260:	e01d      	b.n	800c29e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68da      	ldr	r2, [r3, #12]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f022 0204 	bic.w	r2, r2, #4
 800c270:	60da      	str	r2, [r3, #12]
      break;
 800c272:	e014      	b.n	800c29e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68da      	ldr	r2, [r3, #12]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 0208 	bic.w	r2, r2, #8
 800c282:	60da      	str	r2, [r3, #12]
      break;
 800c284:	e00b      	b.n	800c29e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f022 0210 	bic.w	r2, r2, #16
 800c294:	60da      	str	r2, [r3, #12]
      break;
 800c296:	e002      	b.n	800c29e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	73fb      	strb	r3, [r7, #15]
      break;
 800c29c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8081 	bne.w	800c3a8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 f946 	bl	800d540 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a3e      	ldr	r2, [pc, #248]	; (800c3b4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d013      	beq.n	800c2e6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a3d      	ldr	r2, [pc, #244]	; (800c3b8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d00e      	beq.n	800c2e6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a3b      	ldr	r2, [pc, #236]	; (800c3bc <HAL_TIM_OC_Stop_IT+0x1bc>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d009      	beq.n	800c2e6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a3a      	ldr	r2, [pc, #232]	; (800c3c0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d004      	beq.n	800c2e6 <HAL_TIM_OC_Stop_IT+0xe6>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a38      	ldr	r2, [pc, #224]	; (800c3c4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d101      	bne.n	800c2ea <HAL_TIM_OC_Stop_IT+0xea>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e000      	b.n	800c2ec <HAL_TIM_OC_Stop_IT+0xec>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d017      	beq.n	800c320 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6a1a      	ldr	r2, [r3, #32]
 800c2f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10f      	bne.n	800c320 <HAL_TIM_OC_Stop_IT+0x120>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6a1a      	ldr	r2, [r3, #32]
 800c306:	f240 4344 	movw	r3, #1092	; 0x444
 800c30a:	4013      	ands	r3, r2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <HAL_TIM_OC_Stop_IT+0x120>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c31e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6a1a      	ldr	r2, [r3, #32]
 800c326:	f241 1311 	movw	r3, #4369	; 0x1111
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10f      	bne.n	800c350 <HAL_TIM_OC_Stop_IT+0x150>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6a1a      	ldr	r2, [r3, #32]
 800c336:	f240 4344 	movw	r3, #1092	; 0x444
 800c33a:	4013      	ands	r3, r2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d107      	bne.n	800c350 <HAL_TIM_OC_Stop_IT+0x150>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f022 0201 	bic.w	r2, r2, #1
 800c34e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d104      	bne.n	800c360 <HAL_TIM_OC_Stop_IT+0x160>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c35e:	e023      	b.n	800c3a8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b04      	cmp	r3, #4
 800c364:	d104      	bne.n	800c370 <HAL_TIM_OC_Stop_IT+0x170>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c36e:	e01b      	b.n	800c3a8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b08      	cmp	r3, #8
 800c374:	d104      	bne.n	800c380 <HAL_TIM_OC_Stop_IT+0x180>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c37e:	e013      	b.n	800c3a8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	2b0c      	cmp	r3, #12
 800c384:	d104      	bne.n	800c390 <HAL_TIM_OC_Stop_IT+0x190>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c38e:	e00b      	b.n	800c3a8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b10      	cmp	r3, #16
 800c394:	d104      	bne.n	800c3a0 <HAL_TIM_OC_Stop_IT+0x1a0>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c39e:	e003      	b.n	800c3a8 <HAL_TIM_OC_Stop_IT+0x1a8>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	40014400 	.word	0x40014400
 800c3c4:	40014800 	.word	0x40014800

0800c3c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e049      	b.n	800c46e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7f5 fd6c 	bl	8001ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3304      	adds	r3, #4
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f000 fc80 	bl	800cd0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
	...

0800c478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <HAL_TIM_PWM_Start+0x24>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b01      	cmp	r3, #1
 800c492:	bf14      	ite	ne
 800c494:	2301      	movne	r3, #1
 800c496:	2300      	moveq	r3, #0
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	e03c      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b04      	cmp	r3, #4
 800c4a0:	d109      	bne.n	800c4b6 <HAL_TIM_PWM_Start+0x3e>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	bf14      	ite	ne
 800c4ae:	2301      	movne	r3, #1
 800c4b0:	2300      	moveq	r3, #0
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	e02f      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d109      	bne.n	800c4d0 <HAL_TIM_PWM_Start+0x58>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	bf14      	ite	ne
 800c4c8:	2301      	movne	r3, #1
 800c4ca:	2300      	moveq	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	e022      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b0c      	cmp	r3, #12
 800c4d4:	d109      	bne.n	800c4ea <HAL_TIM_PWM_Start+0x72>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	bf14      	ite	ne
 800c4e2:	2301      	movne	r3, #1
 800c4e4:	2300      	moveq	r3, #0
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	e015      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b10      	cmp	r3, #16
 800c4ee:	d109      	bne.n	800c504 <HAL_TIM_PWM_Start+0x8c>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	bf14      	ite	ne
 800c4fc:	2301      	movne	r3, #1
 800c4fe:	2300      	moveq	r3, #0
 800c500:	b2db      	uxtb	r3, r3
 800c502:	e008      	b.n	800c516 <HAL_TIM_PWM_Start+0x9e>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	bf14      	ite	ne
 800c510:	2301      	movne	r3, #1
 800c512:	2300      	moveq	r3, #0
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e0a1      	b.n	800c662 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d104      	bne.n	800c52e <HAL_TIM_PWM_Start+0xb6>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2202      	movs	r2, #2
 800c528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c52c:	e023      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d104      	bne.n	800c53e <HAL_TIM_PWM_Start+0xc6>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2202      	movs	r2, #2
 800c538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c53c:	e01b      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b08      	cmp	r3, #8
 800c542:	d104      	bne.n	800c54e <HAL_TIM_PWM_Start+0xd6>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2202      	movs	r2, #2
 800c548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c54c:	e013      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b0c      	cmp	r3, #12
 800c552:	d104      	bne.n	800c55e <HAL_TIM_PWM_Start+0xe6>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c55c:	e00b      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b10      	cmp	r3, #16
 800c562:	d104      	bne.n	800c56e <HAL_TIM_PWM_Start+0xf6>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2202      	movs	r2, #2
 800c568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c56c:	e003      	b.n	800c576 <HAL_TIM_PWM_Start+0xfe>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2202      	movs	r2, #2
 800c572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2201      	movs	r2, #1
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 ffde 	bl	800d540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a38      	ldr	r2, [pc, #224]	; (800c66c <HAL_TIM_PWM_Start+0x1f4>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d013      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a37      	ldr	r2, [pc, #220]	; (800c670 <HAL_TIM_PWM_Start+0x1f8>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00e      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a35      	ldr	r2, [pc, #212]	; (800c674 <HAL_TIM_PWM_Start+0x1fc>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a34      	ldr	r2, [pc, #208]	; (800c678 <HAL_TIM_PWM_Start+0x200>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d004      	beq.n	800c5b6 <HAL_TIM_PWM_Start+0x13e>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a32      	ldr	r2, [pc, #200]	; (800c67c <HAL_TIM_PWM_Start+0x204>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d101      	bne.n	800c5ba <HAL_TIM_PWM_Start+0x142>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <HAL_TIM_PWM_Start+0x144>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a25      	ldr	r2, [pc, #148]	; (800c66c <HAL_TIM_PWM_Start+0x1f4>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d022      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5e2:	d01d      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a25      	ldr	r2, [pc, #148]	; (800c680 <HAL_TIM_PWM_Start+0x208>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d018      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a24      	ldr	r2, [pc, #144]	; (800c684 <HAL_TIM_PWM_Start+0x20c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d013      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a22      	ldr	r2, [pc, #136]	; (800c688 <HAL_TIM_PWM_Start+0x210>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d00e      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a1a      	ldr	r2, [pc, #104]	; (800c670 <HAL_TIM_PWM_Start+0x1f8>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d009      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a1e      	ldr	r2, [pc, #120]	; (800c68c <HAL_TIM_PWM_Start+0x214>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d004      	beq.n	800c620 <HAL_TIM_PWM_Start+0x1a8>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a16      	ldr	r2, [pc, #88]	; (800c674 <HAL_TIM_PWM_Start+0x1fc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d115      	bne.n	800c64c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	689a      	ldr	r2, [r3, #8]
 800c626:	4b1a      	ldr	r3, [pc, #104]	; (800c690 <HAL_TIM_PWM_Start+0x218>)
 800c628:	4013      	ands	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b06      	cmp	r3, #6
 800c630:	d015      	beq.n	800c65e <HAL_TIM_PWM_Start+0x1e6>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c638:	d011      	beq.n	800c65e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f042 0201 	orr.w	r2, r2, #1
 800c648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c64a:	e008      	b.n	800c65e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 0201 	orr.w	r2, r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e000      	b.n	800c660 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c65e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	40010000 	.word	0x40010000
 800c670:	40010400 	.word	0x40010400
 800c674:	40014000 	.word	0x40014000
 800c678:	40014400 	.word	0x40014400
 800c67c:	40014800 	.word	0x40014800
 800c680:	40000400 	.word	0x40000400
 800c684:	40000800 	.word	0x40000800
 800c688:	40000c00 	.word	0x40000c00
 800c68c:	40001800 	.word	0x40001800
 800c690:	00010007 	.word	0x00010007

0800c694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f003 0302 	and.w	r3, r3, #2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d020      	beq.n	800c6f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f003 0302 	and.w	r3, r3, #2
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d01b      	beq.n	800c6f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f06f 0202 	mvn.w	r2, #2
 800c6c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d003      	beq.n	800c6e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 faf6 	bl	800ccd0 <HAL_TIM_IC_CaptureCallback>
 800c6e4:	e005      	b.n	800c6f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7f4 f8a6 	bl	8000838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 faf9 	bl	800cce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f003 0304 	and.w	r3, r3, #4
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d020      	beq.n	800c744 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f003 0304 	and.w	r3, r3, #4
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d01b      	beq.n	800c744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f06f 0204 	mvn.w	r2, #4
 800c714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2202      	movs	r2, #2
 800c71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fad0 	bl	800ccd0 <HAL_TIM_IC_CaptureCallback>
 800c730:	e005      	b.n	800c73e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7f4 f880 	bl	8000838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fad3 	bl	800cce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	f003 0308 	and.w	r3, r3, #8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d020      	beq.n	800c790 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f003 0308 	and.w	r3, r3, #8
 800c754:	2b00      	cmp	r3, #0
 800c756:	d01b      	beq.n	800c790 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f06f 0208 	mvn.w	r2, #8
 800c760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2204      	movs	r2, #4
 800c766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	f003 0303 	and.w	r3, r3, #3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 faaa 	bl	800ccd0 <HAL_TIM_IC_CaptureCallback>
 800c77c:	e005      	b.n	800c78a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7f4 f85a 	bl	8000838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 faad 	bl	800cce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	f003 0310 	and.w	r3, r3, #16
 800c796:	2b00      	cmp	r3, #0
 800c798:	d020      	beq.n	800c7dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f003 0310 	and.w	r3, r3, #16
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01b      	beq.n	800c7dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f06f 0210 	mvn.w	r2, #16
 800c7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2208      	movs	r2, #8
 800c7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d003      	beq.n	800c7ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fa84 	bl	800ccd0 <HAL_TIM_IC_CaptureCallback>
 800c7c8:	e005      	b.n	800c7d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7f4 f834 	bl	8000838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fa87 	bl	800cce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00c      	beq.n	800c800 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d007      	beq.n	800c800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f06f 0201 	mvn.w	r2, #1
 800c7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fa5e 	bl	800ccbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c806:	2b00      	cmp	r3, #0
 800c808:	d104      	bne.n	800c814 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00c      	beq.n	800c82e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d007      	beq.n	800c82e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 ffc5 	bl	800d7b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00c      	beq.n	800c852 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d007      	beq.n	800c852 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 ffbd 	bl	800d7cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00c      	beq.n	800c876 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c862:	2b00      	cmp	r3, #0
 800c864:	d007      	beq.n	800c876 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 fa41 	bl	800ccf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	f003 0320 	and.w	r3, r3, #32
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00c      	beq.n	800c89a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f003 0320 	and.w	r3, r3, #32
 800c886:	2b00      	cmp	r3, #0
 800c888:	d007      	beq.n	800c89a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f06f 0220 	mvn.w	r2, #32
 800c892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 ff85 	bl	800d7a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d101      	bne.n	800c8c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8be:	2302      	movs	r3, #2
 800c8c0:	e0ff      	b.n	800cac2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b14      	cmp	r3, #20
 800c8ce:	f200 80f0 	bhi.w	800cab2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8d2:	a201      	add	r2, pc, #4	; (adr r2, 800c8d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d8:	0800c92d 	.word	0x0800c92d
 800c8dc:	0800cab3 	.word	0x0800cab3
 800c8e0:	0800cab3 	.word	0x0800cab3
 800c8e4:	0800cab3 	.word	0x0800cab3
 800c8e8:	0800c96d 	.word	0x0800c96d
 800c8ec:	0800cab3 	.word	0x0800cab3
 800c8f0:	0800cab3 	.word	0x0800cab3
 800c8f4:	0800cab3 	.word	0x0800cab3
 800c8f8:	0800c9af 	.word	0x0800c9af
 800c8fc:	0800cab3 	.word	0x0800cab3
 800c900:	0800cab3 	.word	0x0800cab3
 800c904:	0800cab3 	.word	0x0800cab3
 800c908:	0800c9ef 	.word	0x0800c9ef
 800c90c:	0800cab3 	.word	0x0800cab3
 800c910:	0800cab3 	.word	0x0800cab3
 800c914:	0800cab3 	.word	0x0800cab3
 800c918:	0800ca31 	.word	0x0800ca31
 800c91c:	0800cab3 	.word	0x0800cab3
 800c920:	0800cab3 	.word	0x0800cab3
 800c924:	0800cab3 	.word	0x0800cab3
 800c928:	0800ca71 	.word	0x0800ca71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fa90 	bl	800ce58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	699a      	ldr	r2, [r3, #24]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f042 0208 	orr.w	r2, r2, #8
 800c946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	699a      	ldr	r2, [r3, #24]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f022 0204 	bic.w	r2, r2, #4
 800c956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6999      	ldr	r1, [r3, #24]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	691a      	ldr	r2, [r3, #16]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	430a      	orrs	r2, r1
 800c968:	619a      	str	r2, [r3, #24]
      break;
 800c96a:	e0a5      	b.n	800cab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68b9      	ldr	r1, [r7, #8]
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fb00 	bl	800cf78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6999      	ldr	r1, [r3, #24]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	021a      	lsls	r2, r3, #8
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	619a      	str	r2, [r3, #24]
      break;
 800c9ac:	e084      	b.n	800cab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68b9      	ldr	r1, [r7, #8]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 fb69 	bl	800d08c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69da      	ldr	r2, [r3, #28]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f042 0208 	orr.w	r2, r2, #8
 800c9c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69da      	ldr	r2, [r3, #28]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0204 	bic.w	r2, r2, #4
 800c9d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69d9      	ldr	r1, [r3, #28]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	691a      	ldr	r2, [r3, #16]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	61da      	str	r2, [r3, #28]
      break;
 800c9ec:	e064      	b.n	800cab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fbd1 	bl	800d19c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	69da      	ldr	r2, [r3, #28]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	69da      	ldr	r2, [r3, #28]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	69d9      	ldr	r1, [r3, #28]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	021a      	lsls	r2, r3, #8
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	61da      	str	r2, [r3, #28]
      break;
 800ca2e:	e043      	b.n	800cab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68b9      	ldr	r1, [r7, #8]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 fc1a 	bl	800d270 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f042 0208 	orr.w	r2, r2, #8
 800ca4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f022 0204 	bic.w	r2, r2, #4
 800ca5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	691a      	ldr	r2, [r3, #16]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca6e:	e023      	b.n	800cab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fc5e 	bl	800d338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	021a      	lsls	r2, r3, #8
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	430a      	orrs	r2, r1
 800caae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cab0:	e002      	b.n	800cab8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	75fb      	strb	r3, [r7, #23]
      break;
 800cab6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop

0800cacc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d101      	bne.n	800cae8 <HAL_TIM_ConfigClockSource+0x1c>
 800cae4:	2302      	movs	r3, #2
 800cae6:	e0dc      	b.n	800cca2 <HAL_TIM_ConfigClockSource+0x1d6>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2202      	movs	r2, #2
 800caf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	4b6a      	ldr	r3, [pc, #424]	; (800ccac <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb04:	4013      	ands	r3, r2
 800cb06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a64      	ldr	r2, [pc, #400]	; (800ccb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	f000 80a9 	beq.w	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb24:	4a62      	ldr	r2, [pc, #392]	; (800ccb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	f200 80ae 	bhi.w	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb2c:	4a61      	ldr	r2, [pc, #388]	; (800ccb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	f000 80a1 	beq.w	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb34:	4a5f      	ldr	r2, [pc, #380]	; (800ccb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	f200 80a6 	bhi.w	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb3c:	4a5e      	ldr	r2, [pc, #376]	; (800ccb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	f000 8099 	beq.w	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb44:	4a5c      	ldr	r2, [pc, #368]	; (800ccb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	f200 809e 	bhi.w	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb50:	f000 8091 	beq.w	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb58:	f200 8096 	bhi.w	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb60:	f000 8089 	beq.w	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb68:	f200 808e 	bhi.w	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb70:	d03e      	beq.n	800cbf0 <HAL_TIM_ConfigClockSource+0x124>
 800cb72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb76:	f200 8087 	bhi.w	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb7e:	f000 8086 	beq.w	800cc8e <HAL_TIM_ConfigClockSource+0x1c2>
 800cb82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb86:	d87f      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb88:	2b70      	cmp	r3, #112	; 0x70
 800cb8a:	d01a      	beq.n	800cbc2 <HAL_TIM_ConfigClockSource+0xf6>
 800cb8c:	2b70      	cmp	r3, #112	; 0x70
 800cb8e:	d87b      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb90:	2b60      	cmp	r3, #96	; 0x60
 800cb92:	d050      	beq.n	800cc36 <HAL_TIM_ConfigClockSource+0x16a>
 800cb94:	2b60      	cmp	r3, #96	; 0x60
 800cb96:	d877      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb98:	2b50      	cmp	r3, #80	; 0x50
 800cb9a:	d03c      	beq.n	800cc16 <HAL_TIM_ConfigClockSource+0x14a>
 800cb9c:	2b50      	cmp	r3, #80	; 0x50
 800cb9e:	d873      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba0:	2b40      	cmp	r3, #64	; 0x40
 800cba2:	d058      	beq.n	800cc56 <HAL_TIM_ConfigClockSource+0x18a>
 800cba4:	2b40      	cmp	r3, #64	; 0x40
 800cba6:	d86f      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba8:	2b30      	cmp	r3, #48	; 0x30
 800cbaa:	d064      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbac:	2b30      	cmp	r3, #48	; 0x30
 800cbae:	d86b      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d060      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	d867      	bhi.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d05c      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbbc:	2b10      	cmp	r3, #16
 800cbbe:	d05a      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbc0:	e062      	b.n	800cc88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cbd2:	f000 fc95 	bl	800d500 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cbe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	609a      	str	r2, [r3, #8]
      break;
 800cbee:	e04f      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc00:	f000 fc7e 	bl	800d500 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	689a      	ldr	r2, [r3, #8]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc12:	609a      	str	r2, [r3, #8]
      break;
 800cc14:	e03c      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc22:	461a      	mov	r2, r3
 800cc24:	f000 fbee 	bl	800d404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2150      	movs	r1, #80	; 0x50
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fc48 	bl	800d4c4 <TIM_ITRx_SetConfig>
      break;
 800cc34:	e02c      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc42:	461a      	mov	r2, r3
 800cc44:	f000 fc0d 	bl	800d462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2160      	movs	r1, #96	; 0x60
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 fc38 	bl	800d4c4 <TIM_ITRx_SetConfig>
      break;
 800cc54:	e01c      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc62:	461a      	mov	r2, r3
 800cc64:	f000 fbce 	bl	800d404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2140      	movs	r1, #64	; 0x40
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fc28 	bl	800d4c4 <TIM_ITRx_SetConfig>
      break;
 800cc74:	e00c      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f000 fc1f 	bl	800d4c4 <TIM_ITRx_SetConfig>
      break;
 800cc86:	e003      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc8c:	e000      	b.n	800cc90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cc8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	ffceff88 	.word	0xffceff88
 800ccb0:	00100040 	.word	0x00100040
 800ccb4:	00100030 	.word	0x00100030
 800ccb8:	00100020 	.word	0x00100020

0800ccbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a46      	ldr	r2, [pc, #280]	; (800ce38 <TIM_Base_SetConfig+0x12c>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d013      	beq.n	800cd4c <TIM_Base_SetConfig+0x40>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd2a:	d00f      	beq.n	800cd4c <TIM_Base_SetConfig+0x40>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a43      	ldr	r2, [pc, #268]	; (800ce3c <TIM_Base_SetConfig+0x130>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d00b      	beq.n	800cd4c <TIM_Base_SetConfig+0x40>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a42      	ldr	r2, [pc, #264]	; (800ce40 <TIM_Base_SetConfig+0x134>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d007      	beq.n	800cd4c <TIM_Base_SetConfig+0x40>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a41      	ldr	r2, [pc, #260]	; (800ce44 <TIM_Base_SetConfig+0x138>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d003      	beq.n	800cd4c <TIM_Base_SetConfig+0x40>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a40      	ldr	r2, [pc, #256]	; (800ce48 <TIM_Base_SetConfig+0x13c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d108      	bne.n	800cd5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a35      	ldr	r2, [pc, #212]	; (800ce38 <TIM_Base_SetConfig+0x12c>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d01f      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd6c:	d01b      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a32      	ldr	r2, [pc, #200]	; (800ce3c <TIM_Base_SetConfig+0x130>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d017      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a31      	ldr	r2, [pc, #196]	; (800ce40 <TIM_Base_SetConfig+0x134>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d013      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a30      	ldr	r2, [pc, #192]	; (800ce44 <TIM_Base_SetConfig+0x138>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d00f      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a2f      	ldr	r2, [pc, #188]	; (800ce48 <TIM_Base_SetConfig+0x13c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d00b      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a2e      	ldr	r2, [pc, #184]	; (800ce4c <TIM_Base_SetConfig+0x140>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d007      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a2d      	ldr	r2, [pc, #180]	; (800ce50 <TIM_Base_SetConfig+0x144>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d003      	beq.n	800cda6 <TIM_Base_SetConfig+0x9a>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a2c      	ldr	r2, [pc, #176]	; (800ce54 <TIM_Base_SetConfig+0x148>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d108      	bne.n	800cdb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	689a      	ldr	r2, [r3, #8]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a16      	ldr	r2, [pc, #88]	; (800ce38 <TIM_Base_SetConfig+0x12c>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d00f      	beq.n	800ce04 <TIM_Base_SetConfig+0xf8>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4a18      	ldr	r2, [pc, #96]	; (800ce48 <TIM_Base_SetConfig+0x13c>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d00b      	beq.n	800ce04 <TIM_Base_SetConfig+0xf8>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a17      	ldr	r2, [pc, #92]	; (800ce4c <TIM_Base_SetConfig+0x140>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d007      	beq.n	800ce04 <TIM_Base_SetConfig+0xf8>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a16      	ldr	r2, [pc, #88]	; (800ce50 <TIM_Base_SetConfig+0x144>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d003      	beq.n	800ce04 <TIM_Base_SetConfig+0xf8>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a15      	ldr	r2, [pc, #84]	; (800ce54 <TIM_Base_SetConfig+0x148>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d103      	bne.n	800ce0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	691a      	ldr	r2, [r3, #16]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d105      	bne.n	800ce2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	f023 0201 	bic.w	r2, r3, #1
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	611a      	str	r2, [r3, #16]
  }
}
 800ce2a:	bf00      	nop
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	40010000 	.word	0x40010000
 800ce3c:	40000400 	.word	0x40000400
 800ce40:	40000800 	.word	0x40000800
 800ce44:	40000c00 	.word	0x40000c00
 800ce48:	40010400 	.word	0x40010400
 800ce4c:	40014000 	.word	0x40014000
 800ce50:	40014400 	.word	0x40014400
 800ce54:	40014800 	.word	0x40014800

0800ce58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	f023 0201 	bic.w	r2, r3, #1
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	4b37      	ldr	r3, [pc, #220]	; (800cf60 <TIM_OC1_SetConfig+0x108>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 0303 	bic.w	r3, r3, #3
 800ce8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f023 0302 	bic.w	r3, r3, #2
 800cea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a2d      	ldr	r2, [pc, #180]	; (800cf64 <TIM_OC1_SetConfig+0x10c>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d00f      	beq.n	800ced4 <TIM_OC1_SetConfig+0x7c>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a2c      	ldr	r2, [pc, #176]	; (800cf68 <TIM_OC1_SetConfig+0x110>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d00b      	beq.n	800ced4 <TIM_OC1_SetConfig+0x7c>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a2b      	ldr	r2, [pc, #172]	; (800cf6c <TIM_OC1_SetConfig+0x114>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d007      	beq.n	800ced4 <TIM_OC1_SetConfig+0x7c>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a2a      	ldr	r2, [pc, #168]	; (800cf70 <TIM_OC1_SetConfig+0x118>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d003      	beq.n	800ced4 <TIM_OC1_SetConfig+0x7c>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a29      	ldr	r2, [pc, #164]	; (800cf74 <TIM_OC1_SetConfig+0x11c>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d10c      	bne.n	800ceee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	f023 0308 	bic.w	r3, r3, #8
 800ceda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	f023 0304 	bic.w	r3, r3, #4
 800ceec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a1c      	ldr	r2, [pc, #112]	; (800cf64 <TIM_OC1_SetConfig+0x10c>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d00f      	beq.n	800cf16 <TIM_OC1_SetConfig+0xbe>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a1b      	ldr	r2, [pc, #108]	; (800cf68 <TIM_OC1_SetConfig+0x110>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d00b      	beq.n	800cf16 <TIM_OC1_SetConfig+0xbe>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a1a      	ldr	r2, [pc, #104]	; (800cf6c <TIM_OC1_SetConfig+0x114>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d007      	beq.n	800cf16 <TIM_OC1_SetConfig+0xbe>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a19      	ldr	r2, [pc, #100]	; (800cf70 <TIM_OC1_SetConfig+0x118>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d003      	beq.n	800cf16 <TIM_OC1_SetConfig+0xbe>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a18      	ldr	r2, [pc, #96]	; (800cf74 <TIM_OC1_SetConfig+0x11c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d111      	bne.n	800cf3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	621a      	str	r2, [r3, #32]
}
 800cf54:	bf00      	nop
 800cf56:	371c      	adds	r7, #28
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr
 800cf60:	fffeff8f 	.word	0xfffeff8f
 800cf64:	40010000 	.word	0x40010000
 800cf68:	40010400 	.word	0x40010400
 800cf6c:	40014000 	.word	0x40014000
 800cf70:	40014400 	.word	0x40014400
 800cf74:	40014800 	.word	0x40014800

0800cf78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b087      	sub	sp, #28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a1b      	ldr	r3, [r3, #32]
 800cf86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	f023 0210 	bic.w	r2, r3, #16
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	4b34      	ldr	r3, [pc, #208]	; (800d074 <TIM_OC2_SetConfig+0xfc>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	021b      	lsls	r3, r3, #8
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	f023 0320 	bic.w	r3, r3, #32
 800cfc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	011b      	lsls	r3, r3, #4
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a29      	ldr	r2, [pc, #164]	; (800d078 <TIM_OC2_SetConfig+0x100>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d003      	beq.n	800cfe0 <TIM_OC2_SetConfig+0x68>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a28      	ldr	r2, [pc, #160]	; (800d07c <TIM_OC2_SetConfig+0x104>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d10d      	bne.n	800cffc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4a1e      	ldr	r2, [pc, #120]	; (800d078 <TIM_OC2_SetConfig+0x100>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d00f      	beq.n	800d024 <TIM_OC2_SetConfig+0xac>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a1d      	ldr	r2, [pc, #116]	; (800d07c <TIM_OC2_SetConfig+0x104>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d00b      	beq.n	800d024 <TIM_OC2_SetConfig+0xac>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a1c      	ldr	r2, [pc, #112]	; (800d080 <TIM_OC2_SetConfig+0x108>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d007      	beq.n	800d024 <TIM_OC2_SetConfig+0xac>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a1b      	ldr	r2, [pc, #108]	; (800d084 <TIM_OC2_SetConfig+0x10c>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d003      	beq.n	800d024 <TIM_OC2_SetConfig+0xac>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a1a      	ldr	r2, [pc, #104]	; (800d088 <TIM_OC2_SetConfig+0x110>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d113      	bne.n	800d04c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d02a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	693a      	ldr	r2, [r7, #16]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	4313      	orrs	r3, r2
 800d04a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	621a      	str	r2, [r3, #32]
}
 800d066:	bf00      	nop
 800d068:	371c      	adds	r7, #28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	feff8fff 	.word	0xfeff8fff
 800d078:	40010000 	.word	0x40010000
 800d07c:	40010400 	.word	0x40010400
 800d080:	40014000 	.word	0x40014000
 800d084:	40014400 	.word	0x40014400
 800d088:	40014800 	.word	0x40014800

0800d08c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a1b      	ldr	r3, [r3, #32]
 800d09a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a1b      	ldr	r3, [r3, #32]
 800d0a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4b33      	ldr	r3, [pc, #204]	; (800d184 <TIM_OC3_SetConfig+0xf8>)
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f023 0303 	bic.w	r3, r3, #3
 800d0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	021b      	lsls	r3, r3, #8
 800d0dc:	697a      	ldr	r2, [r7, #20]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a28      	ldr	r2, [pc, #160]	; (800d188 <TIM_OC3_SetConfig+0xfc>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d003      	beq.n	800d0f2 <TIM_OC3_SetConfig+0x66>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a27      	ldr	r2, [pc, #156]	; (800d18c <TIM_OC3_SetConfig+0x100>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d10d      	bne.n	800d10e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	021b      	lsls	r3, r3, #8
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	4313      	orrs	r3, r2
 800d104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d10c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a1d      	ldr	r2, [pc, #116]	; (800d188 <TIM_OC3_SetConfig+0xfc>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d00f      	beq.n	800d136 <TIM_OC3_SetConfig+0xaa>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a1c      	ldr	r2, [pc, #112]	; (800d18c <TIM_OC3_SetConfig+0x100>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d00b      	beq.n	800d136 <TIM_OC3_SetConfig+0xaa>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4a1b      	ldr	r2, [pc, #108]	; (800d190 <TIM_OC3_SetConfig+0x104>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d007      	beq.n	800d136 <TIM_OC3_SetConfig+0xaa>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a1a      	ldr	r2, [pc, #104]	; (800d194 <TIM_OC3_SetConfig+0x108>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d003      	beq.n	800d136 <TIM_OC3_SetConfig+0xaa>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a19      	ldr	r2, [pc, #100]	; (800d198 <TIM_OC3_SetConfig+0x10c>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d113      	bne.n	800d15e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	011b      	lsls	r3, r3, #4
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	4313      	orrs	r3, r2
 800d150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	621a      	str	r2, [r3, #32]
}
 800d178:	bf00      	nop
 800d17a:	371c      	adds	r7, #28
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	fffeff8f 	.word	0xfffeff8f
 800d188:	40010000 	.word	0x40010000
 800d18c:	40010400 	.word	0x40010400
 800d190:	40014000 	.word	0x40014000
 800d194:	40014400 	.word	0x40014400
 800d198:	40014800 	.word	0x40014800

0800d19c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a1b      	ldr	r3, [r3, #32]
 800d1b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4b24      	ldr	r3, [pc, #144]	; (800d258 <TIM_OC4_SetConfig+0xbc>)
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	021b      	lsls	r3, r3, #8
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	031b      	lsls	r3, r3, #12
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a19      	ldr	r2, [pc, #100]	; (800d25c <TIM_OC4_SetConfig+0xc0>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d00f      	beq.n	800d21c <TIM_OC4_SetConfig+0x80>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a18      	ldr	r2, [pc, #96]	; (800d260 <TIM_OC4_SetConfig+0xc4>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d00b      	beq.n	800d21c <TIM_OC4_SetConfig+0x80>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a17      	ldr	r2, [pc, #92]	; (800d264 <TIM_OC4_SetConfig+0xc8>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d007      	beq.n	800d21c <TIM_OC4_SetConfig+0x80>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a16      	ldr	r2, [pc, #88]	; (800d268 <TIM_OC4_SetConfig+0xcc>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d003      	beq.n	800d21c <TIM_OC4_SetConfig+0x80>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a15      	ldr	r2, [pc, #84]	; (800d26c <TIM_OC4_SetConfig+0xd0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d109      	bne.n	800d230 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	019b      	lsls	r3, r3, #6
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	621a      	str	r2, [r3, #32]
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	feff8fff 	.word	0xfeff8fff
 800d25c:	40010000 	.word	0x40010000
 800d260:	40010400 	.word	0x40010400
 800d264:	40014000 	.word	0x40014000
 800d268:	40014400 	.word	0x40014400
 800d26c:	40014800 	.word	0x40014800

0800d270 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d270:	b480      	push	{r7}
 800d272:	b087      	sub	sp, #28
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a1b      	ldr	r3, [r3, #32]
 800d27e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	4b21      	ldr	r3, [pc, #132]	; (800d320 <TIM_OC5_SetConfig+0xb0>)
 800d29c:	4013      	ands	r3, r2
 800d29e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d2b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	041b      	lsls	r3, r3, #16
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a18      	ldr	r2, [pc, #96]	; (800d324 <TIM_OC5_SetConfig+0xb4>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d00f      	beq.n	800d2e6 <TIM_OC5_SetConfig+0x76>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a17      	ldr	r2, [pc, #92]	; (800d328 <TIM_OC5_SetConfig+0xb8>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00b      	beq.n	800d2e6 <TIM_OC5_SetConfig+0x76>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a16      	ldr	r2, [pc, #88]	; (800d32c <TIM_OC5_SetConfig+0xbc>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d007      	beq.n	800d2e6 <TIM_OC5_SetConfig+0x76>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a15      	ldr	r2, [pc, #84]	; (800d330 <TIM_OC5_SetConfig+0xc0>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d003      	beq.n	800d2e6 <TIM_OC5_SetConfig+0x76>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a14      	ldr	r2, [pc, #80]	; (800d334 <TIM_OC5_SetConfig+0xc4>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d109      	bne.n	800d2fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	021b      	lsls	r3, r3, #8
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	621a      	str	r2, [r3, #32]
}
 800d314:	bf00      	nop
 800d316:	371c      	adds	r7, #28
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	fffeff8f 	.word	0xfffeff8f
 800d324:	40010000 	.word	0x40010000
 800d328:	40010400 	.word	0x40010400
 800d32c:	40014000 	.word	0x40014000
 800d330:	40014400 	.word	0x40014400
 800d334:	40014800 	.word	0x40014800

0800d338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d338:	b480      	push	{r7}
 800d33a:	b087      	sub	sp, #28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a1b      	ldr	r3, [r3, #32]
 800d34c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	4b22      	ldr	r3, [pc, #136]	; (800d3ec <TIM_OC6_SetConfig+0xb4>)
 800d364:	4013      	ands	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	021b      	lsls	r3, r3, #8
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	4313      	orrs	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d37a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	051b      	lsls	r3, r3, #20
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	4313      	orrs	r3, r2
 800d386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a19      	ldr	r2, [pc, #100]	; (800d3f0 <TIM_OC6_SetConfig+0xb8>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d00f      	beq.n	800d3b0 <TIM_OC6_SetConfig+0x78>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a18      	ldr	r2, [pc, #96]	; (800d3f4 <TIM_OC6_SetConfig+0xbc>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d00b      	beq.n	800d3b0 <TIM_OC6_SetConfig+0x78>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a17      	ldr	r2, [pc, #92]	; (800d3f8 <TIM_OC6_SetConfig+0xc0>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d007      	beq.n	800d3b0 <TIM_OC6_SetConfig+0x78>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a16      	ldr	r2, [pc, #88]	; (800d3fc <TIM_OC6_SetConfig+0xc4>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d003      	beq.n	800d3b0 <TIM_OC6_SetConfig+0x78>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a15      	ldr	r2, [pc, #84]	; (800d400 <TIM_OC6_SetConfig+0xc8>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d109      	bne.n	800d3c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	029b      	lsls	r3, r3, #10
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	621a      	str	r2, [r3, #32]
}
 800d3de:	bf00      	nop
 800d3e0:	371c      	adds	r7, #28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	feff8fff 	.word	0xfeff8fff
 800d3f0:	40010000 	.word	0x40010000
 800d3f4:	40010400 	.word	0x40010400
 800d3f8:	40014000 	.word	0x40014000
 800d3fc:	40014400 	.word	0x40014400
 800d400:	40014800 	.word	0x40014800

0800d404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d404:	b480      	push	{r7}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6a1b      	ldr	r3, [r3, #32]
 800d414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6a1b      	ldr	r3, [r3, #32]
 800d41a:	f023 0201 	bic.w	r2, r3, #1
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d42e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	011b      	lsls	r3, r3, #4
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	4313      	orrs	r3, r2
 800d438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	f023 030a 	bic.w	r3, r3, #10
 800d440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	4313      	orrs	r3, r2
 800d448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	621a      	str	r2, [r3, #32]
}
 800d456:	bf00      	nop
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d462:	b480      	push	{r7}
 800d464:	b087      	sub	sp, #28
 800d466:	af00      	add	r7, sp, #0
 800d468:	60f8      	str	r0, [r7, #12]
 800d46a:	60b9      	str	r1, [r7, #8]
 800d46c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6a1b      	ldr	r3, [r3, #32]
 800d478:	f023 0210 	bic.w	r2, r3, #16
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d48c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	031b      	lsls	r3, r3, #12
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	4313      	orrs	r3, r2
 800d496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d49e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	011b      	lsls	r3, r3, #4
 800d4a4:	697a      	ldr	r2, [r7, #20]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	621a      	str	r2, [r3, #32]
}
 800d4b6:	bf00      	nop
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	4b09      	ldr	r3, [pc, #36]	; (800d4fc <TIM_ITRx_SetConfig+0x38>)
 800d4d8:	4013      	ands	r3, r2
 800d4da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	f043 0307 	orr.w	r3, r3, #7
 800d4e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	609a      	str	r2, [r3, #8]
}
 800d4ee:	bf00      	nop
 800d4f0:	3714      	adds	r7, #20
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	ffcfff8f 	.word	0xffcfff8f

0800d500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d500:	b480      	push	{r7}
 800d502:	b087      	sub	sp, #28
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d51a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	021a      	lsls	r2, r3, #8
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	431a      	orrs	r2, r3
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	4313      	orrs	r3, r2
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	609a      	str	r2, [r3, #8]
}
 800d534:	bf00      	nop
 800d536:	371c      	adds	r7, #28
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	f003 031f 	and.w	r3, r3, #31
 800d552:	2201      	movs	r2, #1
 800d554:	fa02 f303 	lsl.w	r3, r2, r3
 800d558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6a1a      	ldr	r2, [r3, #32]
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	43db      	mvns	r3, r3
 800d562:	401a      	ands	r2, r3
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6a1a      	ldr	r2, [r3, #32]
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	f003 031f 	and.w	r3, r3, #31
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	fa01 f303 	lsl.w	r3, r1, r3
 800d578:	431a      	orrs	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	621a      	str	r2, [r3, #32]
}
 800d57e:	bf00      	nop
 800d580:	371c      	adds	r7, #28
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
	...

0800d58c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e06d      	b.n	800d680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a30      	ldr	r2, [pc, #192]	; (800d68c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d004      	beq.n	800d5d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a2f      	ldr	r2, [pc, #188]	; (800d690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d108      	bne.n	800d5ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d5de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a20      	ldr	r2, [pc, #128]	; (800d68c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d022      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d616:	d01d      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a1d      	ldr	r2, [pc, #116]	; (800d694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d018      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a1c      	ldr	r2, [pc, #112]	; (800d698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d013      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a1a      	ldr	r2, [pc, #104]	; (800d69c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00e      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a15      	ldr	r2, [pc, #84]	; (800d690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d009      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a16      	ldr	r2, [pc, #88]	; (800d6a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d004      	beq.n	800d654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a15      	ldr	r2, [pc, #84]	; (800d6a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d10c      	bne.n	800d66e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d65a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	4313      	orrs	r3, r2
 800d664:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	40010000 	.word	0x40010000
 800d690:	40010400 	.word	0x40010400
 800d694:	40000400 	.word	0x40000400
 800d698:	40000800 	.word	0x40000800
 800d69c:	40000c00 	.word	0x40000c00
 800d6a0:	40001800 	.word	0x40001800
 800d6a4:	40014000 	.word	0x40014000

0800d6a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d101      	bne.n	800d6c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e065      	b.n	800d790 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4313      	orrs	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	4313      	orrs	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d72a:	4313      	orrs	r3, r2
 800d72c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	041b      	lsls	r3, r3, #16
 800d73a:	4313      	orrs	r3, r2
 800d73c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a16      	ldr	r2, [pc, #88]	; (800d79c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d004      	beq.n	800d752 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a14      	ldr	r2, [pc, #80]	; (800d7a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d115      	bne.n	800d77e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75c:	051b      	lsls	r3, r3, #20
 800d75e:	4313      	orrs	r3, r2
 800d760:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	69db      	ldr	r3, [r3, #28]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	40010000 	.word	0x40010000
 800d7a0:	40010400 	.word	0x40010400

0800d7a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e042      	b.n	800d878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7f4 fc4b 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2224      	movs	r2, #36	; 0x24
 800d80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f022 0201 	bic.w	r2, r2, #1
 800d820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f001 fa44 	bl	800ecb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fcd9 	bl	800e1e8 <UART_SetConfig>
 800d836:	4603      	mov	r3, r0
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d101      	bne.n	800d840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e01b      	b.n	800d878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d84e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d85e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f042 0201 	orr.w	r2, r2, #1
 800d86e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 fac3 	bl	800edfc <UART_CheckIdleState>
 800d876:	4603      	mov	r3, r0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08a      	sub	sp, #40	; 0x28
 800d884:	af02      	add	r7, sp, #8
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	4613      	mov	r3, r2
 800d88e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d896:	2b20      	cmp	r3, #32
 800d898:	d17b      	bne.n	800d992 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <HAL_UART_Transmit+0x26>
 800d8a0:	88fb      	ldrh	r3, [r7, #6]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e074      	b.n	800d994 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2221      	movs	r2, #33	; 0x21
 800d8b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d8ba:	f7f4 fe5f 	bl	800257c <HAL_GetTick>
 800d8be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	88fa      	ldrh	r2, [r7, #6]
 800d8c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	88fa      	ldrh	r2, [r7, #6]
 800d8cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8d8:	d108      	bne.n	800d8ec <HAL_UART_Transmit+0x6c>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d104      	bne.n	800d8ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	61bb      	str	r3, [r7, #24]
 800d8ea:	e003      	b.n	800d8f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d8f4:	e030      	b.n	800d958 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	2180      	movs	r1, #128	; 0x80
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f001 fb25 	bl	800ef50 <UART_WaitOnFlagUntilTimeout>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d005      	beq.n	800d918 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2220      	movs	r2, #32
 800d910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d914:	2303      	movs	r3, #3
 800d916:	e03d      	b.n	800d994 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10b      	bne.n	800d936 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	461a      	mov	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d92c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	3302      	adds	r3, #2
 800d932:	61bb      	str	r3, [r7, #24]
 800d934:	e007      	b.n	800d946 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	781a      	ldrb	r2, [r3, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	3301      	adds	r3, #1
 800d944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	3b01      	subs	r3, #1
 800d950:	b29a      	uxth	r2, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d95e:	b29b      	uxth	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1c8      	bne.n	800d8f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2200      	movs	r2, #0
 800d96c:	2140      	movs	r1, #64	; 0x40
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f001 faee 	bl	800ef50 <UART_WaitOnFlagUntilTimeout>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d005      	beq.n	800d986 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2220      	movs	r2, #32
 800d97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e006      	b.n	800d994 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2220      	movs	r2, #32
 800d98a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	e000      	b.n	800d994 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d992:	2302      	movs	r3, #2
  }
}
 800d994:	4618      	mov	r0, r3
 800d996:	3720      	adds	r7, #32
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08a      	sub	sp, #40	; 0x28
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9b0:	2b20      	cmp	r3, #32
 800d9b2:	d137      	bne.n	800da24 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d002      	beq.n	800d9c0 <HAL_UART_Receive_IT+0x24>
 800d9ba:	88fb      	ldrh	r3, [r7, #6]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e030      	b.n	800da26 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a18      	ldr	r2, [pc, #96]	; (800da30 <HAL_UART_Receive_IT+0x94>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d01f      	beq.n	800da14 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d018      	beq.n	800da14 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	e853 3f00 	ldrex	r3, [r3]
 800d9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	623b      	str	r3, [r7, #32]
 800da02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da04:	69f9      	ldr	r1, [r7, #28]
 800da06:	6a3a      	ldr	r2, [r7, #32]
 800da08:	e841 2300 	strex	r3, r2, [r1]
 800da0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1e6      	bne.n	800d9e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800da14:	88fb      	ldrh	r3, [r7, #6]
 800da16:	461a      	mov	r2, r3
 800da18:	68b9      	ldr	r1, [r7, #8]
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f001 fb06 	bl	800f02c <UART_Start_Receive_IT>
 800da20:	4603      	mov	r3, r0
 800da22:	e000      	b.n	800da26 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800da24:	2302      	movs	r3, #2
  }
}
 800da26:	4618      	mov	r0, r3
 800da28:	3728      	adds	r7, #40	; 0x28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	58000c00 	.word	0x58000c00

0800da34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b0ba      	sub	sp, #232	; 0xe8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	69db      	ldr	r3, [r3, #28]
 800da42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800da5e:	f640 030f 	movw	r3, #2063	; 0x80f
 800da62:	4013      	ands	r3, r2
 800da64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800da68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d11b      	bne.n	800daa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800da70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da74:	f003 0320 	and.w	r3, r3, #32
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d015      	beq.n	800daa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800da7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da80:	f003 0320 	and.w	r3, r3, #32
 800da84:	2b00      	cmp	r3, #0
 800da86:	d105      	bne.n	800da94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d009      	beq.n	800daa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f000 8377 	beq.w	800e18c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	4798      	blx	r3
      }
      return;
 800daa6:	e371      	b.n	800e18c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800daa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 8123 	beq.w	800dcf8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dab2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dab6:	4b8d      	ldr	r3, [pc, #564]	; (800dcec <HAL_UART_IRQHandler+0x2b8>)
 800dab8:	4013      	ands	r3, r2
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d106      	bne.n	800dacc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dabe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dac2:	4b8b      	ldr	r3, [pc, #556]	; (800dcf0 <HAL_UART_IRQHandler+0x2bc>)
 800dac4:	4013      	ands	r3, r2
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 8116 	beq.w	800dcf8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d011      	beq.n	800dafc <HAL_UART_IRQHandler+0xc8>
 800dad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dadc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2201      	movs	r2, #1
 800daea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daf2:	f043 0201 	orr.w	r2, r3, #1
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db00:	f003 0302 	and.w	r3, r3, #2
 800db04:	2b00      	cmp	r3, #0
 800db06:	d011      	beq.n	800db2c <HAL_UART_IRQHandler+0xf8>
 800db08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00b      	beq.n	800db2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2202      	movs	r2, #2
 800db1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db22:	f043 0204 	orr.w	r2, r3, #4
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	2b00      	cmp	r3, #0
 800db36:	d011      	beq.n	800db5c <HAL_UART_IRQHandler+0x128>
 800db38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00b      	beq.n	800db5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2204      	movs	r2, #4
 800db4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db52:	f043 0202 	orr.w	r2, r3, #2
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db60:	f003 0308 	and.w	r3, r3, #8
 800db64:	2b00      	cmp	r3, #0
 800db66:	d017      	beq.n	800db98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db6c:	f003 0320 	and.w	r3, r3, #32
 800db70:	2b00      	cmp	r3, #0
 800db72:	d105      	bne.n	800db80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800db74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800db78:	4b5c      	ldr	r3, [pc, #368]	; (800dcec <HAL_UART_IRQHandler+0x2b8>)
 800db7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00b      	beq.n	800db98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2208      	movs	r2, #8
 800db86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db8e:	f043 0208 	orr.w	r2, r3, #8
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d012      	beq.n	800dbca <HAL_UART_IRQHandler+0x196>
 800dba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00c      	beq.n	800dbca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbc0:	f043 0220 	orr.w	r2, r3, #32
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 82dd 	beq.w	800e190 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbda:	f003 0320 	and.w	r3, r3, #32
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d013      	beq.n	800dc0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbe6:	f003 0320 	and.w	r3, r3, #32
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d105      	bne.n	800dbfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dbee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d007      	beq.n	800dc0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1e:	2b40      	cmp	r3, #64	; 0x40
 800dc20:	d005      	beq.n	800dc2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d054      	beq.n	800dcd8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f001 fb1e 	bl	800f270 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3e:	2b40      	cmp	r3, #64	; 0x40
 800dc40:	d146      	bne.n	800dcd0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3308      	adds	r3, #8
 800dc48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc50:	e853 3f00 	ldrex	r3, [r3]
 800dc54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dc58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3308      	adds	r3, #8
 800dc6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dc72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dc7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dc7e:	e841 2300 	strex	r3, r2, [r1]
 800dc82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dc86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1d9      	bne.n	800dc42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d017      	beq.n	800dcc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc9e:	4a15      	ldr	r2, [pc, #84]	; (800dcf4 <HAL_UART_IRQHandler+0x2c0>)
 800dca0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f7 fe47 	bl	800593c <HAL_DMA_Abort_IT>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d019      	beq.n	800dce8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcc6:	e00f      	b.n	800dce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 fa77 	bl	800e1bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcce:	e00b      	b.n	800dce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fa73 	bl	800e1bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcd6:	e007      	b.n	800dce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fa6f 	bl	800e1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dce6:	e253      	b.n	800e190 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dce8:	bf00      	nop
    return;
 800dcea:	e251      	b.n	800e190 <HAL_UART_IRQHandler+0x75c>
 800dcec:	10000001 	.word	0x10000001
 800dcf0:	04000120 	.word	0x04000120
 800dcf4:	0800f33d 	.word	0x0800f33d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	f040 81e7 	bne.w	800e0d0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd06:	f003 0310 	and.w	r3, r3, #16
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 81e0 	beq.w	800e0d0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd14:	f003 0310 	and.w	r3, r3, #16
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 81d9 	beq.w	800e0d0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2210      	movs	r2, #16
 800dd24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd30:	2b40      	cmp	r3, #64	; 0x40
 800dd32:	f040 8151 	bne.w	800dfd8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a96      	ldr	r2, [pc, #600]	; (800df98 <HAL_UART_IRQHandler+0x564>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d068      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a93      	ldr	r2, [pc, #588]	; (800df9c <HAL_UART_IRQHandler+0x568>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d061      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a91      	ldr	r2, [pc, #580]	; (800dfa0 <HAL_UART_IRQHandler+0x56c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d05a      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a8e      	ldr	r2, [pc, #568]	; (800dfa4 <HAL_UART_IRQHandler+0x570>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d053      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a8c      	ldr	r2, [pc, #560]	; (800dfa8 <HAL_UART_IRQHandler+0x574>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d04c      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a89      	ldr	r2, [pc, #548]	; (800dfac <HAL_UART_IRQHandler+0x578>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d045      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a87      	ldr	r2, [pc, #540]	; (800dfb0 <HAL_UART_IRQHandler+0x57c>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d03e      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a84      	ldr	r2, [pc, #528]	; (800dfb4 <HAL_UART_IRQHandler+0x580>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d037      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a82      	ldr	r2, [pc, #520]	; (800dfb8 <HAL_UART_IRQHandler+0x584>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d030      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a7f      	ldr	r2, [pc, #508]	; (800dfbc <HAL_UART_IRQHandler+0x588>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d029      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a7d      	ldr	r2, [pc, #500]	; (800dfc0 <HAL_UART_IRQHandler+0x58c>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d022      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a7a      	ldr	r2, [pc, #488]	; (800dfc4 <HAL_UART_IRQHandler+0x590>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d01b      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a78      	ldr	r2, [pc, #480]	; (800dfc8 <HAL_UART_IRQHandler+0x594>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d014      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a75      	ldr	r2, [pc, #468]	; (800dfcc <HAL_UART_IRQHandler+0x598>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d00d      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a73      	ldr	r2, [pc, #460]	; (800dfd0 <HAL_UART_IRQHandler+0x59c>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d006      	beq.n	800de16 <HAL_UART_IRQHandler+0x3e2>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a70      	ldr	r2, [pc, #448]	; (800dfd4 <HAL_UART_IRQHandler+0x5a0>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d106      	bne.n	800de24 <HAL_UART_IRQHandler+0x3f0>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	b29b      	uxth	r3, r3
 800de22:	e005      	b.n	800de30 <HAL_UART_IRQHandler+0x3fc>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800de34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 81ab 	beq.w	800e194 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de48:	429a      	cmp	r2, r3
 800de4a:	f080 81a3 	bcs.w	800e194 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de5e:	69db      	ldr	r3, [r3, #28]
 800de60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de64:	f000 8087 	beq.w	800df76 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de74:	e853 3f00 	ldrex	r3, [r3]
 800de78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800de7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	461a      	mov	r2, r3
 800de8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800de9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dea2:	e841 2300 	strex	r3, r2, [r1]
 800dea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800deaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1da      	bne.n	800de68 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3308      	adds	r3, #8
 800deb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dec4:	f023 0301 	bic.w	r3, r3, #1
 800dec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3308      	adds	r3, #8
 800ded2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ded6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800deda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dedc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dee2:	e841 2300 	strex	r3, r2, [r1]
 800dee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1e1      	bne.n	800deb2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3308      	adds	r3, #8
 800def4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800def8:	e853 3f00 	ldrex	r3, [r3]
 800defc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800defe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	3308      	adds	r3, #8
 800df0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800df12:	66fa      	str	r2, [r7, #108]	; 0x6c
 800df14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800df20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1e3      	bne.n	800deee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2220      	movs	r2, #32
 800df2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3c:	e853 3f00 	ldrex	r3, [r3]
 800df40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df44:	f023 0310 	bic.w	r3, r3, #16
 800df48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	461a      	mov	r2, r3
 800df52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df56:	65bb      	str	r3, [r7, #88]	; 0x58
 800df58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df5e:	e841 2300 	strex	r3, r2, [r1]
 800df62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e4      	bne.n	800df34 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df70:	4618      	mov	r0, r3
 800df72:	f7f7 f9c5 	bl	8005300 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2202      	movs	r2, #2
 800df7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df88:	b29b      	uxth	r3, r3
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 f91d 	bl	800e1d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df96:	e0fd      	b.n	800e194 <HAL_UART_IRQHandler+0x760>
 800df98:	40020010 	.word	0x40020010
 800df9c:	40020028 	.word	0x40020028
 800dfa0:	40020040 	.word	0x40020040
 800dfa4:	40020058 	.word	0x40020058
 800dfa8:	40020070 	.word	0x40020070
 800dfac:	40020088 	.word	0x40020088
 800dfb0:	400200a0 	.word	0x400200a0
 800dfb4:	400200b8 	.word	0x400200b8
 800dfb8:	40020410 	.word	0x40020410
 800dfbc:	40020428 	.word	0x40020428
 800dfc0:	40020440 	.word	0x40020440
 800dfc4:	40020458 	.word	0x40020458
 800dfc8:	40020470 	.word	0x40020470
 800dfcc:	40020488 	.word	0x40020488
 800dfd0:	400204a0 	.word	0x400204a0
 800dfd4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f000 80cf 	beq.w	800e198 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f000 80ca 	beq.w	800e198 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00c:	e853 3f00 	ldrex	r3, [r3]
 800e010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	461a      	mov	r2, r3
 800e022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e026:	647b      	str	r3, [r7, #68]	; 0x44
 800e028:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e02c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e02e:	e841 2300 	strex	r3, r2, [r1]
 800e032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e4      	bne.n	800e004 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3308      	adds	r3, #8
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	e853 3f00 	ldrex	r3, [r3]
 800e048:	623b      	str	r3, [r7, #32]
   return(result);
 800e04a:	6a3a      	ldr	r2, [r7, #32]
 800e04c:	4b55      	ldr	r3, [pc, #340]	; (800e1a4 <HAL_UART_IRQHandler+0x770>)
 800e04e:	4013      	ands	r3, r2
 800e050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3308      	adds	r3, #8
 800e05a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e05e:	633a      	str	r2, [r7, #48]	; 0x30
 800e060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e066:	e841 2300 	strex	r3, r2, [r1]
 800e06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1e3      	bne.n	800e03a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2220      	movs	r2, #32
 800e076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	e853 3f00 	ldrex	r3, [r3]
 800e092:	60fb      	str	r3, [r7, #12]
   return(result);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f023 0310 	bic.w	r3, r3, #16
 800e09a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e0a8:	61fb      	str	r3, [r7, #28]
 800e0aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ac:	69b9      	ldr	r1, [r7, #24]
 800e0ae:	69fa      	ldr	r2, [r7, #28]
 800e0b0:	e841 2300 	strex	r3, r2, [r1]
 800e0b4:	617b      	str	r3, [r7, #20]
   return(result);
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d1e4      	bne.n	800e086 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2202      	movs	r2, #2
 800e0c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f881 	bl	800e1d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0ce:	e063      	b.n	800e198 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00e      	beq.n	800e0fa <HAL_UART_IRQHandler+0x6c6>
 800e0dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d008      	beq.n	800e0fa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e0f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f001 fe80 	bl	800fdf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0f8:	e051      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e102:	2b00      	cmp	r3, #0
 800e104:	d014      	beq.n	800e130 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d105      	bne.n	800e11e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d008      	beq.n	800e130 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e122:	2b00      	cmp	r3, #0
 800e124:	d03a      	beq.n	800e19c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	4798      	blx	r3
    }
    return;
 800e12e:	e035      	b.n	800e19c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d009      	beq.n	800e150 <HAL_UART_IRQHandler+0x71c>
 800e13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e144:	2b00      	cmp	r3, #0
 800e146:	d003      	beq.n	800e150 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f001 f90d 	bl	800f368 <UART_EndTransmit_IT>
    return;
 800e14e:	e026      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d009      	beq.n	800e170 <HAL_UART_IRQHandler+0x73c>
 800e15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e160:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e164:	2b00      	cmp	r3, #0
 800e166:	d003      	beq.n	800e170 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f001 fe59 	bl	800fe20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e16e:	e016      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d010      	beq.n	800e19e <HAL_UART_IRQHandler+0x76a>
 800e17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e180:	2b00      	cmp	r3, #0
 800e182:	da0c      	bge.n	800e19e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f001 fe41 	bl	800fe0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e18a:	e008      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
      return;
 800e18c:	bf00      	nop
 800e18e:	e006      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
    return;
 800e190:	bf00      	nop
 800e192:	e004      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
      return;
 800e194:	bf00      	nop
 800e196:	e002      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
      return;
 800e198:	bf00      	nop
 800e19a:	e000      	b.n	800e19e <HAL_UART_IRQHandler+0x76a>
    return;
 800e19c:	bf00      	nop
  }
}
 800e19e:	37e8      	adds	r7, #232	; 0xe8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	effffffe 	.word	0xeffffffe

0800e1a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1ec:	b092      	sub	sp, #72	; 0x48
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	689a      	ldr	r2, [r3, #8]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	431a      	orrs	r2, r3
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	431a      	orrs	r2, r3
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	4bbe      	ldr	r3, [pc, #760]	; (800e510 <UART_SetConfig+0x328>)
 800e218:	4013      	ands	r3, r2
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	6812      	ldr	r2, [r2, #0]
 800e21e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e220:	430b      	orrs	r3, r1
 800e222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	68da      	ldr	r2, [r3, #12]
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	430a      	orrs	r2, r1
 800e238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4ab3      	ldr	r2, [pc, #716]	; (800e514 <UART_SetConfig+0x32c>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d004      	beq.n	800e254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e250:	4313      	orrs	r3, r2
 800e252:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	689a      	ldr	r2, [r3, #8]
 800e25a:	4baf      	ldr	r3, [pc, #700]	; (800e518 <UART_SetConfig+0x330>)
 800e25c:	4013      	ands	r3, r2
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	6812      	ldr	r2, [r2, #0]
 800e262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e264:	430b      	orrs	r3, r1
 800e266:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26e:	f023 010f 	bic.w	r1, r3, #15
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	430a      	orrs	r2, r1
 800e27c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4aa6      	ldr	r2, [pc, #664]	; (800e51c <UART_SetConfig+0x334>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d177      	bne.n	800e378 <UART_SetConfig+0x190>
 800e288:	4ba5      	ldr	r3, [pc, #660]	; (800e520 <UART_SetConfig+0x338>)
 800e28a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e28c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e290:	2b28      	cmp	r3, #40	; 0x28
 800e292:	d86d      	bhi.n	800e370 <UART_SetConfig+0x188>
 800e294:	a201      	add	r2, pc, #4	; (adr r2, 800e29c <UART_SetConfig+0xb4>)
 800e296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29a:	bf00      	nop
 800e29c:	0800e341 	.word	0x0800e341
 800e2a0:	0800e371 	.word	0x0800e371
 800e2a4:	0800e371 	.word	0x0800e371
 800e2a8:	0800e371 	.word	0x0800e371
 800e2ac:	0800e371 	.word	0x0800e371
 800e2b0:	0800e371 	.word	0x0800e371
 800e2b4:	0800e371 	.word	0x0800e371
 800e2b8:	0800e371 	.word	0x0800e371
 800e2bc:	0800e349 	.word	0x0800e349
 800e2c0:	0800e371 	.word	0x0800e371
 800e2c4:	0800e371 	.word	0x0800e371
 800e2c8:	0800e371 	.word	0x0800e371
 800e2cc:	0800e371 	.word	0x0800e371
 800e2d0:	0800e371 	.word	0x0800e371
 800e2d4:	0800e371 	.word	0x0800e371
 800e2d8:	0800e371 	.word	0x0800e371
 800e2dc:	0800e351 	.word	0x0800e351
 800e2e0:	0800e371 	.word	0x0800e371
 800e2e4:	0800e371 	.word	0x0800e371
 800e2e8:	0800e371 	.word	0x0800e371
 800e2ec:	0800e371 	.word	0x0800e371
 800e2f0:	0800e371 	.word	0x0800e371
 800e2f4:	0800e371 	.word	0x0800e371
 800e2f8:	0800e371 	.word	0x0800e371
 800e2fc:	0800e359 	.word	0x0800e359
 800e300:	0800e371 	.word	0x0800e371
 800e304:	0800e371 	.word	0x0800e371
 800e308:	0800e371 	.word	0x0800e371
 800e30c:	0800e371 	.word	0x0800e371
 800e310:	0800e371 	.word	0x0800e371
 800e314:	0800e371 	.word	0x0800e371
 800e318:	0800e371 	.word	0x0800e371
 800e31c:	0800e361 	.word	0x0800e361
 800e320:	0800e371 	.word	0x0800e371
 800e324:	0800e371 	.word	0x0800e371
 800e328:	0800e371 	.word	0x0800e371
 800e32c:	0800e371 	.word	0x0800e371
 800e330:	0800e371 	.word	0x0800e371
 800e334:	0800e371 	.word	0x0800e371
 800e338:	0800e371 	.word	0x0800e371
 800e33c:	0800e369 	.word	0x0800e369
 800e340:	2301      	movs	r3, #1
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e222      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e348:	2304      	movs	r3, #4
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e21e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e350:	2308      	movs	r3, #8
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e21a      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e358:	2310      	movs	r3, #16
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e216      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e360:	2320      	movs	r3, #32
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e212      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e20e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e370:	2380      	movs	r3, #128	; 0x80
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e20a      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a69      	ldr	r2, [pc, #420]	; (800e524 <UART_SetConfig+0x33c>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d130      	bne.n	800e3e4 <UART_SetConfig+0x1fc>
 800e382:	4b67      	ldr	r3, [pc, #412]	; (800e520 <UART_SetConfig+0x338>)
 800e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	d826      	bhi.n	800e3dc <UART_SetConfig+0x1f4>
 800e38e:	a201      	add	r2, pc, #4	; (adr r2, 800e394 <UART_SetConfig+0x1ac>)
 800e390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e394:	0800e3ad 	.word	0x0800e3ad
 800e398:	0800e3b5 	.word	0x0800e3b5
 800e39c:	0800e3bd 	.word	0x0800e3bd
 800e3a0:	0800e3c5 	.word	0x0800e3c5
 800e3a4:	0800e3cd 	.word	0x0800e3cd
 800e3a8:	0800e3d5 	.word	0x0800e3d5
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e1ec      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3b4:	2304      	movs	r3, #4
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e1e8      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3bc:	2308      	movs	r3, #8
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e1e4      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3c4:	2310      	movs	r3, #16
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e1e0      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3cc:	2320      	movs	r3, #32
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e1dc      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3d4:	2340      	movs	r3, #64	; 0x40
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e1d8      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3dc:	2380      	movs	r3, #128	; 0x80
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e1d4      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a4f      	ldr	r2, [pc, #316]	; (800e528 <UART_SetConfig+0x340>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d130      	bne.n	800e450 <UART_SetConfig+0x268>
 800e3ee:	4b4c      	ldr	r3, [pc, #304]	; (800e520 <UART_SetConfig+0x338>)
 800e3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3f2:	f003 0307 	and.w	r3, r3, #7
 800e3f6:	2b05      	cmp	r3, #5
 800e3f8:	d826      	bhi.n	800e448 <UART_SetConfig+0x260>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <UART_SetConfig+0x218>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e419 	.word	0x0800e419
 800e404:	0800e421 	.word	0x0800e421
 800e408:	0800e429 	.word	0x0800e429
 800e40c:	0800e431 	.word	0x0800e431
 800e410:	0800e439 	.word	0x0800e439
 800e414:	0800e441 	.word	0x0800e441
 800e418:	2300      	movs	r3, #0
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e1b6      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e420:	2304      	movs	r3, #4
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e1b2      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e428:	2308      	movs	r3, #8
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e1ae      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e430:	2310      	movs	r3, #16
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e1aa      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e438:	2320      	movs	r3, #32
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e1a6      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e440:	2340      	movs	r3, #64	; 0x40
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e1a2      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e448:	2380      	movs	r3, #128	; 0x80
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e19e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a35      	ldr	r2, [pc, #212]	; (800e52c <UART_SetConfig+0x344>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d130      	bne.n	800e4bc <UART_SetConfig+0x2d4>
 800e45a:	4b31      	ldr	r3, [pc, #196]	; (800e520 <UART_SetConfig+0x338>)
 800e45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e45e:	f003 0307 	and.w	r3, r3, #7
 800e462:	2b05      	cmp	r3, #5
 800e464:	d826      	bhi.n	800e4b4 <UART_SetConfig+0x2cc>
 800e466:	a201      	add	r2, pc, #4	; (adr r2, 800e46c <UART_SetConfig+0x284>)
 800e468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46c:	0800e485 	.word	0x0800e485
 800e470:	0800e48d 	.word	0x0800e48d
 800e474:	0800e495 	.word	0x0800e495
 800e478:	0800e49d 	.word	0x0800e49d
 800e47c:	0800e4a5 	.word	0x0800e4a5
 800e480:	0800e4ad 	.word	0x0800e4ad
 800e484:	2300      	movs	r3, #0
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e180      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e48c:	2304      	movs	r3, #4
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e17c      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e494:	2308      	movs	r3, #8
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e178      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e49c:	2310      	movs	r3, #16
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e174      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e4a4:	2320      	movs	r3, #32
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e170      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e4ac:	2340      	movs	r3, #64	; 0x40
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e16c      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e4b4:	2380      	movs	r3, #128	; 0x80
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e168      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a1b      	ldr	r2, [pc, #108]	; (800e530 <UART_SetConfig+0x348>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d142      	bne.n	800e54c <UART_SetConfig+0x364>
 800e4c6:	4b16      	ldr	r3, [pc, #88]	; (800e520 <UART_SetConfig+0x338>)
 800e4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ca:	f003 0307 	and.w	r3, r3, #7
 800e4ce:	2b05      	cmp	r3, #5
 800e4d0:	d838      	bhi.n	800e544 <UART_SetConfig+0x35c>
 800e4d2:	a201      	add	r2, pc, #4	; (adr r2, 800e4d8 <UART_SetConfig+0x2f0>)
 800e4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d8:	0800e4f1 	.word	0x0800e4f1
 800e4dc:	0800e4f9 	.word	0x0800e4f9
 800e4e0:	0800e501 	.word	0x0800e501
 800e4e4:	0800e509 	.word	0x0800e509
 800e4e8:	0800e535 	.word	0x0800e535
 800e4ec:	0800e53d 	.word	0x0800e53d
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e14a      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e4f8:	2304      	movs	r3, #4
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e146      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e500:	2308      	movs	r3, #8
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e142      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e508:	2310      	movs	r3, #16
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e13e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e510:	cfff69f3 	.word	0xcfff69f3
 800e514:	58000c00 	.word	0x58000c00
 800e518:	11fff4ff 	.word	0x11fff4ff
 800e51c:	40011000 	.word	0x40011000
 800e520:	58024400 	.word	0x58024400
 800e524:	40004400 	.word	0x40004400
 800e528:	40004800 	.word	0x40004800
 800e52c:	40004c00 	.word	0x40004c00
 800e530:	40005000 	.word	0x40005000
 800e534:	2320      	movs	r3, #32
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e128      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e53c:	2340      	movs	r3, #64	; 0x40
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e124      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e544:	2380      	movs	r3, #128	; 0x80
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e120      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4acb      	ldr	r2, [pc, #812]	; (800e880 <UART_SetConfig+0x698>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d176      	bne.n	800e644 <UART_SetConfig+0x45c>
 800e556:	4bcb      	ldr	r3, [pc, #812]	; (800e884 <UART_SetConfig+0x69c>)
 800e558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e55a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e55e:	2b28      	cmp	r3, #40	; 0x28
 800e560:	d86c      	bhi.n	800e63c <UART_SetConfig+0x454>
 800e562:	a201      	add	r2, pc, #4	; (adr r2, 800e568 <UART_SetConfig+0x380>)
 800e564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e568:	0800e60d 	.word	0x0800e60d
 800e56c:	0800e63d 	.word	0x0800e63d
 800e570:	0800e63d 	.word	0x0800e63d
 800e574:	0800e63d 	.word	0x0800e63d
 800e578:	0800e63d 	.word	0x0800e63d
 800e57c:	0800e63d 	.word	0x0800e63d
 800e580:	0800e63d 	.word	0x0800e63d
 800e584:	0800e63d 	.word	0x0800e63d
 800e588:	0800e615 	.word	0x0800e615
 800e58c:	0800e63d 	.word	0x0800e63d
 800e590:	0800e63d 	.word	0x0800e63d
 800e594:	0800e63d 	.word	0x0800e63d
 800e598:	0800e63d 	.word	0x0800e63d
 800e59c:	0800e63d 	.word	0x0800e63d
 800e5a0:	0800e63d 	.word	0x0800e63d
 800e5a4:	0800e63d 	.word	0x0800e63d
 800e5a8:	0800e61d 	.word	0x0800e61d
 800e5ac:	0800e63d 	.word	0x0800e63d
 800e5b0:	0800e63d 	.word	0x0800e63d
 800e5b4:	0800e63d 	.word	0x0800e63d
 800e5b8:	0800e63d 	.word	0x0800e63d
 800e5bc:	0800e63d 	.word	0x0800e63d
 800e5c0:	0800e63d 	.word	0x0800e63d
 800e5c4:	0800e63d 	.word	0x0800e63d
 800e5c8:	0800e625 	.word	0x0800e625
 800e5cc:	0800e63d 	.word	0x0800e63d
 800e5d0:	0800e63d 	.word	0x0800e63d
 800e5d4:	0800e63d 	.word	0x0800e63d
 800e5d8:	0800e63d 	.word	0x0800e63d
 800e5dc:	0800e63d 	.word	0x0800e63d
 800e5e0:	0800e63d 	.word	0x0800e63d
 800e5e4:	0800e63d 	.word	0x0800e63d
 800e5e8:	0800e62d 	.word	0x0800e62d
 800e5ec:	0800e63d 	.word	0x0800e63d
 800e5f0:	0800e63d 	.word	0x0800e63d
 800e5f4:	0800e63d 	.word	0x0800e63d
 800e5f8:	0800e63d 	.word	0x0800e63d
 800e5fc:	0800e63d 	.word	0x0800e63d
 800e600:	0800e63d 	.word	0x0800e63d
 800e604:	0800e63d 	.word	0x0800e63d
 800e608:	0800e635 	.word	0x0800e635
 800e60c:	2301      	movs	r3, #1
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e612:	e0bc      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e614:	2304      	movs	r3, #4
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e0b8      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e61c:	2308      	movs	r3, #8
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e0b4      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e624:	2310      	movs	r3, #16
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e0b0      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e62c:	2320      	movs	r3, #32
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e0ac      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e634:	2340      	movs	r3, #64	; 0x40
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e0a8      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e63c:	2380      	movs	r3, #128	; 0x80
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e0a4      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a8f      	ldr	r2, [pc, #572]	; (800e888 <UART_SetConfig+0x6a0>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d130      	bne.n	800e6b0 <UART_SetConfig+0x4c8>
 800e64e:	4b8d      	ldr	r3, [pc, #564]	; (800e884 <UART_SetConfig+0x69c>)
 800e650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e652:	f003 0307 	and.w	r3, r3, #7
 800e656:	2b05      	cmp	r3, #5
 800e658:	d826      	bhi.n	800e6a8 <UART_SetConfig+0x4c0>
 800e65a:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <UART_SetConfig+0x478>)
 800e65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e660:	0800e679 	.word	0x0800e679
 800e664:	0800e681 	.word	0x0800e681
 800e668:	0800e689 	.word	0x0800e689
 800e66c:	0800e691 	.word	0x0800e691
 800e670:	0800e699 	.word	0x0800e699
 800e674:	0800e6a1 	.word	0x0800e6a1
 800e678:	2300      	movs	r3, #0
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e086      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e680:	2304      	movs	r3, #4
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e082      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e688:	2308      	movs	r3, #8
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e07e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e690:	2310      	movs	r3, #16
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e07a      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e698:	2320      	movs	r3, #32
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69e:	e076      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e6a0:	2340      	movs	r3, #64	; 0x40
 800e6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a6:	e072      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e6a8:	2380      	movs	r3, #128	; 0x80
 800e6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ae:	e06e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a75      	ldr	r2, [pc, #468]	; (800e88c <UART_SetConfig+0x6a4>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d130      	bne.n	800e71c <UART_SetConfig+0x534>
 800e6ba:	4b72      	ldr	r3, [pc, #456]	; (800e884 <UART_SetConfig+0x69c>)
 800e6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6be:	f003 0307 	and.w	r3, r3, #7
 800e6c2:	2b05      	cmp	r3, #5
 800e6c4:	d826      	bhi.n	800e714 <UART_SetConfig+0x52c>
 800e6c6:	a201      	add	r2, pc, #4	; (adr r2, 800e6cc <UART_SetConfig+0x4e4>)
 800e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6cc:	0800e6e5 	.word	0x0800e6e5
 800e6d0:	0800e6ed 	.word	0x0800e6ed
 800e6d4:	0800e6f5 	.word	0x0800e6f5
 800e6d8:	0800e6fd 	.word	0x0800e6fd
 800e6dc:	0800e705 	.word	0x0800e705
 800e6e0:	0800e70d 	.word	0x0800e70d
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e050      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e6ec:	2304      	movs	r3, #4
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e04c      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e6f4:	2308      	movs	r3, #8
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e048      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e6fc:	2310      	movs	r3, #16
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e044      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e704:	2320      	movs	r3, #32
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e040      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e70c:	2340      	movs	r3, #64	; 0x40
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e03c      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e714:	2380      	movs	r3, #128	; 0x80
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71a:	e038      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a5b      	ldr	r2, [pc, #364]	; (800e890 <UART_SetConfig+0x6a8>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d130      	bne.n	800e788 <UART_SetConfig+0x5a0>
 800e726:	4b57      	ldr	r3, [pc, #348]	; (800e884 <UART_SetConfig+0x69c>)
 800e728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e72a:	f003 0307 	and.w	r3, r3, #7
 800e72e:	2b05      	cmp	r3, #5
 800e730:	d826      	bhi.n	800e780 <UART_SetConfig+0x598>
 800e732:	a201      	add	r2, pc, #4	; (adr r2, 800e738 <UART_SetConfig+0x550>)
 800e734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e738:	0800e751 	.word	0x0800e751
 800e73c:	0800e759 	.word	0x0800e759
 800e740:	0800e761 	.word	0x0800e761
 800e744:	0800e769 	.word	0x0800e769
 800e748:	0800e771 	.word	0x0800e771
 800e74c:	0800e779 	.word	0x0800e779
 800e750:	2302      	movs	r3, #2
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e01a      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e758:	2304      	movs	r3, #4
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e016      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e760:	2308      	movs	r3, #8
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e012      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e768:	2310      	movs	r3, #16
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e00e      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e770:	2320      	movs	r3, #32
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e00a      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e778:	2340      	movs	r3, #64	; 0x40
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e006      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e780:	2380      	movs	r3, #128	; 0x80
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e786:	e002      	b.n	800e78e <UART_SetConfig+0x5a6>
 800e788:	2380      	movs	r3, #128	; 0x80
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a3f      	ldr	r2, [pc, #252]	; (800e890 <UART_SetConfig+0x6a8>)
 800e794:	4293      	cmp	r3, r2
 800e796:	f040 80f8 	bne.w	800e98a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e79a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e79e:	2b20      	cmp	r3, #32
 800e7a0:	dc46      	bgt.n	800e830 <UART_SetConfig+0x648>
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	f2c0 8082 	blt.w	800e8ac <UART_SetConfig+0x6c4>
 800e7a8:	3b02      	subs	r3, #2
 800e7aa:	2b1e      	cmp	r3, #30
 800e7ac:	d87e      	bhi.n	800e8ac <UART_SetConfig+0x6c4>
 800e7ae:	a201      	add	r2, pc, #4	; (adr r2, 800e7b4 <UART_SetConfig+0x5cc>)
 800e7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b4:	0800e837 	.word	0x0800e837
 800e7b8:	0800e8ad 	.word	0x0800e8ad
 800e7bc:	0800e83f 	.word	0x0800e83f
 800e7c0:	0800e8ad 	.word	0x0800e8ad
 800e7c4:	0800e8ad 	.word	0x0800e8ad
 800e7c8:	0800e8ad 	.word	0x0800e8ad
 800e7cc:	0800e84f 	.word	0x0800e84f
 800e7d0:	0800e8ad 	.word	0x0800e8ad
 800e7d4:	0800e8ad 	.word	0x0800e8ad
 800e7d8:	0800e8ad 	.word	0x0800e8ad
 800e7dc:	0800e8ad 	.word	0x0800e8ad
 800e7e0:	0800e8ad 	.word	0x0800e8ad
 800e7e4:	0800e8ad 	.word	0x0800e8ad
 800e7e8:	0800e8ad 	.word	0x0800e8ad
 800e7ec:	0800e85f 	.word	0x0800e85f
 800e7f0:	0800e8ad 	.word	0x0800e8ad
 800e7f4:	0800e8ad 	.word	0x0800e8ad
 800e7f8:	0800e8ad 	.word	0x0800e8ad
 800e7fc:	0800e8ad 	.word	0x0800e8ad
 800e800:	0800e8ad 	.word	0x0800e8ad
 800e804:	0800e8ad 	.word	0x0800e8ad
 800e808:	0800e8ad 	.word	0x0800e8ad
 800e80c:	0800e8ad 	.word	0x0800e8ad
 800e810:	0800e8ad 	.word	0x0800e8ad
 800e814:	0800e8ad 	.word	0x0800e8ad
 800e818:	0800e8ad 	.word	0x0800e8ad
 800e81c:	0800e8ad 	.word	0x0800e8ad
 800e820:	0800e8ad 	.word	0x0800e8ad
 800e824:	0800e8ad 	.word	0x0800e8ad
 800e828:	0800e8ad 	.word	0x0800e8ad
 800e82c:	0800e89f 	.word	0x0800e89f
 800e830:	2b40      	cmp	r3, #64	; 0x40
 800e832:	d037      	beq.n	800e8a4 <UART_SetConfig+0x6bc>
 800e834:	e03a      	b.n	800e8ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e836:	f7fc f8d5 	bl	800a9e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e83a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e83c:	e03c      	b.n	800e8b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e83e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e842:	4618      	mov	r0, r3
 800e844:	f7fc f8e4 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84c:	e034      	b.n	800e8b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e84e:	f107 0318 	add.w	r3, r7, #24
 800e852:	4618      	mov	r0, r3
 800e854:	f7fc fa30 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e85c:	e02c      	b.n	800e8b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <UART_SetConfig+0x69c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	d016      	beq.n	800e898 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e86a:	4b06      	ldr	r3, [pc, #24]	; (800e884 <UART_SetConfig+0x69c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	08db      	lsrs	r3, r3, #3
 800e870:	f003 0303 	and.w	r3, r3, #3
 800e874:	4a07      	ldr	r2, [pc, #28]	; (800e894 <UART_SetConfig+0x6ac>)
 800e876:	fa22 f303 	lsr.w	r3, r2, r3
 800e87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e87c:	e01c      	b.n	800e8b8 <UART_SetConfig+0x6d0>
 800e87e:	bf00      	nop
 800e880:	40011400 	.word	0x40011400
 800e884:	58024400 	.word	0x58024400
 800e888:	40007800 	.word	0x40007800
 800e88c:	40007c00 	.word	0x40007c00
 800e890:	58000c00 	.word	0x58000c00
 800e894:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e898:	4b9d      	ldr	r3, [pc, #628]	; (800eb10 <UART_SetConfig+0x928>)
 800e89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e89c:	e00c      	b.n	800e8b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e89e:	4b9d      	ldr	r3, [pc, #628]	; (800eb14 <UART_SetConfig+0x92c>)
 800e8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a2:	e009      	b.n	800e8b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8aa:	e005      	b.n	800e8b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 81de 	beq.w	800ec7c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c4:	4a94      	ldr	r2, [pc, #592]	; (800eb18 <UART_SetConfig+0x930>)
 800e8c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	4613      	mov	r3, r2
 800e8da:	005b      	lsls	r3, r3, #1
 800e8dc:	4413      	add	r3, r2
 800e8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d305      	bcc.n	800e8f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d903      	bls.n	800e8f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8f6:	e1c1      	b.n	800ec7c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	60bb      	str	r3, [r7, #8]
 800e8fe:	60fa      	str	r2, [r7, #12]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e904:	4a84      	ldr	r2, [pc, #528]	; (800eb18 <UART_SetConfig+0x930>)
 800e906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	2200      	movs	r2, #0
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e91a:	f7f1 fcdd 	bl	80002d8 <__aeabi_uldivmod>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	4610      	mov	r0, r2
 800e924:	4619      	mov	r1, r3
 800e926:	f04f 0200 	mov.w	r2, #0
 800e92a:	f04f 0300 	mov.w	r3, #0
 800e92e:	020b      	lsls	r3, r1, #8
 800e930:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e934:	0202      	lsls	r2, r0, #8
 800e936:	6979      	ldr	r1, [r7, #20]
 800e938:	6849      	ldr	r1, [r1, #4]
 800e93a:	0849      	lsrs	r1, r1, #1
 800e93c:	2000      	movs	r0, #0
 800e93e:	460c      	mov	r4, r1
 800e940:	4605      	mov	r5, r0
 800e942:	eb12 0804 	adds.w	r8, r2, r4
 800e946:	eb43 0905 	adc.w	r9, r3, r5
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	469a      	mov	sl, r3
 800e952:	4693      	mov	fp, r2
 800e954:	4652      	mov	r2, sl
 800e956:	465b      	mov	r3, fp
 800e958:	4640      	mov	r0, r8
 800e95a:	4649      	mov	r1, r9
 800e95c:	f7f1 fcbc 	bl	80002d8 <__aeabi_uldivmod>
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	4613      	mov	r3, r2
 800e966:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e96e:	d308      	bcc.n	800e982 <UART_SetConfig+0x79a>
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e976:	d204      	bcs.n	800e982 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e97e:	60da      	str	r2, [r3, #12]
 800e980:	e17c      	b.n	800ec7c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e988:	e178      	b.n	800ec7c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	69db      	ldr	r3, [r3, #28]
 800e98e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e992:	f040 80c5 	bne.w	800eb20 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e996:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e99a:	2b20      	cmp	r3, #32
 800e99c:	dc48      	bgt.n	800ea30 <UART_SetConfig+0x848>
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	db7b      	blt.n	800ea9a <UART_SetConfig+0x8b2>
 800e9a2:	2b20      	cmp	r3, #32
 800e9a4:	d879      	bhi.n	800ea9a <UART_SetConfig+0x8b2>
 800e9a6:	a201      	add	r2, pc, #4	; (adr r2, 800e9ac <UART_SetConfig+0x7c4>)
 800e9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ac:	0800ea37 	.word	0x0800ea37
 800e9b0:	0800ea3f 	.word	0x0800ea3f
 800e9b4:	0800ea9b 	.word	0x0800ea9b
 800e9b8:	0800ea9b 	.word	0x0800ea9b
 800e9bc:	0800ea47 	.word	0x0800ea47
 800e9c0:	0800ea9b 	.word	0x0800ea9b
 800e9c4:	0800ea9b 	.word	0x0800ea9b
 800e9c8:	0800ea9b 	.word	0x0800ea9b
 800e9cc:	0800ea57 	.word	0x0800ea57
 800e9d0:	0800ea9b 	.word	0x0800ea9b
 800e9d4:	0800ea9b 	.word	0x0800ea9b
 800e9d8:	0800ea9b 	.word	0x0800ea9b
 800e9dc:	0800ea9b 	.word	0x0800ea9b
 800e9e0:	0800ea9b 	.word	0x0800ea9b
 800e9e4:	0800ea9b 	.word	0x0800ea9b
 800e9e8:	0800ea9b 	.word	0x0800ea9b
 800e9ec:	0800ea67 	.word	0x0800ea67
 800e9f0:	0800ea9b 	.word	0x0800ea9b
 800e9f4:	0800ea9b 	.word	0x0800ea9b
 800e9f8:	0800ea9b 	.word	0x0800ea9b
 800e9fc:	0800ea9b 	.word	0x0800ea9b
 800ea00:	0800ea9b 	.word	0x0800ea9b
 800ea04:	0800ea9b 	.word	0x0800ea9b
 800ea08:	0800ea9b 	.word	0x0800ea9b
 800ea0c:	0800ea9b 	.word	0x0800ea9b
 800ea10:	0800ea9b 	.word	0x0800ea9b
 800ea14:	0800ea9b 	.word	0x0800ea9b
 800ea18:	0800ea9b 	.word	0x0800ea9b
 800ea1c:	0800ea9b 	.word	0x0800ea9b
 800ea20:	0800ea9b 	.word	0x0800ea9b
 800ea24:	0800ea9b 	.word	0x0800ea9b
 800ea28:	0800ea9b 	.word	0x0800ea9b
 800ea2c:	0800ea8d 	.word	0x0800ea8d
 800ea30:	2b40      	cmp	r3, #64	; 0x40
 800ea32:	d02e      	beq.n	800ea92 <UART_SetConfig+0x8aa>
 800ea34:	e031      	b.n	800ea9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea36:	f7fa f81f 	bl	8008a78 <HAL_RCC_GetPCLK1Freq>
 800ea3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea3c:	e033      	b.n	800eaa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea3e:	f7fa f831 	bl	8008aa4 <HAL_RCC_GetPCLK2Freq>
 800ea42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea44:	e02f      	b.n	800eaa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fb ffe0 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea54:	e027      	b.n	800eaa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea56:	f107 0318 	add.w	r3, r7, #24
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fc f92c 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea64:	e01f      	b.n	800eaa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea66:	4b2d      	ldr	r3, [pc, #180]	; (800eb1c <UART_SetConfig+0x934>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f003 0320 	and.w	r3, r3, #32
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d009      	beq.n	800ea86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea72:	4b2a      	ldr	r3, [pc, #168]	; (800eb1c <UART_SetConfig+0x934>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	08db      	lsrs	r3, r3, #3
 800ea78:	f003 0303 	and.w	r3, r3, #3
 800ea7c:	4a24      	ldr	r2, [pc, #144]	; (800eb10 <UART_SetConfig+0x928>)
 800ea7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea84:	e00f      	b.n	800eaa6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea86:	4b22      	ldr	r3, [pc, #136]	; (800eb10 <UART_SetConfig+0x928>)
 800ea88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea8a:	e00c      	b.n	800eaa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea8c:	4b21      	ldr	r3, [pc, #132]	; (800eb14 <UART_SetConfig+0x92c>)
 800ea8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea90:	e009      	b.n	800eaa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea98:	e005      	b.n	800eaa6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eaa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 80e7 	beq.w	800ec7c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab2:	4a19      	ldr	r2, [pc, #100]	; (800eb18 <UART_SetConfig+0x930>)
 800eab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eab8:	461a      	mov	r2, r3
 800eaba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eabc:	fbb3 f3f2 	udiv	r3, r3, r2
 800eac0:	005a      	lsls	r2, r3, #1
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	085b      	lsrs	r3, r3, #1
 800eac8:	441a      	add	r2, r3
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	fbb2 f3f3 	udiv	r3, r2, r3
 800ead2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ead4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead6:	2b0f      	cmp	r3, #15
 800ead8:	d916      	bls.n	800eb08 <UART_SetConfig+0x920>
 800eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eadc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae0:	d212      	bcs.n	800eb08 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	f023 030f 	bic.w	r3, r3, #15
 800eaea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	085b      	lsrs	r3, r3, #1
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	f003 0307 	and.w	r3, r3, #7
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eafa:	4313      	orrs	r3, r2
 800eafc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb04:	60da      	str	r2, [r3, #12]
 800eb06:	e0b9      	b.n	800ec7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb0e:	e0b5      	b.n	800ec7c <UART_SetConfig+0xa94>
 800eb10:	03d09000 	.word	0x03d09000
 800eb14:	003d0900 	.word	0x003d0900
 800eb18:	08010320 	.word	0x08010320
 800eb1c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb24:	2b20      	cmp	r3, #32
 800eb26:	dc49      	bgt.n	800ebbc <UART_SetConfig+0x9d4>
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	db7c      	blt.n	800ec26 <UART_SetConfig+0xa3e>
 800eb2c:	2b20      	cmp	r3, #32
 800eb2e:	d87a      	bhi.n	800ec26 <UART_SetConfig+0xa3e>
 800eb30:	a201      	add	r2, pc, #4	; (adr r2, 800eb38 <UART_SetConfig+0x950>)
 800eb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb36:	bf00      	nop
 800eb38:	0800ebc3 	.word	0x0800ebc3
 800eb3c:	0800ebcb 	.word	0x0800ebcb
 800eb40:	0800ec27 	.word	0x0800ec27
 800eb44:	0800ec27 	.word	0x0800ec27
 800eb48:	0800ebd3 	.word	0x0800ebd3
 800eb4c:	0800ec27 	.word	0x0800ec27
 800eb50:	0800ec27 	.word	0x0800ec27
 800eb54:	0800ec27 	.word	0x0800ec27
 800eb58:	0800ebe3 	.word	0x0800ebe3
 800eb5c:	0800ec27 	.word	0x0800ec27
 800eb60:	0800ec27 	.word	0x0800ec27
 800eb64:	0800ec27 	.word	0x0800ec27
 800eb68:	0800ec27 	.word	0x0800ec27
 800eb6c:	0800ec27 	.word	0x0800ec27
 800eb70:	0800ec27 	.word	0x0800ec27
 800eb74:	0800ec27 	.word	0x0800ec27
 800eb78:	0800ebf3 	.word	0x0800ebf3
 800eb7c:	0800ec27 	.word	0x0800ec27
 800eb80:	0800ec27 	.word	0x0800ec27
 800eb84:	0800ec27 	.word	0x0800ec27
 800eb88:	0800ec27 	.word	0x0800ec27
 800eb8c:	0800ec27 	.word	0x0800ec27
 800eb90:	0800ec27 	.word	0x0800ec27
 800eb94:	0800ec27 	.word	0x0800ec27
 800eb98:	0800ec27 	.word	0x0800ec27
 800eb9c:	0800ec27 	.word	0x0800ec27
 800eba0:	0800ec27 	.word	0x0800ec27
 800eba4:	0800ec27 	.word	0x0800ec27
 800eba8:	0800ec27 	.word	0x0800ec27
 800ebac:	0800ec27 	.word	0x0800ec27
 800ebb0:	0800ec27 	.word	0x0800ec27
 800ebb4:	0800ec27 	.word	0x0800ec27
 800ebb8:	0800ec19 	.word	0x0800ec19
 800ebbc:	2b40      	cmp	r3, #64	; 0x40
 800ebbe:	d02e      	beq.n	800ec1e <UART_SetConfig+0xa36>
 800ebc0:	e031      	b.n	800ec26 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebc2:	f7f9 ff59 	bl	8008a78 <HAL_RCC_GetPCLK1Freq>
 800ebc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebc8:	e033      	b.n	800ec32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebca:	f7f9 ff6b 	bl	8008aa4 <HAL_RCC_GetPCLK2Freq>
 800ebce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebd0:	e02f      	b.n	800ec32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fb ff1a 	bl	800aa10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebe0:	e027      	b.n	800ec32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebe2:	f107 0318 	add.w	r3, r7, #24
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fc f866 	bl	800acb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebf0:	e01f      	b.n	800ec32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebf2:	4b2d      	ldr	r3, [pc, #180]	; (800eca8 <UART_SetConfig+0xac0>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f003 0320 	and.w	r3, r3, #32
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d009      	beq.n	800ec12 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebfe:	4b2a      	ldr	r3, [pc, #168]	; (800eca8 <UART_SetConfig+0xac0>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	08db      	lsrs	r3, r3, #3
 800ec04:	f003 0303 	and.w	r3, r3, #3
 800ec08:	4a28      	ldr	r2, [pc, #160]	; (800ecac <UART_SetConfig+0xac4>)
 800ec0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec10:	e00f      	b.n	800ec32 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ec12:	4b26      	ldr	r3, [pc, #152]	; (800ecac <UART_SetConfig+0xac4>)
 800ec14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec16:	e00c      	b.n	800ec32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec18:	4b25      	ldr	r3, [pc, #148]	; (800ecb0 <UART_SetConfig+0xac8>)
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec1c:	e009      	b.n	800ec32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec24:	e005      	b.n	800ec32 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ec26:	2300      	movs	r3, #0
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec30:	bf00      	nop
    }

    if (pclk != 0U)
 800ec32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d021      	beq.n	800ec7c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	4a1d      	ldr	r2, [pc, #116]	; (800ecb4 <UART_SetConfig+0xacc>)
 800ec3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec42:	461a      	mov	r2, r3
 800ec44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec46:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	085b      	lsrs	r3, r3, #1
 800ec50:	441a      	add	r2, r3
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec5a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	2b0f      	cmp	r3, #15
 800ec60:	d909      	bls.n	800ec76 <UART_SetConfig+0xa8e>
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec68:	d205      	bcs.n	800ec76 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	60da      	str	r2, [r3, #12]
 800ec74:	e002      	b.n	800ec7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	2200      	movs	r2, #0
 800ec96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec98:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3748      	adds	r7, #72	; 0x48
 800eca0:	46bd      	mov	sp, r7
 800eca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eca6:	bf00      	nop
 800eca8:	58024400 	.word	0x58024400
 800ecac:	03d09000 	.word	0x03d09000
 800ecb0:	003d0900 	.word	0x003d0900
 800ecb4:	08010320 	.word	0x08010320

0800ecb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc4:	f003 0308 	and.w	r3, r3, #8
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00a      	beq.n	800ece2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	430a      	orrs	r2, r1
 800ece0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00a      	beq.n	800ed04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	430a      	orrs	r2, r1
 800ed02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed08:	f003 0302 	and.w	r3, r3, #2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00a      	beq.n	800ed26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	430a      	orrs	r2, r1
 800ed24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed2a:	f003 0304 	and.w	r3, r3, #4
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00a      	beq.n	800ed48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	430a      	orrs	r2, r1
 800ed46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4c:	f003 0310 	and.w	r3, r3, #16
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00a      	beq.n	800ed6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	430a      	orrs	r2, r1
 800ed68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed6e:	f003 0320 	and.w	r3, r3, #32
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00a      	beq.n	800ed8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	430a      	orrs	r2, r1
 800ed8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d01a      	beq.n	800edce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	430a      	orrs	r2, r1
 800edac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edb6:	d10a      	bne.n	800edce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	430a      	orrs	r2, r1
 800edcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00a      	beq.n	800edf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	430a      	orrs	r2, r1
 800edee:	605a      	str	r2, [r3, #4]
  }
}
 800edf0:	bf00      	nop
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b098      	sub	sp, #96	; 0x60
 800ee00:	af02      	add	r7, sp, #8
 800ee02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee0c:	f7f3 fbb6 	bl	800257c <HAL_GetTick>
 800ee10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f003 0308 	and.w	r3, r3, #8
 800ee1c:	2b08      	cmp	r3, #8
 800ee1e:	d12f      	bne.n	800ee80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f88e 	bl	800ef50 <UART_WaitOnFlagUntilTimeout>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d022      	beq.n	800ee80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee58:	647b      	str	r3, [r7, #68]	; 0x44
 800ee5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e6      	bne.n	800ee3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2220      	movs	r2, #32
 800ee70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee7c:	2303      	movs	r3, #3
 800ee7e:	e063      	b.n	800ef48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f003 0304 	and.w	r3, r3, #4
 800ee8a:	2b04      	cmp	r3, #4
 800ee8c:	d149      	bne.n	800ef22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee96:	2200      	movs	r2, #0
 800ee98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f857 	bl	800ef50 <UART_WaitOnFlagUntilTimeout>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d03c      	beq.n	800ef22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb0:	e853 3f00 	ldrex	r3, [r3]
 800eeb4:	623b      	str	r3, [r7, #32]
   return(result);
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eec6:	633b      	str	r3, [r7, #48]	; 0x30
 800eec8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eece:	e841 2300 	strex	r3, r2, [r1]
 800eed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1e6      	bne.n	800eea8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	3308      	adds	r3, #8
 800eee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	e853 3f00 	ldrex	r3, [r3]
 800eee8:	60fb      	str	r3, [r7, #12]
   return(result);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f023 0301 	bic.w	r3, r3, #1
 800eef0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3308      	adds	r3, #8
 800eef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eefa:	61fa      	str	r2, [r7, #28]
 800eefc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefe:	69b9      	ldr	r1, [r7, #24]
 800ef00:	69fa      	ldr	r2, [r7, #28]
 800ef02:	e841 2300 	strex	r3, r2, [r1]
 800ef06:	617b      	str	r3, [r7, #20]
   return(result);
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1e5      	bne.n	800eeda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2220      	movs	r2, #32
 800ef12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef1e:	2303      	movs	r3, #3
 800ef20:	e012      	b.n	800ef48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2220      	movs	r2, #32
 800ef26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2220      	movs	r2, #32
 800ef2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2200      	movs	r2, #0
 800ef36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef46:	2300      	movs	r3, #0
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3758      	adds	r7, #88	; 0x58
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	603b      	str	r3, [r7, #0]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef60:	e04f      	b.n	800f002 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef68:	d04b      	beq.n	800f002 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef6a:	f7f3 fb07 	bl	800257c <HAL_GetTick>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	69ba      	ldr	r2, [r7, #24]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d302      	bcc.n	800ef80 <UART_WaitOnFlagUntilTimeout+0x30>
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef80:	2303      	movs	r3, #3
 800ef82:	e04e      	b.n	800f022 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 0304 	and.w	r3, r3, #4
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d037      	beq.n	800f002 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	2b80      	cmp	r3, #128	; 0x80
 800ef96:	d034      	beq.n	800f002 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	2b40      	cmp	r3, #64	; 0x40
 800ef9c:	d031      	beq.n	800f002 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	69db      	ldr	r3, [r3, #28]
 800efa4:	f003 0308 	and.w	r3, r3, #8
 800efa8:	2b08      	cmp	r3, #8
 800efaa:	d110      	bne.n	800efce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2208      	movs	r2, #8
 800efb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f000 f95b 	bl	800f270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2208      	movs	r2, #8
 800efbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e029      	b.n	800f022 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efdc:	d111      	bne.n	800f002 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f000 f941 	bl	800f270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2220      	movs	r2, #32
 800eff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800effe:	2303      	movs	r3, #3
 800f000:	e00f      	b.n	800f022 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	69da      	ldr	r2, [r3, #28]
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	4013      	ands	r3, r2
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	429a      	cmp	r2, r3
 800f010:	bf0c      	ite	eq
 800f012:	2301      	moveq	r3, #1
 800f014:	2300      	movne	r3, #0
 800f016:	b2db      	uxtb	r3, r3
 800f018:	461a      	mov	r2, r3
 800f01a:	79fb      	ldrb	r3, [r7, #7]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d0a0      	beq.n	800ef62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
	...

0800f02c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b0a3      	sub	sp, #140	; 0x8c
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	4613      	mov	r3, r2
 800f038:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	88fa      	ldrh	r2, [r7, #6]
 800f044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	88fa      	ldrh	r2, [r7, #6]
 800f04c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f05e:	d10e      	bne.n	800f07e <UART_Start_Receive_IT+0x52>
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d105      	bne.n	800f074 <UART_Start_Receive_IT+0x48>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f06e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f072:	e02d      	b.n	800f0d0 <UART_Start_Receive_IT+0xa4>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	22ff      	movs	r2, #255	; 0xff
 800f078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f07c:	e028      	b.n	800f0d0 <UART_Start_Receive_IT+0xa4>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d10d      	bne.n	800f0a2 <UART_Start_Receive_IT+0x76>
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d104      	bne.n	800f098 <UART_Start_Receive_IT+0x6c>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	22ff      	movs	r2, #255	; 0xff
 800f092:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f096:	e01b      	b.n	800f0d0 <UART_Start_Receive_IT+0xa4>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	227f      	movs	r2, #127	; 0x7f
 800f09c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0a0:	e016      	b.n	800f0d0 <UART_Start_Receive_IT+0xa4>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0aa:	d10d      	bne.n	800f0c8 <UART_Start_Receive_IT+0x9c>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	691b      	ldr	r3, [r3, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d104      	bne.n	800f0be <UART_Start_Receive_IT+0x92>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	227f      	movs	r2, #127	; 0x7f
 800f0b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0bc:	e008      	b.n	800f0d0 <UART_Start_Receive_IT+0xa4>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	223f      	movs	r2, #63	; 0x3f
 800f0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0c6:	e003      	b.n	800f0d0 <UART_Start_Receive_IT+0xa4>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2222      	movs	r2, #34	; 0x22
 800f0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0ea:	e853 3f00 	ldrex	r3, [r3]
 800f0ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f0f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0f2:	f043 0301 	orr.w	r3, r3, #1
 800f0f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	3308      	adds	r3, #8
 800f100:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f104:	673a      	str	r2, [r7, #112]	; 0x70
 800f106:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f10a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e3      	bne.n	800f0e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f120:	d14f      	bne.n	800f1c2 <UART_Start_Receive_IT+0x196>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f128:	88fa      	ldrh	r2, [r7, #6]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d349      	bcc.n	800f1c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f136:	d107      	bne.n	800f148 <UART_Start_Receive_IT+0x11c>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	691b      	ldr	r3, [r3, #16]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d103      	bne.n	800f148 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4a47      	ldr	r2, [pc, #284]	; (800f260 <UART_Start_Receive_IT+0x234>)
 800f144:	675a      	str	r2, [r3, #116]	; 0x74
 800f146:	e002      	b.n	800f14e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	4a46      	ldr	r2, [pc, #280]	; (800f264 <UART_Start_Receive_IT+0x238>)
 800f14c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	691b      	ldr	r3, [r3, #16]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d01a      	beq.n	800f18c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f15e:	e853 3f00 	ldrex	r3, [r3]
 800f162:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f16a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f17a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f17c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f17e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f180:	e841 2300 	strex	r3, r2, [r1]
 800f184:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1e4      	bne.n	800f156 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	3308      	adds	r3, #8
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f196:	e853 3f00 	ldrex	r3, [r3]
 800f19a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3308      	adds	r3, #8
 800f1aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f1ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800f1ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b4:	e841 2300 	strex	r3, r2, [r1]
 800f1b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1e5      	bne.n	800f18c <UART_Start_Receive_IT+0x160>
 800f1c0:	e046      	b.n	800f250 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1ca:	d107      	bne.n	800f1dc <UART_Start_Receive_IT+0x1b0>
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d103      	bne.n	800f1dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	4a24      	ldr	r2, [pc, #144]	; (800f268 <UART_Start_Receive_IT+0x23c>)
 800f1d8:	675a      	str	r2, [r3, #116]	; 0x74
 800f1da:	e002      	b.n	800f1e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	4a23      	ldr	r2, [pc, #140]	; (800f26c <UART_Start_Receive_IT+0x240>)
 800f1e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d019      	beq.n	800f21e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	e853 3f00 	ldrex	r3, [r3]
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f1fe:	677b      	str	r3, [r7, #116]	; 0x74
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	461a      	mov	r2, r3
 800f206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f208:	637b      	str	r3, [r7, #52]	; 0x34
 800f20a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f20e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f210:	e841 2300 	strex	r3, r2, [r1]
 800f214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1e6      	bne.n	800f1ea <UART_Start_Receive_IT+0x1be>
 800f21c:	e018      	b.n	800f250 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	e853 3f00 	ldrex	r3, [r3]
 800f22a:	613b      	str	r3, [r7, #16]
   return(result);
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	f043 0320 	orr.w	r3, r3, #32
 800f232:	67bb      	str	r3, [r7, #120]	; 0x78
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	461a      	mov	r2, r3
 800f23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f23c:	623b      	str	r3, [r7, #32]
 800f23e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f240:	69f9      	ldr	r1, [r7, #28]
 800f242:	6a3a      	ldr	r2, [r7, #32]
 800f244:	e841 2300 	strex	r3, r2, [r1]
 800f248:	61bb      	str	r3, [r7, #24]
   return(result);
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1e6      	bne.n	800f21e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	378c      	adds	r7, #140	; 0x8c
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	0800fa91 	.word	0x0800fa91
 800f264:	0800f731 	.word	0x0800f731
 800f268:	0800f579 	.word	0x0800f579
 800f26c:	0800f3c1 	.word	0x0800f3c1

0800f270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f270:	b480      	push	{r7}
 800f272:	b095      	sub	sp, #84	; 0x54
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f280:	e853 3f00 	ldrex	r3, [r3]
 800f284:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f28c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f296:	643b      	str	r3, [r7, #64]	; 0x40
 800f298:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f29a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f29c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f29e:	e841 2300 	strex	r3, r2, [r1]
 800f2a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1e6      	bne.n	800f278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3308      	adds	r3, #8
 800f2b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	e853 3f00 	ldrex	r3, [r3]
 800f2b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2ba:	69fa      	ldr	r2, [r7, #28]
 800f2bc:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <UART_EndRxTransfer+0xc8>)
 800f2be:	4013      	ands	r3, r2
 800f2c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2d2:	e841 2300 	strex	r3, r2, [r1]
 800f2d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1e5      	bne.n	800f2aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d118      	bne.n	800f318 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	e853 3f00 	ldrex	r3, [r3]
 800f2f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	f023 0310 	bic.w	r3, r3, #16
 800f2fa:	647b      	str	r3, [r7, #68]	; 0x44
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	461a      	mov	r2, r3
 800f302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f304:	61bb      	str	r3, [r7, #24]
 800f306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f308:	6979      	ldr	r1, [r7, #20]
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	e841 2300 	strex	r3, r2, [r1]
 800f310:	613b      	str	r3, [r7, #16]
   return(result);
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1e6      	bne.n	800f2e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2220      	movs	r2, #32
 800f31c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f32c:	bf00      	nop
 800f32e:	3754      	adds	r7, #84	; 0x54
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	effffffe 	.word	0xeffffffe

0800f33c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f7fe ff2e 	bl	800e1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f360:	bf00      	nop
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	e853 3f00 	ldrex	r3, [r3]
 800f37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f384:	61fb      	str	r3, [r7, #28]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	461a      	mov	r2, r3
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	61bb      	str	r3, [r7, #24]
 800f390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f392:	6979      	ldr	r1, [r7, #20]
 800f394:	69ba      	ldr	r2, [r7, #24]
 800f396:	e841 2300 	strex	r3, r2, [r1]
 800f39a:	613b      	str	r3, [r7, #16]
   return(result);
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1e6      	bne.n	800f370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2220      	movs	r2, #32
 800f3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7fe fef9 	bl	800e1a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3b6:	bf00      	nop
 800f3b8:	3720      	adds	r7, #32
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
	...

0800f3c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b09c      	sub	sp, #112	; 0x70
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3d8:	2b22      	cmp	r3, #34	; 0x22
 800f3da:	f040 80be 	bne.w	800f55a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f3e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f3ec:	b2d9      	uxtb	r1, r3
 800f3ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3f8:	400a      	ands	r2, r1
 800f3fa:	b2d2      	uxtb	r2, r2
 800f3fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f40e:	b29b      	uxth	r3, r3
 800f410:	3b01      	subs	r3, #1
 800f412:	b29a      	uxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f420:	b29b      	uxth	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	f040 80a1 	bne.w	800f56a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f430:	e853 3f00 	ldrex	r3, [r3]
 800f434:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f43c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	461a      	mov	r2, r3
 800f444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f446:	65bb      	str	r3, [r7, #88]	; 0x58
 800f448:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f44c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f44e:	e841 2300 	strex	r3, r2, [r1]
 800f452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1e6      	bne.n	800f428 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	3308      	adds	r3, #8
 800f460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	e853 3f00 	ldrex	r3, [r3]
 800f468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46c:	f023 0301 	bic.w	r3, r3, #1
 800f470:	667b      	str	r3, [r7, #100]	; 0x64
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	3308      	adds	r3, #8
 800f478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f47a:	647a      	str	r2, [r7, #68]	; 0x44
 800f47c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f47e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f482:	e841 2300 	strex	r3, r2, [r1]
 800f486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1e5      	bne.n	800f45a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2220      	movs	r2, #32
 800f492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a33      	ldr	r2, [pc, #204]	; (800f574 <UART_RxISR_8BIT+0x1b4>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d01f      	beq.n	800f4ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d018      	beq.n	800f4ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	e853 3f00 	ldrex	r3, [r3]
 800f4c6:	623b      	str	r3, [r7, #32]
   return(result);
 800f4c8:	6a3b      	ldr	r3, [r7, #32]
 800f4ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f4ce:	663b      	str	r3, [r7, #96]	; 0x60
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4d8:	633b      	str	r3, [r7, #48]	; 0x30
 800f4da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4e0:	e841 2300 	strex	r3, r2, [r1]
 800f4e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1e6      	bne.n	800f4ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d12e      	bne.n	800f552 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	e853 3f00 	ldrex	r3, [r3]
 800f506:	60fb      	str	r3, [r7, #12]
   return(result);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f023 0310 	bic.w	r3, r3, #16
 800f50e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	461a      	mov	r2, r3
 800f516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f518:	61fb      	str	r3, [r7, #28]
 800f51a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51c:	69b9      	ldr	r1, [r7, #24]
 800f51e:	69fa      	ldr	r2, [r7, #28]
 800f520:	e841 2300 	strex	r3, r2, [r1]
 800f524:	617b      	str	r3, [r7, #20]
   return(result);
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1e6      	bne.n	800f4fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	69db      	ldr	r3, [r3, #28]
 800f532:	f003 0310 	and.w	r3, r3, #16
 800f536:	2b10      	cmp	r3, #16
 800f538:	d103      	bne.n	800f542 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2210      	movs	r2, #16
 800f540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f548:	4619      	mov	r1, r3
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7fe fe40 	bl	800e1d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f550:	e00b      	b.n	800f56a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7f1 f9f2 	bl	800093c <HAL_UART_RxCpltCallback>
}
 800f558:	e007      	b.n	800f56a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	699a      	ldr	r2, [r3, #24]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f042 0208 	orr.w	r2, r2, #8
 800f568:	619a      	str	r2, [r3, #24]
}
 800f56a:	bf00      	nop
 800f56c:	3770      	adds	r7, #112	; 0x70
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	58000c00 	.word	0x58000c00

0800f578 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b09c      	sub	sp, #112	; 0x70
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f586:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f590:	2b22      	cmp	r3, #34	; 0x22
 800f592:	f040 80be 	bne.w	800f712 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f5a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f5aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ba:	1c9a      	adds	r2, r3, #2
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	f040 80a1 	bne.w	800f722 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e8:	e853 3f00 	ldrex	r3, [r3]
 800f5ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5f4:	667b      	str	r3, [r7, #100]	; 0x64
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5fe:	657b      	str	r3, [r7, #84]	; 0x54
 800f600:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f602:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f606:	e841 2300 	strex	r3, r2, [r1]
 800f60a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1e6      	bne.n	800f5e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	3308      	adds	r3, #8
 800f618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f61c:	e853 3f00 	ldrex	r3, [r3]
 800f620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	f023 0301 	bic.w	r3, r3, #1
 800f628:	663b      	str	r3, [r7, #96]	; 0x60
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3308      	adds	r3, #8
 800f630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f632:	643a      	str	r2, [r7, #64]	; 0x40
 800f634:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f63a:	e841 2300 	strex	r3, r2, [r1]
 800f63e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1e5      	bne.n	800f612 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2220      	movs	r2, #32
 800f64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a33      	ldr	r2, [pc, #204]	; (800f72c <UART_RxISR_16BIT+0x1b4>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d01f      	beq.n	800f6a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d018      	beq.n	800f6a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	e853 3f00 	ldrex	r3, [r3]
 800f67e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f686:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	461a      	mov	r2, r3
 800f68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f690:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f692:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f698:	e841 2300 	strex	r3, r2, [r1]
 800f69c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1e6      	bne.n	800f672 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d12e      	bne.n	800f70a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	e853 3f00 	ldrex	r3, [r3]
 800f6be:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f023 0310 	bic.w	r3, r3, #16
 800f6c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6d0:	61bb      	str	r3, [r7, #24]
 800f6d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d4:	6979      	ldr	r1, [r7, #20]
 800f6d6:	69ba      	ldr	r2, [r7, #24]
 800f6d8:	e841 2300 	strex	r3, r2, [r1]
 800f6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1e6      	bne.n	800f6b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	69db      	ldr	r3, [r3, #28]
 800f6ea:	f003 0310 	and.w	r3, r3, #16
 800f6ee:	2b10      	cmp	r3, #16
 800f6f0:	d103      	bne.n	800f6fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2210      	movs	r2, #16
 800f6f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7fe fd64 	bl	800e1d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f708:	e00b      	b.n	800f722 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7f1 f916 	bl	800093c <HAL_UART_RxCpltCallback>
}
 800f710:	e007      	b.n	800f722 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	699a      	ldr	r2, [r3, #24]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f042 0208 	orr.w	r2, r2, #8
 800f720:	619a      	str	r2, [r3, #24]
}
 800f722:	bf00      	nop
 800f724:	3770      	adds	r7, #112	; 0x70
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	58000c00 	.word	0x58000c00

0800f730 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b0ac      	sub	sp, #176	; 0xb0
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f73e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	69db      	ldr	r3, [r3, #28]
 800f748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f766:	2b22      	cmp	r3, #34	; 0x22
 800f768:	f040 8180 	bne.w	800fa6c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f772:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f776:	e123      	b.n	800f9c0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f782:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f786:	b2d9      	uxtb	r1, r3
 800f788:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f792:	400a      	ands	r2, r1
 800f794:	b2d2      	uxtb	r2, r2
 800f796:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f79c:	1c5a      	adds	r2, r3, #1
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	69db      	ldr	r3, [r3, #28]
 800f7ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f7be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7c2:	f003 0307 	and.w	r3, r3, #7
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d053      	beq.n	800f872 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7ce:	f003 0301 	and.w	r3, r3, #1
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d011      	beq.n	800f7fa <UART_RxISR_8BIT_FIFOEN+0xca>
 800f7d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00b      	beq.n	800f7fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7f0:	f043 0201 	orr.w	r2, r3, #1
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7fe:	f003 0302 	and.w	r3, r3, #2
 800f802:	2b00      	cmp	r3, #0
 800f804:	d011      	beq.n	800f82a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00b      	beq.n	800f82a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2202      	movs	r2, #2
 800f818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f820:	f043 0204 	orr.w	r2, r3, #4
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f82a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f82e:	f003 0304 	and.w	r3, r3, #4
 800f832:	2b00      	cmp	r3, #0
 800f834:	d011      	beq.n	800f85a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f83a:	f003 0301 	and.w	r3, r3, #1
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00b      	beq.n	800f85a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2204      	movs	r2, #4
 800f848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f850:	f043 0202 	orr.w	r2, r3, #2
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f860:	2b00      	cmp	r3, #0
 800f862:	d006      	beq.n	800f872 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7fe fca9 	bl	800e1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f878:	b29b      	uxth	r3, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f040 80a0 	bne.w	800f9c0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f888:	e853 3f00 	ldrex	r3, [r3]
 800f88c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	461a      	mov	r2, r3
 800f89e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f8a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f8a4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f8a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f8aa:	e841 2300 	strex	r3, r2, [r1]
 800f8ae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f8b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e4      	bne.n	800f880 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8c0:	e853 3f00 	ldrex	r3, [r3]
 800f8c4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f8c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8c8:	4b6e      	ldr	r3, [pc, #440]	; (800fa84 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f8ca:	4013      	ands	r3, r2
 800f8cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3308      	adds	r3, #8
 800f8d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f8da:	66ba      	str	r2, [r7, #104]	; 0x68
 800f8dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f8e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f8e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e3      	bne.n	800f8b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a60      	ldr	r2, [pc, #384]	; (800fa88 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d021      	beq.n	800f950 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f916:	2b00      	cmp	r3, #0
 800f918:	d01a      	beq.n	800f950 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f922:	e853 3f00 	ldrex	r3, [r3]
 800f926:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f92a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f92e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	461a      	mov	r2, r3
 800f938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f93c:	657b      	str	r3, [r7, #84]	; 0x54
 800f93e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f940:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f942:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f944:	e841 2300 	strex	r3, r2, [r1]
 800f948:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e4      	bne.n	800f91a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f954:	2b01      	cmp	r3, #1
 800f956:	d130      	bne.n	800f9ba <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f966:	e853 3f00 	ldrex	r3, [r3]
 800f96a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	f023 0310 	bic.w	r3, r3, #16
 800f972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f980:	643b      	str	r3, [r7, #64]	; 0x40
 800f982:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f988:	e841 2300 	strex	r3, r2, [r1]
 800f98c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1e4      	bne.n	800f95e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	69db      	ldr	r3, [r3, #28]
 800f99a:	f003 0310 	and.w	r3, r3, #16
 800f99e:	2b10      	cmp	r3, #16
 800f9a0:	d103      	bne.n	800f9aa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2210      	movs	r2, #16
 800f9a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7fe fc0c 	bl	800e1d0 <HAL_UARTEx_RxEventCallback>
 800f9b8:	e002      	b.n	800f9c0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7f0 ffbe 	bl	800093c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d006      	beq.n	800f9d6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f9c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9cc:	f003 0320 	and.w	r3, r3, #32
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f47f aed1 	bne.w	800f778 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f9e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d049      	beq.n	800fa7c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d242      	bcs.n	800fa7c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fe:	6a3b      	ldr	r3, [r7, #32]
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	3308      	adds	r3, #8
 800fa16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fa1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa22:	e841 2300 	strex	r3, r2, [r1]
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1e3      	bne.n	800f9f6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a16      	ldr	r2, [pc, #88]	; (800fa8c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fa32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	e853 3f00 	ldrex	r3, [r3]
 800fa40:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	f043 0320 	orr.w	r3, r3, #32
 800fa48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	461a      	mov	r2, r3
 800fa52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa56:	61bb      	str	r3, [r7, #24]
 800fa58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5a:	6979      	ldr	r1, [r7, #20]
 800fa5c:	69ba      	ldr	r2, [r7, #24]
 800fa5e:	e841 2300 	strex	r3, r2, [r1]
 800fa62:	613b      	str	r3, [r7, #16]
   return(result);
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1e4      	bne.n	800fa34 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa6a:	e007      	b.n	800fa7c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	699a      	ldr	r2, [r3, #24]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f042 0208 	orr.w	r2, r2, #8
 800fa7a:	619a      	str	r2, [r3, #24]
}
 800fa7c:	bf00      	nop
 800fa7e:	37b0      	adds	r7, #176	; 0xb0
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	effffffe 	.word	0xeffffffe
 800fa88:	58000c00 	.word	0x58000c00
 800fa8c:	0800f3c1 	.word	0x0800f3c1

0800fa90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b0ae      	sub	sp, #184	; 0xb8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69db      	ldr	r3, [r3, #28]
 800faa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fac6:	2b22      	cmp	r3, #34	; 0x22
 800fac8:	f040 8184 	bne.w	800fdd4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fad2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fad6:	e127      	b.n	800fd28 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fade:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800faea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800faee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800faf2:	4013      	ands	r3, r2
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fafa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb00:	1c9a      	adds	r2, r3, #2
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	69db      	ldr	r3, [r3, #28]
 800fb1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fb22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb26:	f003 0307 	and.w	r3, r3, #7
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d053      	beq.n	800fbd6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb32:	f003 0301 	and.w	r3, r3, #1
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d011      	beq.n	800fb5e <UART_RxISR_16BIT_FIFOEN+0xce>
 800fb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00b      	beq.n	800fb5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb54:	f043 0201 	orr.w	r2, r3, #1
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb62:	f003 0302 	and.w	r3, r3, #2
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d011      	beq.n	800fb8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fb6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb6e:	f003 0301 	and.w	r3, r3, #1
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00b      	beq.n	800fb8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2202      	movs	r2, #2
 800fb7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb84:	f043 0204 	orr.w	r2, r3, #4
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb92:	f003 0304 	and.w	r3, r3, #4
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d011      	beq.n	800fbbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fb9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00b      	beq.n	800fbbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2204      	movs	r2, #4
 800fbac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbb4:	f043 0202 	orr.w	r2, r3, #2
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d006      	beq.n	800fbd6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7fe faf7 	bl	800e1bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f040 80a2 	bne.w	800fd28 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbec:	e853 3f00 	ldrex	r3, [r3]
 800fbf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fbf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	461a      	mov	r2, r3
 800fc02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fc06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc0a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fc0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc12:	e841 2300 	strex	r3, r2, [r1]
 800fc16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fc18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1e2      	bne.n	800fbe4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	3308      	adds	r3, #8
 800fc24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc28:	e853 3f00 	ldrex	r3, [r3]
 800fc2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fc2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc30:	4b6e      	ldr	r3, [pc, #440]	; (800fdec <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800fc32:	4013      	ands	r3, r2
 800fc34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	3308      	adds	r3, #8
 800fc3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fc42:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fc44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc4a:	e841 2300 	strex	r3, r2, [r1]
 800fc4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fc50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1e3      	bne.n	800fc1e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2220      	movs	r2, #32
 800fc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4a60      	ldr	r2, [pc, #384]	; (800fdf0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d021      	beq.n	800fcb8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d01a      	beq.n	800fcb8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc8a:	e853 3f00 	ldrex	r3, [r3]
 800fc8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fca4:	65bb      	str	r3, [r7, #88]	; 0x58
 800fca6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcac:	e841 2300 	strex	r3, r2, [r1]
 800fcb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fcb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1e4      	bne.n	800fc82 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d130      	bne.n	800fd22 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	e853 3f00 	ldrex	r3, [r3]
 800fcd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd6:	f023 0310 	bic.w	r3, r3, #16
 800fcda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	461a      	mov	r2, r3
 800fce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fce8:	647b      	str	r3, [r7, #68]	; 0x44
 800fcea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fcee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcf0:	e841 2300 	strex	r3, r2, [r1]
 800fcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1e4      	bne.n	800fcc6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	69db      	ldr	r3, [r3, #28]
 800fd02:	f003 0310 	and.w	r3, r3, #16
 800fd06:	2b10      	cmp	r3, #16
 800fd08:	d103      	bne.n	800fd12 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2210      	movs	r2, #16
 800fd10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd18:	4619      	mov	r1, r3
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7fe fa58 	bl	800e1d0 <HAL_UARTEx_RxEventCallback>
 800fd20:	e002      	b.n	800fd28 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7f0 fe0a 	bl	800093c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd28:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d006      	beq.n	800fd3e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800fd30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd34:	f003 0320 	and.w	r3, r3, #32
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f47f aecd 	bne.w	800fad8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd44:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fd48:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d049      	beq.n	800fde4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd56:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d242      	bcs.n	800fde4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	3308      	adds	r3, #8
 800fd64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	e853 3f00 	ldrex	r3, [r3]
 800fd6c:	623b      	str	r3, [r7, #32]
   return(result);
 800fd6e:	6a3b      	ldr	r3, [r7, #32]
 800fd70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	3308      	adds	r3, #8
 800fd7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd82:	633a      	str	r2, [r7, #48]	; 0x30
 800fd84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd8a:	e841 2300 	strex	r3, r2, [r1]
 800fd8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1e3      	bne.n	800fd5e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4a16      	ldr	r2, [pc, #88]	; (800fdf4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800fd9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	e853 3f00 	ldrex	r3, [r3]
 800fda8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f043 0320 	orr.w	r3, r3, #32
 800fdb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdbe:	61fb      	str	r3, [r7, #28]
 800fdc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc2:	69b9      	ldr	r1, [r7, #24]
 800fdc4:	69fa      	ldr	r2, [r7, #28]
 800fdc6:	e841 2300 	strex	r3, r2, [r1]
 800fdca:	617b      	str	r3, [r7, #20]
   return(result);
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1e4      	bne.n	800fd9c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fdd2:	e007      	b.n	800fde4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	699a      	ldr	r2, [r3, #24]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f042 0208 	orr.w	r2, r2, #8
 800fde2:	619a      	str	r2, [r3, #24]
}
 800fde4:	bf00      	nop
 800fde6:	37b8      	adds	r7, #184	; 0xb8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	effffffe 	.word	0xeffffffe
 800fdf0:	58000c00 	.word	0x58000c00
 800fdf4:	0800f579 	.word	0x0800f579

0800fdf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d101      	bne.n	800fe4a <HAL_UARTEx_DisableFifoMode+0x16>
 800fe46:	2302      	movs	r3, #2
 800fe48:	e027      	b.n	800fe9a <HAL_UARTEx_DisableFifoMode+0x66>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2224      	movs	r2, #36	; 0x24
 800fe56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f022 0201 	bic.w	r2, r2, #1
 800fe70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2220      	movs	r2, #32
 800fe8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr

0800fea6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
 800feae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d101      	bne.n	800febe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800feba:	2302      	movs	r3, #2
 800febc:	e02d      	b.n	800ff1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2201      	movs	r2, #1
 800fec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2224      	movs	r2, #36	; 0x24
 800feca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f022 0201 	bic.w	r2, r2, #1
 800fee4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	683a      	ldr	r2, [r7, #0]
 800fef6:	430a      	orrs	r2, r1
 800fef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 f850 	bl	800ffa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3710      	adds	r7, #16
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b084      	sub	sp, #16
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
 800ff2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d101      	bne.n	800ff3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff36:	2302      	movs	r3, #2
 800ff38:	e02d      	b.n	800ff96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2224      	movs	r2, #36	; 0x24
 800ff46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f022 0201 	bic.w	r2, r2, #1
 800ff60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	430a      	orrs	r2, r1
 800ff74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 f812 	bl	800ffa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2220      	movs	r2, #32
 800ff88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
	...

0800ffa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d108      	bne.n	800ffc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ffc0:	e031      	b.n	8010026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ffc2:	2310      	movs	r3, #16
 800ffc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ffc6:	2310      	movs	r3, #16
 800ffc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	0e5b      	lsrs	r3, r3, #25
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	f003 0307 	and.w	r3, r3, #7
 800ffd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	0f5b      	lsrs	r3, r3, #29
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	f003 0307 	and.w	r3, r3, #7
 800ffe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	7b3a      	ldrb	r2, [r7, #12]
 800ffee:	4911      	ldr	r1, [pc, #68]	; (8010034 <UARTEx_SetNbDataToProcess+0x94>)
 800fff0:	5c8a      	ldrb	r2, [r1, r2]
 800fff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fff6:	7b3a      	ldrb	r2, [r7, #12]
 800fff8:	490f      	ldr	r1, [pc, #60]	; (8010038 <UARTEx_SetNbDataToProcess+0x98>)
 800fffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010000:	b29a      	uxth	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010008:	7bfb      	ldrb	r3, [r7, #15]
 801000a:	7b7a      	ldrb	r2, [r7, #13]
 801000c:	4909      	ldr	r1, [pc, #36]	; (8010034 <UARTEx_SetNbDataToProcess+0x94>)
 801000e:	5c8a      	ldrb	r2, [r1, r2]
 8010010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010014:	7b7a      	ldrb	r2, [r7, #13]
 8010016:	4908      	ldr	r1, [pc, #32]	; (8010038 <UARTEx_SetNbDataToProcess+0x98>)
 8010018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801001a:	fb93 f3f2 	sdiv	r3, r3, r2
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010026:	bf00      	nop
 8010028:	3714      	adds	r7, #20
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	08010338 	.word	0x08010338
 8010038:	08010340 	.word	0x08010340

0801003c <malloc>:
 801003c:	4b02      	ldr	r3, [pc, #8]	; (8010048 <malloc+0xc>)
 801003e:	4601      	mov	r1, r0
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	f000 b82b 	b.w	801009c <_malloc_r>
 8010046:	bf00      	nop
 8010048:	240000e4 	.word	0x240000e4

0801004c <free>:
 801004c:	4b02      	ldr	r3, [pc, #8]	; (8010058 <free+0xc>)
 801004e:	4601      	mov	r1, r0
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	f000 b901 	b.w	8010258 <_free_r>
 8010056:	bf00      	nop
 8010058:	240000e4 	.word	0x240000e4

0801005c <sbrk_aligned>:
 801005c:	b570      	push	{r4, r5, r6, lr}
 801005e:	4e0e      	ldr	r6, [pc, #56]	; (8010098 <sbrk_aligned+0x3c>)
 8010060:	460c      	mov	r4, r1
 8010062:	6831      	ldr	r1, [r6, #0]
 8010064:	4605      	mov	r5, r0
 8010066:	b911      	cbnz	r1, 801006e <sbrk_aligned+0x12>
 8010068:	f000 f8ac 	bl	80101c4 <_sbrk_r>
 801006c:	6030      	str	r0, [r6, #0]
 801006e:	4621      	mov	r1, r4
 8010070:	4628      	mov	r0, r5
 8010072:	f000 f8a7 	bl	80101c4 <_sbrk_r>
 8010076:	1c43      	adds	r3, r0, #1
 8010078:	d00a      	beq.n	8010090 <sbrk_aligned+0x34>
 801007a:	1cc4      	adds	r4, r0, #3
 801007c:	f024 0403 	bic.w	r4, r4, #3
 8010080:	42a0      	cmp	r0, r4
 8010082:	d007      	beq.n	8010094 <sbrk_aligned+0x38>
 8010084:	1a21      	subs	r1, r4, r0
 8010086:	4628      	mov	r0, r5
 8010088:	f000 f89c 	bl	80101c4 <_sbrk_r>
 801008c:	3001      	adds	r0, #1
 801008e:	d101      	bne.n	8010094 <sbrk_aligned+0x38>
 8010090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010094:	4620      	mov	r0, r4
 8010096:	bd70      	pop	{r4, r5, r6, pc}
 8010098:	240006e4 	.word	0x240006e4

0801009c <_malloc_r>:
 801009c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100a0:	1ccd      	adds	r5, r1, #3
 80100a2:	f025 0503 	bic.w	r5, r5, #3
 80100a6:	3508      	adds	r5, #8
 80100a8:	2d0c      	cmp	r5, #12
 80100aa:	bf38      	it	cc
 80100ac:	250c      	movcc	r5, #12
 80100ae:	2d00      	cmp	r5, #0
 80100b0:	4607      	mov	r7, r0
 80100b2:	db01      	blt.n	80100b8 <_malloc_r+0x1c>
 80100b4:	42a9      	cmp	r1, r5
 80100b6:	d905      	bls.n	80100c4 <_malloc_r+0x28>
 80100b8:	230c      	movs	r3, #12
 80100ba:	603b      	str	r3, [r7, #0]
 80100bc:	2600      	movs	r6, #0
 80100be:	4630      	mov	r0, r6
 80100c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010198 <_malloc_r+0xfc>
 80100c8:	f000 f868 	bl	801019c <__malloc_lock>
 80100cc:	f8d8 3000 	ldr.w	r3, [r8]
 80100d0:	461c      	mov	r4, r3
 80100d2:	bb5c      	cbnz	r4, 801012c <_malloc_r+0x90>
 80100d4:	4629      	mov	r1, r5
 80100d6:	4638      	mov	r0, r7
 80100d8:	f7ff ffc0 	bl	801005c <sbrk_aligned>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	4604      	mov	r4, r0
 80100e0:	d155      	bne.n	801018e <_malloc_r+0xf2>
 80100e2:	f8d8 4000 	ldr.w	r4, [r8]
 80100e6:	4626      	mov	r6, r4
 80100e8:	2e00      	cmp	r6, #0
 80100ea:	d145      	bne.n	8010178 <_malloc_r+0xdc>
 80100ec:	2c00      	cmp	r4, #0
 80100ee:	d048      	beq.n	8010182 <_malloc_r+0xe6>
 80100f0:	6823      	ldr	r3, [r4, #0]
 80100f2:	4631      	mov	r1, r6
 80100f4:	4638      	mov	r0, r7
 80100f6:	eb04 0903 	add.w	r9, r4, r3
 80100fa:	f000 f863 	bl	80101c4 <_sbrk_r>
 80100fe:	4581      	cmp	r9, r0
 8010100:	d13f      	bne.n	8010182 <_malloc_r+0xe6>
 8010102:	6821      	ldr	r1, [r4, #0]
 8010104:	1a6d      	subs	r5, r5, r1
 8010106:	4629      	mov	r1, r5
 8010108:	4638      	mov	r0, r7
 801010a:	f7ff ffa7 	bl	801005c <sbrk_aligned>
 801010e:	3001      	adds	r0, #1
 8010110:	d037      	beq.n	8010182 <_malloc_r+0xe6>
 8010112:	6823      	ldr	r3, [r4, #0]
 8010114:	442b      	add	r3, r5
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	f8d8 3000 	ldr.w	r3, [r8]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d038      	beq.n	8010192 <_malloc_r+0xf6>
 8010120:	685a      	ldr	r2, [r3, #4]
 8010122:	42a2      	cmp	r2, r4
 8010124:	d12b      	bne.n	801017e <_malloc_r+0xe2>
 8010126:	2200      	movs	r2, #0
 8010128:	605a      	str	r2, [r3, #4]
 801012a:	e00f      	b.n	801014c <_malloc_r+0xb0>
 801012c:	6822      	ldr	r2, [r4, #0]
 801012e:	1b52      	subs	r2, r2, r5
 8010130:	d41f      	bmi.n	8010172 <_malloc_r+0xd6>
 8010132:	2a0b      	cmp	r2, #11
 8010134:	d917      	bls.n	8010166 <_malloc_r+0xca>
 8010136:	1961      	adds	r1, r4, r5
 8010138:	42a3      	cmp	r3, r4
 801013a:	6025      	str	r5, [r4, #0]
 801013c:	bf18      	it	ne
 801013e:	6059      	strne	r1, [r3, #4]
 8010140:	6863      	ldr	r3, [r4, #4]
 8010142:	bf08      	it	eq
 8010144:	f8c8 1000 	streq.w	r1, [r8]
 8010148:	5162      	str	r2, [r4, r5]
 801014a:	604b      	str	r3, [r1, #4]
 801014c:	4638      	mov	r0, r7
 801014e:	f104 060b 	add.w	r6, r4, #11
 8010152:	f000 f829 	bl	80101a8 <__malloc_unlock>
 8010156:	f026 0607 	bic.w	r6, r6, #7
 801015a:	1d23      	adds	r3, r4, #4
 801015c:	1af2      	subs	r2, r6, r3
 801015e:	d0ae      	beq.n	80100be <_malloc_r+0x22>
 8010160:	1b9b      	subs	r3, r3, r6
 8010162:	50a3      	str	r3, [r4, r2]
 8010164:	e7ab      	b.n	80100be <_malloc_r+0x22>
 8010166:	42a3      	cmp	r3, r4
 8010168:	6862      	ldr	r2, [r4, #4]
 801016a:	d1dd      	bne.n	8010128 <_malloc_r+0x8c>
 801016c:	f8c8 2000 	str.w	r2, [r8]
 8010170:	e7ec      	b.n	801014c <_malloc_r+0xb0>
 8010172:	4623      	mov	r3, r4
 8010174:	6864      	ldr	r4, [r4, #4]
 8010176:	e7ac      	b.n	80100d2 <_malloc_r+0x36>
 8010178:	4634      	mov	r4, r6
 801017a:	6876      	ldr	r6, [r6, #4]
 801017c:	e7b4      	b.n	80100e8 <_malloc_r+0x4c>
 801017e:	4613      	mov	r3, r2
 8010180:	e7cc      	b.n	801011c <_malloc_r+0x80>
 8010182:	230c      	movs	r3, #12
 8010184:	603b      	str	r3, [r7, #0]
 8010186:	4638      	mov	r0, r7
 8010188:	f000 f80e 	bl	80101a8 <__malloc_unlock>
 801018c:	e797      	b.n	80100be <_malloc_r+0x22>
 801018e:	6025      	str	r5, [r4, #0]
 8010190:	e7dc      	b.n	801014c <_malloc_r+0xb0>
 8010192:	605b      	str	r3, [r3, #4]
 8010194:	deff      	udf	#255	; 0xff
 8010196:	bf00      	nop
 8010198:	240006e0 	.word	0x240006e0

0801019c <__malloc_lock>:
 801019c:	4801      	ldr	r0, [pc, #4]	; (80101a4 <__malloc_lock+0x8>)
 801019e:	f000 b84b 	b.w	8010238 <__retarget_lock_acquire_recursive>
 80101a2:	bf00      	nop
 80101a4:	24000820 	.word	0x24000820

080101a8 <__malloc_unlock>:
 80101a8:	4801      	ldr	r0, [pc, #4]	; (80101b0 <__malloc_unlock+0x8>)
 80101aa:	f000 b846 	b.w	801023a <__retarget_lock_release_recursive>
 80101ae:	bf00      	nop
 80101b0:	24000820 	.word	0x24000820

080101b4 <memset>:
 80101b4:	4402      	add	r2, r0
 80101b6:	4603      	mov	r3, r0
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d100      	bne.n	80101be <memset+0xa>
 80101bc:	4770      	bx	lr
 80101be:	f803 1b01 	strb.w	r1, [r3], #1
 80101c2:	e7f9      	b.n	80101b8 <memset+0x4>

080101c4 <_sbrk_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4d06      	ldr	r5, [pc, #24]	; (80101e0 <_sbrk_r+0x1c>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	602b      	str	r3, [r5, #0]
 80101d0:	f7f2 f866 	bl	80022a0 <_sbrk>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	d102      	bne.n	80101de <_sbrk_r+0x1a>
 80101d8:	682b      	ldr	r3, [r5, #0]
 80101da:	b103      	cbz	r3, 80101de <_sbrk_r+0x1a>
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	24000824 	.word	0x24000824

080101e4 <__errno>:
 80101e4:	4b01      	ldr	r3, [pc, #4]	; (80101ec <__errno+0x8>)
 80101e6:	6818      	ldr	r0, [r3, #0]
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	240000e4 	.word	0x240000e4

080101f0 <__libc_init_array>:
 80101f0:	b570      	push	{r4, r5, r6, lr}
 80101f2:	4d0d      	ldr	r5, [pc, #52]	; (8010228 <__libc_init_array+0x38>)
 80101f4:	4c0d      	ldr	r4, [pc, #52]	; (801022c <__libc_init_array+0x3c>)
 80101f6:	1b64      	subs	r4, r4, r5
 80101f8:	10a4      	asrs	r4, r4, #2
 80101fa:	2600      	movs	r6, #0
 80101fc:	42a6      	cmp	r6, r4
 80101fe:	d109      	bne.n	8010214 <__libc_init_array+0x24>
 8010200:	4d0b      	ldr	r5, [pc, #44]	; (8010230 <__libc_init_array+0x40>)
 8010202:	4c0c      	ldr	r4, [pc, #48]	; (8010234 <__libc_init_array+0x44>)
 8010204:	f000 f874 	bl	80102f0 <_init>
 8010208:	1b64      	subs	r4, r4, r5
 801020a:	10a4      	asrs	r4, r4, #2
 801020c:	2600      	movs	r6, #0
 801020e:	42a6      	cmp	r6, r4
 8010210:	d105      	bne.n	801021e <__libc_init_array+0x2e>
 8010212:	bd70      	pop	{r4, r5, r6, pc}
 8010214:	f855 3b04 	ldr.w	r3, [r5], #4
 8010218:	4798      	blx	r3
 801021a:	3601      	adds	r6, #1
 801021c:	e7ee      	b.n	80101fc <__libc_init_array+0xc>
 801021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010222:	4798      	blx	r3
 8010224:	3601      	adds	r6, #1
 8010226:	e7f2      	b.n	801020e <__libc_init_array+0x1e>
 8010228:	08010350 	.word	0x08010350
 801022c:	08010350 	.word	0x08010350
 8010230:	08010350 	.word	0x08010350
 8010234:	08010354 	.word	0x08010354

08010238 <__retarget_lock_acquire_recursive>:
 8010238:	4770      	bx	lr

0801023a <__retarget_lock_release_recursive>:
 801023a:	4770      	bx	lr

0801023c <memcpy>:
 801023c:	440a      	add	r2, r1
 801023e:	4291      	cmp	r1, r2
 8010240:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010244:	d100      	bne.n	8010248 <memcpy+0xc>
 8010246:	4770      	bx	lr
 8010248:	b510      	push	{r4, lr}
 801024a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801024e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010252:	4291      	cmp	r1, r2
 8010254:	d1f9      	bne.n	801024a <memcpy+0xe>
 8010256:	bd10      	pop	{r4, pc}

08010258 <_free_r>:
 8010258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801025a:	2900      	cmp	r1, #0
 801025c:	d044      	beq.n	80102e8 <_free_r+0x90>
 801025e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010262:	9001      	str	r0, [sp, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	f1a1 0404 	sub.w	r4, r1, #4
 801026a:	bfb8      	it	lt
 801026c:	18e4      	addlt	r4, r4, r3
 801026e:	f7ff ff95 	bl	801019c <__malloc_lock>
 8010272:	4a1e      	ldr	r2, [pc, #120]	; (80102ec <_free_r+0x94>)
 8010274:	9801      	ldr	r0, [sp, #4]
 8010276:	6813      	ldr	r3, [r2, #0]
 8010278:	b933      	cbnz	r3, 8010288 <_free_r+0x30>
 801027a:	6063      	str	r3, [r4, #4]
 801027c:	6014      	str	r4, [r2, #0]
 801027e:	b003      	add	sp, #12
 8010280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010284:	f7ff bf90 	b.w	80101a8 <__malloc_unlock>
 8010288:	42a3      	cmp	r3, r4
 801028a:	d908      	bls.n	801029e <_free_r+0x46>
 801028c:	6825      	ldr	r5, [r4, #0]
 801028e:	1961      	adds	r1, r4, r5
 8010290:	428b      	cmp	r3, r1
 8010292:	bf01      	itttt	eq
 8010294:	6819      	ldreq	r1, [r3, #0]
 8010296:	685b      	ldreq	r3, [r3, #4]
 8010298:	1949      	addeq	r1, r1, r5
 801029a:	6021      	streq	r1, [r4, #0]
 801029c:	e7ed      	b.n	801027a <_free_r+0x22>
 801029e:	461a      	mov	r2, r3
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	b10b      	cbz	r3, 80102a8 <_free_r+0x50>
 80102a4:	42a3      	cmp	r3, r4
 80102a6:	d9fa      	bls.n	801029e <_free_r+0x46>
 80102a8:	6811      	ldr	r1, [r2, #0]
 80102aa:	1855      	adds	r5, r2, r1
 80102ac:	42a5      	cmp	r5, r4
 80102ae:	d10b      	bne.n	80102c8 <_free_r+0x70>
 80102b0:	6824      	ldr	r4, [r4, #0]
 80102b2:	4421      	add	r1, r4
 80102b4:	1854      	adds	r4, r2, r1
 80102b6:	42a3      	cmp	r3, r4
 80102b8:	6011      	str	r1, [r2, #0]
 80102ba:	d1e0      	bne.n	801027e <_free_r+0x26>
 80102bc:	681c      	ldr	r4, [r3, #0]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	6053      	str	r3, [r2, #4]
 80102c2:	440c      	add	r4, r1
 80102c4:	6014      	str	r4, [r2, #0]
 80102c6:	e7da      	b.n	801027e <_free_r+0x26>
 80102c8:	d902      	bls.n	80102d0 <_free_r+0x78>
 80102ca:	230c      	movs	r3, #12
 80102cc:	6003      	str	r3, [r0, #0]
 80102ce:	e7d6      	b.n	801027e <_free_r+0x26>
 80102d0:	6825      	ldr	r5, [r4, #0]
 80102d2:	1961      	adds	r1, r4, r5
 80102d4:	428b      	cmp	r3, r1
 80102d6:	bf04      	itt	eq
 80102d8:	6819      	ldreq	r1, [r3, #0]
 80102da:	685b      	ldreq	r3, [r3, #4]
 80102dc:	6063      	str	r3, [r4, #4]
 80102de:	bf04      	itt	eq
 80102e0:	1949      	addeq	r1, r1, r5
 80102e2:	6021      	streq	r1, [r4, #0]
 80102e4:	6054      	str	r4, [r2, #4]
 80102e6:	e7ca      	b.n	801027e <_free_r+0x26>
 80102e8:	b003      	add	sp, #12
 80102ea:	bd30      	pop	{r4, r5, pc}
 80102ec:	240006e0 	.word	0x240006e0

080102f0 <_init>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	bf00      	nop
 80102f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102f6:	bc08      	pop	{r3}
 80102f8:	469e      	mov	lr, r3
 80102fa:	4770      	bx	lr

080102fc <_fini>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	bf00      	nop
 8010300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010302:	bc08      	pop	{r3}
 8010304:	469e      	mov	lr, r3
 8010306:	4770      	bx	lr
